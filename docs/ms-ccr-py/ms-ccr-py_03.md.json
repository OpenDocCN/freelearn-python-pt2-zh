["```py\n# Chapter03/my_thread.py\n\nimport threading\nimport time\n\nclass MyThread(threading.Thread):\n    def __init__(self, name, delay):\n        threading.Thread.__init__(self)\n        self.name = name\n        self.delay = delay\n\n    def run(self):\n        print('Starting thread %s.' % self.name)\n        thread_count_down(self.name, self.delay)\n        print('Finished thread %s.' % self.name)\n\ndef thread_count_down(name, delay):\n    counter = 5\n\n    while counter:\n        time.sleep(delay)\n        print('Thread %s counting down: %i...' % (name, counter))\n        counter -= 1\n```", "```py\n# Chapter03/example1.py\n\nfrom my_thread import MyThread\n\nthread1 = MyThread('A', 0.5)\nthread2 = MyThread('B', 0.5)\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\n\nprint('Finished.')\n```", "```py\n> python example1.py\nStarting thread A.\nStarting thread B.\nThread A counting down: 5...\nThread B counting down: 5...\nThread B counting down: 4...\nThread A counting down: 4...\nThread B counting down: 3...\nThread A counting down: 3...\nThread B counting down: 2...\nThread A counting down: 2...\nThread B counting down: 1...\nThread A counting down: 1...\nFinished thread B.\nFinished thread A.\nFinished.\n```", "```py\n> python example1.py\nStarting thread A.\nStarting thread B.\nThread A counting down: 5...\nThread B counting down: 5...\nThread A counting down: 4...\nThread B counting down: 4...\nThread A counting down: 3...\nThread B counting down: 3...\nThread A counting down: 2...\nThread B counting down: 2...\nThread A counting down: 1...\nThread B counting down: 1...\nFinished thread A.\nFinished thread B.\nFinished.\n```", "```py\n> python example1.py\nStarting thread A.\nStarting thread B.\nThread A counting down: 5...\nThread B counting down: 5...\nThread A counting down: 4...\nThread B counting down: 4...\nThread A counting down: 3...\nThread B counting down: 3...\nThread A counting down: 2...\nThread B counting down: 2...\nThread A counting down: 1...\nFinished thread A.\nThread B counting down: 1...\nFinished thread B.\nFinished.\n```", "```py\nthread.start_new_thread(function, args[, kwargs])\n```", "```py\n# Chapter03/example2.py\n\nfrom math import sqrt\n\ndef is_prime(x):\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n\n        print('%i is a prime number.' % x)\n```", "```py\n# Chapter03/example2.py\n\nimport _thread as thread\n\nmy_input = [2, 193, 323, 1327, 433785907]\n\nfor x in my_input:\n    thread.start_new_thread(is_prime, (x, ))\n```", "```py\na = input('Type something to quit: \\n')\n```", "```py\n> python example2.py\nType something to quit: \n2 is a prime number.\n193 is a prime number.\n1327 is a prime number.\n323 is not a prime number.\n433785907 is a prime number.\n```", "```py\n> python example2.py\n2 is a prime number.\nType something to quit: \n193 is a prime number.\n323 is not a prime number.\n1327 is a prime number.\n433785907 is a prime number.\n```", "```py\n# Chapter03/my_thread.py\n\nimport threading\nimport time\n\nclass MyThread(threading.Thread):\n    def __init__(self, name, delay):\n        threading.Thread.__init__(self)\n        self.name = name\n        self.delay = delay\n\n    def run(self):\n        print('Starting thread %s.' % self.name)\n        thread_count_down(self.name, self.delay)\n        print('Finished thread %s.' % self.name)\n\ndef thread_count_down(name, delay):\n    counter = 5\n\n    while counter:\n        time.sleep(delay)\n        print('Thread %s counting down: %i...' % (name, counter))\n        counter -= 1\n```", "```py\n# Chapter03/example3.py\n\nimport threading\n\nclass MyThread(threading.Thread):\n    def __init__(self, x):\n        threading.Thread.__init__(self)\n        self.x = x\n\n    def run(self):\n        print('Starting processing %i...' % x)\n        is_prime(self.x)\n```", "```py\nmy_input = [2, 193, 323, 1327, 433785907]\n\nthreads = []\n\nfor x in my_input:\n    temp_thread = MyThread(x)\n    temp_thread.start()\n\n    threads.append(temp_thread)\n\nfor thread in threads:\n    thread.join()\n\nprint('Finished.')\n```", "```py\n# Chapter03/example4.py\n\nimport threading\nimport time\n\nclass MyThread(threading.Thread):\n    def __init__(self, name, delay):\n        threading.Thread.__init__(self)\n        self.name = name\n        self.delay = delay\n\n    def run(self):\n        print('Starting thread %s.' % self.name)\n        thread_lock.acquire()\n        thread_count_down(self.name, self.delay)\n        thread_lock.release()\n        print('Finished thread %s.' % self.name)\n\ndef thread_count_down(name, delay):\n    counter = 5\n\n    while counter:\n        time.sleep(delay)\n        print('Thread %s counting down: %i...' % (name, counter))\n        counter -= 1\n```", "```py\nthread_lock = threading.Lock()\n\nthread1 = MyThread('A', 0.5)\nthread2 = MyThread('B', 0.5)\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\n\nprint('Finished.')\n```", "```py\n> python example4.py\nStarting thread A.\nStarting thread B.\nThread A counting down: 5...\nThread A counting down: 4...\nThread A counting down: 3...\nThread A counting down: 2...\nThread A counting down: 1...\nFinished thread A.\nThread B counting down: 5...\nThread B counting down: 4...\nThread B counting down: 3...\nThread B counting down: 2...\nThread B counting down: 1...\nFinished thread B.\nFinished.\n```", "```py\n# Chapter03/example5.py\nimport queue\nimport threading\nimport time\n\nclass MyThread(threading.Thread):\n    def __init__(self, name):\n        threading.Thread.__init__(self)\n        self.name = name\n\n    def run(self):\n        print('Starting thread %s.' % self.name)\n        process_queue()\n        print('Exiting thread %s.' % self.name)\n\ndef process_queue():\n    while True:\n        try:\n            x = my_queue.get(block=False)\n        except queue.Empty:\n            return\n        else:\n            print_factors(x)\n\n        time.sleep(1)\n\ndef print_factors(x):\n    result_string = 'Positive factors of %i are: ' % x\n    for i in range(1, x + 1):\n        if x % i == 0:\n            result_string += str(i) + ' '\n    result_string += '\\n' + '_' * 20\n\n    print(result_string)\n\n# setting up variables\ninput_ = [1, 10, 4, 3]\n\n# filling the queue\nmy_queue = queue.Queue()\nfor x in input_:\n    my_queue.put(x)\n\n# initializing and starting 3 threads\nthread1 = MyThread('A')\nthread2 = MyThread('B')\nthread3 = MyThread('C')\n\nthread1.start()\nthread2.start()\nthread3.start()\n\n# joining all 3 threads\nthread1.join()\nthread2.join()\nthread3.join()\n\nprint('Done.')\n\n```", "```py\n# Chapter03/example5.py\n\ndef print_factors(x):\n    result_string = 'Positive factors of %i are: ' % x\n    for i in range(1, x + 1):\n        if x % i == 0:\n            result_string += str(i) + ' '\n    result_string += '\\n' + '_' * 20\n\n    print(result_string)\n```", "```py\n# Chapter03/example5.py\n\ndef process_queue():\n    while True:\n        try:\n            x = my_queue.get(block=False)\n        except queue.Empty:\n            return\n        else:\n            print_factors(x)\n\n        time.sleep(1)\n```", "```py\n# setting up variables\ninput_ = [1, 10, 4, 3]\n\n# filling the queue\nmy_queue = queue.Queue(4)\nfor x in input_:\n    my_queue.put(x)\n```", "```py\n# initializing and starting 3 threads\nthread1 = MyThread('A')\nthread2 = MyThread('B')\nthread3 = MyThread('C')\n\nthread1.start()\nthread2.start()\nthread3.start()\n\n# joining all 3 threads\nthread1.join()\nthread2.join()\nthread3.join()\n\nprint('Done.')\n```", "```py\n> python example5.py\nStarting thread A.\nStarting thread B.\nStarting thread C.\nPositive factors of 1 are: 1 \n____________________\nPositive factors of 10 are: 1 2 5 10 \n____________________\nPositive factors of 4 are: 1 2 4 \n____________________\nPositive factors of 3 are: 1 3 \n____________________\nExiting thread C.\nExiting thread A.\nExiting thread B.\nDone.\n```"]