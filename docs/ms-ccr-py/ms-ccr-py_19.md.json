["```py\npip install apscheduler\n```", "```py\npython setup.py install\n```", "```py\n>>> import apscheduler\n```", "```py\n# Chapter19/example1.py\n\nfrom datetime import datetime\n\nfrom apscheduler.schedulers.background import BlockingScheduler\n\ndef tick():\n    print(f'Tick! The time is: {datetime.now()}')\n\nif __name__ == '__main__':\n    scheduler = BlockingScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)\n\n    try:\n        scheduler.start()\n        print('Printing in the main thread.')\n    except KeyboardInterrupt:\n        pass\n\nscheduler.shutdown()\n```", "```py\n> python3 example1.py\nTick! The time is: 2018-10-31 17:25:01.758714\nTick! The time is: 2018-10-31 17:25:04.760088\nTick! The time is: 2018-10-31 17:25:07.762981\n```", "```py\n# Chapter19/example2.py\n\nfrom datetime import datetime\nimport time\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\n\ndef tick():\n    print(f'Tick! The time is: {datetime.now()}')\n\nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    scheduler.add_job(tick, 'interval', seconds=3)\n    scheduler.start()\n\n    try:\n        while True:\n            time.sleep(2)\n            print('Printing in the main thread.')\n    except KeyboardInterrupt:\n        pass\n\nscheduler.shutdown()\n```", "```py\n> python3 example2.py\nPrinting in the main thread.\nTick! The time is: 2018-10-31 17:36:35.231531\nPrinting in the main thread.\nTick! The time is: 2018-10-31 17:36:38.231900\nPrinting in the main thread.\nPrinting in the main thread.\nTick! The time is: 2018-10-31 17:36:41.231846\nPrinting in the main thread.\n```", "```py\n# Chapter19/example3.py\n\nfrom datetime import datetime\nimport time\nimport os\n\nfrom apscheduler.schedulers.background import BackgroundScheduler\n\ndef task():\n    print(f'From process {os.getpid()}: The time is {datetime.now()}')\n    print(f'Starting job inside {os.getpid()}')\n    time.sleep(4)\n    print(f'Ending job inside {os.getpid()}')\n\nif __name__ == '__main__':\n    scheduler = BackgroundScheduler()\n    scheduler.add_executor('processpool')\n    scheduler.add_job(task, 'interval', seconds=3, max_instances=3)\n    scheduler.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        pass\n\nscheduler.shutdown()\n```", "```py\nscheduler.add_executor('processpool')\n```", "```py\nscheduler.add_job(task, 'interval', seconds=3, max_instances=3)\n```", "```py\n> python3 example3.py\nFrom process 1213: The time is 2018-11-01 10:18:00.559319\nStarting job inside 1213\nFrom process 1214: The time is 2018-11-01 10:18:03.563195\nStarting job inside 1214\nEnding job inside 1213\nFrom process 1215: The time is 2018-11-01 10:18:06.531825\nStarting job inside 1215\nEnding job inside 1214\nFrom process 1216: The time is 2018-11-01 10:18:09.531439\nStarting job inside 1216\nEnding job inside 1215\nFrom process 1217: The time is 2018-11-01 10:18:12.531940\nStarting job inside 1217\nEnding job inside 1216\nFrom process 1218: The time is 2018-11-01 10:18:15.533720\nStarting job inside 1218\nEnding job inside 1217\nFrom process 1219: The time is 2018-11-01 10:18:18.532843\nStarting job inside 1219\nEnding job inside 1218\nFrom process 1220: The time is 2018-11-01 10:18:21.533668\nStarting job inside 1220\nEnding job inside 1219\nFrom process 1221: The time is 2018-11-01 10:18:24.535861\nStarting job inside 1221\nEnding job inside 1220\nFrom process 1222: The time is 2018-11-01 10:18:27.531543\nStarting job inside 1222\nEnding job inside 1221\nFrom process 1213: The time is 2018-11-01 10:18:30.532626\nStarting job inside 1213\nEnding job inside 1222\nFrom process 1214: The time is 2018-11-01 10:18:33.534703\nStarting job inside 1214\nEnding job inside 1213\n```", "```py\n# ch19/example4.py\n# Copied from: http://devcenter.heroku.com/articles/clock-processes-python\n\nfrom apscheduler.schedulers.blocking import BlockingScheduler\n\nscheduler = BlockingScheduler()\n\n@scheduler.scheduled_job('interval', minutes=3)\ndef timed_job():\n    print('This job is run every three minutes.')\n\n@scheduler.scheduled_job('cron', day_of_week='mon-fri', hour=17)\ndef scheduled_job():\n    print('This job is run every weekday at 5pm.')\n\nscheduler.start()\n```", "```py\n# Chapter19/example5.py\n\nimport unittest\n\ndef fib(i):\n    if i in [0, 1]:\n        return i\n\n    return fib(i - 1) + fib(i - 2)\n\nclass FibTest(unittest.TestCase):\n    def test_start_values(self):\n        self.assertEqual(fib(0), 0)\n        self.assertEqual(fib(1), 1)\n\n    def test_other_values(self):\n        self.assertEqual(fib(10), 55)\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n> python3 unit_test.py\n..\n----------------------------------------------------------------------\nRan 2 tests in 0.000s\n\nOK\n```", "```py\npip install concurrencytest\n```", "```py\npip install testtools\npip install python-subunit\n```", "```py\n>>> import concurrencytest\n```", "```py\n# Chapter19/example6.py\n\nimport unittest\n\ndef fib(i):\n    if i in [0, 1]:\n        return i\n\n    a, b = 0, 1\n    n = 1\n    while n < i:\n        a, b = b, a + b\n        n += 1\n\n    return b\n\nclass FibTest(unittest.TestCase):\n    def __init__(self, *args, **kwargs):\n        super(FibTest, self).__init__(*args, **kwargs)\n        self.mod = 10 ** 10\n\n    def test_start_values(self):\n        self.assertEqual(fib(0), 0)\n        self.assertEqual(fib(1), 1)\n\n    def test_big_value_v1(self):\n        self.assertEqual(fib(499990) % self.mod, 9998843695)\n\n    def test_big_value_v2(self):\n        self.assertEqual(fib(499995) % self.mod, 1798328130)\n\n    def test_big_value_v3(self):\n        self.assertEqual(fib(500000) % self.mod, 9780453125)\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n> python3 example6.py\n....\n----------------------------------------------------------------------\nRan 4 tests in 8.809s\n\nOK\n```", "```py\n# Chapter19/example7.py\n\nimport unittest\nfrom concurrencytest import ConcurrentTestSuite, fork_for_tests\n\ndef fib(i):\n    if i in [0, 1]:\n        return i\n\n    a, b = 0, 1\n    n = 1\n    while n < i:\n        a, b = b, a + b\n        n += 1\n\n    return b\n\nclass FibTest(unittest.TestCase):\n    def __init__(self, *args, **kwargs):\n        super(FibTest, self).__init__(*args, **kwargs)\n        self.mod = 10 ** 10\n\n    def test_start_values(self):\n        self.assertEqual(fib(0), 0)\n        self.assertEqual(fib(1), 1)\n\n    def test_big_value_v1(self):\n        self.assertEqual(fib(499990) % self.mod, 9998843695)\n\n    def test_big_value_v2(self):\n        self.assertEqual(fib(499995) % self.mod, 1798328130)\n\n    def test_big_value_v3(self):\n        self.assertEqual(fib(500000) % self.mod, 9780453125)\n\nif __name__ == '__main__':\n    suite = unittest.TestLoader().loadTestsFromTestCase(FibTest)\n    concurrent_suite = ConcurrentTestSuite(suite, fork_for_tests(4))\n    runner.run(concurrent_suite)\n```", "```py\n> python3 example7.py\n....\n----------------------------------------------------------------------\nRan 4 tests in 4.363s\n\nOK\n```"]