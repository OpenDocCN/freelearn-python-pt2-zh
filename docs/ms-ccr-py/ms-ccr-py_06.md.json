["```py\n# Chapter06/example1.py\n\nfrom multiprocessing import Process\nimport time\n\ndef count_down(name, delay):\n    print('Process %s starting...' % name)\n\n    counter = 5\n\n    while counter:\n        time.sleep(delay)\n        print('Process %s counting down: %i...' % (name, counter))\n        counter -= 1\n\n    print('Process %s exiting...' % name)\n\nif __name__ == '__main__':\n    process1 = Process(target=count_down, args=('A', 0.5))\n    process2 = Process(target=count_down, args=('B', 0.5))\n\n    process1.start()\n    process2.start()\n\n    process1.join()\n    process2.join()\n\n    print('Done.')\n```", "```py\n> python example1.py\nProcess A starting...\nProcess B starting...\nProcess B counting down: 5...\nProcess A counting down: 5...\nProcess B counting down: 4...\nProcess A counting down: 4...\nProcess B counting down: 3...\nProcess A counting down: 3...\nProcess B counting down: 2...\nProcess A counting down: 2...\nProcess A counting down: 1...\nProcess B counting down: 1...\nProcess A exiting...\nProcess B exiting...\nDone.\n```", "```py\n# Chapter06/example2.py\n\nfrom multiprocessing import Process, current_process\nimport time\n\ndef f1():\n    pname = current_process().name\n    print('Starting process %s...' % pname)\n    time.sleep(2)\n    print('Exiting process %s...' % pname)\n\ndef f2():\n    pname = current_process().name\n    print('Starting process %s...' % pname)\n    time.sleep(4)\n    print('Exiting process %s...' % pname)\n\nif __name__ == '__main__':\n    p1 = Process(name='Worker 1', target=f1)\n    p2 = Process(name='Worker 2', target=f2)\n    p3 = Process(target=f1)\n\n    p1.start()\n    p2.start()\n    p3.start()\n\n    p1.join()\n    p2.join()\n    p3.join()\n```", "```py\n> python example2.py\nStarting process Worker 1...\nStarting process Worker 2...\nStarting process Process-3...\nExiting process Worker 1...\nExiting process Process-3...\nExiting process Worker 2...\n```", "```py\n# Chapter06/example3.py\n\nfrom multiprocessing import Process, current_process\nimport time\nimport os\n\ndef print_info(title):\n    print(title)\n\n    if hasattr(os, 'getppid'):\n        print('Parent process ID: %s.' % str(os.getppid()))\n\n    print('Current Process ID: %s.\\n' % str(os.getpid()))\n\ndef f():\n    print_info('Function f')\n\n    pname = current_process().name\n    print('Starting process %s...' % pname)\n    time.sleep(1)\n    print('Exiting process %s...' % pname)\n\nif __name__ == '__main__':\n    print_info('Main program')\n\n    p = Process(target=f)\n    p.start()\n    p.join()\n\n    print('Done.')\n```", "```py\n> python example3.py\nMain program\nParent process ID: 14806.\nCurrent Process ID: 29010.\n\nFunction f\nParent process ID: 29010.\nCurrent Process ID: 29012.\n\nStarting process Process-1...\nExiting process Process-1...\nDone.\n```", "```py\n# Chapter06/example4.py\n\nfrom multiprocessing import Process, current_process\nimport time\n\ndef f1():\n    p = current_process()\n    print('Starting process %s, ID %s...' % (p.name, p.pid))\n    time.sleep(4)\n    print('Exiting process %s, ID %s...' % (p.name, p.pid))\n\ndef f2():\n    p = current_process()\n    print('Starting process %s, ID %s...' % (p.name, p.pid))\n    time.sleep(2)\n    print('Exiting process %s, ID %s...' % (p.name, p.pid))\n\nif __name__ == '__main__':\n    p1 = Process(name='Worker 1', target=f1)\n    p1.daemon = True\n    p2 = Process(name='Worker 2', target=f2)\n\n    p1.start()\n    time.sleep(1)\n    p2.start()\n```", "```py\n> python example4.py\nStarting process Worker 1, ID 33784...\nStarting process Worker 2, ID 33788...\nExiting process Worker 2, ID 33788...\n```", "```py\n# Chapter06/example5.py\n\nif __name__ == '__main__':\n    p1 = Process(name='Worker 1', target=f1)\n    p1.daemon = True\n    p2 = Process(name='Worker 2', target=f2)\n\n    p1.start()\n    time.sleep(1)\n    p2.start()\n\n    p1.join(1)\n    print('Whether Worker 1 is still alive:', p1.is_alive())\n    p2.join()\n```", "```py\n> python example5.py\nStarting process Worker 1, ID 36027...\nStarting process Worker 2, ID 36030...\nWhether Worker 1 is still alive: True\nExiting process Worker 2, ID 36030...\n```", "```py\n# Chapter06/example6.py\n\nimport multiprocessing\n\nclass MyWorker():\n    def __init__(self, x):\n        self.x = x\n\n    def process(self):\n        pname = multiprocessing.current_process().name\n        print('Starting process %s for number %i...' % (pname, self.x))\n\ndef work(q):\n    worker = q.get()\n    worker.process()\n\nif __name__ == '__main__':\n    my_queue = multiprocessing.Queue()\n\n    p = multiprocessing.Process(target=work, args=(my_queue,))\n    p.start()\n\n    my_queue.put(MyWorker(10))\n\n    my_queue.close()\n    my_queue.join_thread()\n    p.join()\n\n    print('Done.')\n```", "```py\n> python example6.py\nStarting process Process-1 for number 10...\nDone.\n```", "```py\n# Chapter06/example7.py\n\nfrom math import sqrt\nimport multiprocessing\n\nclass Consumer(multiprocessing.Process):\n\n    def __init__(self, task_queue, result_queue):\n        multiprocessing.Process.__init__(self)\n        self.task_queue = task_queue\n        self.result_queue = result_queue\n\n    def run(self):\n        pname = self.name\n\n        while not self.task_queue.empty():\n\n            temp_task = self.task_queue.get()\n\n            print('%s processing task: %s' % (pname, temp_task))\n\n            answer = temp_task.process()\n            self.task_queue.task_done()\n            self.result_queue.put(answer)\n\nclass Task():\n    def __init__(self, x):\n        self.x = x\n\n    def process(self):\n        if self.x < 2:\n            return '%i is not a prime number.' % self.x\n\n        if self.x == 2:\n            return '%i is a prime number.' % self.x\n\n        if self.x % 2 == 0:\n            return '%i is not a prime number.' % self.x\n\n        limit = int(sqrt(self.x)) + 1\n        for i in range(3, limit, 2):\n            if self.x % i == 0:\n                return '%i is not a prime number.' % self.x\n\n        return '%i is a prime number.' % self.x\n\n    def __str__(self):\n        return 'Checking if %i is a prime or not.' % self.x\n```", "```py\n# Chapter06/example7.py\n\nif __name__ == '__main__':\n    tasks = multiprocessing.JoinableQueue()\n    results = multiprocessing.Queue()\n\n    # spawning consumers with respect to the\n    # number cores available in the system\n    n_consumers = multiprocessing.cpu_count()\n    print('Spawning %i consumers...' % n_consumers)\n    consumers = [Consumer(tasks, results) for i in range(n_consumers)]\n    for consumer in consumers:\n        consumer.start()\n\n    # enqueueing jobs\n    my_input = [2, 36, 101, 193, 323, 513, 1327, 100000, 9999999, 433785907]\n    for item in my_input:\n        tasks.put(Task(item))\n\n    tasks.join()\n\n    for i in range(len(my_input)):\n        temp_result = results.get()\n        print('Result:', temp_result)\n\n    print('Done.')\n```", "```py\n> python example7.py\nSpawning 4 consumers...\nConsumer-3 processing task: Checking if 2 is a prime or not.\nConsumer-2 processing task: Checking if 36 is a prime or not.\nConsumer-3 processing task: Checking if 101 is a prime or not.\nConsumer-2 processing task: Checking if 193 is a prime or not.\nConsumer-3 processing task: Checking if 323 is a prime or not.\nConsumer-2 processing task: Checking if 1327 is a prime or not.\nConsumer-3 processing task: Checking if 100000 is a prime or not.\nConsumer-4 processing task: Checking if 513 is a prime or not.\nConsumer-3 processing task: Checking if 9999999 is a prime or not.\nConsumer-2 processing task: Checking if 433785907 is a prime or not.\nResult: 2 is a prime number.\nResult: 36 is not a prime number.\nResult: 193 is a prime number.\nResult: 101 is a prime number.\nResult: 323 is not a prime number.\nResult: 1327 is a prime number.\nResult: 100000 is not a prime number.\nResult: 9999999 is not a prime number.\nResult: 513 is not a prime number.\nResult: 433785907 is a prime number.\nDone.\n```", "```py\n# Chapter06/example8.py\n\nclass Consumer(multiprocessing.Process):\n\n    def __init__(self, task_queue, result_queue):\n        multiprocessing.Process.__init__(self)\n        self.task_queue = task_queue\n        self.result_queue = result_queue\n\n    def run(self):\n        pname = self.name\n\n        while True:\n            temp_task = self.task_queue.get()\n\n            if temp_task is None:\n                print('Exiting %s...' % pname)\n                self.task_queue.task_done()\n                break\n\n            print('%s processing task: %s' % (pname, temp_task))\n\n            answer = temp_task.process()\n            self.task_queue.task_done()\n            self.result_queue.put(answer)\n\nclass Task():\n    def __init__(self, x):\n        self.x = x\n\n    def process(self):\n        if self.x < 2:\n            return '%i is not a prime number.' % self.x\n\n        if self.x == 2:\n            return '%i is a prime number.' % self.x\n\n        if self.x % 2 == 0:\n            return '%i is not a prime number.' % self.x\n\n        limit = int(sqrt(self.x)) + 1\n        for i in range(3, limit, 2):\n            if self.x % i == 0:\n                return '%i is not a prime number.' % self.x\n\n        return '%i is a prime number.' % self.x\n\n    def __str__(self):\n        return 'Checking if %i is a prime or not.' % self.x\n\nif __name__ == '__main__':\n\n    tasks = multiprocessing.JoinableQueue()\n    results = multiprocessing.Queue()\n\n    # spawning consumers with respect to the\n    # number cores available in the system\n    n_consumers = multiprocessing.cpu_count()\n    print('Spawning %i consumers...' % n_consumers)\n    consumers = [Consumer(tasks, results) for i in range(n_consumers)]\n    for consumer in consumers:\n        consumer.start()\n\n    # enqueueing jobs\n    my_input = [2, 36, 101, 193, 323, 513, 1327, 100000, 9999999, 433785907]\n    for item in my_input:\n        tasks.put(Task(item))\n\n    for i in range(n_consumers):\n        tasks.put(None)\n\n    tasks.join()\n\n    for i in range(len(my_input)):\n        temp_result = results.get()\n        print('Result:', temp_result)\n\n    print('Done.')\n```", "```py\n> python example8.py\nSpawning 4 consumers...\nConsumer-1 processing task: Checking if 2 is a prime or not.\nConsumer-2 processing task: Checking if 36 is a prime or not.\nConsumer-3 processing task: Checking if 101 is a prime or not.\nConsumer-4 processing task: Checking if 193 is a prime or not.\nConsumer-1 processing task: Checking if 323 is a prime or not.\nConsumer-2 processing task: Checking if 513 is a prime or not.\nConsumer-3 processing task: Checking if 1327 is a prime or not.\nConsumer-1 processing task: Checking if 100000 is a prime or not.\nConsumer-2 processing task: Checking if 9999999 is a prime or not.\nConsumer-3 processing task: Checking if 433785907 is a prime or not.\nExiting Consumer-1...\nExiting Consumer-2...\nExiting Consumer-4...\nExiting Consumer-3...\nResult: 2 is a prime number.\nResult: 36 is not a prime number.\nResult: 323 is not a prime number.\nResult: 101 is a prime number.\nResult: 513 is not a prime number.\nResult: 1327 is a prime number.\nResult: 100000 is not a prime number.\nResult: 9999999 is not a prime number.\nResult: 193 is a prime number.\nResult: 433785907 is a prime number.\nDone.\n```"]