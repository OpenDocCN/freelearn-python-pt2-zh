["```py\n# Chapter01/example1.py\n\nfrom math import sqrt\n\ndef is_prime(x):\n    if x < 2:\n    return False\n\nif x == 2:\n    return True\n\nif x % 2 == 0:\n    return False\n\nlimit = int(sqrt(x)) + 1\n    for i in range(3, limit, 2):\n        if x % i == 0:\n            return False\n\nreturn True\n```", "```py\ninput = [i for i in range(10 ** 13, 10 ** 13 + 500)]\n```", "```py\n# Chapter01/example1.py\n\nfrom timeit import default_timer as timer\n\n# sequential\nstart = timer()\nresult = []\nfor i in input:\n    if is_prime(i):\n        result.append(i)\nprint('Result 1:', result)\nprint('Took: %.2f seconds.' % (timer() - start))\n```", "```py\n> python example1.py\nResult 1: [10000000000037, 10000000000051, 10000000000099, 10000000000129, 10000000000183, 10000000000259, 10000000000267, 10000000000273, 10000000000279, 10000000000283, 10000000000313, 10000000000343, 10000000000391, 10000000000411, 10000000000433, 10000000000453]\nTook: 3.41 seconds.\n```", "```py\n# Chapter01/example1.py\n\n# concurrent\nstart = timer()\nresult = []\nwith concurrent.futures.ProcessPoolExecutor(max_workers=20) as executor:\n    futures = [executor.submit(is_prime, i) for i in input]\n\n    for i, future in enumerate(concurrent.futures.as_completed(futures)):\n        if future.result():\n            result.append(input[i])\n\nprint('Result 2:', result)\nprint('Took: %.2f seconds.' % (timer() - start))\n```", "```py\n> python example1.py\nResult 2: [10000000000183, 10000000000037, 10000000000129, 10000000000273, 10000000000259, 10000000000343, 10000000000051, 10000000000267, 10000000000279, 10000000000099, 10000000000283, 10000000000313, 10000000000391, 10000000000433, 10000000000411, 10000000000453]\nTook: 2.33 seconds\n```", "```py\n> python example1.py\nResult 1: [10000000000037, 10000000000051, 10000000000099, 10000000000129, 10000000000183, 10000000000259, 10000000000267, 10000000000273, 10000000000279, 10000000000283, 10000000000313, 10000000000343, 10000000000391, 10000000000411, 10000000000433, 10000000000453]\nTook: 3.41 seconds.\nResult 2: [10000000000183, 10000000000037, 10000000000129, 10000000000273, 10000000000259, 10000000000343, 10000000000051, 10000000000267, 10000000000279, 10000000000099, 10000000000283, 10000000000313, 10000000000391, 10000000000433, 10000000000411, 10000000000453]\nTook: 2.33 seconds.\n```", "```py\n# Chapter01/example2.py\n\ndef f(x):\n    return x * x - x + 1\n\n# sequential\ndef f(x):\n    return x * x - x + 1\n\nstart = timer()\nresult = 3\nfor i in range(20):\n    result = f(result)\n\nprint('Result is very large. Only printing the last 5 digits:', result % 100000)\nprint('Sequential took: %.2f seconds.' % (timer() - start))\n```", "```py\n> python example2.py\nResult is very large. Only printing the last 5 digits: 35443\nSequential took: 0.10 seconds.\n```", "```py\n# Chapter01/example2.py\n\n# concurrent\ndef concurrent_f(x):\n    global result\n    result = f(result)\n\nresult = 3\n\nwith concurrent.futures.ThreadPoolExecutor(max_workers=20) as exector:\n    futures = [exector.submit(concurrent_f, i) for i in range(20)]\n\n    _ = concurrent.futures.as_completed(futures)\n\nprint('Result is very large. Only printing the last 5 digits:', result % 100000)\nprint('Concurrent took: %.2f seconds.' % (timer() - start))\n```", "```py\n> python example2.py\nResult is very large. Only printing the last 5 digits: 35443\nConcurrent took: 0.19 seconds.\n```"]