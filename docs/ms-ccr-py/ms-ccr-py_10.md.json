["```py\n# Chapter10/example1.py\n\nimport time\n\ndef count_down(name, delay):\n    indents = (ord(name) - ord('A')) * '\\t'\n\n    n = 3\n    while n:\n        time.sleep(delay)\n\n        duration = time.perf_counter() - start\n        print('-' * 40)\n        print('%.4f \\t%s%s = %i' % (duration, indents, name, n))\n\n        n -= 1\n\nstart = time.perf_counter()\n\ncount_down('A', 1)\ncount_down('B', 0.8)\ncount_down('C', 0.5)\n\nprint('-' * 40)\nprint('Done.')\n```", "```py\n> python example1.py\n----------------------------------------\n1.0006 A = 3\n----------------------------------------\n2.0041 A = 2\n----------------------------------------\n3.0055 A = 1\n----------------------------------------\n3.8065         B = 3\n----------------------------------------\n4.6070         B = 2\n----------------------------------------\n5.4075         B = 1\n----------------------------------------\n5.9081                 C = 3\n----------------------------------------\n6.4105                 C = 2\n----------------------------------------\n6.9107                 C = 1\n----------------------------------------\nDone.\n```", "```py\n1 second x 3 (for A) + 0.8 seconds x 3 (for B) + 0.5 seconds x 3 (for C) = 6.9 seconds\n```", "```py\n# Chapter10/example2.py\n\nasync def count_down(name, delay):\n    indents = (ord(name) - ord('A')) * '\\t'\n\n    n = 3\n    while n:\n        await asyncio.sleep(delay)\n\n        duration = time.perf_counter() - start\n        print('-' * 40)\n        print('%.4f \\t%s%s = %i' % (duration, indents, name, n))\n\n        n -= 1\n```", "```py\n# Chapter10/example2.py\n\nloop = asyncio.get_event_loop()\ntasks = [\n    loop.create_task(count_down('A', 1)),\n    loop.create_task(count_down('B', 0.8)),\n    loop.create_task(count_down('C', 0.5))\n]\n\nstart = time.perf_counter()\nloop.run_until_complete(asyncio.wait(tasks))\n\nprint('-' * 40)\nprint('Done.')\n```", "```py\n> python example2.py\n----------------------------------------\n0.5029                 C = 3\n----------------------------------------\n0.8008         B = 3\n----------------------------------------\n1.0049 A = 3\n----------------------------------------\n1.0050                 C = 2\n----------------------------------------\n1.5070                 C = 1\n----------------------------------------\n1.6011         B = 2\n----------------------------------------\n2.0090 A = 2\n----------------------------------------\n2.4068         B = 1\n----------------------------------------\n3.0147 A = 1\n----------------------------------------\nDone.\n```", "```py\nawait asyncio.sleep(delay)\n```", "```py\ntime.sleep(delay)\n```", "```py\n# Chapter09/example1.py\n\nfrom math import sqrt\n\ndef is_prime(x):\n    print('Processing %i...' % x)\n\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n\n        print('%i is a prime number.' % x)\n\nif __name__ == '__main__':\n\n    is_prime(9637529763296797)\n    is_prime(427920331)\n    is_prime(157)\n```", "```py\nProcessing 9637529763296797...\n9637529763296797 is a prime number.\nProcessing 427920331...\n427920331 is a prime number.\nProcessing 157...\n157 is a prime number.\n```", "```py\n# Chapter09/example2.py\n\nasync def main():\n\n    task1 = loop.create_task(is_prime(9637529763296797))\n    task2 = loop.create_task(is_prime(427920331))\n    task3 = loop.create_task(is_prime(157))\n\n    await asyncio.wait([task1, task2, task3])\n```", "```py\n# Chapter09/example2.py\n\nfrom math import sqrt\nimport asyncio\n\nasync def is_prime(x):\n    print('Processing %i...' % x)\n\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n            elif i % 100000 == 1:\n                await asyncio.sleep(0)\n\n        print('%i is a prime number.' % x)\n```", "```py\ntry:\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\nexcept Exception as e:\n    print('There was a problem:')\n    print(str(e))\nfinally:\n    loop.close()\n```", "```py\nProcessing 9637529763296797...\nProcessing 427920331...\n427920331 is a prime number.\nProcessing 157...\n157 is a prime number.\n9637529763296797 is a prime number.\n```", "```py\n>>> def async():\n File \"<stdin>\", line 1\n def async():\n ^\nSyntaxError: invalid syntax\n>>> await = 0\n File \"<stdin>\", line 1\n await = 0\n ^\nSyntaxError: invalid syntax\n```", "```py\nloop = asyncio.get_event_loop()\nasyncio.run_until_complete(main())\n```", "```py\nasyncio.run(main())\n```", "```py\n> python example3.py\nProcessing 9637529763296797...\n9637529763296797 is a prime number.\nProcessing 427920331...\n427920331 is a prime number.\nProcessing 157...\n157 is a prime number.\nTook 5.60 seconds.\n```", "```py\n> python example4.py\nProcessing 9637529763296797...\nProcessing 427920331...\n427920331 is a prime number.\nProcessing 157...\n157 is a prime number.\n9637529763296797 is a prime number.\nTook 7.89 seconds.\n```", "```py\n# Chapter10/example5.py\n\nfrom concurrent.futures import ThreadPoolExecutor\nimport asyncio\nimport time\n\ndef count_down(name, delay):\n    indents = (ord(name) - ord('A')) * '\\t'\n\n    n = 3\n    while n:\n        time.sleep(delay)\n\n        duration = time.perf_counter() - start\n        print('-' * 40)\n        print('%.4f \\t%s%s = %i' % (duration, indents, name, n))\n\n        n -= 1\n\nasync def main():\n    futures = [loop.run_in_executor(\n        executor,\n        count_down,\n        *args\n    ) for args in [('A', 1), ('B', 0.8), ('C', 0.5)]]\n\n    await asyncio.gather(*futures)\n\n    print('-' * 40)\n    print('Done.')\n\nstart = time.perf_counter()\nexecutor = ThreadPoolExecutor(max_workers=3)\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```", "```py\n> python example5.py\n----------------------------------------\n0.5033                 C = 3\n----------------------------------------\n0.8052         B = 3\n----------------------------------------\n1.0052 A = 3\n----------------------------------------\n1.0079                 C = 2\n----------------------------------------\n1.5103                 C = 1\n----------------------------------------\n1.6064         B = 2\n----------------------------------------\n2.0093 A = 2\n----------------------------------------\n2.4072         B = 1\n----------------------------------------\n3.0143 A = 1\n----------------------------------------\nDone.\n```", "```py\nelif i % 100000 == 1:\n    await asyncio.sleep(0)\n```", "```py\n# Chapter10/example6.py\n\nfrom math import sqrt\nimport asyncio\nfrom concurrent.futures import ProcessPoolExecutor\nfrom timeit import default_timer as timer\n\n#async def is_prime(x):\ndef is_prime(x):\n    print('Processing %i...' % x)\n\n    if x < 2:\n        print('%i is not a prime number.' % x)\n\n    elif x == 2:\n        print('%i is a prime number.' % x)\n\n    elif x % 2 == 0:\n        print('%i is not a prime number.' % x)\n\n    else:\n        limit = int(sqrt(x)) + 1\n        for i in range(3, limit, 2):\n            if x % i == 0:\n                print('%i is not a prime number.' % x)\n                return\n\n        print('%i is a prime number.' % x)\n\nasync def main():\n\n    task1 = loop.run_in_executor(executor, is_prime, 9637529763296797)\n    task2 = loop.run_in_executor(executor, is_prime, 427920331)\n    task3 = loop.run_in_executor(executor, is_prime, 157)\n\n    await asyncio.gather(*[task1, task2, task3])\n\nif __name__ == '__main__':\n    try:\n        start = timer()\n\n        executor = ProcessPoolExecutor(max_workers=3)\n        loop = asyncio.get_event_loop()\n        loop.run_until_complete(main())\n\n        print('Took %.2f seconds.' % (timer() - start))\n\n    except Exception as e:\n        print('There was a problem:')\n        print(str(e))\n\n    finally:\n        loop.close()\n```", "```py\n> python example6.py\nProcessing 9637529763296797...\nProcessing 427920331...\nProcessing 157...\n157 is a prime number.\n427920331 is a prime number.\n9637529763296797 is a prime number.\nTook 5.26 seconds.\n```"]