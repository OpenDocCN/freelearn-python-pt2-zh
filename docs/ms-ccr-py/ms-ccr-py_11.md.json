["```py\n# Chapter11/example1.py\n\nimport asyncio\n\nclass EchoServerClientProtocol(asyncio.Protocol):\n    def connection_made(self, transport):\n        peername = transport.get_extra_info('peername')\n        print('Connection from {}'.format(peername))\n        self.transport = transport\n\n    def data_received(self, data):\n        message = data.decode()\n        print('Data received: {!r}'.format(message))\n```", "```py\n# Chapter11/example1.py\n\nloop = asyncio.get_event_loop()\ncoro = loop.create_server(EchoServerClientProtocol, '127.0.0.1', 8888)\nserver = loop.run_until_complete(coro)\n\n# Serve requests until Ctrl+C is pressed\nprint('Serving on {}'.format(server.sockets[0].getsockname()))\ntry:\n    loop.run_forever()\nexcept KeyboardInterrupt:\n    pass\n\n# Close the server\nserver.close()\nloop.run_until_complete(server.wait_closed())\nloop.close()\n```", "```py\ndism /online /Enable-Feature /FeatureName:TelnetClient\n```", "```py\nbrew install telnet\n```", "```py\n> python example1.py\nServing on ('127.0.0.1', 8888)\n```", "```py\ntelnet 127.0.0.1 8888\n```", "```py\n> telnet 127.0.0.1 8888\nTrying 127.0.0.1...\nConnected to localhost.\n```", "```py\n> python example1.py\nServing on ('127.0.0.1', 8888)\nConnection from ('127.0.0.1', 60332)\n```", "```py\n> python example1.py\nServing on ('127.0.0.1', 8888)\nConnection from ('127.0.0.1', 60332)\nData received: 'Hello, World!\\r\\n'\n```", "```py\n# Chapter11/example2.py\n\nimport asyncio\n\nclass EchoServerClientProtocol(asyncio.Protocol):\n    def connection_made(self, transport):\n        peername = transport.get_extra_info('peername')\n        print('Connection from {}'.format(peername))\n        self.transport = transport\n\n    def data_received(self, data):\n        message = data.decode()\n        print('Data received: {!r}'.format(message))\n\n        self.transport.write(('Echoed back: {}'.format(message)).encode())\n\nloop = asyncio.get_event_loop()\ncoro = loop.create_server(EchoServerClientProtocol, '127.0.0.1', 8888)\nserver = loop.run_until_complete(coro)\n\n# Serve requests until Ctrl+C is pressed\nprint('Serving on {}'.format(server.sockets[0].getsockname()))\ntry:\n    loop.run_forever()\nexcept KeyboardInterrupt:\n    pass\n\n# Close the server\nserver.close()\nloop.run_until_complete(server.wait_closed())\nloop.close()\n```", "```py\n> telnet 127.0.0.1 8888\nTrying 127.0.0.1...\nConnected to localhost.\nHello, World!\nEchoed back: Hello, World!\n```", "```py\n# Chapter11/example3.py\n\nimport asyncio\n\nclass EchoServerClientProtocol(asyncio.Protocol):\n    def connection_made(self, transport):\n        peername = transport.get_extra_info('peername')\n        print('Connection from {}'.format(peername))\n        self.transport = transport\n\n    def data_received(self, data):\n        message = data.decode()\n        print('Data received: {!r}'.format(message))\n\n        self.transport.write(('Echoed back: {}'.format(message)).encode())\n\n        print('Close the client socket')\n        self.transport.close()\n\nloop = asyncio.get_event_loop()\ncoro = loop.create_server(EchoServerClientProtocol, '127.0.0.1', 8888)\nserver = loop.run_until_complete(coro)\n\n# Serve requests until Ctrl+C is pressed\nprint('Serving on {}'.format(server.sockets[0].getsockname()))\ntry:\n    loop.run_forever()\nexcept KeyboardInterrupt:\n    pass\n\n# Close the server\nserver.close()\nloop.run_until_complete(server.wait_closed())\nloop.close()\n```", "```py\n> telnet 127.0.0.1 8888\nTrying 127.0.0.1...\nConnected to localhost.\nHello, World!\nEchoed back: Hello, World!\nConnection closed by foreign host.\n```", "```py\npip install aiohttp\npip install aiofiles\n```", "```py\nconda install aiohttp\nconda install aiofiles\n```", "```py\n>>> import aiohttp\n>>> import aiofiles\n```", "```py\n# Chapter11/example4.py\n\nimport aiohttp\nimport asyncio\n\nasync def get_html(session, url):\n    async with session.get(url, ssl=False) as res:\n        return await res.text()\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        html = await get_html(session, 'http://packtpub.com')\n        print(html)\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(main())\n```", "```py\n# Chapter11/example5.py\n\nasync def download_html(session, url):\n    async with session.get(url, ssl=False) as res:\n        filename = f'output/{os.path.basename(url)}.html'\n\n        async with aiofiles.open(filename, 'wb') as f:\n            while True:\n                chunk = await res.content.read(1024)\n                if not chunk:\n                    break\n                await f.write(chunk)\n\n        return await res.release()\n```", "```py\nasync def main(url):\n    async with aiohttp.ClientSession() as session:\n        await download_html(session, url)\n\nurls = [\n    'http://packtpub.com',\n    'http://python.org',\n    'http://docs.python.org/3/library/asyncio',\n    'http://aiohttp.readthedocs.io',\n    'http://google.com'\n]\n\nloop = asyncio.get_event_loop()\nloop.run_until_complete(\n    asyncio.gather(*(main(url) for url in urls))\n)\n```", "```py\n> python3 example5.py\nTook 0.72 seconds.\n```", "```py\n> python3 example6.py\nTook 1.47 seconds.\n```"]