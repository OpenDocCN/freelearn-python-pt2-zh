["```py\n# Chapter02/example1.py\n\nfrom math import sqrt\n\ndef is_prime(x):\n    if x < 2:\n        return False\n\n    if x == 2:\n        return x\n\n    if x % 2 == 0:\n        return False\n\n    limit = int(sqrt(x)) + 1\n    for i in range(3, limit, 2):\n        if x % i == 0:\n            return False\n\n    return x\n```", "```py\n# Chapter02/example1.py\n\nimport concurrent.futures\n\nfrom timeit import default_timer as timer\n\ndef concurrent_solve(n_workers):\n    print('Number of workers: %i.' % n_workers)\n\n    start = timer()\n    result = []\n\n    with concurrent.futures.ProcessPoolExecutor(\n      max_workers=n_workers) as executor:\n\n        futures = [executor.submit(is_prime, i) for i in input]\n        completed_futures = concurrent.futures.as_completed(futures)\n\n        sub_start = timer()\n\n        for i, future in enumerate(completed_futures):\n            if future.result():\n                result.append(future.result())\n\n        sub_duration = timer() - sub_start\n\n    duration = timer() - start\n    print('Sub took: %.4f seconds.' % sub_duration)\n    print('Took: %.4f seconds.' % duration)\n```", "```py\ninput = [i for i in range(10 ** 13, 10 ** 13 + 1000)]\n```", "```py\nfor n_workers in range(1, multiprocessing.cpu_count() + 1):\n    concurrent_solve(n_workers)\n    print('_' * 20)\n```", "```py\nNumber of workers: 1.\nSub took: 7.5721 seconds.\nTook: 7.6659 seconds.\n____________________\nNumber of workers: 2.\nSub took: 4.0410 seconds.\nTook: 4.1153 seconds.\n____________________\nNumber of workers: 3.\nSub took: 3.8949 seconds.\nTook: 4.0063 seconds.\n____________________\nNumber of workers: 4.\nSub took: 3.9285 seconds.\nTook: 4.0545 seconds.\n____________________\n```"]