["```py\n1 + 4 + 8 + 3 + 2 + 5\n= ((((1 + 4) + 8) + 3) + 2) + 5\n= (((5 + 8) + 3) + 2) + 5\n= ((13 + 3) + 2) + 5\n= (16 + 2) + 5\n= 18 + 5\n= 23\n```", "```py\n1 + 4 + 8 + 3 + 2 + 5\n= ((1 + 4) + (8 + 3)) + (2 + 5)\n= (5 + 11) + 7\n= 16 + 7\n= 23\n```", "```py\n1 x 4 x 8 x 3 x 2 x 5\n= ((1 x 4) x (8 x 3)) x (2 x 5)\n= (4 x 24) x 10\n= 96 x 10\n= 960\n```", "```py\nTrue AND False AND False AND True\n= (True AND False) AND (False AND True)\n= False AND False\n= False\n```", "```py\n2 ^ 1 ^ 2 = 2 ^ (1 ^ 2) = 2 ^ 1 = 2\n```", "```py\n(2 ^ 1) ^ 2 = 2 ^ 2 = 4\n```", "```py\n# Chapter07/example1.py\n\nclass ReductionConsumer(multiprocessing.Process):\n\n    def __init__(self, task_queue, result_queue):\n        multiprocessing.Process.__init__(self)\n        self.task_queue = task_queue\n        self.result_queue = result_queue\n\n    def run(self):\n        pname = self.name\n        print('Using process %s...' % pname)\n\n        while True:\n            num1 = self.task_queue.get()\n            if num1 is None:\n                print('Exiting process %s.' % pname)\n                self.task_queue.task_done()\n                break\n\n            self.task_queue.task_done()\n            num2 = self.task_queue.get()\n            if num2 is None:\n                print('Reaching the end with process %s and number \n                      %i.' % (pname, num1))\n                self.task_queue.task_done()\n                self.result_queue.put(num1)\n                break\n\n            print('Running process %s on numbers %i and %i.' % (\n                    pname, num1, num2))\n            self.task_queue.task_done()\n            self.result_queue.put(num1 + num2)\n```", "```py\ndef reduce_sum(array):\n    tasks = multiprocessing.JoinableQueue()\n    results = multiprocessing.JoinableQueue()\n    result_size = len(array)\n\n    n_consumers = multiprocessing.cpu_count()\n\n    for item in array:\n        results.put(item)\n\n    while result_size > 1:\n        tasks = results\n        results = multiprocessing.JoinableQueue()\n\n        consumers = [ReductionConsumer(tasks, results) \n                     for i in range(n_consumers)]\n        for consumer in consumers:\n            consumer.start()\n\n        for i in range(n_consumers):\n            tasks.put(None)\n\n        tasks.join()\n        result_size = result_size // 2 + (result_size % 2)\n        #print('-' * 40)\n\n    return results.get()\n```", "```py\nmy_array = [i for i in range(20)]\n\nresult = reduce_sum(my_array)\nprint('Final result: %i.' % result)\n```", "```py\n> python example1.py\nUsing process ReductionConsumer-1...\nRunning process ReductionConsumer-1 on numbers 0 and 1.\nUsing process ReductionConsumer-2...\nRunning process ReductionConsumer-2 on numbers 2 and 3.\nUsing process ReductionConsumer-3...\n\n[...Truncated for readability..]\n\nExiting process ReductionConsumer-17.\nExiting process ReductionConsumer-18.\nExiting process ReductionConsumer-19.\nUsing process ReductionConsumer-20...\nExiting process ReductionConsumer-20.\nFinal result: 190.\n```"]