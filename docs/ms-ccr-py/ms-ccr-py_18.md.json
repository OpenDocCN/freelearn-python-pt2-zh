["```py\n# Chapter18/example1.py\n\nimport socket\n\n# Main event loop\ndef reactor(host, port):\n    sock = socket.socket()\n    sock.bind((host, port))\n    sock.listen(5)\n    print(f'Server up, running, and waiting for call on {host} {port}')\n\n    try:\n        while True:\n            conn, cli_address = sock.accept()\n            process_request(conn, cli_address)\n\n    finally:\n        sock.close()\n\ndef process_request(conn, cli_address):\n    file = conn.makefile()\n\n    print(f'Received connection from {cli_address}')\n\n    try:\n        while True:\n            line = file.readline()\n            if line:\n                line = line.rstrip()\n                if line == 'quit':\n                    conn.sendall(b'connection closed\\r\\n')\n                    return\n\n                print(f'{cli_address} --> {line}')\n                conn.sendall(b'Echoed: %a\\r\\n' % line)\n    finally:\n        print(f'{cli_address} quit')\n        file.close()\n        conn.close()\n\nif __name__ == '__main__':\n    reactor('localhost', 8080)\n```", "```py\n> python3 example1.py\nServer up, running, and waiting for call on localhost 8080\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nhello\nEchoed: 'hello'\nnice\nEchoed: 'nice'\nfdkgsnas\nEchoed: 'fdkgsnas'\nquit\nconnection closed\nConnection closed by foreign host.\n```", "```py\n> python3 example1.py\nServer up, running, and waiting for call on localhost 8080\nReceived connection from ('127.0.0.1', 59778)\n('127.0.0.1', 59778) --> hello\n('127.0.0.1', 59778) --> nice\n('127.0.0.1', 59778) --> fdkgsnas\n('127.0.0.1', 59778) quit\n```", "```py\n# Chapter18/example2.py\n\nfrom operator import mul\nfrom functools import reduce\n\ntry:\n    while True:\n        line = input('Please enter a list of integer, separated by commas: ')\n        try:\n            nums = list(map(int, line.split(',')))\n        except ValueError:\n            print('ERROR. Enter only integers separated by commas')\n            continue\n\n        print('Sum of input integers', sum(nums))\n        print('Product of input integers', reduce(mul, nums, 1))\n\nexcept KeyboardInterrupt:\n    print('\\nFinished.')\n```", "```py\n# Chapter18/example3.py\n\nimport socket\nfrom operator import mul\nfrom functools import reduce\n\n# Main event loop\ndef reactor(host, port):\n    sock = socket.socket()\n    sock.bind((host, port))\n    sock.listen(5)\n    print(f'Server up, running, and waiting for call on {host} {port}')\n\n    try:\n        while True:\n            conn, cli_address = sock.accept()\n            process_request(conn, cli_address)\n\n    finally:\n        sock.close()\n\ndef process_request(conn, cli_address):\n    file = conn.makefile()\n\n    print(f'Received connection from {cli_address}')\n    mode = 'sum'\n\n    try:\n        conn.sendall(b'<welcome: starting in sum mode>\\n')\n        while True:\n            line = file.readline()\n            if line:\n                line = line.rstrip()\n                if line == 'quit':\n                    conn.sendall(b'connection closed\\r\\n')\n                    return\n\n                if line == 'sum':\n                    conn.sendall(b'<switching to sum mode>\\r\\n')\n                    mode = 'sum'\n                    continue\n                if line == 'product':\n                    conn.sendall(b'<switching to product mode>\\r\\n')\n                    mode = 'product'\n                    continue\n\n                print(f'{cli_address} --> {line}')\n                try:\n                    nums = list(map(int, line.split(',')))\n                except ValueError:\n                    conn.sendall(\n                        b'ERROR. \n                        Enter only integers separated by commas\\n')\n                    continue\n\n                if mode == 'sum':\n                    conn.sendall(b'Sum of input numbers: %a\\r\\n'\n                        % str(sum(nums)))\n                else:\n                    conn.sendall(b'Product of input numbers: %a\\r\\n'\n                        % str(reduce(mul, nums, 1)))\n    finally:\n        print(f'{cli_address} quit')\n        file.close()\n        conn.close()\n\nif __name__ == '__main__':\n    reactor('localhost', 8080)\n```", "```py\nif mode == 'sum':\n    conn.sendall(b'Sum of input numbers: %a\\r\\n'\n        % str(sum(nums)))\nelse:\n    conn.sendall(b'Product of input numbers: %a\\r\\n'\n        % str(reduce(mul, nums, 1)))\n```", "```py\nif line == 'sum':\n    conn.sendall(b'<switching to sum mode>\\r\\n')\n    mode = 'sum'\n    continue\nif line == 'product':\n    conn.sendall(b'<switching to product mode>\\r\\n')\n    mode = 'product'\n    continue\n```", "```py\n> python3 example3.py\nServer up, running, and waiting for call on localhost 8080\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n<welcome: starting in sum mode>\n1,2\nSum of input numbers: '3'\n4,9\nSum of input numbers: '13'\nproduct\n<switching to product mode>\n0,-3\nProduct of input numbers: '0'\n5,-9,10\nProduct of input numbers: '-450'\nhello\nERROR. Enter only integers separated by commas\na,1\nERROR. Enter only integers separated by commas\nquit\nconnection closed\nConnection closed by foreign host.\n```", "```py\n> python3 example3.py\nServer up, running, and waiting for call on localhost 8080\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n<welcome: starting in sum mode>\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n```", "```py\n> python3 example3.py\nServer up, running, and waiting for call on localhost 8080\nReceived connection from ('127.0.0.1', 61099)\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n<welcome: starting in sum mode>\nhello\nERROR. Enter only integers separated by commas\n1,5\nSum of input numbers: '6'\nproduct\n<switching to product mode>\n6,7\nProduct of input numbers: '42'\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nhello\n1,5\nproduct\n6,7\n```", "```py\n> python3 example3.py\nServer up, running, and waiting for call on localhost 8080\nReceived connection from ('127.0.0.1', 61099)\n('127.0.0.1', 61099) --> hello\n('127.0.0.1', 61099) --> 1,5\n('127.0.0.1', 61099) --> 6,7\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n<welcome: starting in sum mode>\nhello\nERROR. Enter only integers separated by commas\n1,5\nSum of input numbers: '6'\nproduct\n<switching to product mode>\n6,7\nProduct of input numbers: '42'\nquit\nconnection closed\nConnection closed by foreign host.\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nhello\n1,5\nproduct\n6,7\n<welcome: starting in sum mode>\nERROR. Enter only integers separated by commas\nSum of input numbers: '6'\n<switching to product mode>\nProduct of input numbers: '42'\n```", "```py\n> python3 example3.py\nServer up, running, and waiting for call on localhost 8080\nReceived connection from ('127.0.0.1', 61099)\n('127.0.0.1', 61099) --> hello\n('127.0.0.1', 61099) --> 1,5\n('127.0.0.1', 61099) --> 6,7\n('127.0.0.1', 61099) quit\nReceived connection from ('127.0.0.1', 61100)\n('127.0.0.1', 61100) --> hello\n('127.0.0.1', 61100) --> 1,5\n('127.0.0.1', 61100) --> 6,7\n```", "```py\n# Chapter18/example4.py\n\ndef read_data():\n    for i in range(5):\n        print('Inside the inner for loop...')\n        yield i * 2\n\nresult = read_data()\nfor i in range(6):\n    print('Inside the outer for loop...')\n    print(next(result))\n\nprint('Finished.')\n```", "```py\n> python3 example4.py\nInside the outer for loop...\nInside the inner for loop...\n0\nInside the outer for loop...\nInside the inner for loop...\n2\nInside the outer for loop...\nInside the inner for loop...\n4\nInside the outer for loop...\nInside the inner for loop...\n6\nInside the outer for loop...\nInside the inner for loop...\n8\nInside the outer for loop...\nTraceback (most recent call last):\n File \"example4.py\", line 11, in <module>\n print(next(result))\nStopIteration\n```", "```py\n# Chapter18/example5.py\n\nimport types\n\n@types.coroutine\ndef read_data():\n    def inner(n):\n        try:\n            print(f'Printing from read_data(): {n}')\n            callback = gen.send(n * 2)\n        except StopIteration:\n            pass\n\n    data = yield inner\n    return data\n\nasync def process():\n    try:\n        while True:\n            data = await read_data()\n            print(f'Printing from process(): {data}')\n    finally:\n        print('Processing done.')\n\ngen = process()\ncallback = gen.send(None)\n\ndef main():\n    for i in range(5):\n        print(f'Printing from main(): {i}')\n        callback(i)\n\nif __name__ == '__main__':\n    main()\n```", "```py\n> python3 example5.py\nPrinting from main(): 0\nPrinting from read_data(): 0\nPrinting from process(): 0\nPrinting from main(): 1\nPrinting from read_data(): 1\nPrinting from process(): 2\nPrinting from main(): 2\nPrinting from read_data(): 2\nPrinting from process(): 4\nPrinting from main(): 3\nPrinting from read_data(): 3\nPrinting from process(): 6\nPrinting from main(): 4\nPrinting from read_data(): 4\nPrinting from process(): 8\nProcessing done.\n```", "```py\n# Chapter18/example6.py\n\nfrom collections import namedtuple\n\n###########################################################################\n# Reactor\n\nSession = namedtuple('Session', ['address', 'file'])\n\nsessions = {}         # { csocket : Session(address, file)}\ncallback = {}         # { csocket : callback(client, line) }\ngenerators = {}       # { csocket : inline callback generator }\n```", "```py\n# Chapter18/example6.py\n\nimport socket, select\n\n# Main event loop\ndef reactor(host, port):\n    sock = socket.socket()\n    sock.bind((host, port))\n    sock.listen(5)\n    sock.setblocking(0) # Make asynchronous\n\n    sessions[sock] = None\n    print(f'Server up, running, and waiting for call on {host} {port}')\n\n    try:\n        while True:\n            # Serve existing clients only if they already have data ready\n            ready_to_read, _, _ = select.select(sessions, [], [], 0.1)\n            for conn in ready_to_read:\n                if conn is sock:\n                    conn, cli_address = sock.accept()\n                    connect(conn, cli_address)\n                    continue\n\n                line = sessions[conn].file.readline()\n                if line:\n                    callback[conn](conn, line.rstrip())\n                else:\n                    disconnect(conn)\n    finally:\n        sock.close()\n```", "```py\n# Chapter18/example6.py\n\ndef connect(conn, cli_address):\n    sessions[conn] = Session(cli_address, conn.makefile())\n\n    gen = process_request(conn)\n    generators[conn] = gen\n    callback[conn] = gen.send(None) # Start the generator\n\ndef disconnect(conn):\n    gen = generators.pop(conn)\n    gen.close()\n    sessions[conn].file.close()\n    conn.close()\n\n    del sessions[conn]\n    del callback[conn]\n```", "```py\n# Chapter18/example6.py\n\nfrom operator import mul\nfrom functools import reduce\n\n###########################################################################\n# User's Business Logic\n\nasync def process_request(conn):\n    print(f'Received connection from {sessions[conn].address}')\n    mode = 'sum'\n\n    try:\n        conn.sendall(b'<welcome: starting in sum mode>\\n')\n        while True:\n            line = await readline(conn)\n            if line == 'quit':\n                conn.sendall(b'connection closed\\r\\n')\n                return\n            if line == 'sum':\n                conn.sendall(b'<switching to sum mode>\\r\\n')\n                mode = 'sum'\n                continue\n            if line == 'product':\n                conn.sendall(b'<switching to product mode>\\r\\n')\n                mode = 'product'\n                continue\n\n            print(f'{sessions[conn].address} --> {line}')\n            try:\n                nums = list(map(int, line.split(',')))\n            except ValueError:\n                conn.sendall(\n                    b'ERROR. Enter only integers separated by commas\\n')\n                continue\n\n            if mode == 'sum':\n                conn.sendall(b'Sum of input integers: %a\\r\\n'\n                    % str(sum(nums)))\n            else:\n                conn.sendall(b'Product of input integers: %a\\r\\n'\n                    % str(reduce(mul, nums, 1)))\n    finally:\n        print(f'{sessions[conn].address} quit')\n```", "```py\n# Chapter18/example6.py\n\nimport types\n\n@types.coroutine\ndef readline(conn):\n    def inner(conn, line):\n        gen = generators[conn]\n        try:\n            callback[conn] = gen.send(line) # Continue the generator\n        except StopIteration:\n            disconnect(conn)\n\n    line = yield inner\n    return line\n```", "```py\n> python3 example6.py\nServer up, running, and waiting for call on localhost 8080\n```", "```py\n> telnet localhost 8080\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n<welcome: starting in sum mode>\n```", "```py\n> python3 example6.py\nServer up, running, and waiting for call on localhost 8080\nReceived connection from ('127.0.0.1', 63855)\nReceived connection from ('127.0.0.1', 63856)\n```"]