["```py\ndealerInfo = re.split(r'<br>', re.sub(r'<br><br>', '', dealer))\n\nstock = list(map(lambda stock:stock.strip(),availability))\n\navailability = stockPath(row)[0].strip()\n\narticle['lastUpdated'] = article['lastUpdated'].replace('This page was last edited on', '')\n\ntitle = row.find(attrs={'itemprop':'text'}).text.strip()\n\nre.sub(r'or\\s*','',fortran)\n\ndealerInfo = re.split(r'<br>',re.sub(r'<br><br>','',dealer))\n```", "```py\n>>> price = 1234.567801\n>>> newprice = round(price,2)\n>>> print(newprice)\n1234.57\n\n>>> totalsum=\"200.35\"\n>>> print(type(totalsum))\n<class 'str'>\n\n#For large precision use: https://docs.python.org/2/library/decimal.html\n>>> totalsum = float(totalsum) \n>>> print(type(totalsum))\n<class 'float'>\n\n>>> totalsum\n200.35\n>>> ratings = 5.5\n>>> print(int(rating))\n5\n```", "```py\ndataSet.append([year,month,day,game_date,team1,team1_score,team2,team2_score,game_status])\n..\ndataSet.append([title,price,availability,image.replace('../../../..',baseUrl),rating.replace('star-rating ','')])\n...\ndataSet.append([link, atype, adate, title, excerpt,\",\".join(categories)])\n...\ndataSet.append([titleLarge, title, price, stock, image, starRating.replace('star-rating ', ''), url])\n```", "```py\nkeys = ['year','month','day','game_date','team1', 'team1_score', 'team2', 'team2_score', 'game_status']\n......\ndataSet.append([year,month,day,game_date,team1,team1_score,team2,team2_score,game_status])\n```", "```py\nimport csv\nimport json\n\ncolNames = ['Title','Price','Stock','Rating']\ndataSet= [['Rip it Up and ...', 35.02, 'In stock', 5],['Our Band Could Be ...', 57.25, 'In stock', 4],\n    ['How Music Works', 37.32, 'In stock', 2],['Love Is a Mix ...', 18.03, 'Out of stock',1],\n    ['Please Kill Me: The ...', 31.19, 'In stock', 4],[\"Kill 'Em and Leave: ...\", 45.0, 'In stock',5],\n    ['Chronicles, Vol. 1', 52.60, 'Out of stock',2],['This Is Your Brain ...', 38.4, 'In stock',1],\n    ['Orchestra of Exiles: The ...', 12.36, 'In stock',3],['No One Here Gets ...', 20.02, 'In stock',5],\n   ['Life', 31.58, 'In stock',5],['Old Records Never Die: ...', 55.66, 'Out of Stock',2],\n    ['Forever Rockers (The Rocker ...', 28.80, 'In stock',3]]\n```", "```py\nfileCsv = open('bookdetails.csv', 'w', newline='', encoding='utf-8')\nwriter = csv.writer(fileCsv) #csv.writer object created\n\nwriter.writerow(colNames)  #write columns from colNames\nfor data in dataSet:       #iterate through dataSet and write to file\n    writer.writerow(data)\n\nfileCsv.close() #closes the file handler\n```", "```py\nTitle,Price,Stock,Rating Rip it Up and ...,35.02,In stock,5 Our Band Could Be ...,57.25,In stock,4 ........... Life,31.58,In stock,5 Old Records Never Die: ...,55.66,Out of Stock,2 Forever Rockers (The Rocker ...,28.8,In stock,3\n```", "```py\nfinalDataSet=list() #empty DataSet \nfor data in dataSet:\n    finalDataSet.append(dict(zip(colNames,data))) \n\nprint(finalDataSet)\n\n[{'Price': 35.02, 'Stock': 'In stock', 'Title': 'Rip it Up and ...', 'Rating': 5}, {'Price': 57.25, 'Stock': 'In stock', ..........'Title': 'Old Records Never Die: ...', 'Rating': 2}, {'Price': 28.8, 'Stock': 'In stock', 'Title': 'Forever Rockers (The Rocker ...', 'Rating': 3}]\n```", "```py\n#first iteration from loop above dict(zip(colNames,data)) will generate\n{'Rating': 5, 'Title': 'Rip it Up and ...', 'Price': 35.02, 'Stock': 'In stock'}\n```", "```py\nwith open('bookdetails.json', 'w') as jsonfile:\n    json.dump(finalDataSet,jsonfile)\n```", "```py\n[\n  {\n    \"Price\": 35.02,\n    \"Stock\": \"In stock\",\n    \"Title\": \"Rip it Up and ...\",\n    \"Rating\": 5\n  },\n  ................\n  {\n    \"Price\": 28.8,\n    \"Stock\": \"In stock\",\n    \"Title\": \"Forever Rockers (The Rocker ...\",\n    \"Rating\": 3\n  }\n]\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndataSet = pd.read_csv('bookdetails.csv') #loads the file content as dataframe.\n\nprint(type(dataSet)) #<class 'pandas.core.frame.DataFrame'>\n```", "```py\nprint(dataSet)\n```", "```py\nprint(dataSet.describe()) \n#print(dataSet.describe('price') will only generate values for column price\n\n      Price      Rating\ncount 13.000000  13.000000\nmean  35.633077  3.230769\nstd   14.239014  1.535895\nmin   12.360000  1.000000\n25%   28.800000  2.000000\n50%   35.020000  3.000000\n75%   45.000000  5.000000\nmax   57.250000  5.000000\n```", "```py\nprint(dataSet.columns)\nIndex(['Title', 'Price', 'Stock', 'Rating'], dtype='object')\n\nprint(sum(dataSet['Price']))\n463.23\n\nprint(sum(dataSet['Rating']))\n42\n\nprint(dataSet['Price'][0:5])\n0 35.02\n1 57.25\n2 37.32\n3 18.03\n4 31.19\nName: Price, dtype: float64\n```", "```py\n#dataSet[['Price','Rating']] will select both column\nprice_group = dataSet[['Price']] #selecting 'Price' column only.\nprint(price_group) \n\nIndex(['Title', 'Price', 'Stock', 'Rating'], dtype='object')\n  Price\n0 35.02\n1 57.25\n2 37.32\n.....\n11 55.66\n12 28.80\n```", "```py\n print(dataSet[dataSet['Rating']>=4.0][['Title','Price']])\n\n  Title                  Price\n0 Rip it Up and ...      35.02\n1 Our Band Could Be ...  57.25\n4 Please Kill Me: The ...31.19\n5 Kill 'Em and Leave: ...45.00\n9 No One Here Gets ...   20.02\n10 Life                  31.58\n```", "```py\nprint(dataSet[dataSet.Stock.str.contains(r'Out')])\n\n   Title                     Price Stock        Rating\n3  Love Is a Mix ...         18.03 Out of stock 1\n6  Chronicles, Vol. 1        52.60 Out of stock 2\n11 Old Records Never Die: ...55.66 Out of Stock 2#will return only column 'Price'\n#print(dataSet[dataSet.Stock.str.contains(r'Out')]['Price'])\n\n```", "```py\nprint(dataSet[dataSet.Rating.between(3.5,4.5)]['Title'])\n\n1 Our Band Could Be ...\n4 Please Kill Me: The ...\n```", "```py\n bar_plot = price_group.plot()  #default plot\n bar_plot.set_xlabel(\"No of Books\") #set X axis: label\n bar_plot.set_ylabel(\"Price\") #set Y axis: label\n plt.show() #displays the plot or chart created\n```", "```py\nbar_plot = price_group.plot(kind='bar') #kind='bar'\nbar_plot.set_xlabel(\"No of Books\")  #Label for X-Axis\nbar_plot.set_ylabel(\"Price\") #label for Y-Axis\nplt.show() \n```", "```py\nprice_group = dataSet[['Price','Rating']]  #obtain both columns\n#title: generates a title for plot\nbar_plot = price_group.plot(kind='bar',title=\"Book Price ad Rating\")\nbar_plot.set_xlabel(\"No of Books\")\nbar_plot.set_ylabel(\"Price\")\nplt.show()\n```", "```py\nprices = dataSet['Price'][0:6] #Price from first 6 items\nlabels = dataSet['Title'][0:6] #Book Titles from first 6 items\nlegends,ax1 = plt.pie(prices, labels=labels, shadow=True, startangle=45)\nplt.legend(legends, prices, loc=\"best\") #legend built using Prices\nplt.show() \n```", "```py\nP(A | B) = ( P(B | A) * P( A ))/ P( B  )\nGiven:\nP(A | B) = Conditional probability of A given B\nP(B | A) = Conditional probability of B given A\nP( A )= Probability of occurrence of event A\nP( B  )= Probability of occurrence of event B\n```", "```py\nRMSE = sqrt(average(error^2))\nRMSE = sqrt(((1.0 - 1.5)^2 + (3.0 - 3.3)^2) / 2)\nRMSE = sqrt((0.25 + 0.09) / 2)\nRMSE = sqrt(0.17)\nRMSE = 0.412\n```"]