["```py\n<name>Butter Milk with Vanilla</name>\n <name>Fish and Chips</name>\n <price>$5.50</price>\n <price>$2.99</price>\n```", "```py\n<name>Butter Milk with Vanilla</name>\n <name>Eggs and Bacon</name>\n <name>Orange Juice</name>\n```", "```py\nButter Milk with Vanilla Orange Juice\n```", "```py\n<name>Butter Milk with Vanilla</name>\n <name>Fish and Chips</name><rating>4.5</rating>\n <rating>4.9</rating>\n```", "```py\n<name>Butter Milk with Vanilla</name>\n```", "```py\n<food>\n <name>Butter Milk with Vanilla</name>\n <name>Egg Roll</name>\n <name>Eggs and Bacon</name>\n </food>\n```", "```py\n<name>Butter Milk with Vanilla</name>\n <name>Egg Roll</name>\n <name>Eggs and Bacon</name>\n```", "```py\n<name>Orange Juice</name>\n```", "```py\nOrange Juice\n```", "```py\n47.0\n```", "```py\n<name>Egg Roll</name>\n<name>Eggs and Bacon</name>\n<name>Orange Juice</name>\n```", "```py\n<name>Orange Juice</name>\n```", "```py\nFresh egg rolls filled with ground chicken, ... cabbage\nFresh Orange juice served\n```", "```py\n<description>Fresh egg rolls filled with.. cabbage</description>\n <description>Fresh Orange juice served</description>\n```", "```py\n<food>\n <name>Butter Milk with Vanilla</name>\n <price>$3.99</price>\n ...\n <rating>5.0</rating>\n <feedback>10</feedback>\n </food>\n```", "```py\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<books>\n     <book id=\"1491946008\" price='47.49'>\n        <author>Luciano Ramalho</author>\n         <title>\n            Fluent Python: Clear, Concise, and Effective Programming\n        </title>\n     </book>\n     <book id=\"1491939362\" price='29.83'>\n         <author>Allen B. Downey</author>\n         <title>\n Think Python: How to Think Like a Computer Scientist\n        </title>\n     </book>\n</books>\n```", "```py\nprice=\"47.49\"\nprice=\"29.83\"\n```", "```py\n<book id=\"1491946008\" price=\"47.49\">\n\n<author>Luciano Ramalho</author>\n <title>Fluent Python: Clear, Concise, and Effective Programming\n Think Python: How to Think Like a Computer Scientist\n </title></book>\n```", "```py\n<book id=\"1491946008\" price=\"47.49\">\n <author>Luciano Ramalho</author>\n <title>Fluent Python: Clear, Concise, and Effective Programming </title> </book>\n```", "```py\n<title>Think Python: How to Think Like a Computer Scientist</title>\n```", "```py\nid=\"1491946008\"\n id=\"1491939362\"\n```", "```py\n<author>Allen B. Downey</author>\n```", "```py\n<html>\n<head>\n    <title>CSS Selectors: Testing</title>\n    <style>\n        h1{color:black;}\n        .header,.links{color: blue;}\n        .plan{color: black;}\n        #link{color: blue;}\n    </style>\n</head>\n<body>\n    <h1>Main Title</h1>\n    <p class=\u201dheader\u201d>Page Header</p>\n    <div class=\"links\">\n         <a class=\"plan\" href=\"*.pdf\">Document Places</a>\n         <a id=\"link\" href=\"mailto:xyz@domain.com\">Email Link1!</a>\n         <a href=\"mailto:abc@domain.com\">Email Link2!</a>    \n    </div>\n</body>\n</html>\n```", "```py\n<a id=\"link\" href=\"mailto:xyz@domain.com\">Email Link1!</a> \n<a href=\"mailto:abc@domain.com\">Email Link2!</a>\n```", "```py\n<a id=\"link\" href=\"mailto:xyz@domain.com\">Email Link1!</a> \n<a href=\"mailto:abc@domain.com\">Email Link2!</a>\n```", "```py\n<a class=\"plan\" href=\"*.pdf\"> Document Places </a>\n```", "```py\n<a id=\"link\" href=\"mailto:xyz@domain.com\">Email Link1!</a> \n<a href=\"mailto:abc@domain.com\">Email Link2!</a>\n```", "```py\n<p class='header'>Page Header</p>\n<div class=\"links\">\n<a class=\"plan\" href=\"*.pdf\"> Document Places </a>\n```", "```py\n<a class=\"plan\" href=\"*.pdf\"> Document Places </a>\n```", "```py\n<a id=\"link\" href=\"mailto:xyz@domain.com\">Email Link1!</a> <a href=\"mailto:abc@domain.com\">Email Link2!</a> \n```", "```py\n<a href=\"mailto:abc@domain.com\">\n```", "```py\n<a class=\"plan\" href=\"*.pdf\">Document Places</a>\n```", "```py\n<a href=\"mailto:abc@domain.com\">Email Link2!</a>\n```", "```py\n<a href=\"mailto:abc@domain.com\">Email Link2!</a>\n```", "```py\n<a class=\"plan\" href=\"*.pdf\">Document Places</a>\n```", "```py\n<a class=\"plan\" href=\"*.pdf\">Document Places</a>\n```", "```py\n<a href=\"mailto:abc@domain.com\">Email Link2!</a>\n```", "```py\n<a class=\"plan\" href=\"*.pdf\">Document Places</a>\n```", "```py\nfrom lxml import etree\nxml = open(\"food.xml\",\"rb\").read() #open and read XML file\n```", "```py\ntree = etree.XML(xml) \n#tree = etree.fromstring(xml) #tree = etree.parse(xml) \n```", "```py\nprint(tree)  \nprint(type(tree))   \n\n<Element menus at 0x3aa1548>\n<class 'lxml.etree._Element'>\n```", "```py\nfor element in tree.iter():\n    print(\"%s - %s\" % (element.tag, element.text))\n```", "```py\nmenus - \nfood - \n\nname - Butter Milk with Vanilla\nprice - $3.99\ndescription - Rich tangy buttermilk with vanilla essence\nrating - 5.0\nfeedback - 6\n.............\nfood - \n\nname - Orange Juice\nprice - $2.99\ndescription - Fresh Orange juice served\nrating - 4.9\nfeedback - 10\n```", "```py\n#iter through selected elements found in Tree\nfor element in tree.iter('price','name'):\n print(\"%s - %s\" % (element.tag, element.text))\n\nname - Butter Milk with Vanilla\nprice - $3.99\nname - Fish and Chips\nprice - $4.99\n...........\nname - Eggs and Bacon\nprice - $5.50\nname - Orange Juice\nprice - $2.99\n```", "```py\nfrom lxml import etree\n\n#read and parse the file\ntree = etree.parse(\"food.xml\")\n\n#iterate through 'name' and print text content\nfor element in tree.iter('name'):\n    print(element.text)\n```", "```py\nButter Milk with Vanilla\nFish and Chips\nEgg Roll\nPineapple Cake\nEggs and Bacon\nOrange Juice\n```", "```py\nfor element in tree.iter('name','rating','feedback'):\n print(\"{} - {}\".format(element.tag, element.text))\n\nname - Butter Milk with Vanilla\nrating - 5.0\nfeedback - 6\nname - Fish and Chips\nrating - 5.0\n...........\nfeedback - 4\nname - Orange Juice\nrating - 4.9\nfeedback - 10\n\n```", "```py\nfrom lxml import html\nfrom urllib.request import urlopen\n\nroot = html.parse(urlopen('http://httpbin.org/forms/post')).getroot()\ntree = html.parse(urlopen('http://httpbin.org/forms/post')) print(type(root)) #<class 'lxml.html.HtmlElement'> print(type(tree)) #<class 'lxml.etree._ElementTree'>\n```", "```py\nprint(dir(root)) \n\n[...'addnext', 'addprevious', 'append', 'attrib', 'base', 'base_url', 'body', 'clear', 'cssselect', 'drop_tag', 'drop_tree', 'extend', 'find', 'find_class', 'find_rel_links', 'findall', 'findtext', 'forms', 'get', 'get_element_by_id', 'getchildren', 'getiterator', 'getnext', 'getparent', 'getprevious', 'getroottree', 'head', 'index', 'insert', 'items', 'iter', 'iterancestors', 'iterchildren', 'iterdescendants', 'iterfind', 'iterlinks', 'itersiblings', 'itertext', 'keys', 'label', 'make_links_absolute', 'makeelement', 'nsmap', 'prefix', 'remove', 'replace', 'resolve_base_href', 'rewrite_links', 'set', 'sourceline', 'tag', 'tail', 'text', 'text_content', 'values', 'xpath']\n```", "```py\np = root.find('.//p') #find first <p> from root\n\nprint(p.text_content())  *# Customer name:*\nprint(root.findtext('.//p/label')) *#Customer name:* \n```", "```py\nelemP = root.findall('.//p') #find all <p> element from root\nfor p in elemP  :\n    print(p.text_content())\n```", "```py\nCustomer name: \nTelephone: \nE-mail address: \n Small \n Medium \n Large \n Bacon \n Extra Cheese \n Onion \n Mushroom \nPreferred delivery time: \nDelivery instructions: \nSubmit order\n```", "```py\nprint(root.xpath('//p/label/input/@value'))\nprint(root.xpath('//legend/text()')) \n```", "```py\n['small','medium','large','bacon','cheese','onion','mushroom']\n['Pizza Size', 'Pizza Toppings'] \n```", "```py\n#print text_content() for label inside <p>\nfor e in root.cssselect('p label'):\n    print(e.text_content())\n\nCustomer name: \nTelephone: \nE-mail address: \n Small \n ......\n Mushroom \nPreferred delivery time: \nDelivery instructions:\n\n#print text_content for element <p> inside <form>\nfor e in root.cssselect('form > p'):\n    print(e.text_content())\n\nCustomer name: \nTelephone: \nE-mail address: \nPreferred delivery time: \nDelivery instructions: \nSubmit order\n```", "```py\nprint(root.forms[0].action)  #http://httpbin.org/post\nprint(root.forms[0].keys())  #['method', 'action']\nprint(root.forms[0].items()) #[('method', 'post'), ('action', '/post')]\nprint(root.forms[0].method) # POST\n```", "```py\nfrom lxml import html\nimport requests\nresponse = requests.get('http://httpbin.org/forms/post')\n\n# build the DOM Tree\ntree = html.fromstring(response.text)\n\nfor element in tree.iter('input'):\n     print(\"Element: %s \\n\\tvalues(): %s \\n\\tattrib: %s \\n\\titems(): %s \\n\\tkeys(): %s\"%\n     (element.tag, element.values(),element.attrib,element.items(),element.keys()))\n     print(\"\\n\")\n```", "```py\nElement: input\n     values(): ['custname']\n     attrib: {'name': 'custname'}\n     items(): [('name', 'custname')]\n     keys(): ['name']\nElement: input\n     values(): ['tel', 'custtel']\n     attrib: {'name': 'custtel', 'type': 'tel'}\n     items(): [('type', 'tel'), ('name', 'custtel')]\n     keys(): ['type', 'name']\n.......\n.......\nElement: input\n     values(): ['checkbox', 'topping', 'mushroom']\n     attrib: {'name': 'topping', 'type': 'checkbox', 'value': 'mushroom'}\n     items(): [('type', 'checkbox'), ('name', 'topping'), ('value', 'mushroom')]\n     keys(): ['type', 'name', 'value']\nElement: input\n     values(): ['time', '11:00', '21:00', '900', 'delivery']\n     attrib: {'max': '21:00', 'type': 'time', 'step': '900', 'min': '11:00', 'name': 'delivery'}\n     items(): [('type', 'time'), ('min', '11:00'), ('max', '21:00'), ('step', '900'), ('name',     'delivery')]\n     keys(): ['type', 'min', 'max', 'step', 'name']\n```", "```py\nimport lxml.html\nmusicUrl= \"http://books.toscrape.com/catalogue/category/books/music_14/index.html\"\ndoc = lxml.html.parse(musicUrl)\n```", "```py\n#base element\narticles = doc.xpath(\"//*[@id='default']/div/div/div/div/section/div[2]/ol/li[1]/article\")[0]\n\n#individual element inside base\ntitle = articles.xpath(\"//h3/a/text()\")\nprice = articles.xpath(\"//div[2]/p[contains(@class,'price_color')]/text()\")\navailability = articles.xpath(\"//div[2]/p[2][contains(@class,'availability')]/text()[normalize-space()]\")\nimageUrl = articles.xpath(\"//div[1][contains(@class,'image_container')]/a/img/@src\")\nstarRating = articles.xpath(\"//p[contains(@class,'star-rating')]/@class\")\n```", "```py\n#cleaning and formatting \nstock = list(map(lambda stock:stock.strip(),availability))\nimages = list(map(lambda img:img.replace('../../../..','http://books.toscrape.com'),imageUrl))\nrating = list(map(lambda rating:rating.replace('star-rating ',''),starRating))\n\nprint(title)\nprint(price)\nprint(stock)\nprint(images)\nprint(rating)\n```", "```py\n#Merging all \ndataSet = zip(title,price,stock,images,rating)\nprint(list(dataSet))\n\n[('Rip it Up and ...', '\u00a335.02', 'In stock', 'http://books.toscrape.com/media/cache/81/c4/81c4a973364e17d01f217e1188253d5e.jpg', 'Five'), \n('Our Band Could Be ...', '\u00a357.25', 'In stock', 'http://books.toscrape.com/media/cache/54/60/54607fe8945897cdcced0044103b10b6.jpg', 'Three'),\n.........\n......... \n('Old Records Never Die: ...', '\u00a355.66', 'In stock', 'http://books.toscrape.com/media/cache/7e/94/7e947f3dd04f178175b85123829467a9.jpg', 'Two'), \n('Forever Rockers (The Rocker ...', '\u00a328.80', 'In stock', 'http://books.toscrape.com/media/cache/7f/b0/7fb03a053c270000667a50dd8d594843.jpg', 'Three')]\n```", "```py\nimport lxml.html\nfrom lxml.etree import XPath\n\nbaseUrl = \"http://books.toscrape.com/\"\n\n#Main URL\nbookUrl = \"http://books.toscrape.com/catalogue/category/books/food-and-drink_33/index.html\"\n\n#Page URL Pattern obtained (eg: page-1.html, page-2.html...)\npageUrl = \"http://books.toscrape.com/catalogue/category/books/food-and-drink_33/page-\"\n```", "```py\ndataSet = []\npage=1\ntotalPages=1\nwhile(page<=totalPages):\n    print(\"Rows in Dataset: \"+str(len(dataSet)))\n    if(page==1):\n        doc = lxml.html.parse(pageUrl+str(page)+\".html\").getroot()\n        perPageArticles = doc.xpath(\"//*[@id=\\\"default\\\"]//form/strong[3]/text()\")\n        totalArticles = doc.xpath(\"//*[@id=\\\"default\\\"]//form/strong[1]/text()\")\n        totalPages = round(int(totalArticles[0])/int(perPageArticles[0]))\n        print(str(totalArticles[0])+\" Results, showing \"+str(perPageArticles[0])+\" Articles per page\")\n    else:\n        doc = lxml.html.parse(pageUrl+str(page)+\".html\").getroot()\n\n    #used to find page URL pattern\n    nextPage = doc.xpath(\"//*[@id=\\\"default\\\"]//ul[contains(@class,'pager')]/li[2]/a/@href\")\n    if len(nextPage)>0: \n        print(\"Scraping Page \"+str(page)+\" of \"+str(totalPages)+\". NextPage > \"+str(nextPage[0]))\n    else:\n        print(\"Scraping Page \"+str(page)+\" of \"+str(totalPages))\n```", "```py\narticles = XPath(\"//*[@id='default']//ol/li[position()>0]\")\n\ntitlePath = XPath(\".//article[contains(@class,'product_pod')]/h3/a/text()\")\npricePath = XPath(\".//article/div[2]/p[contains(@class,'price_color')]/text()\")\nstockPath = XPath(\".//article/div[2]/p[2][contains(@class,'availability')]/text()[normalize-space()]\")\nimagePath = XPath(\".//article/div[1][contains(@class,'image_container')]/a/img/@src\")\nstarRating = XPath(\".//article/p[contains(@class,'star-rating')]/@class\")\n```", "```py\n#looping through 'articles' found in 'doc' i.e each <li><article> found in Page Source\nfor row in articles(doc): \n     title = titlePath(row)[0]\n     price = pricePath(row)[0]\n     availability = stockPath(row)[0].strip()\n     image = imagePath(row)[0]\n     rating = starRating(row)[0]\n\n     #cleaning and formatting applied to image and rating\n     dataSet.append([title,price,availability,image.replace('../../../..',baseUrl),rating.replace('star-rating','')])\n\npage+=1 #updating Page Count for While loop\n\n#Final Dataset with data from all pages. \nprint(dataSet)\n```", "```py\nfrom lxml import html\nimport requests\nfrom lxml.cssselect import CSSSelector\nurl = 'https://developer.ibm.com/announcements/category/data-science/?fa=date%3ADESC&fb='\nurl_get = requests.get(url)\ntree = html.document_fromstring(url_get.content)\n```", "```py\nannouncements=[]\narticles = tree.cssselect('.ibm--card > a.ibm--card__block_link')\n\nfor article in articles:\n    link = article.get('href')\n    atype = article.cssselect('div.ibm--card__body > h5')[0].text.strip()\n    adate = article.cssselect('div.ibm--card__body > h5 > .ibm--card__date')[0].text\n    title = article.cssselect('div.ibm--card__body > h3.ibm--card__title')[0].text_content()\n    excerpt= article.cssselect(' div.ibm--card__body > p.ibm--card__excerpt')[0].text\n    category= article.cssselect('div.ibm--card__bottom > p.cpt-byline__categories span')\n\n    #only two available on block: except '+'\n    #announcements.append([link,atype,adate,title,excerpt,[category[0].text,category[1].text]])\n\n    announcements.append([link,atype,adate,title,excerpt,[span.text for span in category if     span.text!='+']])\n\nprint(announcements)\n```"]