["```py\n$ cd chapter05              # Change into this chapter's folder\n$ python3 -m venv venv      # Create Python Virtual Environment\n$ source venv/bin/activate  # Activate Python Virtual Environment\n(venv) $ pip install pip --upgrade        # Upgrade pip\n(venv) $ pip install -r requirements.txt  # Install dependent packages\n```", "```py\n# Python Code.\npi = pigpio.pi('192.168.0.4', 8888) # Remote host and port (8888 is default if omitted)\n```", "```py\n# In Terminal\n(venv) $ PIGPIO_ADDR=\"192.168.0.4\" PIGPIO_PORT=8888 python my_script.py\n```", "```py\n$ i2cdetect -y 1\n```", "```py\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n 00:          -- -- -- -- -- -- -- -- -- -- -- -- --\n 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n 30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n 40: -- -- -- -- -- -- -- -- 48 -- -- -- -- -- -- --\n 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n 60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n 70: -- -- -- -- -- -- -- --\n```", "```py\n(venv) $ python analog_input_ads1115.py\n```", "```py\n Frequency Pot (A0) value=3 volts=0.000 Duty Cycle Pot (A1) value= 9286 volts=1.193\n Frequency Pot (A0) value=3 volts=0.000 Duty Cycle Pot (A1) value= 9286 volts=1.193\n ...truncated...\n```", "```py\n Frequency Pot (A0) value=3 volts=0.000 Duty Cycle Pot (A1) value= 9286 volts=1.193\n Frequency Pot (A0) value=4 volts=0.001 Duty Cycle Pot (A1) value=26299 volts=3.288\n ...truncated...\n```", "```py\nimport board                                      # (1)\nimport busio\nimport adafruit_ads1x15.ads1115 as ADS\nfrom adafruit_ads1x15.analog_in import AnalogIn\n```", "```py\n# Create the I2C bus & ADS object.\ni2c = busio.I2C(board.SCL, board.SDA)      # (2)\nads = ADS.ADS1115(i2c)\n```", "```py\nA_IN_EDGE_ADJ = 0.002                     # (3)\nMIN_A_IN_VOLTS = 0 + A_IN_EDGE_ADJ\nMAX_A_IN_VOLTS = 3.3 - A_IN_EDGE_ADJ\n```", "```py\nfrequency_ch = AnalogIn(ads, ADS.P0)  #ADS.P0 --> A0    # (4)\nduty_cycle_ch = AnalogIn(ads, ADS.P1) #ADS.P1 --> A1\n```", "```py\nif __name__ == '__main__':\n   try:\n       while True: \n           output = (\"Frequency Pot (A0) value={:>5} volts={:>5.3f} \"\n                     \"Duty Cycle Pot (A1) value={:>5} volts={:>5.3f}\")\n           output = output.format(frequency_ch.value,          # (5)\n                                  frequency_ch.voltage,\n                                  duty_cycle_ch.value,\n                                  duty_cycle_ch.voltage)\n           print(output)\n           sleep(0.05)\n   except KeyboardInterrupt:\n       i2c.deinit()                                            # (6)\n```", "```py\n(venv) $ python pwm_hardware.py\nFrequency 0Hz Duty Cycle 0%\n... truncated ...\nFrequency 58Hz Duty Cycle 0%\nFrequency 59Hz Duty Cycle 0%\n... truncated ...\n```", "```py\nMIN_DUTY_CYCLE = 0            # (1)\nMAX_DUTY_CYCLE = 1000000\nMIN_FREQ = 0                  # (2)\nMAX_FREQ = 60 *# max 125000000*\n```", "```py\ndef map_value(in_v, in_min, in_max, out_min, out_max):           # (3)\n    *\"\"\"Helper method to map an input value (v_in)\n       between alternative max/min ranges.\"\"\"* v = (in_v - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n    if v < out_min: v = out_min elifv > out_max: v = out_max\n    return v\n```", "```py\nfrequency = int(map_value(frequency_ch.voltage,                # (4)\n                          MIN_A_IN_VOLTS, MAX_A_IN_VOLTS,\n                          MIN_FREQ, MAX_FREQ))\n duty_cycle = int(map_value(duty_cycle_ch.voltage,              # (5)\n                           MIN_A_IN_VOLTS, MAX_A_IN_VOLTS,\n                           MIN_DUTY_CYCLE, MAX_DUTY_CYCLE))\n\nduty_cycle_percent = int((duty_cycle/MAX_DUTY_CYCLE) * 100)\n pi.hardware_PWM(LED_GPIO_PIN, frequency, duty_cycle)           # (6)\n```", "```py\n# Download and install piscope\n$ cd ~\n$ wget abyz.me.uk/rpi/pigpio/piscope.tar\n$ tar xvf piscope.tar\n$ cd PISCOPE\n$ make hf\n$ make install\n```", "```py\n$ piscope\n```"]