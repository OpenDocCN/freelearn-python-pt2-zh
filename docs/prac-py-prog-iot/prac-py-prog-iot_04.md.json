["```py\n$ cd chapter03              # Change into this chapter's folder\n$ python3 -m venv venv      # Create Python Virtual Environment\n$ source venv/bin/activate  # Activate Python Virtual Environment\n(venv) $ pip install pip --upgrade        # Upgrade pip\n(venv) $ pip install -r requirements.txt  # Install dependent packages\n```", "```py\n(venv) $ python flask_api_server.py\n... truncated ...\nNFO:werkzeug: * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n... truncated ...\n```", "```py\n$ curl -X GET http://localhost:5000/led\n{\n \"level\": 50          # (1)\n}  \n```", "```py\n$ curl -X POST -d '{\"level\": 100}' \\    # (2) \n -H \"Content-Type: application/json\" \\\n http://localhost:5000/led\n{\n \"level\": 100                            # (3)\n}\n```", "```py\nimport logging\nfrom flask import Flask, request, render_template           # (1)\nfrom flask_restful import Resource, Api, reqparse, inputs   # (2)\nfrom gpiozero import PWMLED, Device                         # (3)\nfrom gpiozero.pins.pigpio import PiGPIOFactory\n```", "```py\napp = Flask(__name__) # Core Flask app.            # (4)\napi = Api(app) # Flask-RESTful extension wrapper   # (5)\n```", "```py\n# Global variables\nLED_GPIO_PIN = 21\nled = None # PWMLED Instance. See init_led()\nstate = {                                     # (6)\n    'level': 50 # % brightness of LED.\n}\n```", "```py\ndef init_led():\n    \"\"\"Create and initialize an PWMLED Object\"\"\"\n global led\n led = PWMLED(LED_GPIO_PIN)\n led.value = state['level'] / 100        # (7)\n```", "```py\n# @app.route applies to the core Flask instance (app).\n# Here we are serving a simple web page.\n@app.route('/', methods=['GET'])                           # (8)\ndef index():\n \"\"\"Make sure index_api_client.html is in the templates folder\n relative to this Python file.\"\"\"\n return render_template('index_api_client.html',\n                          pin=LED_GPIO_PIN)                # (9)\n```", "```py\nclass LEDControl(Resource):                                    # (10)\n def __init__(self):\n self.args_parser = reqparse.RequestParser()            # (11)\n self.args_parser.add_argument(\n name='level',                  # Name of arguement\n required=True,                 # Mandatory arguement\n type=inputs.int_range(0, 100), # Allowed 0..100    # (12) \n help='Set LED brightness level {error_msg}',\n default=None)\n```", "```py\n$ curl -X GET http://localhost:5000/led\n```", "```py\n def get(self):\n \"\"\" Handles HTTP GET requests to return current LED state.\"\"\"\n return state         # (13)\n```", "```py\n{ \"level\": 50 }\n```", "```py\ncurl -X POST -d '{\"level\": 100}' \\\n -H \"Content-Type: application/json\" \\\n http://localhost:5000/led\n```", "```py\n def post(self):\n \"\"\"Handles HTTP POST requests to set LED brightness level.\"\"\"\n global state                                            # (14)\n\n args = self.args_parser.parse_args()                    # (15)\n\n # Set PWM duty cycle to adjust brightness level.\n state['level'] = args.level                             # (16)\n led.value = state['level'] / 100                        # (17)\n logger.info(\"LED brightness level is \" + str(state['level']))\n\n return state                                            # (18)\n```", "```py\n# Initialize Module.\ninit_led()\napi.add_resource(LEDControl, '/led')          # (19)\n\nif __name__ == '__main__':\n app.run(host=\"0.0.0.0\", debug=True)       # (20)\n```", "```py\n<!-- chapter03/templates/index_api_client.html -->\n<!DOCTYPE html>\n<html>\n<head>\n <title>Flask Restful API Example</title>\n <script src=\"/static/jquery.min.js\"></script>    <!--(1)-->\n <script type=\"text/javascript\">\n```", "```py\n// GET request to server to retrieve LED state.\nfunction getState() { \n $.get(\"/led\", function(serverResponse, status) { // (2)\n console.log(serverResponse) \n updateControls(serverResponse)                // (3)\n }); }\n```", "```py\n// POST Request to server to set LED state.\nfunction postUpdate(payload) {                          // (4)\n $.post(\"/led\", payload, function(serverResponse, status) {\n console.log(serverResponse)\n updateControls(serverResponse);                 // (5)\n });\n}\n```", "```py\nfunction updateControls(data) {\n $(\"input[type=range].brightnessLevel\").val(data.level);  // (6)\n $(\"#brightnessLevel\").html(data.level);\n}\n```", "```py\n $(document).ready(function() {\n // Event listener for Slider value changes.\n $(\"input[type=range].brightnessLevel\")\n .on('input', function() {                    // (7)\n brightness_level = $(this).val();         // (8)\n payload = { \"level\": brightness_level }   // (9)\n postUpdate(payload);\n });\n\n        // Initialize slider value form state on server.\n getState()                                       // (10)\n });\n </script>\n</head>\n```", "```py\n<body>\n <h1>Flask RESTful API Example</h1>\n LED is connected to GPIO {{pin}}<br>               <!--(11)-->\n Brightness: <span id=\"brightnessLevel\"></span>%<br>\n <input type=\"range\" min=\"0\" max=\"100\"              <!--(12)-->\n value=\"0\" class=\"brightnessLevel\">\n</body>\n</html>\n```", "```py\n(venv) $ python flask_ws_server.py\n... truncated ...\nNFO:werkzeug: * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\n... truncated ...\n```", "```py\nfrom flask import Flask, request, render_template\nfrom flask_socketio import SocketIO, send, emit            # (1)\n```", "```py\n# Flask & Flask Restful Global Variables.\napp = Flask(__name__) # Core Flask app.\nsocketio = SocketIO(app) # Flask-SocketIO extension wrapper  # (2)\n```", "```py\n@app.route('/', methods=['GET'])\ndef index():\n \"\"\"Make sure index_web_sockets.html is in the templates folder\n relative to this Python file.\"\"\"\n return render_template('index_web_sockets.html',         # (3)\n pin=LED_GPIO_PIN) \n```", "```py\n# Flask-SocketIO Callback Handlers\n@socketio.on('connect')                                     # (4)\ndef handle_connect():\n logger.info(\"Client {} connected.\".format(request.sid)) # (5)\n\n    # Send initializating data to newly connected client.\n emit(\"led\", state)                                     # (6)\n```", "```py\n@socketio.on('disconnect')                               # (7) \ndef handle_disconnect():\n \"\"\"Called with a client disconnects from this server\"\"\"\n logger.info(\"Client {} disconnected.\".format(request.sid))\n```", "```py\n@socketio.on('led')                                 # (8)\ndef handle_state(data):                             # (9)\n \"\"\"Handle 'led' messages to control the LED.\"\"\"\n global state\n logger.info(\"Update LED from client {}: {} \"\n .format(request.sid, data)) \n\n if 'level' in data and data['level'].isdigit(): # (10)\n new_level = int(data['level'])\n\n # Range validation and bounding.            # (11)\n if new_level < 0:\n new_level = 0\n elif new_level > 100:\n new_level = 100\n```", "```py\n led.value = new_level / 100               # (12)\n logger.info(\"LED brightness level is \" + str(new_level))\n\n state['level'] = new_level\n\n # Broadcast new state to *every* \n # connected connected (so they remain in sync)\n emit(\"led\", state, broadcast=True)            # (13)\n```", "```py\nif __name__ == '__main__':\n socketio.run(app, host=\"0.0.0.0\", debug=True)  # (14)\n```", "```py\n<!-- chapter03/templates/index_ws_client.html -->\n<!DOCTYPE html>\n<html>\n<head>\n <title>Flask Web Socket Example</title>\n <script src=\"/static/jquery.min.js\"></script>\n <script src=\"/static/socket.io.js\"></script>   <!-- (1) -->\n <script type=\"text/javascript\">\n```", "```py\n var socket = io();                         // (2)\n\n socket.on('connect', function() {          // (3)\n console.log(\"Connected to Server\");\n $(\"#connected\").html(\"Yes\");\n });\n\n socket.on('disconnect', function() {       // (4)\n console.log(\"Disconnected from the Server\");\n $(\"#connected\").html(\"No\");\n });\n```", "```py\nsocket.on('led', function(dataFromServer) {         // (5)\n console.log(dataFromServer)\n if (dataFromServer.level !== undefined) {\n $(\"input[type=range].brightnessLevel\").val(dataFromServer.level);\n $(\"#brightnessLevel\").html(dataFromServer.level);\n }\n});\n```", "```py\n $(document).ready(function(){\n // Event listener for Slider value changes.\n $(\"input[type=range].brightnessLevel\")\n              .on('input', function(){\n level = $(this).val();\n payload = {\"level\": level};\n socket.emit('led', payload);         // (6)\n });\n });\n </script>\n</head>\n```", "```py\n<body>\n <h1>Flask Web Socket Example</h1>\n LED is connected to GPIO {{pin}}<br>\n Connected to server: <span id=\"connected\">No</span> <!-- (7) -->\n <br><br>\n Brightness <span id=\"brightnessLevel\"></span>:<br>\n <input type=\"range\" min=\"0\" max=\"100\" \n value=\"0\" class=\"brightnessLevel\">\n</body>\n</html>\n```"]