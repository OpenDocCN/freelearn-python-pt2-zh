["```py\n$ cd chapter02              # Change into this chapter's folder\n$ python3 -m venv venv      # Create Python Virtual Environment\n$ source venv/bin/activate  # Activate Python Virtual Environment\n(venv) $ pip install pip --upgrade        # Upgrade pip\n(venv) $ pip install -r requirements.txt  # Install dependent packages\n```", "```py\n(venv) $ python led_gpiozero.py\n```", "```py\nfrom gpiozero import Device, LED                # (1)\nfrom gpiozero.pins.pigpio import PiGPIOFactory  # (2)\nfrom time import sleep  \n```", "```py\nDevice.pin_factory = PiGPIOFactory()  # (3)  \n```", "```py\nGPIO_PIN = 21 \nled = LED(GPIO_PIN)         # (4)\nled.blink(background=False) # (5)\n```", "```py\nimport pigpio           # (1)\nfrom time import sleep\n```", "```py\nGPIO_PIN = 21\npi = pigpio.pi()                        # (2)\npi.set_mode(GPIO_PIN, pigpio.OUTPUT)    # (3)\n```", "```py\nwhile True:\n pi.write(GPIO_PIN, 1) # 1 = High = On    # (4)\n sleep(1) # 1 second\n pi.write(GPIO_PIN, 0) # 0 = Low = Off    # (5)\n sleep(1) # 1 second\n```", "```py\nfrom gpiozero import Device, LED, Button         # (1)\nfrom gpiozero.pins.pigpio import PiGPIOFactory\nimport signal                                    # (2)\n```", "```py\ndef pressed():\n led.toggle()                               # (3)\n state = 'on' if led.value == 1 else 'off'  # (4)\n print(\"Button pressed: LED is \" + state)   # (5)\n```", "```py\nbutton = Button(BUTTON_GPIO_PIN, \n                pull_up=True, bounce_time=0.1)  # (6)\nbutton.when_pressed = pressed                   # (7)\n```", "```py\nsignal.pause() # Stops program from exiting.  # (8)\n```", "```py\npi.set_mode(BUTTON_GPIO_PIN, pigpio.INPUT)           # (1)\npi.set_pull_up_down(BUTTON_GPIO_PIN, pigpio.PUD_UP)  # (2)\npi.set_glitch_filter(BUTTON_GPIO_PIN, 10000)         # (3)\n```", "```py\ndef pressed(gpio_pin, level, tick):                         # (4)\n # Get current pin state for LED.\n led_state = pi.read(LED_GPIO_PIN)                       # (5)\n\n if led_state == 1:                                      # (6)\n # LED is on, so turn it off.\n pi.write(LED_GPIO_PIN, 0) # 0 = Pin Low = Led Off\n print(\"Button pressed: Led is off\")\n else: # 0\n # LED is off, so turn it on.\n pi.write(LED_GPIO_PIN, 1) # 1 = Pin High = Led On\n print(\"Button pressed: Led is on\")\n\n# Register button handler.\npi.callback(BUTTON_GPIO_PIN, pigpio.FALLING_EDGE, pressed)  # (7)\n```", "```py\n(venv) $ python dweet_led.py\nINFO:main:Created new thing name a8e38712                  # (1)\nLED Control URLs - Try them in your web browser:\n On    : https://dweet.io/dweet/for/a8e38712?state=on      # (2)\n Off   : https://dweet.io/dweet/for/a8e38712?state=off\n Blink : https://dweet.io/dweet/for/a8e38712?state=blink\n\nINFO:main:LED off\nWaiting for dweets. Press Control+C to exit.\n```", "```py\n...truncated...\nimport requests     # (1)\n```", "```py\nLED_GPIO_PIN = 21                  # LED GPIO Pin\nTHING_NAME_FILE = 'thing_name.txt' # Thing name file\nURL = 'https://dweet.io'           # Dweet.io service API\nlast_led_state = None              # \"on\", \"off\", \"blinking\"\nthing_name = None                  # Thing name\nled = None                         # GPIOZero LED instance\n```", "```py\nlogging.basicConfig(level=logging.WARNING)\nlogger = logging.getLogger('main') # Logger for this module\nlogger.setLevel(logging.INFO) # Debugging for this file.   # (2)\n```", "```py\ndef resolve_thing_name(thing_file):\n \"\"\"Get existing, or create a new thing name\"\"\"\n if os.path.exists(thing_file):                     # (3)\n with open(thing_file, 'r') as file_handle:\n name = file_handle.read()\n logger.info('Thing name ' + name + \n ' loaded from ' + thing_file)\n return name.strip()\n else:\n name = str(uuid1())[:8]                        # (4)\n logger.info('Created new thing name ' + name)\n\n with open(thing_file, 'w') as f:               # (5)\n f.write(name)\n\n return name\n```", "```py\n{\n this: \"succeeded\",\n by: \"getting\",\n the: \"dweets\",\n with: [\n {\n thing: \"a8e38712-9886-11e9-a545-68a3c4974cd4\",\n created: \"2019-09-16T05:16:59.676Z\",\n content: { \n state: \"on\"                                       # (1)\n }\n }\n ]\n}\n```", "```py\ndef get_lastest_dweet():\n \"\"\"Get the last dweet made by our thing.\"\"\"\n resource = URL + '/get/latest/dweet/for/' + thing_name   # (6)\n logger.debug('Getting last dweet from url %s', resource)\n\n r = requests.get(resource)                               # (7)\n```", "```py\n if r.status_code == 200:                              # (8)\n dweet = r.json() # return a Python dict.\n logger.debug('Last dweet for thing was %s', dweet)\n\n dweet_content = None\n\n if dweet['this'] == 'succeeded':                  # (9)\n # Interested in the dweet content property.\n dweet_content = dweet['with'][0]['content']   # (10)\n\n return dweet_content\n else:\n logger.error('Getting last dweet failed \n with http status %s', r.status_code)\n return {}\n```", "```py\ndef poll_dweets_forever(delay_secs=2):\n \"\"\"Poll dweet.io for dweets about our thing.\"\"\"\n while True:\n dweet = get_last_dweet()                        # (11)\n if dweet is not None:\n process_dweet(dweet)                        # (12)\n\n sleep(delay_secs)                                   # (13)\n```", "```py\ndef process_dweet(dweet):\n \"\"\"Inspect the dweet and set LED state accordingly\"\"\"\n global last_led_state\n\n if not 'state' in dweet:\n return\n\n led_state = dweet['state']                         # (14)\n\n if led_state == last_led_state:                    # (15)\n return; # LED is already in requested state.\n```", "```py\n if led_state == 'on':                 # (16)\n led_state = 'on'\n led.on()\n elif led_state == 'blink':\n led_state = 'blink'\n led.blink()\n else: # Off, including any unhanded state.\n led_state = 'off'\n led.off()\n\n last_led_state = led_state           # (17)\n logger.info('LED ' + led_state)\n```", "```py\n# Main entry point\nif __name__ == '__main__':\n signal.signal(signal.SIGINT, signal_handler) # Capture CTRL + C\n print_instructions()                              # (18)\n\n    # Initialize LED from last dweet.\n latest_dweet = get_latest_dweet()                 # (19)\n if (latest_dweet):\n process_dweet(latest_dweet)\n\n print('Waiting for dweets. Press Control+C to exit.')\n\n #Only use one of the following.\n #stream_dweets_forever() # Stream dweets real-time. \n poll_dweets_forever() # Get dweets by polling.    # (20)\n```", "```py\nthing_name = '**** ADD YOUR THING NAME HERE ****'\n```", "```py\n\"\"\" chapter02/dweet_led.py \"\"\"\n...\n# from gpiozero import LED                    # Comment out import\nfrom pigpio_led_class import PiGPIOLED as LED # Add new import\n```"]