["```py\n$ cd chapter09              # Change into this chapter's folder\n$ python3 -m venv venv      # Create Python Virtual Environment\n$ source venv/bin/activate  # Activate Python Virtual Environment\n(venv) $ pip install pip --upgrade        # Upgrade pip\n(venv) $ pip install -r requirements.txt  # Install dependent packages\n```", "```py\n(venv) python DHT_Measure.py\n{'temp_c': 21, 'temp_f': 69.8, 'humidity': 31, 'valid': True}\n```", "```py\nfrom pigpio_dht import DHT11, DHT22   # (1)\n\nSENSOR_GPIO = 21 \nsensor = DHT11(SENSOR_GPIO)           # (2)\n#sensor = DHT22(SENSOR_GPIO)\n\nresult = sensor.read(retries=2)       # (3)\nprint(result)\n\nresult = sensor.sample(samples=5)     # (4)\nprint(result)\n```", "```py\n$ i2cdetect -y 1\n# ... truncated ...\n30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n40: -- -- -- -- -- -- -- -- 48 -- -- -- -- -- -- -- \n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- \n# ... truncated ...\n```", "```py\n(venv) python ldr_ads1115_calibrate.py Place LDR in the light and press Enter\nPlease wait...\n\nPlace LDR in dark and press Enter\nPlease wait...\n\nFile ldr_calibration_config.py created with:\n# This file was automatically created by ldr_ads1115_calibrate.py\n# Number of samples: 100\nMIN_VOLTS = 0.6313\nMAX_VOLTS = 3.2356 \n```", "```py\nLDR Reading volts=0.502, trigger at 0.9061 +/- 0.25, triggered=False\n```", "```py\nLDR Reading volts=1.116, trigger at 0.9061 +/- 0.25, triggered=False\nLDR Reading volts=1.569, trigger at 0.9061 +/- 0.25, triggered=True\n```", "```py\nimport ldr_calibration_config as calibration                   # (1)\n\n# ... truncated ...\n\nLIGHT_VOLTS = calibration.MAX_VOLTS                            # (2)\nDARK_VOLTS = calibration.MIN_VOLTS\n\nTRIGGER_VOLTS = LIGHT_VOLTS - ((LIGHT_VOLTS - DARK_VOLTS) / 2) # (3)\nTRIGGER_BUFFER = 0.25                                          # (4)\n\n```", "```py\n   triggered = False # (5)\n\n   def update_trigger(volts):\n       global triggered\n\n       if triggered and volts > TRIGGER_VOLTS + TRIGGER_BUFFER:\n           triggered = False\n       elif not triggered and volts < TRIGGER_VOLTS - TRIGGER_BUFFER:\n           triggered = True\n```", "```py\n\ntrigger_text = \"{:0.4f} +/- {}\".format(TRIGGER_VOLTS, TRIGGER_BUFFER) \n\n  try:\n      while True:                                                  # (6)\n          volts = analog_channel.voltage\n\n          update_trigger(volts)\n\n          output = \"LDR Reading volts={:>5.3f}, trigger at {}, triggered={}\"\n                   .format(volts, trigger_text, triggered)\n          print(output)\n\n          pi.write(LED_GPIO, triggered)                           # (7)\n          sleep(0.05)\n\n```"]