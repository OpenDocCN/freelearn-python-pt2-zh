["```py\n$ cd chapter04              # Change into this chapter's folder\n$ python3 -m venv venv      # Create Python Virtual Environment\n$ source venv/bin/activate  # Activate Python Virtual Environment\n(venv) $ pip install pip --upgrade        # Upgrade pip\n(venv) $ pip install -r requirements.txt  # Install dependent packages\n```", "```py\n$ sudo apt-get --yes install mosquitto mosquitto-clients\n... truncated ...\n```", "```py\n$ sudo systemctl start mosquitto\n```", "```py\n$ systemctl status mosquitto\n... truncated ...\n Active: active (running)\n... truncated ...\n```", "```py\n$ mosquitto -h\nmosquitto version 1.5.7\nmosquitto is an MQTT v3.1.1 broker.\n... truncated ...\n```", "```py\n# File: chapter04/mosquitto_pyiot.conf\n... truncated...\nhttp_dir /home/pi/pyiot/chapter04/mosquitto_www\n```", "```py\n$ sudo cp mosquitto_pyiot.conf /etc/mosquitto/conf.d/\n```", "```py\n$ sudo systemctl restart mosquitto \n```", "```py\n# Terminal #1 (Subscriber)\n$ mosquitto_sub -v -h localhost -t 'pyiot'\n```", "```py\n# Terminal #2 (Publisher)\n$ mosquitto_pub -h localhost -t 'pyiot' -m 'hello!' \n```", "```py\n# Terminal #1 (Subscriber)\n$ mosquitto_sub -v -h localhost -t 'pyiot'\npyiot hello!\n```", "```py\n# Terminal #1 (Subscriber)\nmosquitto_sub -h localhost -v -t '+/+/temperature/+'\n```", "```py\n# Terminal #2 (Publisher)\n$ mosquitto_pub -h localhost -t 'level1/lounge/temperature/sensor1' -m '20'\n$ mosquitto_pub -h localhost -t 'level2/bedroom1/temperature/sensor1' -m '22'\n```", "```py\n# Terminal 1 (Subscriber)\n$ mosquitto_sub -d -v -q 2 -h localhost -t 'pyiot'\n```", "```py\n# Terminal 2 (Publisher)\n$ mosquitto_pub -d -q 1 -h localhost -t 'pyiot' -m 'hello!'\n```", "```py\n# Terminal 1 (Subscriber)\n$ mosquitto_sub -d -v -q 2 -h localhost -t 'pyiot' # (1)\nClient mosqsub|25112-rpi4 sending CONNECT\nClient mosqsub|25112-rpi4 received CONNACK (0)\nClient mosqsub|25112-rpi4 sending SUBSCRIBE (Mid: 1, Topic: pyiot, QoS: 2) # (2)\nClient mosqsub|25112-rpi4 received SUBACK\nSubscribed (mid: 1): 2\nClient mosqsub|25112-rpi4 received PUBLISH (d0, q1, r0, m1, 'pyiot', ... (6 bytes)) # (3)\nClient mosqsub|25112-rpi4 sending PUBACK (Mid: 1)\npyiot hello!\n```", "```py\n# Terminal 2 (Publisher)\n$ mosquitto_pub -r -q 2 -h localhost -t 'pyiot' -m 'hello, I have been retained!'\n```", "```py\n# Terminal 1 (Subscriber)\n$ mosquitto_sub -v -q 2 -h localhost -t 'pyiot'\npyiot hello, I have been retained!\n```", "```py\n# Terminal 2 (Publisher)\n$ mosquitto_pub -r -q 2 -h localhost -t 'pyiot' -m ''\n```", "```py\n# Terminal #1 (Subscriber)\n$ mosquitto_sub -q 1 -h localhost -t 'pyiot' -c -i myClientId123\n$ # MAKE SURE YOU PRESS CONTROL+C TO TERMINATE mosquitto_sub\n```", "```py\n# Terminal #2 (Publisher)\n$ mosquitto_pub -q 2 -h localhost -t 'pyiot' -m 'hello 1'\n$ mosquitto_pub -q 2 -h localhost -t 'pyiot' -m 'hello 2'\n$ mosquitto_pub -q 2 -h localhost -t 'pyiot' -m 'hello 3\n```", "```py\n# Terminal 1 (Subscriber)\n$ mosquitto_sub -v -q 1 -h localhost -t 'pyiot' -c -i myClientId123\npyiot hello 1\npyiot hello 2\npyiot hello 3\n```", "```py\n# Terminal #1 (Subscriber with Will)\n$ mosquitto_sub -h localhost -t 'pyiot' --will-topic 'pyiot' --will-payload 'Good Bye' --will-qos 2 --will-retain\n```", "```py\n# Terminal #2 (Subscriber listening to Will topic).\n$ mosquitto_sub -h localhost -t 'pyiot'\n```", "```py\n# Terminal #3 (Publisher)\n$ mosquitto_pub -h localhost -t 'pyiot' -m 'hello'\n```", "```py\n# Terminal #2 (Subscriber listening to Will topic).\n$ mosquitto_sub -h localhost -t 'pyiot'\n'Good Bye'\n```", "```py\n# Terminal #1 (Subscriber with Will)\n$ mosquitto_sub -h localhost -t 'pyiot' --will-topic 'pyiot' --will-payload 'Good Bye, Again' --will-qos 2 --will-retain -C 2\n```", "```py\n# Terminal #1\n(venv) $ python mqtt_led.py\nINFO:main:Listening for messages on topic 'led'. Press Control + C to exit.\nINFO:main:Connected to MQTT Broker\n```", "```py\n# Terminal #2\n$ mosquitto_pub -q 2 -h localhost -t 'led' -r -m '{\"level\": \"100\"}'\n```", "```py\nimport paho.mqtt.client as mqtt  # (1)\n```", "```py\n# Global Variables ...  BROKER_HOST = \"localhost\"   # (2) BROKER_PORT = 1883 CLIENT_ID = \"LEDClient\" # (3) TOPIC = \"led\" # (4) client = None # MQTT client instance. See init_mqtt()   # (5) ...\n```", "```py\ndef set_led_level(data):  # (6)\n   ...\n```", "```py\ndef on_connect(client, user_data, flags, result_code): # (7)     if connection_result_code == 0:                    # (8)\n  logger.info(\"Connected to MQTT Broker\")\n    else:\n  logger.error(\"Failed to connect to MQTT Broker: \" + \n                     mqtt.connack_string(result_code))\n\n    client.subscribe(TOPIC, qos=2)                     # (9)\n```", "```py\ndef on_disconnect(client, user_data, result_code):  # (10)\n    logger.error(\"Disconnected from MQTT Broker\")\n```", "```py\ndef on_message(client, userdata, msg):                    # (11)   data = None  try:                                                  \n  data = json.loads(msg.payload.decode(\"UTF-8\"))    # (12)\n    except json.JSONDecodeError as e:\n        logger.error(\"JSON Decode Error: \" \n                   + msg.payload.decode(\"UTF-8\"))\n\n    if msg.topic == TOPIC:                                # (13)   set_led_level(data)                               # (14)\n    else:\n        logger.error(\"Unhandled message topic {} \n                 with payload \" + str(msg.topic, msg.payload)))\n```", "```py\ndef init_mqtt():\n    global client   client = mqtt.Client(                                       # (15)\n  client_id=CLIENT_ID,\n        clean_session=False)\n\n    # Route Paho logging to Python logging.   client.enable_logger()                                      # (16)   # Setup callbacks  client.on_connect = on_connect                              # (17)\n  client.on_disconnect = on_disconnect\n    client.on_message = on_message\n\n    # Connect to Broker.\n  client.connect(BROKER_HOST, BROKER_PORT)                    # (18)\n```", "```py\n# Initialise Module init_led()\ninit_mqtt()\n\nif __name__ == \"__main__\":\n    signal.signal(signal.SIGINT, signal_handler)    # (19)   logger.info(\"Listening for messages on topic '\" \n       + TOPIC + \"'. Press Control + C to exit.\")\n\n    client.loop_start()                             # (20)\n  signal.pause()\n```", "```py\n<title>MQTT Web Socket Example</title>\n<script src=\"./jquery.min.js\"></script>\n<script src=\"./paho-mqtt.js\"></script> <!-- (1) --> \n```", "```py\n<script type=\"text/javascript\" charset=\"utf-8\">\n    messagePubCount = 0;\n    const CLIENT_ID = String(Math.floor(Math.random() * 10e16)) // (2)\n    const TOPIC   = \"led\";                                      // (3)\n```", "```py\nconst client = new Paho.Client(location.hostname,        // (4)\n                               Number(location.port),\n                               CLIENT_ID); \n```", "```py\nonConnectionSuccess = function(data) {         // (5)\n    console.log(\"Connected to MQTT Broker\");\n    $(\"#connected\").html(\"Yes\");\n    $(\"input[type=range].brightnessLevel\")\n          .attr(\"disabled\", null);\n\n    client.subscribe(TOPIC);                   // (6)\n};\n\nclient.connect({                               // (7)\n   onSuccess: onConnectionSuccess,\n   reconnect: true\n });       \n```", "```py\nclient.onConnectionLost = function onConnectionLost(data) {    // (8)\n  ...\n}\n\nclient.onMessageArrived = function onMessageArrived(message) { // (9)\n   ...\n}\n```", "```py\n$(document).ready(function() {                                   // (10)\n    $(\"#clientId\").html(CLIENT_ID);\n\n    // Event listener for Slider value changes.\n    $(\"input[type=range].brightnessLevel\").on('input', function() {\n        level = $(this).val();\n\n        payload = {\n            \"level\": level\n         };\n\n        // Publish LED brightness.\n        var message = new Paho.Message(                         // (11)\n           JSON.stringify(payload)\n        );\n\n        message.destinationName = TOPIC;                        // (12)\n        message.qos = 2;\n        message.retained = true;                                // (13)\n        client.send(message);\n    });\n});\n```"]