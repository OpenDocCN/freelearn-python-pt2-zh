["```py\n$ python3\nPython 3.5.2 (default, Jul  5 2016, 12:43:10) \n[GCC 5.4.0 20160609] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> print (sys.version)\n3.5.2 (default, Jul  5 2016, 12:43:10) \n[GCC 5.4.0 20160609]\n```", "```py\n$ python2\nPython 2.7.12 (default, Jul  1 2016, 15:12:24) \n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> print sys.version\n2.7.12 (default, Jul  1 2016, 15:12:24) \n[GCC 5.4.0 20160609]\n```", "```py\n# guessing.py\nimport random\n\n# Some global password information which is hard-coded\npasswords={\"joe\": \"world123\",\n          \"jane\": \"hello123\"}\n\ndef game():\n     \"\"\"A guessing game \"\"\"\n\n    # Use 'input' to read the standard input\n    value=input(\"Please enter your guess (between 1 and 10): \")\n    print(\"Entered value is\",value)\n    if value == random.randrange(1, 10):\n        print(\"You won!\")\n    else:\n        print(\"Try again\")\n\nif __name__ == \"__main__\":\n    game()\n```", "```py\n**$ python2 guessing.py**\n**Please enter your guess (between 1 and 10): 6**\n**('Entered value is', 6)**\n**Try again**\n**$ python2 guessing.py**\n**Please enter your guess (between 1 and 10): 8**\n**('Entered value is', 8)**\n**You won!**\n\n```", "```py\n$ python2 guessing.py\nPlease enter your guess (between 1 and 10): passwords\n('Entered value is', {'jane': 'hello123', 'joe': 'world123'})\nTry again\n```", "```py\n$ python2 guessing.py\nPlease enter your guess (between 1 and 10): globals()\n('Entered value is', {'passwords': {'jane': 'hello123', \n'joe' : 'world123'}, '__builtins__': <module '__builtin__' (built-in)>,\n '__file__': 'guessing.py', 'random': \n<module 'random' from '/usr/lib/python2.7/random.pyc'>,\n '__package__': None, 'game': \n<function game at 0x7f6ef9c65d70>,\n '__name__': '__main__', '__doc__': None})\nTry again\n```", "```py\n# guessing_fix.py\nimport random\n\npasswords={\"joe\": \"world123\",\n                  \"jane\": \"hello123\"}\n\ndef game():\n    value=raw_input(\"Please enter your guess (between 1 and 10): \")\n    try:\n        value=int(value)\n    except TypeError:\n        print ('Wrong type entered, try again',value)\n        return\n\n    print(\"Entered value is\",value)\n    if value == random.randrange(1, 10):\n        print(\"You won!\")\n    else:\n        print(\"Try again\")\n\nif __name__ == \"__main__\":\n    game()\n```", "```py\n$ python2 guessing_fix.py \nPlease enter your guess (between 1 and 10): 9\n('Entered value is', 9)\nTry again\n$ python2 guessing_fix.py \nPlease enter your guess (between1 and 10): 2\n('Entered value is', 2)\nYou won!\n\n$ python2 guessing_fix.py \nPlease enter your guess (between 1 and 10): passwords\n(Wrong type entered, try again =>, passwords)\n\n$ python2 guessing_fix.py \nPlease enter your guess (between 1 and 10): globals()\n(Wrong type entered, try again =>, globals())\n```", "```py\n$ python3 guessing.py \nPlease enter your guess (between 1 and 10): passwords\nEntered value is passwords\nTry again\n\n$ python3 guessing.py \nPlease enter your guess (between 1 and 10): globals()\nEntered value is globals()\nTry again\n```", "```py\n# test_eval.py\nimport sys\nimport os\n\ndef run_code(string):\n    \"\"\" Evaluate the passed string as code \"\"\"\n\n    try:\neval(string, {})\n    except Exception as e:\n        print(repr(e))\n\nif __name__ == \"__main__\":\n     run_code(sys.argv[1])\n```", "```py\n$ python2 test_eval.py \"os.system('ls -a')\"\nNameError(\"name 'os' is not defined\",)\n```", "```py\n$ python2 test_eval.py \"__import__('os').system('ls -a')\"\n.   guessing_fix.py  test_eval.py    test_input.py\n..  guessing.py      test_format.py  test_io.py\n```", "```py\n# test_eval.py\nimport sys\nimport os\n\ndef run_code(string):\n    \"\"\" Evaluate the passed string as code \"\"\"\n\n    try:\n        # Pass __builtins__ dictionary as empty\n        eval(string,  {'__builtins__':{}})\n    except Exception as e:\n        print(repr(e))\n\nif __name__ == \"__main__\":\nrun_code(sys.argv[1])\n```", "```py\n$ python2 test_eval.py \"__import__('os').system('ls -a')\"\nNameError(\"name '__import__' is not defined\",)\n```", "```py\n$ python2 test_eval.py \"(lambda f=(lambda x: [c for c in [].__class__.__bases__[0].__subclasses__() if c.__name__ == x][0]): f('function')(f('code')(0,0,0,0,'BOOM',(), (),(),'','',0,''),{})())()\"\nSegmentation fault (core dumped)\n```", "```py\n>>> [].__class__.__bases__[0]\n<type 'object'>\n```", "```py\n>>> [c for c in [].__class__.__bases__[0].__subclasses__()]\n```", "```py\n>>> [c for c in [].__class__.__bases__[0].__subclasses__() if c.__name__ == 'code']\n```", "```py\n>>> (lambda x: [c for c in [].__class__.__bases__[0].__subclasses__() if c.__name__ == x])('code')\n[<type 'code'>]\n```", "```py\n>>> (lambda f: (lambda x: [c for c in [].__class__.__bases__[0].__subclasses__() if c.__name__ == x])('code'))\n<function <lambda> at 0x7f8b16a89668\n```", "```py\n>>> (lambda f=(lambda x: [c for c in [].__class__.__bases__[0].__subclasses__() if c.__name__ == x][0]): f('function')(f('code')))\n<function <lambda> at 0x7fd35e0db7d0>\n```", "```py\n>>> (lambda f=(lambda x: \n[c for c in [].__class__.__bases__[0].__subclasses__() if c.__name__ == x][0]): \nf('function')(f('code')(0,0,0,0,'BOOM',(), (),(),'','',0,''),{})())()\nSegmentation fault (core dumped)\n```", "```py\n$ python3 test_eval.py \n\"(lambda f=(lambda x: [c for c in ().__class__.__bases__[0].__subclasses__() \n  if c.__name__ == x][0]): f('function')(f('code')(0,0,0,0,0,b't\\x00\\x00j\\x01\\x00d\\x01\\x00\\x83\\x01\\x00\\x01d\\x00\\x00S',(), (),(),'','',0,b''),{})())()\"\nSegmentation fault (core dumped)\n```", "```py\n>>> print xrange(2**63)\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nOverflowError: Python int too large to convert to C long\n```", "```py\n>>> print range(2**63)\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nOverflowError: range() result has too many items\n```", "```py\n>>> range(2**63)\nrange(0, 9223372036854775808)\n```", "```py\n# len_overflow.py\n\nclass A(object):\n    def __len__(self): \n        return 100 ** 100\n\nclass B:\n    def __len__(self): \n        return 100 ** 100\n\ntry:\n    len(A())\n    print(\"OK: 'class A(object)' with 'return 100 ** 100' - len calculated\")\nexcept Exception as e:\n    print(\"Not OK: 'class A(object)' with 'return 100 ** 100' - len raise Error: \" + repr(e))\n\ntry:\n    len(B())\n    print(\"OK: 'class B' with 'return 100 ** 100' - len calculated\")\nexcept Exception as e:\n    print(\"Not OK: 'class B' with 'return 100 ** 100' - len raise Error: \" + repr(e))\n```", "```py\n**$ python2 len_overflow.py** \n**Not OK: 'class A(object)' with 'return 100 ** 100' - len raise Error: OverflowError('long int too large to convert to int',)**\n**Not OK: 'class B' with 'return 100 ** 100' - len raise Error: TypeError('__len__() should return an int',)**\n\n```", "```py\n**$ python3 len_overflow.py** \n**Not OK: 'class A(object)' with 'return 100 ** 100' - len raise Error: OverflowError(\"cannot fit 'int' into an index-sized integer\",)**\n**Not OK: 'class B' with 'return 100 ** 100' - len raise Error: OverflowError(\"cannot fit 'int' into an index-sized integer\",)**\n\n```", "```py\n# test_serialize.py\nimport os\nimport pickle\n\nclass ShellExploit(object):\n    \"\"\" A shell exploit class \"\"\"\n\n    def __reduce__(self):\n        # this will list contents of root / folder.\n        return (os.system, ('ls -al /',)\n\ndef serialize():\n    shellcode = pickle.dumps(ShellExploit())\n    return shellcode\n\ndef deserialize(exploit_code):\n    pickle.loads(exploit_code)\n\nif __name__ == '__main__':\n    shellcode = serialize()\n    deserialize(shellcode)\n```", "```py\n# test_serialize_safe.py\nimport os\nimport pickle\nfrom contextlib import contextmanager\n\nclass ShellExploit(object):\n    def __reduce__(self):\n        # this will list contents of root / folder.\n        return (os.system, ('ls -al /',))\n\n@contextmanager\ndef system_jail():\n    \"\"\" A simple chroot jail \"\"\"\n\n    os.chroot('safe_root/')\n    yield\n    os.chroot('/')\n\ndef serialize():\n    with system_jail():\n        shellcode = pickle.dumps(ShellExploit())\n        return shellcode\n\ndef deserialize(exploit_code):\n    with system_jail():\n        pickle.loads(exploit_code)\n\nif __name__ == '__main__':\n    shellcode = serialize()\n    deserialize(shellcode)\n```", "```py\n# test_serialize_json.py\nimport os\nimport json\nimport datetime\n\nclass ExploitEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if any(isinstance(obj, x) for x in (datetime.datetime, datetime.date)):\n            return str(obj)\n\n        # this will list contents of root / folder.\n        return (os.system, ('ls -al /',))\n\ndef serialize():\n    shellcode = json.dumps([range(10),\n                            datetime.datetime.now()],\n                           cls=ExploitEncoder)\n    print(shellcode)\n    return shellcode\n\ndef deserialize(exploit_code):\n    print(json.loads(exploit_code))\n\nif __name__ == '__main__':\n    shellcode = serialize()\n    deserialize(shellcode)\n```", "```py\n$ python2 test_serialize_json.py \n[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \"2017-04-15 12:27:09.549154\"]\n[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], u'2017-04-15 12:27:09.549154']\n```", "```py\n# ssti-example.py\nfrom flask import Flask\nfrom flask import request, render_template_string, render_template\n\napp = Flask(__name__)\n\n@app.route('/hello-ssti')\ndefhello_ssti():\n    person = {'name':\"world\", 'secret': 'jo5gmvlligcZ5YZGenWnGcol8JnwhWZd2lJZYo=='}\n    if request.args.get('name'):\n        person['name'] = request.args.get('name')\n\n    template = '<h2>Hello %s!</h2>' % person['name']\n    return render_template_string(template, person=person)\n\nif __name__ == \"__main__\":\napp.run(debug=True)\n```", "```py\n$ python3 ssti_example.py \n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger pin code: 163-936-023\n```", "```py\nhttp://localhost:5000/hello-ssti?name={% for item in person %}<p>{{ item, person[item] }}</p>{% endfor %}\n```", "```py\n# ssti-example-fixed.py\nfrom flask import Flask\nfrom flask import request, render_template_string, render_template\n\napp = Flask(__name__)\n\n@app.route('/hello-ssti')\ndefhello_ssti():\n    person = {'name':\"world\", 'secret': 'jo5gmvlligcZ5YZGenWnGcol8JnwhWZd2lJZYo=='}\n    if request.args.get('name'):\n        person['name'] = request.args.get('name')\n\n    template = '<h2>Hello {{ person.name }} !</h2>'\n    return render_template_string(template, person=person)\n\nif __name__ == \"__main__\":\napp.run(debug=True)\n```", "```py\n# ssti-example-dos.py\nfrom flask import Flask\nfrom flask import request, render_template_string, render_template\n\napp = Flask(__name__)\n\nTEMPLATE = '''\n<html>\n <head><title> Hello {{ person.name }} </title></head>\n <body> Hello FOO </body>\n</html>\n'''\n\n@app.route('/hello-ssti')\ndefhello_ssti():\n    person = {'name':\"world\", 'secret': 'jo5gmvlligcZ5YZGenWnGcol8JnwhWZd2lJZYo=='} \n    if request.args.get('name'):\n        person['name'] = request.args.get('name')\n\n    # Replace FOO with person's name\n    template = TEMPLATE.replace(\"FOO\", person['name'])\n    return render_template_string(template, person=person)\n\nif __name__ == \"__main__\":\napp.run(debug=True)\n```", "```py\n # Replace FOO with person's name\n template = TEMPLATE.replace(\"FOO\", person['name'])\n```", "```py\nhttp://localhost:5000/hello-ssti?name=Tom<script>alert(\"You are under attack!\")</script>\n```", "```py\n# ssti-example-dos-fix.py\nfrom flask import Flask\nfrom flask import request, render_template_string, render_template\n\napp = Flask(__name__)\n\nTEMPLATE = '''\n<html>\n <head><title> Hello {{ person.name | e }} </title></head>\n <body> Hello {{ person.name | e }} </body>\n</html>\n'''\n\n@app.route('/hello-ssti')\ndefhello_ssti():\n    person = {'name':\"world\", 'secret': 'jo5gmvlligcZ5YZGenWnGcol8JnwhWZd2lJZYo=='} \n    if request.args.get('name'):\n        person['name'] = request.args.get('name')\n    return render_template_string(TEMPLATE, person=person)\n\nif __name__ == \"__main__\":\napp.run(debug=True)\n```", "```py\n    def display_safe(employee):\n        \"\"\" Display details of the employee instance \"\"\"\n\n        print(\"Employee: {name}, Age: {age}, \n                 profession: {job}\".format(**employee))\n\n    def display_unsafe(employee):\n        \"\"\" Display details of employee instance \"\"\"\n\n        print (\"Employee: %s, Age: %d, \n                  profession: %s\" % (employee['name'],\n                                                 employee['age'],\n                                                 employee['job']))\n\n    >>> employee={'age': 25, 'job': 'software engineer', 'name': 'Jack'}\n    >>> display_safe(employee)\n    Employee: Jack, Age: 25, profession: software engineer\n    >>> display_unsafe(employee)\n    Employee: Jack, Age: 25, profession: software engineer\n    ```", "```py\n    with open('somefile.txt','w') as fp:\n     fp.write(buffer)\n    ```", "```py\n    fp = open('somefile.txt','w')\n    fp.write(buffer)\n    ```", "```py\n        # compare_passwords.py - basic\n        import hashlib\n        import sqlite3\n        import getpass\n\n        def read_password(user):\n            \"\"\" Read password from a password DB \"\"\"\n            # Using an sqlite db for demo purpose\n\n            db = sqlite3.connect('passwd.db')\n            cursor = db.cursor()\n            try:\n                passwd=cursor.execute(\"select password from passwds where user='%(user)s'\" % locals()).fetchone()[0]\n                return hashlib.sha1(passwd.encode('utf-8')).hexdigest()\n            except TypeError:\n                pass\n\n        def verify_password(user):\n            \"\"\" Verify password for user \"\"\"\n\n            hash_pass = hashlib.sha1(getpass.getpass(\"Password: \").encode('utf-8')).hexdigest()\n            print(hash_pass)\n            if hash_pass==read_password(user):\n                print('Password accepted')\n            else:\n                print('Wrong password, Try again')\n\n        if __name__ == \"__main__\":\n            import sys\n            verify_password(sys.argv[1])\n        ```", "```py\n        # crypto_password_compare.py\n        import sqlite3\n        import getpass\n        from passlib.hash import bcrypt\n\n        def read_passwords():\n            \"\"\" Read passwords for all users from a password DB \"\"\"\n            # Using an sqlite db for demo purpose\n\n            db = sqlite3.connect('passwd.db')\n            cursor = db.cursor()\n            hashes = {}\n\n            for user,passwd in cursor.execute(\"select user,password from passwds\"):\n                hashes[user] = bcrypt.encrypt(passwd, rounds=8)\n\n            return hashes\n\n        def verify_password(user):\n            \"\"\" Verify password for user \"\"\"\n\n            passwds = read_passwords()\n            # get the cipher\n            cipher = passwds.get(user)\n            if bcrypt.verify(getpass.getpass(\"Password: \"), cipher):\n                print('Password accepted')      \n            else:\n                print('Wrong password, Try again')\n\n        if __name__ == \"__main__\":\n            import sys\n            verify_password(sys.argv[1])\n        ```", "```py\n    $ python3 crytpo_password_compare.py jack\n    Password: test\n    Wrong password, Try again\n\n    $ python3 crytpo_password_compare.py jack\n    Password: reacher123\n    Password accepted\n    ```", "```py\n    def func(input):\n      secret='e4fe5775c1834cc8bd6abb712e79d058'\n      verify_secret(input, secret)\n      # Do other things\n    ```", "```py\n     # This is the 'secret' encrypted via bcrypt with eight rounds.\n     secret_hash=''$2a$08$Q/lrMAMe14vETxJC1kmxp./JtvF4vI7/b/VnddtUIbIzgCwA07Hty'\n     def func(input):\n      verify_secret(input, secret_hash)\n    ```"]