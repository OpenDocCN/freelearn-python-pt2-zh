["```py\n        import hashlib\n        import requests\n\n        def get_url_data(url):\n            \"\"\" Return data for a URL \"\"\"\n\n            # Return data while saving the data in a file \n            # which is a hash of the URL\n            data = requests.get(url).content\n            # Save it in a filename\n            filename = hashlib.md5(url).hexdigest()\n            open(filename, 'w').write(data)\n            return data\n        ```", "```py\n        import os\n\n        def get_url_data_stub(url):\n            \"\"\" Stub function replacing get_url_data \"\"\"\n\n            # No actual web request is made, instead \n            # the file is opened and data returned\n            filename = hashlib.md5(url).hexdigest()\n            if os.path.isfile(filename):\n                return open(filename).read()\n        ```", "```py\n        def get_url_data(url):\n            \"\"\" Return data for a URL \"\"\"\n\n            # First check for cached file - if so return its\n            # contents. Note that we are not checking for\n            # age of the file - so content may be stale.\n            filename = hashlib.md5(url).hexdigest()\n            if os.path.isfile(filename):\n                return open(filename).read()\n\n            # First time - so fetch the URL and write to the\n            # file. In subsequent calls, the file contents will\n            # be returned.\n            data = requests.get(url).content\n            open(filename, 'w').write(data)\n\n            return data\n        ```", "```py\n        import logging\n\n        class FakeLogger(object):\n            \"\"\" A class that fakes the interface of the \n            logging.Logger object in a minimalistic fashion \"\"\"\n\n            def __init__(self):\n                self.lvl = logging.INFO\n\n            def setLevel(self, level):\n                \"\"\" Set the logging level \"\"\"\n                self.lvl = level\n\n            def _log(self, msg, *args):\n                \"\"\" Perform the actual logging \"\"\"\n\n                # Since this is a fake object - no actual logging is \n                # done.\n                # Instead the message is simply printed to standard \n                # output.\n\n                print (msg, end=' ')\n                for arg in args:\n                    print(arg, end=' ')\n                print()\n\n            def info(self, msg, *args):\n                \"\"\" Log at info level \"\"\"\n                if self.lvl<=logging.INFO: return self._log(msg, *args)\n\n            def debug(self, msg, *args):\n                \"\"\" Log at debug level \"\"\"\n                if self.lvl<=logging.DEBUG: return self._log(msg, *args)\n\n            def warning(self, msg, *args):\n                \"\"\" Log at warning level \"\"\"\n                if self.lvl<=logging.WARNING: return self._log(msg, *args)          \n\n            def error(self, msg, *args):\n                \"\"\" Log at error level \"\"\"\n                if self.lvl<=logging.ERROR: return self._log(msg, *args)    \n\n            def critical(self, msg, *args):\n                \"\"\" Log at critical level \"\"\"\n                if self.lvl<=logging.CRITICAL: return self._log(msg, *args)\n        ```", "```py\n\"\"\" Module datetime helper - Contains the class DateTimeHelper providing some helpful methods for working with date and datetime objects \"\"\"\n\nimport datetime\nclass DateTimeHelper(object):\n    \"\"\" A class which provides some convenient date/time\n    conversion and utility methods \"\"\"\n\n    def today(self):\n        \"\"\" Return today's datetime \"\"\"\n        return datetime.datetime.now()\n\n    def date(self):\n        \"\"\" Return today's date in the form of DD/MM/YYYY \"\"\"\n        return self.today().strftime(\"%d/%m/%Y\")\n\n    def weekday(self):\n        \"\"\" Return the full week day for today \"\"\"\n        return self.today().strftime(\"%A\")\n\n    def us_to_indian(self, date):\n        \"\"\" Convert a U.S style date i.e mm/dd/yy to Indian style dd/mm/yyyy \"\"\"\n\n        # Split it\n        mm,dd,yy = date.split('/')\n        yy = int(yy)\n        # Check if year is >16, else add 2000 to it\n        if yy<=16: yy += 2000\n        # Create a date object from it\n        date_obj = datetime.date(year=yy, month=int(mm), day=int(dd))\n        # Retur it in correct format\n        return date_obj.strftime(\"%d/%m/%Y\")\n```", "```py\n\"\"\" Module test_datetimehelper -  Unit test module for testing datetimehelper module \"\"\"\n\nimport unittest\nimport datetimehelper\n\nclass DateTimeHelperTestCase(unittest.TestCase):\n     \"\"\" Unit-test testcase class for DateTimeHelper class \"\"\"\n\n    def setUp(self):\n        print(\"Setting up...\")\n        self.obj = datetimehelper.DateTimeHelper()\n\n    def test_us_india_conversion(self):\n        \"\"\" Test us=>india date format conversion \"\"\"\n\n        # Test a few dates\n        d1 = '08/12/16'\n        d2 = '07/11/2014'\n        d3 = '04/29/00'\n        self.assertEqual(self.obj.us_to_indian(d1), '12/08/2016')\n        self.assertEqual(self.obj.us_to_indian(d2), '11/07/2014')\n        self.assertEqual(self.obj.us_to_indian(d3), '29/04/2000')\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\n\"\"\" Module test_datetimehelper -  Unit test module for testing datetimehelper module \"\"\"\n\nimport unittest\nimport datetime\nimport datetimehelper\nfrom unittest.mock import patch\n\nclass DateTimeHelperTestCase(unittest.TestCase):\n    \"\"\" Unit-test testcase class for DateTimeHelper class \"\"\"\n\n    def setUp(self):\n        self.obj = datetimehelper.DateTimeHelper()\n\n    def test_date(self):\n        \"\"\" Test date() method \"\"\"\n\n        # Put a specific date to test\n        my_date = datetime.datetime(year=2016, month=8, day=16)\n\n        # Patch the 'today' method with a specific return value\n        with patch.object(self.obj, 'today', return_value=my_date):\n            response = self.obj.date()\n            self.assertEqual(response, '16/08/2016')\n\n    def test_weekday(self):\n        \"\"\" Test weekday() method \"\"\"\n\n        # Put a specific date to test\n        my_date = datetime.datetime(year=2016, month=8, day=21)\n\n        # Patch the 'today' method with a specific return value\n        with patch.object(self.obj, 'today', return_value=my_date):\n            response = self.obj.weekday()\n            self.assertEqual(response, 'Sunday')            \n\n    def test_us_india_conversion(self):\n        \"\"\" Test us=>india date format conversion \"\"\"\n\n        # Test a few dates\n        d1 = '08/12/16'\n        d2 = '07/11/2014'\n        d3 = '04/29/00'\n        self.assertEqual(self.obj.us_to_indian(d1), '12/08/2016')\n        self.assertEqual(self.obj.us_to_indian(d2), '11/07/2014')\n        self.assertEqual(self.obj.us_to_indian(d3), '29/04/2000')\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\n$ pip install nose2\n```", "```py\n**$ pip install pytest**\n\n```", "```py\n\"\"\" Module test_datetimehelper_object - Simple test case with test class derived from object \"\"\" \n\nimport datetimehelper\n\nclass TestDateTimeHelper(object):\n\n    def test_us_india_conversion(self):\n        \"\"\" Test us=>india date format conversion \"\"\"\n\n        obj = datetimehelper.DateTimeHelper()\n        assert obj.us_to_indian('1/1/1') == '01/01/2001'\n```", "```py\n**$ pip install coverage**\n\n```", "```py\n **$ coverage run <source file1> <source file 2> \u2026**\n\n```", "```py\n **$ coverage report -m**\n\n```", "```py\n**$ pip install cov-core**\n\n```", "```py\n**$ nose2 -v -C**\n\n```", "```py\n**$ pip install pytest-cov**\n\n```", "```py\n**$ pytest \u2013cov**\n\n```", "```py\n\"\"\"\nModule textsearcher - Contains class TextSearcher for performing search on a database and returning results\n\"\"\"\n\nimport operator\n\nclass TextSearcher(object):\n    \"\"\" A class which performs a text search and returns results \"\"\"\n\n    def __init__(self, db):\n        \"\"\" Initializer - keyword and database object \"\"\"\n\n        self.cache = False\n        self.cache_dict = {}\n        self.db = db\n        self.db.connect()\n\n    def setup(self, cache=False, max_items=500):\n        \"\"\" Setup parameters such as caching \"\"\"\n\n        self.cache = cache\n        # Call configure on the db\n        self.db.configure(max_items=max_items)\n\n    def get_results(self, keyword, num=10):\n        \"\"\" Query keyword on db and get results for given keyword \"\"\"\n\n        # If results in cache return from there\n        if keyword in self.cache_dict:\n            print ('From cache')\n            return self.cache_dict[keyword]\n\n        results = self.db.query(keyword)\n        # Results are list of (string, weightage) tuples\n        results = sorted(results, key=operator.itemgetter(1), reverse=True)[:num]\n        # Cache it\n        if self.cache:\n            self.cache_dict[keyword] = results\n\n        return results\n```", "```py\n>>> from unittest.mock import Mock, MagicMock\n>>> import textsearcher\n>>> import operator\n```", "```py\n>>> db = Mock()\n```", "```py\n>>> searcher = textsearcher.TextSearcher(db)\n```", "```py\n>>> db.connect.assert_called_with()\n```", "```py\n>>> searcher.setup(cache=True, max_items=100)\n```", "```py\n>>> searcher.db.configure.assert_called_with(max_items=100)\n<Mock name='mock.configure_assert_called_with()' id='139637252379648'>\n```", "```py\n>>> canned_results = [('Python is wonderful', 0.4),\n...                       ('I like Python',0.8),\n...                       ('Python is easy', 0.5),\n...                       ('Python can be learnt in an afternoon!', 0.3)]\n>>> db.query = MagicMock(return_value=canned_results)\n```", "```py\n>>> keyword, num = 'python', 3\n>>> data = searcher.get_results(python, num=num)\n```", "```py\n>>> data\n[('I like Python', 0.8), ('Python is easy', 0.5), ('Python is wonderful', 0.4)]\n```", "```py\n>>> searcher.db.query.assert_called_with(keyword)\n```", "```py\n>>> results = sorted(canned_results, key=operator.itemgetter(1), reverse=True)[:num]\n>>> assert data == results\nTrue\n```", "```py\n\"\"\"\nModule test_textsearch - Unittest case with mocks for textsearch module\n\"\"\"\n\nfrom unittest.mock import Mock, MagicMock\nimport textsearcher\nimport operator\n\ndef test_search():\n    \"\"\" Test search via a mock \"\"\"\n\n    # Mock the database object\n    db = Mock()\n    searcher = textsearcher.TextSearcher(db)\n    # Verify connect has been called with no arguments\n    db.connect.assert_called_with()\n    # Setup searcher\n    searcher.setup(cache=True, max_items=100)\n    # Verify configure called on db with correct parameter\n    searcher.db.configure.assert_called_with(max_items=100)\n\n    canned_results = [('Python is wonderful', 0.4),\n                      ('I like Python',0.8),\n                      ('Python is easy', 0.5),\n                      ('Python can be learnt in an afternoon!', 0.3)]\n    db.query = MagicMock(return_value=canned_results)\n\n    # Mock the results data\n    keyword, num = 'python', 3\n    data = searcher.get_results(keyword,num=num)\n    searcher.db.query.assert_called_with(keyword)\n\n    # Verify data \n    results = sorted(canned_results, key=operator.itemgetter(1), reverse=True)[:num]\n    assert data == results\n```", "```py\n\"\"\"\nModule factorial - Demonstrating an example of writing doctests\n\"\"\"\n\nimport functools\nimport operator\n\ndef factorial(n):\n    \"\"\" Factorial of a number.\n\n    >>> factorial(0)\n    1    \n    >>> factorial(1)\n    1\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n\n    \"\"\"\n\n    return functools.reduce(operator.mul, range(1,n+1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n```", "```py\n\"\"\"\nModule factorial - Demonstrating an example of writing doctests\n\"\"\"\n\nimport functools\nimport operator\n\ndef factorial(n):\n    \"\"\" Factorial of a number.\n\n    >>> factorial(0)\n    1    \n    >>> factorial(1)\n    1\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"\n\n    # Handle 0 as a special case\n    if n == 0:\n        return 1\n\n    return functools.reduce(operator.mul, range(1,n+1))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)\n```", "```py\n$ pytest \u2013doctest-modules\n```", "```py\n**$ pip install selenium**\n\n```", "```py\n\"\"\"\nModule selenium_testcase - Example of implementing an automated UI test using selenium framework\n\"\"\"\n\nfrom selenium import webdriver\nimport pytest\nimport contextlib\n\n@contextlib.contextmanager\n@pytest.fixture(scope='session')\ndef setup():\n    driver = webdriver.Firefox()    \n    yield driver\n    driver.quit()\n\ndef test_python_dotorg():\n    \"\"\" Test details of python.org website URLs \"\"\"\n\n    with setup() as driver:\n        driver.get('http://www.python.org')\n        # Some tests\n        assert driver.title == 'Welcome to Python.org'\n        # Find out the 'Community' link\n        comm_elem = driver.find_elements_by_link_text('Community')[0]\n        # Get the URL\n        comm_url = comm_elem.get_attribute('href')\n        # Visit it\n        print ('Community URL=>',comm_url)\n        driver.get(comm_url)\n        # Assert its title\n        assert driver.title == 'Our Community | Python.org'\n        assert comm_url == 'https://www.python.org/community/'\n```", "```py\n**$ pytest -s selenium_testcase.py** \n\n```", "```py\n\"\"\"\nModule test_palindrome - TDD for palindrome module\n\"\"\"\n\nimport palindrome\n\ndef test_basic():\n    \"\"\" Basic test for palindrome \"\"\"\n\n    # True positives\n    for test in ('Rotator','bob','madam','mAlAyAlam', '1'):\n        assert palindrome.is_palindrome(test)==True\n\n    # True negatives\n    for test in ('xyz','elephant', 'Country'):\n        assert palindrome.is_palindrome(test)==False        \n```", "```py\ndef is_palindrome(in_string):\n    \"\"\" Returns True whether in_string is palindrome, False otherwise \"\"\"\n\n    # Case insensitive\n    in_string = in_string.lower()\n    # Check if string is same as in reverse\n    return in_string == in_string[-1::-1]\n```", "```py\n\"\"\"\nModule test_palindrome - TDD for palindrome module\n\"\"\"\n\nimport palindrome\n\ndef test_basic():\n    \"\"\" Basic test for palindrome \"\"\"\n\n    # True positives\n    for test in ('Rotator','bob','madam','mAlAyAlam', '1'):\n        assert palindrome.is_palindrome(test)==True\n\n    # True negatives\n    for test in ('xyz','elephant', 'Country'):\n        assert palindrome.is_palindrome(test)==False        \n\ndef test_with_spaces():\n    \"\"\" Testing palindrome strings with extra spaces \"\"\"\n\n    # True positives\n    for test in ('Able was I ere I saw Elba',\n                 'Madam Im Adam',\n                 'Step on no pets',\n                 'Top spot'):\n        assert palindrome.is_palindrome(test)==True\n\n    # True negatives\n    for test in ('Top post','Wonderful fool','Wild Imagination'):\n        assert palindrome.is_palindrome(test)==False        \n```", "```py\n\"\"\"\nModule palindrome - Returns whether an input string is palindrome or not\n\"\"\"\n\nimport re\n\ndef is_palindrome(in_string):\n    \"\"\" Returns True whether in_string is palindrome, False otherwise \"\"\"\n\n    # Case insensitive\n    in_string = in_string.lower()\n    # Purge spaces\n    in_string = re.sub('\\s+','', in_string)\n    # Check if string is same as in reverse\n    return in_string == in_string[-1::-1]\n```", "```py\n\"\"\"\nModule test_palindrome - TDD for palindrome module\n\"\"\"\n\nimport palindrome\n\ndef test_basic():\n    \"\"\" Basic test for palindrome \"\"\"\n\n    # True positives\n    for test in ('Rotator','bob','madam','mAlAyAlam', '1'):\n        assert palindrome.is_palindrome(test)==True\n\n    # True negatives\n    for test in ('xyz','elephant', 'Country'):\n        assert palindrome.is_palindrome(test)==False        \n\ndef test_with_spaces():\n    \"\"\" Testing palindrome strings with extra spaces \"\"\"\n\n    # True positives\n    for test in ('Able was I ere I saw Elba',\n                 'Madam Im Adam',\n                 'Step on no pets',\n                 'Top spot'):\n        assert palindrome.is_palindrome(test)==True\n\n    # True negatives\n    for test in ('Top post','Wonderful fool','Wild Imagination'):\n        assert palindrome.is_palindrome(test)==False        \n\ndef test_with_punctuations():\n    \"\"\" Testing palindrome strings with extra punctuations \"\"\"\n\n    # True positives\n    for test in ('Able was I, ere I saw Elba',\n                 \"Madam I'm Adam\",\n                 'Step on no pets.',\n                 'Top spot!'):\n        assert palindrome.is_palindrome(test)==True\n\n    # True negatives\n    for test in ('Top . post','Wonderful-fool','Wild Imagination!!'):\n        assert palindrome.is_palindrome(test)==False            \n```", "```py\n\"\"\"\nModule palindrome - Returns whether an input string is palindrome or not\n\"\"\"\n\nimport re\nfrom string import punctuation\n\ndef is_palindrome(in_string):\n    \"\"\" Returns True whether in_string is palindrome, False otherwise \"\"\"\n\n    # Case insensitive\n    in_string = in_string.lower()\n    # Purge spaces\n    in_string = re.sub('\\s+','', in_string)\n    # Purge all punctuations\n    in_string = re.sub('[' + re.escape(punctuation) + ']+', '', in_string)\n    # Check if string is same as in reverse\n    return in_string == in_string[-1::-1]\n```"]