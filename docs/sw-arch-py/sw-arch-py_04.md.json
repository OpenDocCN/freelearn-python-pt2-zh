["```py\n**$ time <command>**\n\n```", "```py\n    def common_items(seq1, seq2):\n        \"\"\" Find common items between two sequences \"\"\"\n\n        common = []\n        for item in seq1:\n            if item in seq2:\n                common.append(item)\n\n        return common\n    ```", "```py\n    from time import perf_counter as timer_func\n    from contextlib import contextmanager\n\n    @contextmanager\n    def timer():\n        \"\"\" A simple timing function for routines \"\"\"\n\n        try:\n            start = timer_func()\n            yield\n        except Exception as e:\n            print(e)\n            raise\n        finally:\n            end = timer_func()\n            print ('Time spent=>',1000.0*(end \u2013 start),'ms.')\n    ```", "```py\n    def test(n):\n        \"\"\" Generate test data for numerical lists given input size \"\"\"\n\n        a1=random.sample(range(0, 2*n), n)\n        a2=random.sample(range(0, 2*n), n)\n\n        return a1, a2\n    ```", "```py\n    >>> with timer() as t:\n    ... common = common_items(*test(100))\n    ... Time spent=> 2.0268699999999864 ms.\n    ```", "```py\n    def test(n, func):\n        \"\"\" Generate test data and perform test on a given function \"\"\"\n\n        a1=random.sample(range(0, 2*n), n)\n        a2=random.sample(range(0, 2*n), n)\n\n        with timer() as t:\n            result = func(a1, a2)\n    ```", "```py\n    >>> test(100, common_items)\n        Time spent=> 0.6799279999999963 ms.\n    >>> test(200, common_items)\n        Time spent=> 2.7455590000000085 ms.\n    >>> test(400, common_items)\n        Time spent=> 11.440810000000024 ms.\n    >>> test(500, common_items)\n        Time spent=> 16.83928100000001 ms.\n    >>> test(800, common_items)\n        Time spent=> 21.15130400000004 ms.\n    >>> test(1000, common_items)\n        Time spent=> 13.200749999999983 ms.\n    ```", "```py\n    >>> test(800, common_items)\n        Time spent=> 8.328282999999992 ms.\n    >>> test(1000, common_items)\n        Time spent=> 34.85899500000001 ms.\n    ```", "```py\n**$ python3 -m timeit '[x*x for x in range(100)]'**\n**100000 loops, best of 3: 5.5 usec per loop**\n\n**$ python3 -m timeit '[x*x for x in range(1000)]'**\n**10000 loops, best of 3: 56.5 usec per loop**\n\n**$ python3 -m timeit '[x*x for x in range(10000)]'**\n**1000 loops, best of 3: 623 usec per loop**\n\n```", "```py\n>>> 1000000.0*timeit.timeit('[x*x for x in range(100)]', number=100000)/100000.0\n6.007622049946804\n\n>>> 1000000.0*timeit.timeit('[x*x for x in range(1000)]', number=10000)/10000.0\n58.761584300373215\n```", "```py\ndef test():\n    \"\"\" Testing the common_items function \"\"\"\n\n    common = common_items(a1, a2)\n```", "```py\n# Global lists for storing test data\na1, a2 = [], []\n\ndef setup(n):\n    \"\"\" Setup data for test function \"\"\"\n\n    global a1, a2\n    a1=random.sample(range(0, 2*n), n)\n    a2=random.sample(range(0, 2*n), n)\n```", "```py\n>>> t=timeit.Timer('test()', 'from common_items import test,setup; setup(100)')\n>>> 1000000.0*t.timeit(number=10000)/10000\n116.58759460115107\n```", "```py\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(200)')\n>>> 1000000.0*t.timeit(number=10000)/10000\n482.8089299000567\n\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(400)')\n>>> 1000000.0*t.timeit(number=10000)/10000\n1919.577144399227\n\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(800)')\n>>> 1000000.0*t.timeit(number=1000)/1000\n7822.607815993251\n\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(1000)')\n>>> 1000000.0*t.timeit(number=1000)/1000\n12394.932234004957\n```", "```py\nimport matplotlib.pyplot as plt\n\ndef plot(xdata, ydata):\n    \"\"\" Plot a range of ydata (on y-axis) against xdata (on x-axis) \"\"\"\n\n    plt.plot(xdata, ydata)\n    plt.show()\n```", "```py\nThis is our x data.\n>>> xdata = [100, 200, 400, 800, 1000]\nThis is the corresponding y data.\n>>> ydata = [117,483,1920,7823,12395]\n>>> plot(xdata, ydata)\n```", "```py\ndef plot_many(xdata, ydatas):\n    \"\"\" Plot a sequence of ydatas (on y-axis) against xdata (on x-axis) \"\"\"\n\n    for ydata in ydatas:\n        plt.plot(xdata, ydata)\n    plt.show()\n```", "```py\n>>> ydata2=map(lambda x: x*math.log(x, 2), input)\n\n>>> plot_many(xdata, [ydata2, ydata])\n```", "```py\ndef common_items(seq1, seq2):\n    \"\"\" Find common items between two sequences \"\"\"\n\n    common = []\n    for item in seq1:\n        if item in seq2:\n            common.append(item)\n\n    return common\n```", "```py\ndef common_items(seq1, seq2):\n    \"\"\" Find common items between two sequences, version 2.0 \"\"\"\n\n    seq_dict1 = {item:1 for item in seq1}\n\n    for item in seq2:\n        try:\n            seq_dict1[item] += 1\n        except KeyError:\n            pass\n\n    # Common items will have value > 1\n    return [item[0] for item in seq_dict1.items() if item[1]>1]\n```", "```py\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(100)')\n>>> 1000000.0*t.timeit(number=10000)/10000\n35.777671200048644\n\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(200)')\n>>> 1000000.0*t.timeit(number=10000)/10000\n65.20369809877593\n\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(400)')\n>>> 1000000.0*t.timeit(number=10000)/10000\n139.67061050061602\n\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(800)')\n>>> 1000000.0*t.timeit(number=10000)/10000\n287.0645995993982\n\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(1000)')\n>>> 1000000.0*t.timeit(number=10000)/10000\n357.764518300246\n```", "```py\n>>> input=[100,200,400,800,1000]\n>>> ydata=[36,65,140,287,358]\n\n# Note that ydata2 is same as input as we are superimposing with y = x \n# graph\n>>> ydata2=input\n>>> plot.plot_many(xdata, [ydata, ydata2])\n```", "```py\n>>> input=[100,200,400,800,1000]\n>>> ydata=[36,65,140,287,358]\n\n# Adjust ydata2 with the constant factor\n>>> ydata2=map(lambda x: 0.35*x, input)\n>>> plot.plot_many(xdata, [ydata, ydata2])\n```", "```py\ndef test():\n    \"\"\" Testing the common_items function using a given input size \"\"\"\n\n    sleep(0.01)\n    common = common_items(a1, a2)\n```", "```py\n>>> t=timeit.Timer('test()','from common_items import test,setup; setup(100)')\n>>> 1000000.0*t.timeit(number=100)/100\n10545.260819926625\n```", "```py\n>>> from time import process_time\n>>> t=timeit.Timer('test()','from common_items import test,setup;setup(100)', timer=process_time)\n>>> 1000000.0*t.timeit(number=100)/100\n345.22438\n```", "```py\n**>>> t=timeit.Timer('test()','from common_items import test,setup;setup(100)', timer=process_time)**\n**>>> 1000000.0*t.timeit(number=100)/100**\n**369.8039100000002**\n\n```", "```py\nclass Prime(object):\n    \"\"\" A prime number iterator for first 'n' primes \"\"\"\n\n    def __init__(self, n):\n        self.n = n\n        self.count = 0\n        self.value = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        \"\"\" Return next item in iterator \"\"\"\n\n        if self.count == self.n:\n            raise StopIteration(\"end of iteration\")\n        return self.compute()\n\n    def is_prime(self):\n        \"\"\" Whether current value is prime ? \"\"\"\n\n        vroot = int(self.value ** 0.5) + 1\n        for i in range(3, vroot):\n            if self.value % i == 0:\n                return False\n        return True\n\n    def compute(self):\n        \"\"\" Compute next prime \"\"\"\n\n        # Second time, reset value\n        if self.count == 1:\n            self.value = 1\n\n        while True:\n            self.value += 2\n\n            if self.is_prime():\n                self.count += 1\n                break\n\n        return self.value\n```", "```py\n>>> for p in Prime(5):\n... print(p)\n...\n2\n3\n5\n7\n11\n```", "```py\n    def is_prime(self):\n        \"\"\" Whether current value is prime ? \"\"\"\n\n        vroot = int(self.value ** 0.5) + 1\n        for i in range(3, vroot, 2):\n            if self.value % i == 0:\n                return False\n        return True\n```", "```py\n>>> cProfile.run(\"list(primes.Prime(100))\", filename='prime.stats')\n```", "```py\n**$ pip3 install line_profiler**\n\n```", "```py\n    @profile\n    def is_prime(self):\n        \"\"\" Whether current value is prime ? \"\"\"\n\n        vroot = int(self.value ** 0.5) + 1\n        for i in range(3, vroot, 2):\n            if self.value % i == 0:\n                return False\n        return True\n```", "```py\n# Invoke the code.\nif __name__ == \"__main__\":\n    l=list(Prime(1000))\n```", "```py\n**$ kernprof -l -v primes.py**\n\n```", "```py\n**$ pip3 install memory_profiler**\n\n```", "```py\n# mem_profile_example.py\n@profile\ndef squares(n):\n    return [x*x for x in range(1, n+1)]\n\nsquares(1000)\n```", "```py\nsquares(100000)\n```", "```py\n>>> seq1 = [\"capital\",\"wisdom\",\"material\",\"category\",\"wonder\"]\n```", "```py\n>>> seq2 = [\"cap\",\"mat\",\"go\",\"won\",\"to\",\"man\"]\n```", "```py\n>>> sub=[\"cap\",\"mat\",\"go\",\"won\"]\n```", "```py\ndef sub_string_brute(seq1, seq2):\n    \"\"\" Sub-string by brute force \"\"\"\n\n    subs = []\n    for item in seq2:\n        for parent in seq1:\n            if item in parent:\n                subs.append(item)\n\n    return subs\n```", "```py\ndef slices(s, n):\n    return map(''.join, zip(*(s[i:] for i in range(n))))\n\ndef sub_string(seq1, seq2):\n    \"\"\" Return sub-strings from seq2 which are part of strings in seq1 \"\"\"\n\n    # Create all slices of lengths in a given range\n    min_l, max_l = min(map(len, seq2)), max(map(len, seq2))\n    sequences = {}\n\n    for i in range(min_l, max_l+1):\n        for string in seq1:\n\t      # Create all sub sequences of given length i\n         sequences.update({}.fromkeys(slices(string, i)))\n\n    subs = []\n    for item in seq2:\n        if item in sequences:\n            subs.append(item)\n\n    return subs\n```", "```py\nimport random\nimport string\n\nseq1, seq2 = [], []\n\ndef random_strings(n, N):\n     \"\"\" Create N random strings in range of 4..n and append\n     to global sequences seq1, seq2 \"\"\"\n\n    global seq1, seq2\n    for i in range(N):\n        seq1.append(''.join(random.sample(string.ascii_lowercase,\n                             random.randrange(4, n))))\n\n    for i in range(N):\n        seq2.append(''.join(random.sample(string.ascii_lowercase,\n                             random.randrange(2, n/2))))  \n\ndef test(N):\n    random_strings(10, N)\n    subs=sub_string(seq1, seq2)\n\ndef test2():\n    # random_strings has to be called before this\n    subs=sub_string(seq1, seq2)\n```", "```py\n>>> t=timeit.Timer('test2()',setup='from sub_string import test2, random_\nstrings;random_strings(10, 100)')\n>>> 1000000*t.timeit(number=10000)/10000.0\n1081.6103347984608\n>>> t=timeit.Timer('test2()',setup='from sub_string import test2, random_\nstrings;random_strings(10, 1000)')\n>>> 1000000*t.timeit(number=1000)/1000.0\n11974.320339999394\n>>> t=timeit.Timer('test2()',setup='from sub_string import test2, random_\nstrings;random_strings(10, 10000)')\n>>> 1000000*t.timeit(number=100)/100.0124718.30968977883\n124718.30968977883\n>>> t=timeit.Timer('test2()',setup='from sub_string import test2, random_\nstrings;random_strings(10, 100000)')\n>>> 1000000*t.timeit(number=100)/100.0\n1261111.164370086\n```", "```py\n@profile\ndef sub_string(seq1, seq2):\n    \"\"\" Return sub-strings from seq2 which are part of strings in seq1 \"\"\"\n\n    # Create all slices of lengths in a given range\n    min_l, max_l = min(map(len, seq2)), max(map(len, seq2))\n    sequences = {}\n\n    for i in range(min_l, max_l+1):\n        for string in seq1:\n            sequences.update({}.fromkeys(slices(string, i)))\n\n    subs = []\n    for item in seq2:\n        if item in sequences:\n            subs.append(item)\n```", "```py\ndef test(N):\n    random_strings(10, N)\n    subs = sub_string(seq1, seq2)\n```", "```py\n**$ pip3 install objgraph**\n\n```", "```py\n**$ sudo apt install graphviz xdot -y**\n\n```", "```py\nimport objgraph\n\nclass MyRefClass(object):\n    pass\n\nref=MyRefClass()\nclass C(object):pass\n\nc_objects=[]\nfor i in range(100):\n    c=C()\n    c.ref=ref\n    c_objects.append(c)\n\nimport pdb; pdb.set_trace()\n```", "```py\n**$ python3 objgraph_example.py**\n**--Return--**\n**[0] > /home/user/programs/chap4/objgraph_example.py(15)<module>()->None**\n**-> import pdb; pdb.set_trace()**\n**(Pdb++) objgraph.show_backrefs(ref, max_depth=2, too_many=2, filename='refs.png')**\n**Graph written to /tmp/objgraph-xxhaqwxl.dot (6 nodes)**\n**Image generated as refs.png**\n\n```", "```py\n**$ pip3 install pympler**\n\n```", "```py\nfrom pympler import asizeof\n\ndef sub_string(seq1, seq2):\n    \"\"\" Return sub-strings from seq2 which are part of strings in seq1 \"\"\"\n\n    # Create all slices of lengths in a given range\n    min_l, max_l = min(map(len, seq2)), max(map(len, seq2))\n    sequences = {}\n\n    for i in range(min_l, max_l+1):\n        for string in seq1:\n            sequences.update({}.fromkeys(slices(string, i)))\n\n    subs = []\n    for item in seq2:\n        if item in sequences:\n            subs.append(item)\n    print('Memory usage',asizeof.asized(sequences).format())\n\n    return subs\n```", "```py\n**$ python3 sub_string.py**\n**Memory usage {'awg': None, 'qlbo': None, 'gvap': No....te':** \n **None, 'luwr':**\n **None, 'ipat': None}** \n**size=5874384** \n**flat=3145824**\n\n```", "```py\nif __name__ == \"__main__\":\n    from pympler import summary\n    from pympler import muppy\n    test(10000)\n    all_objects = muppy.get_objects()\n    sum1 = summary.summarize(all_objects)\n    summary.print_(sum1)\n```", "```py\ndef rotate_seq1(seq1, n):\n    \"\"\" Rotate a list left by n \"\"\"\n    # E.g: rotate([1,2,3,4,5], 2) => [4,5,1,2,3]\n\n    k = len(seq1) - n\n    return seq1[k:] + seq1[:k]\n\ndef rotate_seq2(seq1, n):\n    \"\"\" Rotate a list left by n using deque \"\"\"\n\n    d = deque(seq1)\n    d.rotate(n)\n    return d\n```", "```py\ncounts = {}\nfor word in text.split():\n    word = word.lower().strip()\n    try:\n        counts[word] += 1\n    except KeyError:\n        counts[word] = 1\n```", "```py\ncities = ['Jakarta','Delhi','Newyork','Bonn','Kolkata','Bangalore','Seoul']\ncities_len = {}\nfor city in cities:\n  clen = len(city)\n  # First create entry\n  if clen not in cities_len:\n    cities_len[clen] = []\n  cities_len[clen].append(city)\n```", "```py\n0 \u2192 default value for integers\n[] \u2192 default value for lists\n'' \u2192 default value for strings\n{} \u2192 default value for dictionaries\n```", "```py\ncounts = defautldict(int)\nfor word in text.split():\n    word = word.lower().strip()\n    # Value is set to 0 and incremented by 1 in one go\n    counts[word] += 1\n```", "```py\ncities = ['Jakarta','Delhi','Newyork','Bonn','Kolkata','Bangalore','Seoul']\ncities_len = defaultdict(list)\nfor city in cities:\n    # Empty list is created as value and appended to in one go\n    cities_len[len(city)].append(city)\n```", "```py\n>>> cities = ['Jakarta','Delhi','Newyork','Bonn','Kolkata','Bangalore','Seoul']\n>>> cities_dict = dict.fromkeys(cities)\n>>> cities_dict\n{'Kolkata': None, 'Newyork': None, 'Seoul': None, 'Jakarta': None, 'Delhi': None, 'Bonn': None, 'Bangalore': None}\n\n# Ordered dictionary\n>>> cities_odict = OrderedDict.fromkeys(cities)\n>>> cities_odict\nOrderedDict([('Jakarta', None), ('Delhi', None), ('Newyork', None), ('Bonn', None), ('Kolkata', None), ('Bangalore', None), ('Seoul', None)])\n>>> cities_odict.popitem()\n('Seoul', None)\n>>> cities_odict.popitem(last=False)\n('Jakarta', None)\n```", "```py\n>>> cities = ['Jakarta','Delhi','Newyork','Bonn','Kolkata','Bangalore','Bonn','Seoul','Delhi','Jakarta','Mumbai']\n>>> cities_odict = OrderedDict.fromkeys(cities)\n>>> print(cities_odict.keys())\nodict_keys(['Jakarta', 'Delhi', 'Newyork', 'Bonn', 'Kolkata', 'Bangalore', 'Seoul', 'Mumbai'])\n```", "```py\nclass LRU(OrderedDict):\n    \"\"\" Least recently used cache dictionary \"\"\"\n\n    def __init__(self, size=10):\n        self.size = size\n\n    def set(self, key):\n        # If key is there delete and reinsert so\n        # it moves to end.\n        if key in self:\n            del self[key]\n\n        self[key] = 1\n        if len(self)>self.size:\n            # Pop from left\n            self.popitem(last=False)\n```", "```py\n>>> d=LRU(size=5)\n>>> d.set('bangalore')\n>>> d.set('chennai')\n>>> d.set('mumbai')\n>>> d.set('bangalore')\n>>> d.set('kolkata')\n>>> d.set('delhi')\n>>> d.set('chennai')\n\n>>> len(d)\n5\n>>> d.set('kochi')\n>>> d\nLRU([('bangalore', 1), ('chennai', 1), ('kolkata', 1), ('delhi', 1), ('kochi', 1)])\n```", "```py\n    import requests, operator\n        text=requests.get('https://www.gutenberg.org/files/2852/2852-0.txt').text\n        freq=defaultdict(int)\n        for word in text.split():\n            if len(word.strip())==0: continue\n            freq[word.lower()] += 1\n            print(sorted(freq.items(), key=operator.itemgetter(1), reverse=True) [:10])\n    ```", "```py\n    import requests\n    text = requests.get('https://www.gutenberg.org/files/2852/2852-0.txt').text\n    freq = Counter(filter(None, map(lambda x:x.lower().strip(), text.split())))\n    print(freq.most_common(10))\n    ```", "```py\n    >>> d1={i:i for i in range(100)}\n    >>> d2={i:i*i for i in range(100) if i%2}\n    >>> c=ChainMap(d1,d2)\n    # Older value accessible via chainmap\n    >>> c[5]\n    5\n    >>> c.maps[0][5]\n    5\n    # Update d1\n    >>> d1.update(d2)\n    # Older values also got updated\n    >>> c[5]\n    25\n    >>> c.maps[0][5]\n    25\n    ```", "```py\n>>> Employee = namedtuple('Employee', 'name, age, gender, title, department')\n>>> Employee\n<class '__main__.Employee'>\n```", "```py\n>>> jack = Employee('Jack',25,'M','Programmer','Engineering')\n>>> print(jack)\nEmployee(name='Jack', age=25, gender='M', title='Programmer', department='Engineering')\n```", "```py\n>>> for field in jack:\n... print(field)\n...\nJack\n25\nM\nProgrammer\nEngineering\n```", "```py\n>>> jack.age=32\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: can't set attribute\n```", "```py\n>>> jack._replace(age=32)\nEmployee(name='Jack', age=32, gender='M', title='Programmer', department='Engineering')\n```", "```py\n    employees = map(Employee._make, csv.reader(open('employees.csv'))\n    ```", "```py\n**$ pip install pybloom**\n\n```", "```py\n# bloom_example.py\nfrom pybloom import BloomFilter\nimport requests\n\nf=BloomFilter(capacity=100000, error_rate=0.01)\ntext=requests.get('https://www.gutenberg.org/files/2852/2852-0.txt').text\n\nfor word in text.split():\n    word = word.lower().strip()\n    f.add(word)\n\nprint len(f)\nprint len(text.split())\nfor w in ('holmes','watson','hound','moor','queen'):\n    print 'Found',w,w in f\n```", "```py\n**$ python bloomtest.py**\n**9403**\n**62154**\n**Found holmes True**\n**Found watson True**\n**Found moor True**\n**Found queen False**\n\n```", "```py\n# counter_hound.py\nimport requests\nfrom collections import Counter\n\n@profile\ndef hound():\n    text=requests.get('https://www.gutenberg.org/files/2852/2852-0.txt').text\n    c = Counter()\n    words = [word.lower().strip() for word in text.split()]\n    c.update(words)\n\nif __name__ == \"__main__\":\n    hound()\n```", "```py\n# bloom_hound.py\nfrom pybloom import BloomFilter\nimport requests\n\n@profile\ndef hound():\n    f=BloomFilter(capacity=100000, error_rate=0.01)\n    text=requests.get('https://www.gutenberg.org/files/2852/2852-0.txt').text\n\n    for word in text.split():\n        word = word.lower().strip()\n        f.add(word)\n\nif __name__ == \"__main__\":\n    hound()\n```"]