["```py\n# hash_stream.py\nfrom hashlib import md5\n\ndef hash_stream(stream, chunk_size=4096):\n    \"\"\" Hash a stream of data using md5 \"\"\"\n\n    shash = md5()\n\n    for chunk in iter(lambda: stream.read(chunk_size), ''):\n        shash.update(chunk)\n\n    return shash.hexdigest()\n```", "```py\n**>>> import hash_stream**\n**>>> hash_stream.hash_stream(open('hash_stream.py'))**\n**'e51e8ddf511d64aeb460ef12a43ce480'**\n\n```", "```py\n# hash_stream.py\nfrom hashlib import sha1\nfrom hashlib import md5\n\ndef hash_stream_sha1(stream, chunk_size=4096):\n    \"\"\" Hash a stream of data using sha1 \"\"\"\n\n    shash = sha1()\n\n    for chunk in iter(lambda: stream.read(chunk_size), ''):\n        shash.update(chunk.encode('utf-8'))\n\n    return shash.hexdigest()\n\ndef hash_stream_md5(stream, chunk_size=4096):\n    \"\"\" Hash a stream of data using md5 \"\"\"\n\n    shash = md5()\n\n    for chunk in iter(lambda: stream.read(chunk_size), ''):\n        shash.update(chunk.encode('utf-8'))\n\n    return shash.hexdigest()\n```", "```py\n**>>> import hash_stream**\n**>>> hash_stream.hash_stream_md5(open('hash_stream.py'))**\n**'e752a82db93e145fcb315277f3045f8d'**\n**>>> hash_stream.hash_stream_sha1(open('hash_stream.py'))**\n**'360e3bd56f788ee1a2d8c7eeb3e2a5a34cca1710'**\n\n```", "```py\n# hasher.py\nclass StreamHasher(object):\n    \"\"\" Stream hasher class with configurable algorithm \"\"\"\n\n    def __init__(self, algorithm, chunk_size=4096):\n        self.chunk_size = chunk_size\n        self.hash = algorithm()\n\n    def get_hash(self, stream):\n\n        for chunk in iter(lambda: stream.read(self.chunk_size), ''):\n            self.hash.update(chunk.encode('utf-8'))\n\n        return self.hash.hexdigest()  \n```", "```py\n**>>> import hasher**\n**>>> from hashlib import md5**\n**>>> md5h = hasher.StreamHasher(algorithm=md5)**\n**>>> md5h.get_hash(open('hasher.py'))**\n**'7d89cdc1f11ec62ec918e0c6e5ea550d'**\n\n```", "```py\n**>>> from hashlib import sha1**\n**>>> shah_h = hasher.StreamHasher(algorithm=sha1)**\n**>>> shah_h.get_hash(open('hasher.py'))**\n**'1f0976e070b3320b60819c6aef5bd6b0486389dd'**\n\n```", "```py\n# hasher.py\nclass StreamHasher(object):\n    \"\"\" Stream hasher class with configurable algorithm \"\"\"\n\n    def __init__(self, algorithm, chunk_size=4096):\n        self.chunk_size = chunk_size\n        self.hash = algorithm()\n\n    def __call__(self, stream):\n\n        for chunk in iter(lambda: stream.read(self.chunk_size), ''):\n            self.hash.update(chunk.encode('utf-8'))\n\n        return self.hash.hexdigest() \n```", "```py\n**>>> from hashlib import md5, sha1**\n**>>> md5_h = hasher.StreamHasher(md5)**\n**>>> md5_h(open('hasher.py'))**\n**'ad5d5673a3c9a4f421240c4dbc139b22'**\n**>>> sha_h = hasher.StreamHasher(sha1)**\n**>>> sha_h(open('hasher.py'))**\n**'d174e2fae1d6e1605146ca9d7ca6ee927a74d6f2'**\n\n```", "```py\n    # singleton.py\n    class Singleton(object):\n        \"\"\" Singleton in Python \"\"\"\n\n        _instance = None\n\n        def __new__(cls):\n            if cls._instance == None:\n                cls._instance = object.__new__(cls)\n            return cls._instance\n    ```", "```py\n    **>>> from singleton import Singleton**\n    **>>> s1 = Singleton()**\n    **>>> s2 = Singleton()**\n    **>>> s1==s2**\n    **True**\n\n    ```", "```py\n    def test_single(cls):\n        \"\"\" Test if passed class is a singleton \"\"\"\n        return cls() == cls()\n    ```", "```py\n    class SingletonA(Singleton):\n        pass\n\n    >>> test_single(SingletonA)\n    True\n    ```", "```py\nclass MetaSingleton(type):\n    \"\"\" A type for Singleton classes (overrides __call__) \"\"\"    \n\n    def __init__(cls, *args):\n        print(cls,\"__init__ method called with args\", args)\n        type.__init__(cls, *args)\n        cls.instance = None\n\n    def __call__(cls, *args, **kwargs):\n        if not cls.instance:\n            print(cls,\"creating instance\", args, kwargs)\n            cls.instance = type.__call__(cls, *args, **kwargs)\n        return cls.instance\n\nclass SingletonM(metaclass=MetaSingleton):\n    pass\n```", "```py\n>>> from singleton import *\n<class 'singleton.SingletonM'> __init__ method called with args ('SingletonM', (), {'__module__': 'singleton', '__qualname__': 'SingletonM'})\n>>> test_single(SingletonM)\n<class 'singleton.SingletonM'> creating instance ()\nTrue\n```", "```py\nclass Borg(object):\n    \"\"\" I ain't a Singleton \"\"\"\n\n    __shared_state = {}\n    def __init__(self):\n        self.__dict__ = self.__shared_state\n```", "```py\nclass IBorg(Borg):\n    \"\"\" I am a Borg \"\"\"\n\n    def __init__(self):\n        Borg.__init__(self)\n        self.state = 'init'\n\n    def __str__(self):\n        return self.state\n\n>>> i1 = IBorg()\n>>> i2 = IBorg()\n>>> print(i1)\ninit\n>>> print(i2)\ninit\n>>> i1.state='running'\n>>> print(i2)\nrunning\n>>> print(i1)\nrunning\n>>> i1==i2\nFalse\n```", "```py\n>>> i1.x='test'\n>>> i2.x\n'test'\n```", "```py\n>>> class SingletonA(Singleton): pass\n... \n>>> class SingletonB(Singleton): pass\n... \n```", "```py\n>>> class SingletonA1(SingletonA): pass\n...\n```", "```py\n>>> a = SingletonA()\n>>> a1 = SingletonA1()\n>>> b = SingletonB()\n```", "```py\n>>> a.x = 100\n>>> print(a.x)\n100\n```", "```py\n>>> a1.x\n100\n```", "```py\n>>> b.x\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'SingletonB' object has no attribute 'x'\n```", "```py\n>>> class ABorg(Borg):pass\n... \n>>> class BBorg(Borg):pass\n... \n>>> class A1Borg(ABorg):pass\n... \n>>> a = ABorg()\n>>> a1 = A1Borg()\n>>> b = BBorg()\n```", "```py\n>>> a.x = 100\n>>> a.x\n100\n>>> a1.x\n100\n```", "```py\n>>> b.x\n100\n```", "```py\nfrom abc import ABCMeta, abstractmethod\n\nclass Employee(metaclass=ABCMeta):\n    \"\"\" An Employee class \"\"\"\n\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    @abstractmethod\n    def get_role(self):\n        pass\n\n    def __str__(self):\n        return \"{} - {}, {} years old {}\".format(self.__class__.__name__,\n                                                 self.name,\n                                                 self.age,\n                                                 self.gender)\n\nclass Engineer(Employee):\n    \"\"\" An Engineer Employee \"\"\"\n\n    def get_role(self):\n        return \"engineering\"\n\nclass Accountant(Employee):\n    \"\"\" An Accountant Employee \"\"\"\n\n    def get_role(self):\n        return \"accountant\" \n\nclass Admin(Employee):\n    \"\"\" An Admin Employee \"\"\"\n\n    def get_role(self):\n        return \"administration\"\n```", "```py\nclass EmployeeFactory(object):\n    \"\"\" An Employee factory class \"\"\"\n\n    @classmethod\n    def create(cls, name, *args):\n        \"\"\" Factory method for creating an Employee instance \"\"\"\n\n        name = name.lower().strip()\n\n        if name == 'engineer':\n            return Engineer(*args)\n        elif name == 'accountant':\n            return Accountant(*args)\n        elif name == 'admin':\n            return Admin(*args)\n```", "```py\n>>> factory = EmployeeFactory()\n>>> print(factory.create('engineer','Sam',25,'M'))\nEngineer - Sam, 25 years old M\n>>> print(factory.create('engineer','Tracy',28,'F'))\nEngineer - Tracy, 28 years old F\n\n>>> accountant = factory.create('accountant','Hema',39,'F')\n>>> print(accountant)\n\nAccountant - Hema, 39 years old F\n>>> accountant.get_role()\n\naccounting\n>>> admin = factory.create('Admin','Supritha',32,'F')\n>>> admin.get_role()\n'administration'\n```", "```py\n        >>> print(EmployeeFactory.create('engineer','Vishal',24,'M'))\n        Engineer - Vishal, 24 years old M\n    ```", "```py\nimport copy\n\nclass Prototype(object):\n    \"\"\" A prototype base class \"\"\"\n\n    def clone(self):\n        \"\"\" Return a clone of self \"\"\"\n        return copy.deepcopy(self)\n```", "```py\nclass Register(Prototype):\n    \"\"\" A student Register class  \"\"\"\n\n    def __init__(self, names=[]):\n        self.names = names\n\n>>> r1=Register(names=['amy','stu','jack'])\n>>> r2=r1.clone()\n>>> print(r1)\n<prototype.Register object at 0x7f42894e0128>\n>>> print(r2)\n<prototype.Register object at 0x7f428b7b89b0>\n\n>>> r2.__class__\n<class 'prototype.Register'>\n```", "```py\nclass SPrototype(object):\n    \"\"\" A prototype base class using shallow copy \"\"\"\n\n    def clone(self):\n        \"\"\" Return a clone of self \"\"\"\n        return copy.copy(self)\n```", "```py\nclass SRegister(SPrototype):\n    \"\"\" Sub-class of SPrototype \"\"\"\n\n    def __init__(self, names=[]):\n        self.names = names\n\n>>> r1=SRegister(names=['amy','stu','jack'])\n>>> r2=r1.clone()\n```", "```py\n>>> r1.names.append('bob')\n```", "```py\n>>> r2.names\n['amy', 'stu', 'jack', 'bob']\n```", "```py\n>>> r1.names is r2.names\nTrue\n```", "```py\nimport copy\n\nclass MetaPrototype(type):\n\n    \"\"\" A metaclass for Prototypes \"\"\"\n\n    def __init__(cls, *args):\n        type.__init__(cls, *args)\n        cls.clone = lambda self: copy.deepcopy(self) \n\nclass PrototypeM(metaclass=MetaPrototype):\n    pass\n```", "```py\nclass ItemCollection(PrototypeM):\n    \"\"\" An item collection class \"\"\"\n\n    def __init__(self, items=[]):\n        self.items = items\n```", "```py\n>>> i1=ItemCollection(items=['apples','grapes','oranges'])\n>>> i1\n<prototype.ItemCollection object at 0x7fd4ba6d3da0>\n```", "```py\n>>> i2 = i1.clone()\n```", "```py\n>>> i2\n<prototype.ItemCollection object at 0x7fd4ba6aceb8>\n```", "```py\n>>> i2.items is i1.items\nFalse\n```", "```py\nclass MetaSingletonPrototype(type):\n    \"\"\" A metaclass for Singleton & Prototype patterns \"\"\"\n\n    def __init__(cls, *args):\n        print(cls,\"__init__ method called with args\", args)\n        type.__init__(cls, *args)\n        cls.instance = None\n        cls.clone = lambda self: copy.deepcopy(cls.instance)\n\n    def __call__(cls, *args, **kwargs):\n        if not cls.instance:\n            print(cls,\"creating prototypical instance\", args, kwargs)\n            cls.instance = type.__call__(cls,*args, **kwargs)\n        return cls.instance\n```", "```py\nclass PrototypeM(metaclass=MetaSingletonPrototype):\n    pass\n```", "```py\n>>> i1=ItemCollection(items=['apples','grapes','oranges'])\n<class 'prototype.ItemCollection'> creating prototypical instance () {'items': ['apples'\n, 'grapes', 'oranges']}\n>>> i1\n<prototype.ItemCollection object at 0x7fbfc033b048>\n>>> i2=i1.clone()\n```", "```py\n>>> i2\n<prototype.ItemCollection object at 0x7fbfc033b080>\n>>> i2.items is i1.items\nFalse\n```", "```py\n>>> i3=ItemCollection(items=['apples','grapes','mangoes'])\n>>> i3 is i1\nTrue\n```", "```py\nclass PrototypeFactory(Borg):\n    \"\"\" A Prototype factory/registry class \"\"\"\n\n    def __init__(self):\n        \"\"\" Initializer \"\"\"\n\n        self._registry = {}\n\n    def register(self, instance):\n        \"\"\" Register a given instance \"\"\"\n\n        self._registry[instance.__class__] = instance\n\n    def clone(self, klass):\n        \"\"\"  Return cloned instance of given class \"\"\"\n\n        instance = self._registry.get(klass)\n        if instance == None:\n            print('Error:',klass,'not registered')\n        else:\n            return instance.clone()\n```", "```py\nclass Name(SPrototype):\n    \"\"\" A class representing a person's name \"\"\"\n\n    def __init__(self, first, second):\n        self.first = first\n        self.second = second\n\n    def __str__(self):\n        return ' '.join((self.first, self.second))\n\nclass Animal(SPrototype):\n    \"\"\" A class representing an animal \"\"\"\n\n    def __init__(self, name, type='Wild'):\n        self.name = name\n        self.type = type\n\n    def __str__(self):\n        return ' '.join((str(self.type), self.name))\n```", "```py\n>>> name = Name('Bill', 'Bryson')\n>>> animal = Animal('Elephant')\n>>> print(name)\nBill Bryson\n>>> print(animal)\nWild Elephant\n```", "```py\n>>> factory = PrototypeFactory()\n```", "```py\n>>> factory.register(animal)\n>>> factory.register(name)\n```", "```py\n>>> factory.clone(Name)\n<prototype.Name object at 0x7ffb552f9c50>\n\n>> factory.clone(Animal)\n<prototype.Animal object at 0x7ffb55321a58>\n```", "```py\n>>> class C(object): pass\n... \n>>> factory.clone(C)\nError: <class '__main__.C'> not registered\n```", "```py\nclass Room(object):\n    \"\"\" A class representing a Room in a house \"\"\"\n\n    def __init__(self, nwindows=2, doors=1, direction='S'):\n        self.nwindows = nwindows\n        self.doors = doors\n        self.direction = direction\n\n    def __str__(self):\n        return \"Room <facing:%s, windows=#%d>\" % (self.direction,\n                                                  self.nwindows)\nclass Porch(object):\n    \"\"\" A class representing a Porch in a house \"\"\"\n\n    def __init__(self, ndoors=2, direction='W'):\n        self.ndoors = ndoors\n        self.direction = direction\n\n    def __str__(self):\n        return \"Porch <facing:%s, doors=#%d>\" % (self.direction,\n                                                 self.ndoors)   \n\nclass LegoHouse(object):\n    \"\"\" A lego house class \"\"\"\n\n    def __init__(self, nrooms=0, nwindows=0,nporches=0):\n        # windows per room\n        self.nwindows = nwindows\n        self.nporches = nporches\n        self.nrooms = nrooms\n        self.rooms = []\n        self.porches = []\n\n    def __str__(self):\n        msg=\"LegoHouse<rooms=#%d, porches=#%d>\" % (self.nrooms,\n                                                   self.nporches)\n\n        for i in self.rooms:\n            msg += str(i)\n\n        for i in self.porches:\n            msg += str(i)\n\n        return msg\n\n    def add_room(self,room):\n        \"\"\" Add a room to the house \"\"\"\n\n        self.rooms.append(room)\n\n    def add_porch(self,porch):\n        \"\"\" Add a porch to the house \"\"\"\n\n        self.porches.append(porch)\n```", "```py\n>>> house = LegoHouse(nrooms=1,nporches=1)\n>>> print(house)\nLegoHouse<rooms=#1, porches=#1>\n```", "```py\n>>> room = Room(nwindows=1)\n>>> house.add_room(room)\n>>> porch = Porch()\n>>> house.add_porch(porch)\n>>> print(house)\nLegoHouse<rooms=#1, porches=#1>\nRoom <facing:S, windows=#1>\nPorch <facing:W, doors=#1>\n```", "```py\nclass LegoHouseBuilder(object):\n    \"\"\" Lego house builder class \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        self.house = LegoHouse(*args, **kwargs)\n\n    def build(self):\n        \"\"\" Build a lego house instance and return it \"\"\"\n\n        self.build_rooms()\n        self.build_porches()\n        return self.house\n\n    def build_rooms(self):\n        \"\"\" Method to build rooms \"\"\"\n\n        for i in range(self.house.nrooms):\n            room = Room(self.house.nwindows)\n            self.house.add_room(room)\n\n    def build_porches(self):\n        \"\"\" Method to build porches \"\"\"     \n\n        for i in range(self.house.nporches):\n            porch = Porch(1)\n            self.house.add_porch(porch)\n```", "```py\n>>> builder=LegoHouseBuilder(nrooms=2,nporches=1,nwindows=1)\n>>> print(builder.build())\nLegoHouse<rooms=#2, porches=#1>\nRoom <facing:S, windows=#1>\nRoom <facing:S, windows=#1>\nPorch <facing:W, doors=#1>\n```", "```py\n>>> builder=LegoHouseBuilder(nrooms=2,nporches=1,nwindows=2)\n>>> print(builder.build())\nLegoHouse<rooms=#2, porches=#1>\nRoom <facing:S, windows=#2>\nRoom <facing:S, windows=#2>\nPorch <facing:W, doors=#1>\n```", "```py\nclass SmallLegoHouseBuilder(LegoHouseBuilder):\n\"\"\" Builder sub-class building small lego house with 1 room and 1porch and rooms having 2 windows \"\"\"\n\n    def __init__(self):\n        self.house = LegoHouse(nrooms=2, nporches=1, nwindows=2)        \n```", "```py\n>>> small_house=SmallLegoHouseBuilder().build()\n>>> print(small_house)\nLegoHouse<rooms=#2, porches=#1>\nRoom <facing:S, windows=#2>\nRoom <facing:S, windows=#2>\nPorch <facing:W, doors=#1>\n```", "```py\n>>> houses=list(map(lambda x: SmallLegoHouseBuilder().build(), range(100)))\n>>> print(houses[0])\nLegoHouse<rooms=#2, porches=#1>\nRoom <facing:S, windows=#2>\nRoom <facing:S, windows=#2>\nPorch <facing:W, doors=#1>\n\n>>> len(houses)\n100\n```", "```py\nclass NorthFacingHouseBuilder(LegoHouseBuilder):\n    \"\"\" Builder building all rooms and porches facing North \"\"\"\n\n    def build_rooms(self):\n\n        for i in range(self.house.nrooms):\n            room = Room(self.house.nwindows, direction='N')\n            self.house.add_room(room)\n\n    def build_porches(self):\n\n        for i in range(self.house.nporches):\n            porch = Porch(1, direction='N')\n            self.house.add_porch(porch)\n\n>>> print(NorthFacingHouseBuilder(nrooms=2, nporches=1, nwindows=1).build())\nLegoHouse<rooms=#2, porches=#1>\nRoom <facing:N, windows=#1>\nRoom <facing:N, windows=#1>\nPorch <facing:N, doors=#1>\n```", "```py\nclass NorthFacingSmallHouseBuilder(NorthFacingHouseBuilder, SmallLegoHouseBuilder):\n    pass\n```", "```py\n>>> print(NorthFacingSmallHouseBuilder().build())\nLegoHouse<rooms=#2, porches=#1>\nRoom <facing:N, windows=#2>\nRoom <facing:N, windows=#2>\nPorch <facing:N, doors=#1>\n```", "```py\n>>> fruits=[('apples',2), ('grapes',40)]\n```", "```py\n>>> fruits_d=dict(fruits)\n>>> fruits_d['apples']\n2\n```", "```py\nclass Polygon(object):\n    \"\"\" A polygon class \"\"\"\n\n    def __init__(self, *sides):\n        \"\"\" Initializer - accepts length of sides \"\"\"\n        self.sides = sides\n\n    def perimeter(self):\n        \"\"\" Return perimeter \"\"\"\n\n        return sum(self.sides)\n\n    def is_valid(self):\n        \"\"\" Is this a valid polygon \"\"\"\n\n        # Do some complex stuff - not implemented in base class\n        raise NotImplementedError\n\n    def is_regular(self):\n        \"\"\" Is a regular polygon ? \"\"\"\n\n        # True: if all sides are equal\n        side = self.sides[0]\n        return all([x==side for x in self.sides[1:]])\n\n    def area(self):\n        \"\"\" Calculate and return area \"\"\"\n\n        # Not implemented in base class\n        raise NotImplementedError\n```", "```py\nimport itertools \n\nclass InvalidPolygonError(Exception):\n    pass\n\nclass Triangle(Polygon):\n    \"\"\" Triangle class from Polygon using class adapter \"\"\"\n\n    def is_equilateral(self):\n        \"\"\" Is this an equilateral triangle ? \"\"\"\n\n        if self.is_valid():\n            return super(Triangle, self).is_regular()\n\n    def is_isosceles(self):\n        \"\"\" Is the triangle isosceles \"\"\"\n\n        if self.is_valid():\n            # Check if any 2 sides are equal\n            for a,b in itertools.combinations(self.sides, 2):\n                if a == b:\n                    return True\n        return False\n\n    def area(self):\n        \"\"\" Calculate area \"\"\"\n\n        # Using Heron's formula\n        p = self.perimeter()/2.0\n        total = p\n        for side in self.sides:\n            total *= abs(p-side)\n\n        return pow(total, 0.5)\n\n    def is_valid(self):\n        \"\"\" Is the triangle valid \"\"\"\n\n        # Sum of 2 sides should be > 3rd side\n        perimeter = self.perimeter()\n        for side in self.sides:\n            sum_two = perimeter - side\n            if sum_two <= side:\n                raise InvalidPolygonError(str(self.__class__) + \"is invalid!\")\n\n        return True\n```", "```py\nclass Rectangle(Polygon):\n    \"\"\" Rectangle class from Polygon using class adapter \"\"\"\n\n    def is_square(self):\n        \"\"\" Return if I am a square \"\"\"\n\n        if self.is_valid():\n            # Defaults to is_regular\n            return self.is_regular()\n\n    def is_valid(self):\n        \"\"\" Is the rectangle valid \"\"\"\n\n        # Should have 4 sides\n        if len(self.sides) != 4:\n            return False\n\n        # Opposite sides should be same\n        for a,b in [(0,2),(1,3)]:\n            if self.sides[a] != self.sides[b]:\n                return False\n\n        return True\n\n    def area(self):\n        \"\"\" Return area of rectangle \"\"\"\n\n        # Length x breadth\n        if self.is_valid():\n            return self.sides[0]*self.sides[1]\n```", "```py\n>>> t1 = Triangle(20,20,20)\n>>> t1.is_valid()\nTrue\n```", "```py\n>>> t1.is_equilateral()\nTrue\n>>> t1.is_isosceles()\nTrue\n```", "```py\n>>> t1.area()\n173.20508075688772\n```", "```py\n>>> t2 = Triangle(10, 20, 30)\n>>> t2.is_valid()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/anand/Documents/ArchitectureBook/code/chap7/adapter.py\", line 75, in is_valid\n    raise InvalidPolygonError(str(self.__class__) + \"is invalid!\")\nadapter.InvalidPolygonError: <class 'adapter.Triangle'>is invalid!\n```", "```py\n>>> r1 = Rectangle(10,20,10,20)\n>>> r1.is_valid()\nTrue\n>>> r1.area()\n200\n>>> r1.is_square()\nFalse\n>>> r1.perimeter()\n60\n```", "```py\n>>> r2 = Rectangle(10,10,10,10)\n>>> r2.is_square()\nTrue\n```", "```py\nimport itertools\n\nclass Triangle (object) :\n    \"\"\" Triangle class from Polygon using class adapter \"\"\"\n\n    def __init__(self, *sides):\n        # Compose a polygon\n        self.polygon = Polygon(*sides)\n\n    def perimeter(self):\n        return self.polygon.perimeter()\n\n    def is_valid(f):\n        \"\"\" Is the triangle valid \"\"\"\n\n        def inner(self, *args):\n            # Sum of 2 sides should be > 3rd side\n            perimeter = self.polygon.perimeter()\n            sides = self.polygon.sides\n\n            for side in sides:\n                sum_two = perimeter - side\n                if sum_two <= side:\n                    raise InvalidPolygonError(str(self.__class__) + \"is invalid!\")\n\n            result = f(self, *args)\n            return result\n\n        return inner\n\n    @is_valid\n    def is_equilateral(self):\n        \"\"\" Is this equilateral triangle ? \"\"\"\n\n        return self.polygon.is_regular()\n\n    @is_valid\n    def is_isosceles(self):\n        \"\"\" Is the triangle isoscles \"\"\"\n\n        # Check if any 2 sides are equal\n        for a,b in itertools.combinations(self.polygon.sides, 2):\n            if a == b:\n                return True\n        return False\n\n    def area(self):\n        \"\"\" Calculate area \"\"\"\n\n        # Using Heron's formula\n        p = self.polygon.perimeter()/2.0\n        total = p\n        for side in self.polygon.sides:\n            total *= abs(p-side)\n\n        return pow(total, 0.5)\n```", "```py\n>>> t1=Triangle(2,2,2)\n>>> t1.is_equilateral()\nTrue\n>>> t2 = Triangle(4,4,5)\n>>> t2.is_equilateral()\nFalse\n>>> t2.is_isosceles()\nTrue\n```", "```py\nclass Rectangle(object):\n    \"\"\" Rectangle class from Polygon using object adapter \"\"\"\n\n    method_mapper = {'is_square': 'is_regular'}\n\n    def __init__(self, *sides):\n        # Compose a polygon\n        self.polygon = Polygon(*sides)\n\n    def is_valid(f):\n        def inner(self, *args):\n            \"\"\" Is the rectangle valid \"\"\"\n\n            sides = self.sides\n            # Should have 4 sides\n            if len(sides) != 4:\n                return False\n\n            # Opposite sides should be same\n            for a,b in [(0,2),(1,3)]:\n                if sides[a] != sides[b]:\n                    return False\n\n            result = f(self, *args)\n            return result\n\n        return inner\n\n    def __getattr__(self, name):\n        \"\"\" Overloaded __getattr__ to forward methods to wrapped instance \"\"\"\n\n        if name in self.method_mapper:\n            # Wrapped name\n            w_name = self.method_mapper[name]\n            print('Forwarding to method',w_name)\n            # Map the method to correct one on the instance\n            return getattr(self.polygon, w_name)\n        else:\n            # Assume method is the same\n            return getattr(self.polygon, name)\n\n    @is_valid\n    def area(self):\n        \"\"\" Return area of rectangle \"\"\"\n\n        # Length x breadth\n        sides = self.sides      \n        return sides[0]*sides[1]\n```", "```py\n>>> r1=Rectangle(10,20,10,20)\n>>> r1.perimeter()\n60\n>>> r1.is_square()\nForwarding to method is_regular\nFalse\n```", "```py\n        >>> r1.convert_to_parallelogram(angle=30)\n        Traceback (most recent call last):\n          File \"<stdin>\", line 1, in <module>\n         File \"adapter_o.py\", line 133, in __getattr__\n            return getattr(self.polygon, name)\n        AttributeError: 'Polygon' object has no attribute 'convert_to_parallelogram'\n    ```", "```py\nclass Engine(object):\n    \"\"\" An Engine class \"\"\"\n\n    def __init__(self, name, bhp, rpm, volume, cylinders=4, type='petrol'):\n        self.name = name\n        self.bhp = bhp\n        self.rpm = rpm\n        self.volume = volume\n        self.cylinders = cylinders\n        self.type = type\n\n    def start(self):\n        \"\"\" Fire the engine \"\"\"\n        print('Engine started')\n\n    def stop(self):\n        \"\"\" Stop the engine \"\"\"\n        print('Engine stopped')\n\nclass Transmission(object):\n    \"\"\" Transmission class \"\"\"\n\n    def __init__(self, gears, torque):\n        self.gears = gears\n        self.torque = torque\n        # Start with neutral\n        self.gear_pos = 0\n\n    def shift_up(self):\n        \"\"\" Shift up gears \"\"\"\n\n        if self.gear_pos == self.gears:\n            print('Cant shift up anymore')\n        else:\n            self.gear_pos += 1\n            print('Shifted up to gear',self.gear_pos)\n\n    def shift_down(self):\n        \"\"\" Shift down gears \"\"\"\n\n        if self.gear_pos == -1:\n            print(\"In reverse, can't shift down\")\n        else:\n            self.gear_pos -= 1\n            print('Shifted down to gear',self.gear_pos)         \n\n    def shift_reverse(self):\n        \"\"\" Shift in reverse \"\"\"\n\n        print('Reverse shifting')\n        self.gear_pos = -1\n\n    def shift_to(self, gear):\n        \"\"\" Shift to a gear position \"\"\"\n\n        self.gear_pos = gear\n        print('Shifted to gear',self.gear_pos)      \n\nclass Brake(object):\n    \"\"\" A brake class \"\"\"\n\n    def __init__(self, number, type='disc'):\n        self.type = type\n        self.number = number\n\n    def engage(self):\n        \"\"\" Engage the break \"\"\"\n\n        print('%s %d engaged' % (self.__class__.__name__,\n                                 self.number))\n\n    def release(self):\n        \"\"\" Release the break \"\"\"\n\n        print('%s %d released' % (self.__class__.__name__,\n                                  self.number))\n\nclass ParkingBrake(Brake):\n    \"\"\" A parking brake class \"\"\"\n\n    def __init__(self, type='drum'):\n        super(ParkingBrake, self).__init__(type=type, number=1)\n\nclass Suspension(object):\n    \"\"\" A suspension class \"\"\"\n\n    def __init__(self, load, type='mcpherson'):\n        self.type = type\n        self.load = load\n\nclass Wheel(object):\n    \"\"\" A wheel class \"\"\"\n\n    def __init__(self, material, diameter, pitch):\n        self.material = material\n        self.diameter = diameter\n        self.pitch = pitch\n\nclass WheelAssembly(object):\n    \"\"\" A wheel assembly class \"\"\"\n\n    def __init__(self, brake, suspension):\n        self.brake = brake\n        self.suspension = suspension\n        self.wheels = Wheel('alloy', 'M12',1.25)\n\n    def apply_brakes(self):\n        \"\"\" Apply brakes \"\"\"\n\n        print('Applying brakes')\n        self.brake.engage()\n\nclass Frame(object):\n    \"\"\" A frame class for an automobile \"\"\"\n\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n```", "```py\nclass Car(object):\n    \"\"\" A car class - Facade pattern \"\"\"\n\n    def __init__(self, model, manufacturer):\n        self.engine = Engine('K-series',85,5000, 1.3)\n        self.frame = Frame(385, 170)\n        self.wheel_assemblies = []\n        for i in range(4):\n            self.wheel_assemblies.append(WheelAssembly(Brake(i+1), Suspension(1000)))\n\n        self.transmission = Transmission(5, 115)\n        self.model = model\n        self.manufacturer = manufacturer\n        self.park_brake = ParkingBrake()\n        # Ignition engaged\n        self.ignition = False\n\n    def start(self):\n        \"\"\" Start the car \"\"\"\n\n        print('Starting the car')\n        self.ignition = True\n        self.park_brake.release()\n        self.engine.start()\n        self.transmission.shift_up()\n        print('Car started.')\n\n    def stop(self):\n        \"\"\" Stop the car \"\"\"\n\n        print('Stopping the car')\n        # Apply brakes to reduce speed\n        for wheel_a in self.wheel_assemblies:\n            wheel_a.apply_brakes()\n\n        # Move to 2nd gear and then 1st\n        self.transmission.shift_to(2)\n        self.transmission.shift_to(1)\n        self.engine.stop()\n        # Shift to neutral\n        self.transmission.shift_to(0)\n        # Engage parking brake\n        self.park_brake.engage()\n        print('Car stopped.')\n```", "```py\n>>> car = Car('Swift','Suzuki')\n>>> car\n<facade.Car object at 0x7f0c9e29afd0>\n```", "```py\n>>> car.start()\nStarting the car\nParkingBrake 1 released\nEngine started\nShifted up to gear 1\n```", "```py\n>>> car.stop()\nStopping the car\nShifted to gear 2\nShifted to gear 1\nApplying brakes\nBrake 1 engaged\nApplying brakes\nBrake 2 engaged\nApplying brakes\nBrake 3 engaged\nApplying brakes\nBrake 4 engaged\nEngine stopped\nShifted to gear 0\nParkingBrake 1 engaged\nCar stopped.\n>>>\n```", "```py\nclass EmployeeProxy(object):\n    \"\"\" Counting proxy class for Employees \"\"\"\n\n    # Count of employees\n    count = 0\n\n    def __new__(cls, *args):\n        \"\"\" Overloaded __new__ \"\"\"\n        # To keep track of counts\n        instance = object.__new__(cls)\n        cls.incr_count()\n        return instance\n\n    def __init__(self, employee):\n        self.employee = employee\n\n    @classmethod\n    def incr_count(cls):\n        \"\"\" Increment employee count \"\"\"\n        cls.count += 1\n\n    @classmethod\n    def decr_count(cls):\n        \"\"\" Decrement employee count \"\"\"\n        cls.count -= 1\n\n    @classmethod\n    def get_count(cls):\n        \"\"\" Get employee count \"\"\"\n        return cls.count\n\n    def __str__(self):\n        return str(self.employee)\n\n    def __getattr__(self, name):\n        \"\"\" Redirect attributes to employee instance \"\"\"\n\n        return getattr(self.employee, name)\n\n    def __del__(self):\n        \"\"\" Overloaded __del__ method \"\"\"\n        # Decrement employee count\n        self.decr_count()\n\nclass EmployeeProxyFactory(object):\n    \"\"\" An Employee factory class returning proxy objects \"\"\"\n\n    @classmethod\n    def create(cls, name, *args):\n        \"\"\" Factory method for creating an Employee instance \"\"\"\n\n        name = name.lower().strip()\n\n        if name == 'engineer':\n            return EmployeeProxy(Engineer(*args))\n        elif name == 'accountant':\n            return EmployeeProxy(Accountant(*args))\n        elif name == 'admin':\n            return EmployeeProxy(Admin(*args))\n```", "```py\n>>> factory = EmployeeProxyFactory()\n>>> engineer = factory.create('engineer','Sam',25,'M')\n>>> print(engineer)\nEngineer - Sam, 25 years old M\n```", "```py\n>>> admin = factory.create('admin','Tracy',32,'F')\n>>> print(admin)\nAdmin - Tracy, 32 years old F\n```", "```py\n>>> admin.get_count()\n2\n>>> EmployeeProxy.get_count()\n2\n```", "```py\n>>> del engineer\n>>> EmployeeProxy.get_count()\n1\n>>> del admin\n>>> EmployeeProxy.get_count()\n0\n```", "```py\n>>> import weakref\n>>> import gc\n>>> engineer=Engineer('Sam',25,'M')\n```", "```py\n>>> len(gc.get_referrers(engineer))\n1\n```", "```py\n>>> engineer_proxy=weakref.proxy(engineer)\n```", "```py\n>>> print(engineer_proxy)\nEngineer - Sam, 25 years old M\n>>> engineer_proxy.get_role()\n'engineering'\n```", "```py\n>>> len(gc.get_referrers(engineer))\n      1\n```", "```py\n**>>> for i in range(5):**\n**...         print(i)**\n**...** \n**0**\n**1**\n**2**\n**3**\n**4**\n\n```", "```py\n**>>> I = iter(range(5))**\n**>>> for i in I:**\n**...         print(i)**\n**...** \n**0**\n**1**\n**2**\n**3**\n**4**\n\n```", "```py\n    **>>> fruits = ['apple','oranges','grapes']**\n    **>>> iter(fruits)**\n    **<list_iterator object at 0x7fd626bedba8>**\n\n    ```", "```py\n    **>>> prices_per_kg = (('apple', 350), ('oranges', 80), ('grapes', 120))**\n    **>>> iter(prices_per_kg)**\n    **<tuple_iterator object at 0x7fd626b86fd0>**\n\n    ```", "```py\n    **>>> subjects = {'Maths','Chemistry','Biology','Physics'}**\n    **>>> iter(subjects)**\n    **<set_iterator object at 0x7fd626b91558>**\n\n    ```", "```py\n**>>> iter(dict(prices_per_kg))**\n**<dict_keyiterator object at 0x7fd626c35ae8>**\n\n```", "```py\nclass Prime(object):\n    \"\"\" An iterator for prime numbers \"\"\"\n\n    def __init__(self, initial, final=0):\n        \"\"\" Initializer - accepts a number \"\"\"\n        # This may or may not be prime\n        self.current = initial\n        self.final = final\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        \"\"\" Return next item in iterator \"\"\"\n        return self._compute()\n\n    def _compute(self):\n        \"\"\" Compute the next prime number \"\"\"\n\n        num = self.current\n\n        while True:\n            is_prime = True\n\n            # Check this number\n            for x in range(2, int(pow(self.current, 0.5)+1)):\n                if self.current%x==0:\n                    is_prime = False\n                    break\n\n            num = self.current\n            self.current += 1\n\n            if is_prime:\n                return num\n\n            # If there is an end range, look for it\n            if self.final > 0 and self.current>self.final:\n                raise StopIteration\n```", "```py\n>>> p=Prime(2,10)\n>>> for num in p:\n... print(num)\n... \n2\n3\n5\n7\n>>> list(Prime(2,50))\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n```", "```py\n>>> p = Prime(2)\n```", "```py\n>>> import itertools\n>>> list(itertools.islice(Prime(2), 100))\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n```", "```py\n>>> list(itertools.islice(itertools.filterfalse(lambda x: x % 10 != 1, Prime(2)), 10))\n[11, 31, 41, 61, 71, 101, 131, 151, 181, 191]\n```", "```py\n>>> list(itertools.islice(itertools.filterfalse(lambda x: str(x)!=str(x)[-1::-1], Prime(2)), 10))\n[2, 3, 5, 7, 11, 101, 131, 151, 181, 191]\n```", "```py\nimport threading\nimport time\n\nfrom datetime import datetime\n\nclass Alarm(threading.Thread):\n    \"\"\" A class which generates periodic alarms \"\"\"\n\n    def __init__(self, duration=1):\n        self.duration = duration\n        # Subscribers\n        self.subscribers = []\n        self.flag = True\n        threading.Thread.__init__(self, None, None)\n\n    def register(self, subscriber):\n        \"\"\" Register a subscriber for alarm notifications \"\"\"\n\n        self.subscribers.append(subscriber)\n\n    def notify(self):\n        \"\"\" Notify all the subscribers \"\"\"\n\n        for subscriber in self.subscribers:\n            subscriber.update(self.duration)\n\n    def stop(self):\n        \"\"\" Stop the thread \"\"\"\n\n        self.flag = False\n\n    def run(self):\n        \"\"\" Run the alarm generator \"\"\"\n\n        while self.flag:\n            time.sleep(self.duration)\n            # Notify\n            self.notify()\n```", "```py\nclass DumbClock(object):\n    \"\"\" A dumb clock class using an Alarm object \"\"\"\n\n    def __init__(self):\n        # Start time\n        self.current = time.time()\n\n    def update(self, *args):\n        \"\"\" Callback method from publisher \"\"\"\n\n        self.current += args[0]\n\n    def __str__(self):\n        \"\"\" Display local time \"\"\"\n\n        return datetime.fromtimestamp(self.current).strftime('%H:%M:%S')\n```", "```py\n    >>> alarm=Alarm(duration=1)\n    ```", "```py\n    >>> clock=DumbClock()\n    ```", "```py\n    >>> alarm.register(clock)\n    ```", "```py\n    >>> print(clock)\n    10:04:27\n    ```", "```py\n    >>> print(clock)\n    10:08:20\n    ```", "```py\n    >>> print(clock);time.sleep(20);print(clock)\n    10:08:23\n    10:08:43\n    ```", "```py\n  import weakref\n  import asyncio\n\n  from collections import defaultdict, deque\n\n  class NewsPublisher(object):\n    \"\"\" A news publisher class with asynchronous notifications \"\"\"\n\n    def __init__(self):\n        # News channels\n        self.channels = defaultdict(deque)\n        self.subscribers = defaultdict(list)\n        self.flag = True\n\n    def add_news(self, channel, url):\n        \"\"\" Add a news story \"\"\"\n\n        self.channels[channel].append(url)\n\n    def register(self, subscriber, channel):\n        \"\"\" Register a subscriber for a news channel \"\"\"\n\n        self.subscribers[channel].append(weakref.proxy(subscriber))\n\n    def stop(self):\n        \"\"\" Stop the publisher \"\"\"\n\n        self.flag = False\n\n    async def notify(self):\n        \"\"\" Notify subscribers \"\"\"\n\n        self.data_null_count = 0\n\n        while self.flag:\n            # Subscribers who were notified\n            subs = []\n\n            for channel in self.channels:\n                try:\n                    data = self.channels[channel].popleft()\n                except IndexError:\n                    self.data_null_count += 1\n                    continue\n\n                subscribers = self.subscribers[channel]\n                for sub in subscribers:\n                    print('Notifying',sub,'on channel',channel,'with data=>',data)\n                    response = await sub.callback(channel, data)\n                    print('Response from',sub,'for channel',channel,'=>',response)\n                    subs.append(sub)\n\n            await asyncio.sleep(2.0)\n```", "```py\nimport aiohttp\n\nclass NewsSubscriber(object):\n    \"\"\" A news subscriber class with asynchronous callbacks \"\"\"\n\n    def __init__(self):\n        self.stories = {}\n        self.futures = []\n        self.future_status = {}\n        self.flag = True\n\n    async def callback(self, channel, data):\n        \"\"\" Callback method \"\"\"\n\n        # The data is a URL\n        url = data\n        # We return the response immediately\n        print('Fetching URL',url,'...')\n        future = aiohttp.request('GET', url)\n        self.futures.append(future)\n\n        return future\n\n    async def fetch_urls(self):\n\n        while self.flag:\n\n            for future in self.futures:\n                # Skip processed futures\n                if self.future_status.get(future):\n                    continue\n\n                response = await future\n\n                # Read data\n                data = await response.read()\n\n                print('\\t',self,'Got data for URL',response.url,'length:',len(data))\n                self.stories[response.url] = data\n                # Mark as such\n                self.future_status[future] = 1\n\n            await asyncio.sleep(2.0)\n```", "```py\n          publisher = NewsPublisher()\n\n          # Append some stories to the 'sports' and 'india' channel\n\n          publisher.add_news('sports', 'http://www.cricbuzz.com/cricket-news/94018/collective-dd-show-hands-massive-loss-to-kings-xi-punjab')\n\n          publisher.add_news('sports', 'https://sports.ndtv.com/indian-premier-league-2017/ipl-2017-this-is-how-virat-kohli-recovered-from-the-loss-against-mumbai-indians-1681955')\n\n    publisher.add_news('india','http://www.business-standard.com/article/current-affairs/mumbai-chennai-and-hyderabad-airports-put-on-hijack-alert-report-117041600183_1.html')\n        publisher.add_news('india','http://timesofindia.indiatimes.com/india/pakistan-to-submit-new-dossier-on-jadhav-to-un-report/articleshow/58204955.cms')\n    ```", "```py\n        subscriber1 = NewsSubscriber()\n        subscriber2 = NewsSubscriber()  \n        publisher.register(subscriber1, 'sports')\n        publisher.register(subscriber2, 'india') \n    ```", "```py\n        loop = asyncio.get_event_loop()\n    ```", "```py\n        tasks = map(lambda x: x.fetch_urls(), (subscriber1, subscriber2))\n        loop.run_until_complete(asyncio.wait([publisher.notify(), *tasks],                                    timeout=120))\n\n        print('Ending loop')\n        loop.close()\n    ```", "```py\n>>> class C(object):\n...     def f(self): return 'hi'\n... \n>>> class D(object): pass\n... \n>>> c = C()\n>>> c\n<__main__.C object at 0x7fa026ac94e0>\n>>> c.f()\n'hi'\n>>> c.__class__=D\n>>> c\n<__main__.D object at 0x7fa026ac94e0>\n>>> c.f()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'D' object has no attribute 'f'\n```", "```py\nimport random\n\nclass ComputerState(object):\n    \"\"\" Base class for state of a computer \"\"\"\n\n    # This is an iterator\n    name = \"state\"\n    next_states = []\n    random_states = []\n\n    def __init__(self):\n        self.index = 0\n\n    def __str__(self):\n        return self.__class__.__name__\n\n    def __iter__(self):\n        return self\n\n    def change(self):\n        return self.__next__()\n\n    def set(self, state):\n        \"\"\" Set a state \"\"\"\n\n        if self.index < len(self.next_states):\n            if state in self.next_states:\n                # Set index\n                self.index = self.next_states.index(state)\n                self.__class__ = eval(state)\n                return self.__class__\n            else:\n                # Raise an exception for invalid state change    \n              current = self.__class__\n                new = eval(state)\n                raise Exception('Illegal transition from %s to %s' % (current, new))\n        else:\n            self.index = 0\n            if state in self.random_states:\n                self.__class__ = eval(state)\n                return self.__class__\n\n    def __next__(self):\n        \"\"\" Switch to next state \"\"\"\n\n        if self.index < len(self.next_states):\n            # Always move to next state first\n            self.__class__ = eval(self.next_states[self.index])\n            # Keep track of the iterator position\n            self.index += 1\n            return self.__class__\n        else:\n             # Can switch to a random state once it completes\n            # list of mandatory next states.\n            # Reset index\n            self.index = 0\n            if len(self.random_states):\n                state = random.choice(self.random_states)\n                self.__class__ = eval(state)\n                return self.__class__\n            else:\n                raise StopIteration\n```", "```py\nclass ComputerOff(ComputerState):\n    next_states = ['ComputerOn']\n    random_states = ['ComputerSuspend', 'ComputerHibernate', 'ComputerOff']\n```", "```py\nclass ComputerOn(ComputerState):\n    # No compulsory next state    \n    random_states = ['ComputerSuspend', 'ComputerHibernate', 'ComputerOff']\n\nclass ComputerWakeUp(ComputerState):\n    # No compulsory next state\n    random_states = ['ComputerSuspend', 'ComputerHibernate', 'ComputerOff']\n\nclass ComputerSuspend(ComputerState):\n    next_states = ['ComputerWakeUp']  \n    random_states = ['ComputerSuspend', 'ComputerHibernate', 'ComputerOff']\n\nclass ComputerHibernate(ComputerState):\n    next_states = ['ComputerOn']  \n    random_states = ['ComputerSuspend', 'ComputerHibernate', 'ComputerOff']\n```", "```py\nclass Computer(object):\n    \"\"\" A class representing a computer \"\"\"\n\n    def __init__(self, model):\n        self.model = model\n        # State of the computer - default is off.\n        self.state = ComputerOff()\n\n    def change(self, state=None):\n        \"\"\" Change state \"\"\"\n\n        if state==None:\n            return self.state.change()\n        else:\n            return self.state.set(state)\n\n    def __str__(self):\n        \"\"\" Return state \"\"\"\n        return str(self.state)\n```", "```py\n>>> c = Computer('ASUS')\n>>> print(c)\nComputerOff\n```", "```py\n>>> c.change()\n<class 'state.ComputerOn'>\n```", "```py\n>>> c.change()\n<class 'state.ComputerHibernate'>\n```", "```py\n>>> c.change()\n<class 'state.ComputerOn'>\n>>> c.change()\n<class 'state.ComputerOff'>\n```", "```py\n>>> c.change()\n<class 'state.ComputerOn'>\n```", "```py\n>>> c.change()\n<class 'state.ComputerSuspend'>\n>>> c.change()\n<class 'state.ComputerWakeUp'>\n>> c.change()\n<class 'state.ComputerHibernate'>\n```", "```py\n>>> import itertools\n>>> for s in itertools.islice(c.state, 5):\n... print (s)\n... \n<class 'state.ComputerOn'>\n<class 'state.ComputerOff'>\n<class 'state.ComputerOn'>\n<class 'state.ComputerOff'>\n<class 'state.ComputerOn'>\n```", "```py\n>>> c.change('ComputerOn')\n<class 'state.ComputerOn'>\n>>> c.change('ComputerSuspend')\n<class 'state.ComputerSuspend'>\n\n>>> c.change('ComputerHibernate')\nTraceback (most recent call last):\n  File \"state.py\", line 133, in <module>\n      print(c.change('ComputerHibernate'))        \n  File \"state.py\", line 108, in change\n      return self.state.set(state)\n  File \"state.py\", line 45, in set\n      raise Exception('Illegal transition from %s to %s' % (current, new))\nException: Illegal transition from <class '__main__.ComputerSuspend'> to <class '__main__.ComputerHibernate'>\n```", "```py\n>>> c.change('ComputerWakeUp')\n<class 'state.ComputerWakeUp'>\n>>> c.change('ComputerHibernate')\n<class 'state.ComputerHibernate'>\n```"]