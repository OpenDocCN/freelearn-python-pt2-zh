["```py\n $ jupyter notebook \n```", "```py\n#1\nimport json\nimport random\nfrom datetime import date, timedelta\nimport faker\n```", "```py\n#2\nfake = faker.Faker() \n```", "```py\n#3\nusernames = set()\nusernames_no = 1000\n\n# populate the set with 1000 unique usernames\nwhile len(usernames) < usernames_no:\n    usernames.add(fake.user_name())\n```", "```py\n#4\ndef get_random_name_and_gender():\n    skew = .6  # 60% of users will be female\n    male = random.random() > skew\n    if male:\n        return fake.name_male(), 'M'\n    else:\n        return fake.name_female(), 'F'\n\ndef get_users(usernames):\n    users = []\n    for username in usernames:\n        name, gender = get_random_name_and_gender()\n        user = {\n            'username': username,\n            'name': name,\n            'gender': gender,\n            'email': fake.email(),\n            'age': fake.random_int(min=18, max=90),\n            'address': fake.address(),\n        }\n        users.append(json.dumps(user))\n    return users\n\nusers = get_users(usernames)\nusers[:3]\n```", "```py\n['{\"username\": \"samuel62\", \"name\": \"Tonya Lucas\", \"gender\": \"F\", \"email\": \"anthonyrobinson@robbins.biz\", \"age\": 27, \"address\": \"PSC 8934, Box 4049\\\\nAPO AA 43073\"}',\n '{\"username\": \"eallen\", \"name\": \"Charles Harmon\", \"gender\": \"M\", \"email\": \"courtneycollins@hotmail.com\", \"age\": 28, \"address\": \"38661 Clark Mews Apt. 528\\\\nAnthonychester, ID 25919\"}',\n '{\"username\": \"amartinez\", \"name\": \"Laura Dunn\", \"gender\": \"F\", \"email\": \"jeffrey35@yahoo.com\", \"age\": 88, \"address\": \"0536 Daniel Court Apt. 541\\\\nPort Christopher, HI 49399-3415\"}']\n```", "```py\n#5\n# campaign name format:\n# InternalType_StartDate_EndDate_TargetAge_TargetGender_Currency\ndef get_type():\n    # just some gibberish internal codes\n    types = ['AKX', 'BYU', 'GRZ', 'KTR']\n    return random.choice(types)\n\ndef get_start_end_dates():\n    duration = random.randint(1, 2 * 365)\n    offset = random.randint(-365, 365)\n    start = date.today() - timedelta(days=offset)\n    end = start + timedelta(days=duration)\n\n    def _format_date(date_):\n        return date_.strftime(\"%Y%m%d\")\n    return _format_date(start), _format_date(end)\n\ndef get_age():\n    age = random.randint(20, 45)\n    age -= age % 5\n    diff = random.randint(5, 25)\n    diff -= diff % 5\n    return '{}-{}'.format(age, age + diff)\n\ndef get_gender():\n    return random.choice(('M', 'F', 'B'))\n\ndef get_currency():\n    return random.choice(('GBP', 'EUR', 'USD'))\n\ndef get_campaign_name():\n    separator = '_'\n    type_ = get_type()\n    start, end = get_start_end_dates()\n    age = get_age()\n    gender = get_gender()\n    currency = get_currency()\n    return separator.join(\n        (type_, start, end, age, gender, currency))\n```", "```py\n#6\n# campaign data:\n# name, budget, spent, clicks, impressions\ndef get_campaign_data():\n    name = get_campaign_name()\n    budget = random.randint(10**3, 10**6)\n    spent = random.randint(10**2, budget) \n    clicks = int(random.triangular(10**2, 10**5, 0.2 * 10**5)) \n    impressions = int(random.gauss(0.5 * 10**6, 2))\n    return {\n        'cmp_name': name,\n        'cmp_bgt': budget,\n        'cmp_spent': spent,\n```", "```py\n        'cmp_clicks': clicks,\n        'cmp_impr': impressions\n    }\n```", "```py\n#7\ndef get_data(users):\n    data = []\n    for user in users:\n        campaigns = [get_campaign_data()\n                     for _ in range(random.randint(2, 8))]\n        data.append({'user': user, 'campaigns': campaigns})\n    return data\n```", "```py\n#8\nrough_data = get_data(users)\nrough_data[:2]  # let's take a peek\n```", "```py\n{'user': '{\"username\": \"samuel62\", \"name\": \"Tonya Lucas\", \"gender\": \"F\", \"email\": \"anthonyrobinson@robbins.biz\", \"age\": 27, \"address\": \"PSC 8934, Box 4049\\\\nAPO AA 43073\"}',\n 'campaigns': [{'cmp_name': 'GRZ_20171018_20171116_35-55_B_EUR',\n 'cmp_bgt': 999613,\n 'cmp_spent': 43168,\n 'cmp_clicks': 35603,\n 'cmp_impr': 500001},\n ...\n {'cmp_name': 'BYU_20171122_20181016_30-45_B_USD',\n 'cmp_bgt': 561058,\n 'cmp_spent': 472283,\n 'cmp_clicks': 44823,\n 'cmp_impr': 499999}]} \n```", "```py\n#9\ndata = []\nfor datum in rough_data:\n    for campaign in datum['campaigns']:\n        campaign.update({'user': datum['user']})\n        data.append(campaign)\ndata[:2]  # let's take another peek\n```", "```py\n{'cmp_name': 'GRZ_20171018_20171116_35-55_B_EUR',\n 'cmp_bgt': 999613,\n 'cmp_spent': 43168,\n 'cmp_clicks': 35603,\n 'cmp_impr': 500001,\n 'user': '{\"username\": \"samuel62\", \"name\": \"Tonya Lucas\", \"gender\": \"F\", \"email\": \"anthonyrobinson@robbins.biz\", \"age\": 27, \"address\": \"PSC 8934, Box 4049\\\\nAPO AA 43073\"}'}\n```", "```py\n#10\nwith open('data.json', 'w') as stream:\n    stream.write(json.dumps(data))\n```", "```py\n#1\nimport json\nimport calendar\nimport numpy as np\nfrom pandas import DataFrame\nimport arrow\nimport pandas as pd\n```", "```py\n#2\nwith open('data.json') as stream:\n    data = json.loads(stream.read())\n```", "```py\n#3\ndf = DataFrame(data)\ndf.head()\n```", "```py\n#4\ndf.count()\n```", "```py\ncmp_bgt       5037\ncmp_clicks    5037\ncmp_impr      5037\ncmp_name      5037\ncmp_spent     5037\nuser          5037\ndtype: int64\n```", "```py\n#5\ndf.describe() \n```", "```py\n cmp_bgt   cmp_clicks      cmp_impr     cmp_spent\ncount  5037.000000  5037.000000   5037.000000   5037.000000\nmean 496930.317054 40920.962676 499999.498312 246963.542783\nstd  287126.683484 21758.505210      2.033342 217822.037701\nmin    1057.000000   341.000000 499993.000000    114.000000\n25%  247663.000000 23340.000000 499998.000000  64853.000000\n50%  491650.000000 37919.000000 500000.000000 183716.000000\n75%  745093.000000 56253.000000 500001.000000 379478.000000\nmax  999577.000000 99654.000000 500008.000000 975799.000000\n```", "```py\n#6\ndf.sort_index(by=['cmp_bgt'], ascending=False).head(3) \n```", "```py\n cmp_bgt  cmp_clicks  cmp_impr                           cmp_name\n3321   999577        8232    499997  GRZ_20180810_20190107_40-55_M_EUR   \n2361   999534       53223    499999  GRZ_20180516_20191030_25-30_B_EUR   \n2220   999096       13347    499999  KTR_20180620_20190809_40-50_F_USD\n```", "```py\n#7\ndf.sort_values(by=['cmp_bgt'], ascending=False).tail(3)\n```", "```py\n#8\ndef unpack_campaign_name(name):\n    # very optimistic method, assumes data in campaign name\n    # is always in good state\n    type_, start, end, age, gender, currency = name.split('_')\n    start = arrow.get(start, 'YYYYMMDD').date()\n    end = arrow.get(end, 'YYYYMMDD').date()\n    return type_, start, end, age, gender, currency\n\ncampaign_data = df['cmp_name'].apply(unpack_campaign_name)\ncampaign_cols = [\n    'Type', 'Start', 'End', 'Age', 'Gender', 'Currency']\ncampaign_df = DataFrame(\n    campaign_data.tolist(), columns=campaign_cols, index=df.index)\ncampaign_df.head(3)\n```", "```py\n Type       Start         End    Age Gender Currency\n0  KTR  2019-03-24  2020-11-06  20-35      F      EUR\n1  GRZ  2017-05-21  2018-07-24  30-45      B      GBP\n2  KTR  2017-12-18  2018-02-08  30-40      F      GBP\n```", "```py\n#9\ndf = df.join(campaign_df)\n```", "```py\n#10\ndf[['cmp_name'] + campaign_cols].head(3)\n```", "```py\n cmp_name Type      Start        End\n0 KTR_20190324_20201106_20-35_F_EUR  KTR 2019-03-24 2020-11-06\n1 GRZ_20170521_20180724_30-45_B_GBP  GRZ 2017-05-21 2018-07-24\n2 KTR_20171218_20180208_30-40_F_GBP  KTR 2017-12-18 2018-02-08\n```", "```py\n#11\ndef unpack_user_json(user):\n    # very optimistic as well, expects user objects\n    # to have all attributes\n    user = json.loads(user.strip())\n    return [\n        user['username'],\n        user['email'],\n        user['name'],\n        user['gender'],\n        user['age'],\n        user['address'],\n    ]\n\nuser_data = df['user'].apply(unpack_user_json)\nuser_cols = [\n    'username', 'email', 'name', 'gender', 'age', 'address']\nuser_df = DataFrame(\n    user_data.tolist(), columns=user_cols, index=df.index)\n```", "```py\n#12\ndf = df.join(user_df)\n\n#13\ndf[['user'] + user_cols].head(2)\n```", "```py\n#14\nbetter_columns = [\n    'Budget', 'Clicks', 'Impressions',\n    'cmp_name', 'Spent', 'user',\n    'Type', 'Start', 'End',\n    'Target Age', 'Target Gender', 'Currency',\n    'Username', 'Email', 'Name',\n    'Gender', 'Age', 'Address',\n]\ndf.columns = better_columns\n```", "```py\n#15\ndef calculate_extra_columns(df):\n    # Click Through Rate\n    df['CTR'] = df['Clicks'] / df['Impressions']\n    # Cost Per Click\n    df['CPC'] = df['Spent'] / df['Clicks']\n    # Cost Per Impression\n    df['CPI'] = df['Spent'] / df['Impressions']\ncalculate_extra_columns(df)\n```", "```py\n#16\ndf[['Spent', 'Clicks', 'Impressions',\n    'CTR', 'CPC', 'CPI']].head(3)\n```", "```py\n Spent  Clicks  Impressions       CTR       CPC       CPI\n0   39383   62554       499997  0.125109  0.629584  0.078766\n1  210452   36176       500001  0.072352  5.817448  0.420903\n2  342507   62299       500001  0.124598  5.497793  0.685013\n```", "```py\n#17\nclicks = df['Clicks'][0]\nimpressions = df['Impressions'][0]\nspent = df['Spent'][0]\nCTR = df['CTR'][0]\nCPC = df['CPC'][0]\nCPI = df['CPI'][0]\nprint('CTR:', CTR, clicks / impressions)\nprint('CPC:', CPC, spent / clicks)\nprint('CPI:', CPI, spent / impressions)\n```", "```py\nCTR: 0.1251087506525039 0.1251087506525039\nCPC: 0.6295840393899671 0.6295840393899671\nCPI: 0.0787664725988356 0.0787664725988356\n```", "```py\n#18\ndef get_day_of_the_week(day):\n    number_to_day = dict(enumerate(calendar.day_name, 1))\n    return number_to_day[day.isoweekday()]\n\ndef get_duration(row):\n    return (row['End'] - row['Start']).days\n\ndf['Day of Week'] = df['Start'].apply(get_day_of_the_week)\ndf['Duration'] = df.apply(get_duration, axis=1)\n```", "```py\n#19\ndf[['Start', 'End', 'Duration', 'Day of Week']].head(3)\n```", "```py\n Start         End  Duration Day of Week\n0  2019-03-24  2020-11-06       593      Sunday\n1  2017-05-21  2018-07-24       429      Sunday\n2  2017-12-18  2018-02-08        52      Monday\n```", "```py\n#20\nfinal_columns = [\n    'Type', 'Start', 'End', 'Duration', 'Day of Week', 'Budget',\n    'Currency', 'Clicks', 'Impressions', 'Spent', 'CTR', 'CPC',\n    'CPI', 'Target Age', 'Target Gender', 'Username', 'Email',\n    'Name', 'Gender', 'Age'\n]\ndf = df[final_columns]\n```", "```py\n#21\ndf.to_csv('df.csv')\n```", "```py\n#22\ndf.to_json('df.json')\n```", "```py\n#23\ndf.to_excel('df.xls')\n```", "```py\n,Type,Start,End,Duration,Day of Week,Budget,Currency,Clicks,Im\n0,KTR,2019-03-24,2020-11-06,593,Sunday,847110,EUR,62554,499997\n1,GRZ,2017-05-21,2018-07-24,429,Sunday,510835,GBP,36176,500001\n2,KTR,2017-12-18,2018-02-08,52,Monday,720897,GBP,62299,500001,\n```", "```py\n{\n \"Age\": {\n \"0\": 29,\n \"1\": 29,\n \"10\": 80,\n```", "```py\n#24\n%matplotlib inline\n```", "```py\n#25\nimport matplotlib.pyplot as plt\nplt.style.use(['classic', 'ggplot'])\nimport pylab\npylab.rcParams.update({'font.family' : 'serif'})\n```", "```py\n#27\ndf[['Budget', 'Spent', 'Clicks', 'Impressions']].hist(\n    bins=16, figsize=(16, 6));\n```", "```py\n#28\ndf[['CTR', 'CPC', 'CPI']].hist(\n    bins=20, figsize=(16, 6))\n```", "```py\n#29\nmask = (df.Spent > 0.75 * df.Budget)\ndf[mask][['Budget', 'Spent', 'Clicks', 'Impressions']].hist(\n    bins=15, figsize=(16, 6), color='g');\n```", "```py\n#30\ndf_weekday = df.groupby(['Day of Week']).sum()\ndf_weekday[['Impressions', 'Spent', 'Clicks']].plot(\n    figsize=(16, 6), subplots=True);\n```", "```py\n#31\nagg_config = {\n    'Impressions': ['mean', 'std'],\n    'Spent': ['mean', 'std'],\n}\ndf.groupby(['Target Gender', 'Target Age']).agg(agg_config)\n```", "```py\n Impressions                    Spent\n                                   mean       std           mean\nTarget Gender Target Age                                        \nB             20-25       499999.741573  1.904111  218917.000000\n              20-30       499999.618421  2.039393  237180.644737\n              20-35       499999.358025  2.039048  256378.641975\n...                                 ...       ...            ...\nM             20-25       499999.355263  2.108421  277232.276316\n              20-30       499999.635294  2.075062  252140.117647\n              20-35       499999.835821  1.871614  308598.149254 \n```", "```py\n#32\npivot = df.pivot_table(\n    values=['Impressions', 'Clicks', 'Spent'],\n    index=['Target Age'],\n    columns=['Target Gender'],\n    aggfunc=np.sum\n)\npivot\n```"]