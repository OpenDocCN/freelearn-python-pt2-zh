["```py\n>>> import sys\n>>> print(sys.version)\n3.7.0a3 (default, Jan 27 2018, 00:46:45)\n[Clang 9.0.0 (clang-900.0.39.2)]\n```", "```py\n$ sudo apt-get update\n```", "```py\n$ python3.7\nPython 3.7.0a3 (default, Jan 27 2018, 00:46:45)\n[Clang 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```", "```py\n$ sudo apt-get install python-virtualenv\n```", "```py\nfabmp:srv fab$ # step 1 - create folder\nfabmp:srv fab$ mkdir learn.pp\nfabmp:srv fab$ cd learn.pp\n\nfabmp:learn.pp fab$ # step 2 - create virtual environment\nfabmp:learn.pp fab$ which python3.7\n/Users/fab/.pyenv/shims/python3.7\nfabmp:learn.pp fab$ virtualenv -p\n\u21e2 /Users/fab/.pyenv/shims/python3.7 learnpp\nRunning virtualenv with interpreter /Users/fab/.pyenv/shims/python3.7\nUsing base prefix '/Users/fab/.pyenv/versions/3.7.0a3'\nNew python executable in /Users/fab/srv/learn.pp/learnpp/bin/python3.7\nAlso creating executable in /Users/fab/srv/learn.pp/learnpp/bin/python\nInstalling setuptools, pip, wheel...done.\n\nfabmp:learn.pp fab$ # step 3 - activate virtual environment\nfabmp:learn.pp fab$ source learnpp/bin/activate\n\n(learnpp) fabmp:learn.pp fab$ # step 4 - verify which python\n(learnpp) fabmp:learn.pp fab$ which python\n/Users/fab/srv/learn.pp/learnpp/bin/python\n\n(learnpp) fabmp:learn.pp fab$ python\nPython 3.7.0a3 (default, Jan 27 2018, 00:46:45)\n[Clang 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> exit()\n\n(learnpp) fabmp:learn.pp fab$ # step 5 - deactivate\n(learnpp) fabmp:learn.pp fab$ deactivate\nfabmp:learn.pp fab$\n```", "```py\n$ virtualenv -p $( which python3.7 ) learnpp\n```", "```py\n$ python\nPython 3.7.0a3 (default, Jan 27 2018, 00:46:45)\n[Clang 9.0.0 (clang-900.0.39.2)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```", "```py\n>>> 2 + 4\n6\n>>> 10 / 4\n2.5\n>>> 2 ** 1024\n179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216\n```", "```py\n$ tree -v example\n```", "```py\nexample\n\u251c\u2500\u2500 core.py\n\u251c\u2500\u2500 run.py\n\u2514\u2500\u2500 util\n \u251c\u2500\u2500 __init__.py\n \u251c\u2500\u2500 db.py\n \u251c\u2500\u2500 math.py\n \u2514\u2500\u2500 network.py\n```", "```py\n$ tree -v files_only\n```", "```py\nfiles_only/\n\u251c\u2500\u2500 core.py\n\u251c\u2500\u2500 db.py\n\u251c\u2500\u2500 math.py\n\u251c\u2500\u2500 network.py\n\u2514\u2500\u2500 run.py\n```", "```py\n>>> from math import factorial\n>>> factorial(5)\n120\n```", "```py\n>>> n = 3  # integer number\n>>> address = \"221b Baker Street, NW1 6XE, London\"  # Sherlock Holmes' address\n>>> employee = {\n...     'age': 45,\n...     'role': 'CTO',\n...     'SSN': 'AB1234567',\n... }\n>>> # let's print them\n>>> n\n3\n>>> address\n'221b Baker Street, NW1 6XE, London'\n>>> employee\n{'age': 45, 'role': 'CTO', 'SSN': 'AB1234567'}\n>>> other_name\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'other_name' is not defined \n```", "```py\nfrom library.second_floor.section_x.row_three import book \n```", "```py\n# scopes1.py\n# Local versus Global\n\n# we define a function, called local\ndef local():\n    m = 7\n    print(m)\n\nm = 5\nprint(m)\n\n# we call, or `execute` the function local\nlocal()\n```", "```py\n$ python scopes1.py\n```", "```py\n# scopes2.py\n# Local versus Global\n\ndef local():\n    # m doesn't belong to the scope defined by the local function\n    # so Python will keep looking into the next enclosing scope.\n    # m is finally found in the global scope\n    print(m, 'printing from the local scope')\n\nm = 5\nprint(m, 'printing from the global scope')\n\nlocal()\n```", "```py\n$ python scopes2.py\n5 printing from the global scope\n5 printing from the local scope\n```", "```py\n# scopes3.py\n# Local, Enclosing and Global\n\ndef enclosing_func():\n    m = 13\n\n    def local():\n        # m doesn't belong to the scope defined by the local\n        # function so Python will keep looking into the next\n        # enclosing scope. This time m is found in the enclosing\n        # scope\n        print(m, 'printing from the local scope')\n\n    # calling the function local\n    local()\n\nm = 5\nprint(m, 'printing from the global scope')\n\nenclosing_func()\n```", "```py\n$ python scopes3.py\n(5, 'printing from the global scope')\n(13, 'printing from the local scope')\n```", "```py\n# bike.py\n# let's define the class Bike\nclass Bike:\n\n    def __init__(self, colour, frame_material):\n        self.colour = colour\n        self.frame_material = frame_material\n\n    def brake(self):\n        print(\"Braking!\")\n\n# let's create a couple of instances\nred_bike = Bike('Red', 'Carbon fiber')\nblue_bike = Bike('Blue', 'Steel')\n\n# let's inspect the objects we have, instances of the Bike class.\nprint(red_bike.colour)  # prints: Red\nprint(red_bike.frame_material)  # prints: Carbon fiber\nprint(blue_bike.colour)  # prints: Blue\nprint(blue_bike.frame_material)  # prints: Steel\n\n# let's brake!\nred_bike.brake()  # prints: Braking!\n```", "```py\n>>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n```"]