["```py\n# files/open_try.py\nfh = open('fear.txt', 'rt')  # r: read, t: text\n\nfor line in fh.readlines():\n    print(line.strip())  # remove whitespace and print\n\nfh.close()\n```", "```py\n# files/open_try.py\ntry:\n    fh = open('fear.txt', 'rt')\n    for line in fh.readlines():\n        print(line.strip())\nfinally:\n    fh.close()\n```", "```py\n# files/open_try.py\ntry:\n    fh = open('fear.txt')  # rt is default\n    for line in fh:  # we can iterate directly on fh\n        print(line.strip())\nfinally:\n    fh.close()\n```", "```py\nAn excerpt from Fear - By Thich Nhat Hanh\n\nThe Present Is Free from Fear\n\nWhen we are not fully present, we are not really living. We\u2019re not really there, either for our loved ones or for ourselves. If we\u2019re not there, then where are we? We are running, running, running, even during our sleep. We run because we\u2019re trying to escape from our fear.\n...\n```", "```py\n# files/open_with.py\nwith open('fear.txt') as fh:\n    for line in fh:\n        print(line.strip())\n```", "```py\n# files/print_file.py\nwith open('print_example.txt', 'w') as fw:\n    print('Hey I am printing into a file!!!', file=fw)\n```", "```py\n# files/read_write.py\nwith open('fear.txt') as f:\n    lines = [line.rstrip() for line in f]\n\nwith open('fear_copy.txt', 'w') as fw:\n    fw.write('\\n'.join(lines))\n```", "```py\n# files/read_write_bin.py\nwith open('example.bin', 'wb') as fw:\n    fw.write(b'This is binary data...')\n\nwith open('example.bin', 'rb') as f:\n    print(f.read())  # prints: b'This is binary data...'\n```", "```py\n# files/write_not_exists.py\nwith open('write_x.txt', 'x') as fw:\n    fw.write('Writing line 1')  # this succeeds\n\nwith open('write_x.txt', 'x') as fw:\n    fw.write('Writing line 2')  # this fails\n```", "```py\n$ python write_not_exists.py\nTraceback (most recent call last):\n File \"write_not_exists.py\", line 6, in <module>\n with open('write_x.txt', 'x') as fw:\nFileExistsError: [Errno 17] File exists: 'write_x.txt'\n```", "```py\n# files/existence.py\nimport os\n\nfilename = 'fear.txt'\npath = os.path.dirname(os.path.abspath(filename))\n\nprint(os.path.isfile(filename))  # True\nprint(os.path.isdir(path))  # True\nprint(path)  # /Users/fab/srv/lpp/ch7/files\n```", "```py\n# files/manipulation.py\nfrom collections import Counter\nfrom string import ascii_letters\n\nchars = ascii_letters + ' '\n\ndef sanitize(s, chars):\n    return ''.join(c for c in s if c in chars)\n\ndef reverse(s):\n    return s[::-1]\n\nwith open('fear.txt') as stream:\n    lines = [line.rstrip() for line in stream]\n\nwith open('raef.txt', 'w') as stream:\n    stream.write('\\n'.join(reverse(line) for line in lines))\n\n# now we can calculate some statistics\nlines = [sanitize(line, chars) for line in lines]\nwhole = ' '.join(lines)\ncnt = Counter(whole.lower().split())\nprint(cnt.most_common(3))\n```", "```py\n$ python manipulation.py\n[('we', 17), ('the', 13), ('were', 7)]\n```", "```py\n# files/ops_create.py\nimport shutil\nimport os\n\nBASE_PATH = 'ops_example'  # this will be our base path\nos.mkdir(BASE_PATH)\n\npath_b = os.path.join(BASE_PATH, 'A', 'B')\npath_c = os.path.join(BASE_PATH, 'A', 'C')\npath_d = os.path.join(BASE_PATH, 'A', 'D')\n\nos.makedirs(path_b)\nos.makedirs(path_c)\n\nfor filename in ('ex1.txt', 'ex2.txt', 'ex3.txt'):\n    with open(os.path.join(path_b, filename), 'w') as stream:\n        stream.write(f'Some content here in {filename}\\n')\n\nshutil.move(path_b, path_d)\n\nshutil.move(\n    os.path.join(path_d, 'ex1.txt'),\n    os.path.join(path_d, 'ex1d.txt')\n)\n```", "```py\n$ tree ops_example/\nops_example/\n\u2514\u2500\u2500 A\n \u251c\u2500\u2500 C\n \u2514\u2500\u2500 D\n \u251c\u2500\u2500 ex1d.txt\n \u251c\u2500\u2500 ex2.txt\n \u2514\u2500\u2500 ex3.txt \n```", "```py\n# files/paths.py\nimport os\n\nfilename = 'fear.txt'\npath = os.path.abspath(filename)\n\nprint(path)\nprint(os.path.basename(path))\nprint(os.path.dirname(path))\nprint(os.path.splitext(path))\nprint(os.path.split(path))\n\nreadme_path = os.path.join(\n    os.path.dirname(path), '..', '..', 'README.rst')\n\n```", "```py\nprint(readme_path)\nprint(os.path.normpath(readme_path))\n```", "```py\n/Users/fab/srv/lpp/ch7/files/fear.txt           # path\nfear.txt                                        # basename\n/Users/fab/srv/lpp/ch7/files                    # dirname\n('/Users/fab/srv/lpp/ch7/files/fear', '.txt')   # splitext\n('/Users/fab/srv/lpp/ch7/files', 'fear.txt')    # split\n/Users/fab/srv/lpp/ch7/files/../../README.rst   # readme_path\n/Users/fab/srv/lpp/README.rst                   # normalized\n```", "```py\n# files/tmp.py\nimport os\nfrom tempfile import NamedTemporaryFile, TemporaryDirectory\n\nwith TemporaryDirectory(dir='.') as td:\n    print('Temp directory:', td)\n    with NamedTemporaryFile(dir=td) as t:\n        name = t.name\n        print(os.path.abspath(name))\n```", "```py\n$ python tmp.py\nTemp directory: ./tmpwa9bdwgo\n/Users/fab/srv/lpp/ch7/files/tmpwa9bdwgo/tmp3d45hm46 \n```", "```py\n# files/listing.py\nimport os\n\nwith os.scandir('.') as it:\n    for entry in it:\n        print(\n            entry.name, entry.path,\n            'File' if entry.is_file() else 'Folder'\n        )\n```", "```py\n$ python listing.py\nfixed_amount.py ./fixed_amount.py File\nexistence.py ./existence.py File\n...\nops_example ./ops_example Folder\n...\n```", "```py\n# files/walking.py\nimport os\n\nfor root, dirs, files in os.walk('.'):\n    print(os.path.abspath(root))\n    if dirs:\n        print('Directories:')\n        for dir_ in dirs:\n            print(dir_)\n        print()\n    if files:\n        print('Files:')\n        for filename in files:\n            print(filename)\n        print()\n```", "```py\n# files/compression/zip.py\nfrom zipfile import ZipFile\n\nwith ZipFile('example.zip', 'w') as zp:\n    zp.write('content1.txt')\n    zp.write('content2.txt')\n    zp.write('subfolder/content3.txt')\n    zp.write('subfolder/content4.txt')\n\nwith ZipFile('example.zip') as zp:\n    zp.extract('content1.txt', 'extract_zip')\n    zp.extract('subfolder/content3.txt', 'extract_zip')\n```", "```py\n# json_examples/json_basic.py\nimport sys\nimport json\n\ndata = {\n    'big_number': 2 ** 3141,\n    'max_float': sys.float_info.max,\n    'a_list': [2, 3, 5, 7],\n}\n\njson_data = json.dumps(data)\ndata_out = json.loads(json_data)\nassert data == data_out  # json and back, data matches\n```", "```py\n# json_examples/json_basic.py\nimport json\n\ninfo = {\n    'full_name': 'Sherlock Holmes',\n    'address': {\n        'street': '221B Baker St',\n        'zip': 'NW1 6XE',\n        'city': 'London',\n        'country': 'UK',\n    }\n}\n\nprint(json.dumps(info, indent=2, sort_keys=True))\n```", "```py\n$ python json_basic.py\n{\n \"address\": {\n \"city\": \"London\",\n \"country\": \"UK\",\n \"street\": \"221B Baker St\",\n \"zip\": \"NW1 6XE\"\n },\n \"full_name\": \"Sherlock Holmes\"\n}\n```", "```py\n# json_examples/json_tuple.py\nimport json\n\ndata_in = {\n    'a_tuple': (1, 2, 3, 4, 5),\n}\n\njson_data = json.dumps(data_in)\nprint(json_data)  # {\"a_tuple\": [1, 2, 3, 4, 5]}\ndata_out = json.loads(json_data)\nprint(data_out)  # {'a_tuple': [1, 2, 3, 4, 5]}\n```", "```py\n# json_examples/json_cplx.py\nimport json\n\nclass ComplexEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, complex):\n            return {\n                '_meta': '_complex',\n                'num': [obj.real, obj.imag],\n            }\n        return json.JSONEncoder.default(self, obj)\n\ndata = {\n    'an_int': 42,\n    'a_float': 3.14159265,\n    'a_complex': 3 + 4j,\n}\n\njson_data = json.dumps(data, cls=ComplexEncoder)\nprint(json_data)\n\ndef object_hook(obj):\n    try:\n        if obj['_meta'] == '_complex':\n            return complex(*obj['num'])\n    except (KeyError, TypeError):\n        return obj\n\ndata_out = json.loads(json_data, object_hook=object_hook)\nprint(data_out)\n```", "```py\n{\"an_int\": 42, \"a_float\": 3.14159265, \"a_complex\": {\"_meta\": \"_complex\", \"num\": [3.0, 4.0]}}\n```", "```py\n{'an_int': 42, 'a_float': 3.14159265, 'a_complex': (3+4j)}\n```", "```py\n# json_examples/json_datetime.py\nimport json\nfrom datetime import datetime, timedelta, timezone\n\nnow = datetime.now()\nnow_tz = datetime.now(tz=timezone(timedelta(hours=1)))\n\nclass DatetimeEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, datetime):\n            try:\n                off = obj.utcoffset().seconds\n            except AttributeError:\n                off = None\n\n            return {\n                '_meta': '_datetime',\n                'data': obj.timetuple()[:6] + (obj.microsecond, ),\n                'utcoffset': off,\n            }\n        return json.JSONEncoder.default(self, obj)\n\ndata = {\n    'an_int': 42,\n    'a_float': 3.14159265,\n    'a_datetime': now,\n    'a_datetime_tz': now_tz,\n}\n\njson_data = json.dumps(data, cls=DatetimeEncoder)\nprint(json_data)\n```", "```py\n{\n \"a_datetime\": {\n \"_meta\": \"_datetime\",\n \"data\": [2018, 3, 18, 17, 57, 27, 438792],\n \"utcoffset\": null\n },\n \"a_datetime_tz\": {\n \"_meta\": \"_datetime\",\n \"data\": [2018, 3, 18, 18, 57, 27, 438810],\n \"utcoffset\": 3600\n },\n \"a_float\": 3.14159265,\n \"an_int\": 42\n}\n```", "```py\n# json_examples/json_datetime.py\ndef object_hook(obj):\n    try:\n        if obj['_meta'] == '_datetime':\n            if obj['utcoffset'] is None:\n                tz = None\n            else:\n                tz = timezone(timedelta(seconds=obj['utcoffset']))\n            return datetime(*obj['data'], tzinfo=tz)\n    except (KeyError, TypeError):\n        return obj\n\ndata_out = json.loads(json_data, object_hook=object_hook)\n```", "```py\n{\n 'a_datetime': datetime.datetime(2018, 3, 18, 18, 1, 46, 54693),\n 'a_datetime_tz': datetime.datetime(\n 2018, 3, 18, 19, 1, 46, 54711,\n tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))),\n 'a_float': 3.14159265,\n 'an_int': 42\n}\n```", "```py\n# io_examples/string_io.py\nimport io\n\nstream = io.StringIO()\nstream.write('Learning Python Programming.\\n')\nprint('Become a Python ninja!', file=stream)\n\ncontents = stream.getvalue()\nprint(contents)\n\nstream.close()\n```", "```py\n# io_examples/string_io.py\nwith io.StringIO() as stream:\n    stream.write('Learning Python Programming.\\n')\n    print('Become a Python ninja!', file=stream)\n    contents = stream.getvalue()\n    print(contents)\n```", "```py\n$ python string_io.py\nLearning Python Programming.\nBecome a Python ninja!\n```", "```py\nimport requests\n\nurls = {\n    'get': 'https://httpbin.org/get?title=learn+python+programming',\n    'headers': 'https://httpbin.org/headers',\n    'ip': 'https://httpbin.org/ip',\n    'now': 'https://now.httpbin.org/',\n    'user-agent': 'https://httpbin.org/user-agent',\n    'UUID': 'https://httpbin.org/uuid',\n}\n\ndef get_content(title, url):\n    resp = requests.get(url)\n    print(f'Response for {title}')\n    print(resp.json())\n\nfor title, url in urls.items():\n    get_content(title, url)\n    print('-' * 40)\n```", "```py\n$ python reqs.py\nResponse for get\n{\n  \"args\": {\n    \"title\": \"learn python programming\"\n  },\n  \"headers\": {\n    \"Accept\": \"*/*\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Connection\": \"close\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"python-requests/2.19.0\"\n  },\n  \"origin\": \"82.47.175.158\",\n  \"url\": \"https://httpbin.org/get?title=learn+python+programming\"\n}\n... rest of the output omitted ... \n```", "```py\n# io_examples/reqs_post.py\nimport requests\n\nurl = 'https://httpbin.org/post'\ndata = dict(title='Learn Python Programming')\n\nresp = requests.post(url, data=data)\nprint('Response for POST')\nprint(resp.json())\n```", "```py\n$ python reqs_post.py\nResponse for POST\n{ 'args': {},\n 'data': '',\n 'files': {},\n 'form': {'title': 'Learn Python Programming'},\n 'headers': { 'Accept': '*/*',\n 'Accept-Encoding': 'gzip, deflate',\n 'Connection': 'close',\n 'Content-Length': '30',\n 'Content-Type': 'application/x-www-form-urlencoded',\n 'Host': 'httpbin.org',\n 'User-Agent': 'python-requests/2.7.0 CPython/3.7.0b2 '\n 'Darwin/17.4.0'},\n 'json': None,\n```", "```py\n 'origin': '82.45.123.178',\n 'url': 'https://httpbin.org/post'}\n```", "```py\n# persistence/pickler.py\nimport pickle\nfrom dataclasses import dataclass\n\n@dataclass\nclass Person:\n    first_name: str\n    last_name: str\n    id: int\n\n    def greet(self):\n        print(f'Hi, I am {self.first_name} {self.last_name}'\n              f' and my ID is {self.id}'\n        )\n\npeople = [\n    Person('Obi-Wan', 'Kenobi', 123),\n    Person('Anakin', 'Skywalker', 456),\n]\n\n# save data in binary format to a file\nwith open('data.pickle', 'wb') as stream:\n    pickle.dump(people, stream)\n\n# load data from a file\nwith open('data.pickle', 'rb') as stream:\n    peeps = pickle.load(stream)\n\nfor person in peeps:\n    person.greet()\n```", "```py\n$ python pickler.py\nHi, I am Obi-Wan Kenobi and my ID is 123\nHi, I am Anakin Skywalker and my ID is 456 \n```", "```py\n# persistence/shelf.py\nimport shelve\n\nclass Person:\n    def __init__(self, name, id):\n        self.name = name\n        self.id = id\n\nwith shelve.open('shelf1.shelve') as db:\n    db['obi1'] = Person('Obi-Wan', 123)\n    db['ani'] = Person('Anakin', 456)\n    db['a_list'] = [2, 3, 5]\n    db['delete_me'] = 'we will have to delete this one...'\n\n    print(list(db.keys()))  # ['ani', 'a_list', 'delete_me', 'obi1']\n\n    del db['delete_me']  # gone!\n\n    print(list(db.keys()))  # ['ani', 'a_list', 'obi1']\n\n    print('delete_me' in db)  # False\n    print('ani' in db)  # True\n\n    a_list = db['a_list']\n    a_list.append(7)\n```", "```py\n    db['a_list'] = a_list\n    print(db['a_list'])  # [2, 3, 5, 7]\n```", "```py\n# persistence/shelf.py\nwith shelve.open('shelf2.shelve', writeback=True) as db:\n    db['a_list'] = [11, 13, 17]\n    db['a_list'].append(19)  # in-place append!\n    print(db['a_list'])  # [11, 13, 17, 19]\n```", "```py\n# persistence/alchemy_models.py\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import (\n    Column, Integer, String, ForeignKey, create_engine)\nfrom sqlalchemy.orm import relationship\n```", "```py\n# persistence/alchemy_models.py\nengine = create_engine('sqlite:///:memory:')\nBase = declarative_base()\n\nclass Person(Base):\n    __tablename__ = 'person'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    age = Column(Integer)\n\n    addresses = relationship(\n        'Address',\n        back_populates='person',\n        order_by='Address.email',\n        cascade='all, delete-orphan'\n    )\n\n    def __repr__(self):\n        return f'{self.name}(id={self.id})'\n\nclass Address(Base):\n    __tablename__ = 'address'\n\n    id = Column(Integer, primary_key=True)\n    email = Column(String)\n    person_id = Column(ForeignKey('person.id'))\n    person = relationship('Person', back_populates='addresses')\n\n    def __str__(self):\n        return self.email\n    __repr__ = __str__\n\nBase.metadata.create_all(engine)\n```", "```py\n# persistence/alchemy.py\nfrom alchemy_models import Person, Address, engine\nfrom sqlalchemy.orm import sessionmaker\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n```", "```py\nanakin = Person(name='Anakin Skywalker', age=32)\nobi1 = Person(name='Obi-Wan Kenobi', age=40)\n```", "```py\nobi1.addresses = [\n    Address(email='obi1@example.com'),\n    Address(email='wanwan@example.com'),\n]\n\nanakin.addresses.append(Address(email='ani@example.com'))\nanakin.addresses.append(Address(email='evil.dart@example.com'))\nanakin.addresses.append(Address(email='vader@example.com'))\n```", "```py\nsession.add(anakin)\nsession.add(obi1)\nsession.commit()\n```", "```py\nobi1 = session.query(Person).filter(\n    Person.name.like('Obi%')\n).first()\nprint(obi1, obi1.addresses)\n```", "```py\nanakin = session.query(Person).filter(\n    Person.name=='Anakin Skywalker'\n).first()\nprint(anakin, anakin.addresses)\n```", "```py\nanakin_id = anakin.id\ndel anakin\n```", "```py\ndef display_info():\n    # get all addresses first\n    addresses = session.query(Address).all()\n\n    # display results\n    for address in addresses:\n        print(f'{address.person.name} <{address.email}>')\n\n    # display how many objects we have in total\n    print('people: {}, addresses: {}'.format(\n        session.query(Person).count(),\n        session.query(Address).count())\n    )\n```", "```py\ndisplay_info()\n\nanakin = session.query(Person).get(anakin_id)\nsession.delete(anakin)\nsession.commit()\n\ndisplay_info()\n```", "```py\n$ python alchemy.py\nObi-Wan Kenobi(id=2) [obi1@example.com, wanwan@example.com] \nAnakin Skywalker(id=1) [ani@example.com, evil.dart@example.com, vader@example.com]\n Anakin Skywalker <ani@example.com>\nAnakin Skywalker <evil.dart@example.com>\nAnakin Skywalker <vader@example.com>\nObi-Wan Kenobi <obi1@example.com>\nObi-Wan Kenobi <wanwan@example.com>\npeople: 2, addresses: 5\n Obi-Wan Kenobi <obi1@example.com>\nObi-Wan Kenobi <wanwan@example.com>\npeople: 1, addresses: 2\n```"]