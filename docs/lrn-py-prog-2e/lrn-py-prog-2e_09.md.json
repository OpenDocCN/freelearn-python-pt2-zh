["```py\n>>> import hashlib\n>>> hashlib.algorithms_available\n{'SHA512', 'SHA256', 'shake_256', 'sha3_256', 'ecdsa-with-SHA1',\n 'DSA-SHA', 'sha1', 'sha384', 'sha3_224', 'whirlpool', 'mdc2',\n 'RIPEMD160', 'shake_128', 'MD4', 'dsaEncryption', 'dsaWithSHA',\n 'SHA1', 'blake2s', 'md5', 'sha', 'sha224', 'SHA', 'MD5',\n 'sha256', 'SHA384', 'sha3_384', 'md4', 'SHA224', 'MDC2',\n 'sha3_512', 'sha512', 'blake2b', 'DSA', 'ripemd160'}\n>>> hashlib.algorithms_guaranteed\n{'blake2s', 'md5', 'sha224', 'sha3_512', 'shake_256', 'sha3_256',\n 'shake_128', 'sha256', 'sha1', 'sha512', 'blake2b', 'sha3_384',\n 'sha384', 'sha3_224'}\n```", "```py\n>>> h = hashlib.blake2b()\n>>> h.update(b'Hash me')\n>>> h.update(b' now!')\n>>> h.hexdigest()\n'56441b566db9aafcf8cdad3a4729fa4b2bfaab0ada36155ece29f52ff70e1e9d'\n'7f54cacfe44bc97c7e904cf79944357d023877929430bc58eb2dae168e73cedf'\n>>> h.digest()\nb'VD\\x1bVm\\xb9\\xaa\\xfc\\xf8\\xcd\\xad:G)\\xfaK+\\xfa\\xab\\n\\xda6\\x15^'\nb'\\xce)\\xf5/\\xf7\\x0e\\x1e\\x9d\\x7fT\\xca\\xcf\\xe4K\\xc9|~\\x90L\\xf7'\nb'\\x99D5}\\x028w\\x92\\x940\\xbcX\\xeb-\\xae\\x16\\x8es\\xce\\xdf'\n>>> h.block_size\n128\n>>> h.digest_size\n64\n>>> h.name\n'blake2b'\n```", "```py\n>>> hashlib.blake2b(b'Hash me now!').hexdigest()\n'56441b566db9aafcf8cdad3a4729fa4b2bfaab0ada36155ece29f52ff70e1e9d'\n'7f54cacfe44bc97c7e904cf79944357d023877929430bc58eb2dae168e73cedf'\n```", "```py\n>>> hashlib.sha256(b'Hash me now!').hexdigest()\n'10d561fa94a89a25ea0c7aa47708bdb353bbb062a17820292cd905a3a60d6783'\n```", "```py\n>>> h = hashlib.blake2b(\n...   b'Important payload', digest_size=16, key=b'secret-key',\n...   salt=b'random-salt', person=b'fabrizio'\n... )\n>>> h.hexdigest()\n'c2d63ead796d0d6d734a5c3c578b6e41'\n```", "```py\n>>> import os\n>>> dk = hashlib.pbkdf2_hmac(\n...   'sha256', b'Password123', os.urandom(16), 100000\n... )\n>>> dk.hex()\n'f8715c37906df067466ce84973e6e52a955be025a59c9100d9183c4cbec27a9e'\n```", "```py\n# secrs/secr_rand.py\nimport secrets\nprint(secrets.choice('Choose one of these words'.split()))\nprint(secrets.randbelow(10 ** 6))\nprint(secrets.randbits(32))\n```", "```py\n$ python secr_rand.py\none\n504156\n3172492450\n```", "```py\n# secrs/secr_rand.py\nprint(secrets.token_bytes(16))\nprint(secrets.token_hex(32))\nprint(secrets.token_urlsafe(32))\n```", "```py\nb'\\xda\\x863\\xeb\\xbb|\\x8fk\\x9b\\xbd\\x14Q\\xd4\\x8d\\x15}'\n9f90fd042229570bf633e91e92505523811b45e1c3a72074e19bbeb2e5111bf7\nbl4qz_Av7QNvPEqZtKsLuTOUsNLFmXW3O03pn50leiY \n```", "```py\n# secrs/secr_gen.py\nimport secrets\nfrom string import digits, ascii_letters\n\ndef generate_pwd(length=8):\n    chars = digits + ascii_letters\n    return ''.join(secrets.choice(chars) for c in range(length))\n\ndef generate_secure_pwd(length=16, upper=3, digits=3):\n    if length < upper + digits + 1:\n        raise ValueError('Nice try!')\n    while True:\n        pwd = generate_pwd(length)\n        if (any(c.islower() for c in pwd)\n            and sum(c.isupper() for c in pwd) >= upper\n            and sum(c.isdigit() for c in pwd) >= digits):\n            return pwd\n\nprint(generate_secure_pwd())\nprint(generate_secure_pwd(length=3, upper=1, digits=1))\n```", "```py\n$ python secr_gen.py\nnsL5voJnCi7Ote3F\nJ5e\n```", "```py\n# secrs/secr_reset.py\nimport secrets\n\ndef get_reset_pwd_url(token_length=16):\n    token = secrets.token_urlsafe(token_length)\n    return f'https://fabdomain.com/reset-pwd/{token}'\n\nprint(get_reset_pwd_url())\n```", "```py\n$ python secr_reset.py\nhttps://fabdomain.com/reset-pwd/m4jb7aKgzTGuyjs9lTIspw\n```", "```py\n# hmc.py\nimport hmac\nimport hashlib\n\ndef calc_digest(key, message):\n    key = bytes(key, 'utf-8')\n    message = bytes(message, 'utf-8')\n    dig = hmac.new(key, message, hashlib.sha256)\n    return dig.hexdigest()\n\ndigest = calc_digest('secret-key', 'Important Message')\n```", "```py\n# tok.py\nimport jwt\n\ndata = {'payload': 'data', 'id': 123456789}\n\ntoken = jwt.encode(data, 'secret-key')\ndata_out = jwt.decode(token, 'secret-key')\nprint(token)\nprint(data_out)\n```", "```py\n$ python tok.py\nb'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXlsb2FkIjoiZGF0YSIsImlkIjoxMjM0NTY3ODl9.WFRY-uoACMoNYX97PXXjEfXFQO1rCyFCyiwxzOVMn40'\n{'payload': 'data', 'id': 123456789}\n```", "```py\n# tok.py\njwt.decode(token, verify=False)\n```", "```py\n# tok.py\ntoken512 = jwt.encode(data, 'secret-key', algorithm='HS512')\ndata_out = jwt.decode(token512, 'secret-key', algorithm='HS512')\nprint(data_out)\n```", "```py\n# claims_time.py\nfrom datetime import datetime, timedelta\nfrom time import sleep\nimport jwt\n\niat = datetime.utcnow()\nnfb = iat + timedelta(seconds=1)\nexp = iat + timedelta(seconds=3)\ndata = {'payload': 'data', 'nbf': nfb, 'exp': exp, 'iat': iat}\n\ndef decode(token, secret):\n    print(datetime.utcnow().time().isoformat())\n    try:\n        print(jwt.decode(token, secret))\n    except (\n        jwt.ImmatureSignatureError, jwt.ExpiredSignatureError\n    ) as err:\n        print(err)\n        print(type(err))\n\nsecret = 'secret-key'\ntoken = jwt.encode(data, secret)\n\ndecode(token, secret)\nsleep(2)\ndecode(token, secret)\nsleep(2)\ndecode(token, secret)\n```", "```py\n$ python claims_time.py\n14:04:13.469778\nThe token is not yet valid (nbf)\n<class 'jwt.exceptions.ImmatureSignatureError'>\n\n14:04:15.475362\n{'payload': 'data', 'nbf': 1522591454, 'exp': 1522591456, 'iat': 1522591453}\n\n14:04:17.476948\nSignature has expired\n<class 'jwt.exceptions.ExpiredSignatureError'>\n```", "```py\n# claims_auth.py\nimport jwt\n\ndata = {'payload': 'data', 'iss': 'fab', 'aud': 'learn-python'}\nsecret = 'secret-key'\ntoken = jwt.encode(data, secret)\n\ndef decode(token, secret, issuer=None, audience=None):\n    try:\n        print(jwt.decode(\n            token, secret, issuer=issuer, audience=audience))\n    except (\n        jwt.InvalidIssuerError, jwt.InvalidAudienceError\n    ) as err:\n        print(err)\n        print(type(err))\n\ndecode(token, secret)\n# not providing the issuer won't break\ndecode(token, secret, audience='learn-python')\n# not providing the audience will break\ndecode(token, secret, issuer='fab')\n# both will break\ndecode(token, secret, issuer='wrong', audience='learn-python')\ndecode(token, secret, issuer='fab', audience='wrong')\n\ndecode(token, secret, issuer='fab', audience='learn-python')\n```", "```py\n$ python claims_auth.py\nInvalid audience\n<class 'jwt.exceptions.InvalidAudienceError'>\n\n{'payload': 'data', 'iss': 'fab', 'aud': 'learn-python'}\n\nInvalid audience\n<class 'jwt.exceptions.InvalidAudienceError'>\n\nInvalid issuer\n<class 'jwt.exceptions.InvalidIssuerError'>\n\nInvalid audience\n<class 'jwt.exceptions.InvalidAudienceError'>\n\n{'payload': 'data', 'iss': 'fab', 'aud': 'learn-python'}\n```", "```py\n$ ssh-keygen -t rsa\n```", "```py\n# token_rsa.py\nimport jwt\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import serialization\n\ndata = {'payload': 'data'}\n\ndef encode(data, priv_filename, priv_pwd=None, algorithm='RS256'):\n    with open(priv_filename, 'rb') as key:\n        private_key = serialization.load_pem_private_key(\n            key.read(),\n            password=priv_pwd,\n            backend=default_backend()\n        )\n    return jwt.encode(data, private_key, algorithm=algorithm)\n\ndef decode(data, pub_filename, algorithm='RS256'):\n    with open(pub_filename, 'rb') as key:\n        public_key = key.read()\n    return jwt.decode(data, public_key, algorithm=algorithm)\n\n# no pwd\ntoken = encode(data, 'rsa/key')\ndata_out = decode(token, 'rsa/key.pub')\nprint(data_out)\n\n# with pwd\ntoken = encode(data, 'rsa/keypwd', priv_pwd=b'Password123')\ndata_out = decode(token, 'rsa/keypwd.pub')\nprint(data_out)\n```"]