["```py\n# data.py\ndef get_clean_data(source): \n    data = load_data(source) \n    cleaned_data = clean_data(data) \n    return cleaned_data \n```", "```py\n# api.py\nimport os\nimport csv\nfrom copy import deepcopy\n\nfrom marshmallow import Schema, fields, pre_load\nfrom marshmallow.validate import Length, Range\n\nclass UserSchema(Schema):\n    \"\"\"Represent a *valid* user. \"\"\"\n\n    email = fields.Email(required=True)\n    name = fields.String(required=True, validate=Length(min=1))\n    age = fields.Integer(\n        required=True, validate=Range(min=18, max=65)\n    )\n    role = fields.String()\n\n    @pre_load(pass_many=False)\n    def strip_name(self, data):\n        data_copy = deepcopy(data)\n\n        try:\n            data_copy['name'] = data_copy['name'].strip()\n        except (AttributeError, KeyError, TypeError):\n            pass\n\n        return data_copy\n\nschema = UserSchema()\n```", "```py\n# api.py\ndef export(filename, users, overwrite=True):\n    \"\"\"Export a CSV file.\n\n    Create a CSV file and fill with valid users. If `overwrite`\n    is False and file already exists, raise IOError.\n    \"\"\"\n    if not overwrite and os.path.isfile(filename):\n        raise IOError(f\"'{filename}' already exists.\")\n\n    valid_users = get_valid_users(users)\n    write_csv(filename, valid_users)\n```", "```py\n# api.py\ndef get_valid_users(users):\n    \"\"\"Yield one valid user at a time from users. \"\"\"\n    yield from filter(is_valid, users)\n\ndef is_valid(user):\n    \"\"\"Return whether or not the user is valid. \"\"\"\n    return not schema.validate(user)\n```", "```py\n# api.py\ndef write_csv(filename, users):\n    \"\"\"Write a CSV given a filename and a list of users.\n\n    The users are assumed to be valid for the given CSV structure.\n    \"\"\"\n    fieldnames = ['email', 'name', 'age', 'role']\n\n    with open(filename, 'x', newline='') as csvfile:\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        for user in users:\n            writer.writerow(user)\n```", "```py\n# tests/test_api.py\nimport os\nfrom unittest.mock import patch, mock_open, call\nimport pytest\nfrom ..api import is_valid, export, write_csv\n```", "```py\n# tests/test_api.py\n@pytest.fixture\ndef min_user():\n    \"\"\"Represent a valid user with minimal data. \"\"\"\n    return {\n        'email': 'minimal@example.com',\n        'name': 'Primus Minimus',\n        'age': 18,\n    }\n\n@pytest.fixture\ndef full_user():\n    \"\"\"Represent valid user with full data. \"\"\"\n    return {\n        'email': 'full@example.com',\n        'name': 'Maximus Plenus',\n        'age': 65,\n        'role': 'emperor',\n    }\n```", "```py\n# tests/test_api.py\n@pytest.fixture\ndef users(min_user, full_user):\n    \"\"\"List of users, two valid and one invalid. \"\"\"\n    bad_user = {\n        'email': 'invalid@example.com',\n        'name': 'Horribilis',\n    }\n    return [min_user, bad_user, full_user]\n```", "```py\n# tests/test_api.py\nclass TestIsValid:\n    \"\"\"Test how code verifies whether a user is valid or not. \"\"\"\n    def test_minimal(self, min_user):\n        assert is_valid(min_user)\n\n    def test_full(self, full_user):\n        assert is_valid(full_user)\n```", "```py\n# tests/test_api.py\n    @pytest.mark.parametrize('age', range(18))\n    def test_invalid_age_too_young(self, age, min_user):\n        min_user['age'] = age\n        assert not is_valid(min_user)\n```", "```py\n# tests/test_api.py\n    @pytest.mark.parametrize('age', range(66, 100))\n    def test_invalid_age_too_old(self, age, min_user):\n        min_user['age'] = age\n        assert not is_valid(min_user)\n\n    @pytest.mark.parametrize('age', ['NaN', 3.1415, None])\n    def test_invalid_age_wrong_type(self, age, min_user):\n        min_user['age'] = age\n        assert not is_valid(min_user)\n```", "```py\n# tests/test_api.py\n    @pytest.mark.parametrize('age', range(18, 66))\n    def test_valid_age(self, age, min_user):\n        min_user['age'] = age\n        assert is_valid(min_user)\n```", "```py\n# tests/test_api.py\n    @pytest.mark.parametrize('field', ['email', 'name', 'age'])\n    def test_mandatory_fields(self, field, min_user):\n        min_user.pop(field)\n        assert not is_valid(min_user)\n\n    @pytest.mark.parametrize('field', ['email', 'name', 'age'])\n    def test_mandatory_fields_empty(self, field, min_user):\n        min_user[field] = ''\n        assert not is_valid(min_user)\n\n```", "```py\n    def test_name_whitespace_only(self, min_user):\n        min_user['name'] = ' \\n\\t'\n        assert not is_valid(min_user)\n```", "```py\n# tests/test_api.py\n    @pytest.mark.parametrize(\n        'email, outcome',\n        [\n            ('missing_at.com', False),\n            ('@missing_start.com', False),\n            ('missing_end@', False),\n            ('missing_dot@example', False),\n\n            ('good.one@example.com', True),\n            ('\u03b4\u03bf\u03ba\u03b9\u03bc\u03ae@\u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1.\u03b4\u03bf\u03ba\u03b9\u03bc\u03ae', True),\n            ('\u0430\u0434\u0436\u0430\u0439@\u044d\u043a\u0437\u0430\u043c\u043f\u043b.\u0440\u0443\u0441', True),\n        ]\n    )\n    def test_email(self, email, outcome, min_user):\n        min_user['email'] = email\n        assert is_valid(min_user) == outcome\n```", "```py\n# tests/test_api.py\n    @pytest.mark.parametrize(\n        'field, value',\n        [\n            ('email', None),\n            ('email', 3.1415),\n            ('email', {}),\n\n            ('name', None),\n            ('name', 3.1415),\n            ('name', {}),\n\n            ('role', None),\n            ('role', 3.1415),\n            ('role', {}),\n        ]\n    )\n    def test_invalid_types(self, field, value, min_user):\n        min_user[field] = value\n        assert not is_valid(min_user)\n```", "```py\n# tests/test_api.py\nclass TestExport:\n\n    @pytest.fixture\n    def csv_file(self, tmpdir):\n        yield tmpdir.join(\"out.csv\")\n\n    @pytest.fixture\n    def existing_file(self, tmpdir):\n        existing = tmpdir.join('existing.csv')\n        existing.write('Please leave me alone...')\n        yield existing\n```", "```py\n# tests/test_api.py\n    def test_export(self, users, csv_file):\n        export(csv_file, users)\n\n        lines = csv_file.readlines()\n\n        assert [\n            'email,name,age,role\\n',\n            'minimal@example.com,Primus Minimus,18,\\n',\n            'full@example.com,Maximus Plenus,65,emperor\\n',\n        ] == lines\n```", "```py\n# tests/test_api.py\n    def test_export_quoting(self, min_user, csv_file):\n        min_user['name'] = 'A name, with a comma'\n\n        export(csv_file, [min_user])\n\n        lines = csv_file.readlines()\n        assert [\n            'email,name,age,role\\n',\n            'minimal@example.com,\"A name, with a comma\",18,\\n',\n        ] == lines\n```", "```py\n# tests/test_api.py\n    def test_does_not_overwrite(self, users, existing_file):\n        with pytest.raises(IOError) as err:\n            export(existing_file, users, overwrite=False)\n\n        assert err.match(\n            r\"'{}' already exists\\.\".format(existing_file)\n        )\n\n        # let's also verify the file is still intact\n        assert existing_file.read() == 'Please leave me alone...'\n```", "```py\n$ pytest tests\n====================== test session starts ======================\nplatform darwin -- Python 3.7.0b2, pytest-3.5.0, py-1.5.3, ...\nrootdir: /Users/fab/srv/lpp/ch8, inifile:\ncollected 132 items\n\ntests/test_api.py ...............................................\n.................................................................\n.................... [100%]\n\n================== 132 passed in 0.41 seconds ===================\n```", "```py\n# exceptions/first.example.py\n>>> gen = (n for n in range(2))\n>>> next(gen)\n0\n>>> next(gen)\n1\n>>> next(gen)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nStopIteration\n>>> print(undefined_name)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nNameError: name 'undefined_name' is not defined\n>>> mylist = [1, 2, 3]\n>>> mylist[5]\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n>>> mydict = {'a': 'A', 'b': 'B'}\n>>> mydict['c']\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nKeyError: 'c'\n>>> 1 / 0\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n```", "```py\n# exceptions/try.syntax.py\ndef try_syntax(numerator, denominator):\n    try:\n        print(f'In the try block: {numerator}/{denominator}')\n        result = numerator / denominator\n    except ZeroDivisionError as zde:\n        print(zde)\n    else:\n        print('The result is:', result)\n        return result\n    finally:\n        print('Exiting')\n\nprint(try_syntax(12, 4))\nprint(try_syntax(11, 0))\n```", "```py\n$ python try.syntax.py\nIn the try block: 12/4     # try\nThe result is: 3.0         # else\nExiting                    # finally\n3.0                        # return within else\n\nIn the try block: 11/0     # try\ndivision by zero           # except\nExiting                    # finally\nNone                       # implicit return end of function\n```", "```py\n# exceptions/json.example.py\nimport json\njson_data = '{}'\n\ntry:\n    data = json.loads(json_data)\nexcept (ValueError, TypeError) as e:\n    print(type(e), e)\n```", "```py\n# exceptions/multiple.except.py\ntry:\n    # some code\nexcept Exception1:\n    # react to Exception1\nexcept (Exception2, Exception3):\n    # react to Exception2 or Exception3\nexcept Exception4:\n    # react to Exception4\n...\n```", "```py\n# exceptions/for.loop.py\nn = 100\nfound = False\nfor a in range(n):\n    if found: break\n    for b in range(n):\n        if found: break\n        for c in range(n):\n            if 42 * a + 17 * b + c == 5096:\n                found = True\n                print(a, b, c)  # 79 99 95\n```", "```py\n# exceptions/for.loop.py\nclass ExitLoopException(Exception):\n    pass\n\ntry:\n    n = 100\n    for a in range(n):\n        for b in range(n):\n            for c in range(n):\n                if 42 * a + 17 * b + c == 5096:\n                    raise ExitLoopException(a, b, c)\nexcept ExitLoopException as ele:\n    print(ele)  # (79, 99, 95)\n```", "```py\n# profiling/triples.py\ndef calc_triples(mx):\n    triples = []\n    for a in range(1, mx + 1):\n        for b in range(a, mx + 1):\n            hypotenuse = calc_hypotenuse(a, b)\n            if is_int(hypotenuse):\n                triples.append((a, b, int(hypotenuse)))\n    return triples\n\ndef calc_hypotenuse(a, b):\n    return (a**2 + b**2) ** .5\n\ndef is_int(n):  # n is expected to be a float\n    return n.is_integer()\n\ntriples = calc_triples(1000)\n```", "```py\n$ python -m cProfile triples.py\n1502538 function calls in 0.704 seconds\nOrdered by: standard name\n\nncalls tottime percall filename:lineno(function)\n500500   0.393   0.000 triples.py:17(calc_hypotenuse)\n500500   0.096   0.000 triples.py:21(is_int)\n 1   0.000   0.000 triples.py:4(<module>)\n 1   0.176   0.176 triples.py:4(calc_triples)\n 1   0.000   0.000 {built-in method builtins.exec}\n 1034   0.000   0.000 {method 'append' of 'list' objects}\n 1   0.000   0.000 {method 'disable' of '_lsprof.Profil...\n500500   0.038   0.000 {method 'is_integer' of 'float' objects}\n```", "```py\ndef calc_hypotenuse(a, b): \n    return (a*a + b*b) ** .5 \n```", "```py\ndef is_int(n): \n    return n == int(n) \n```"]