["```py\n>>> from time import clock as now\n>>> def test(f, *args, **kargs):\n        start = now()\n        f(*args, **kargs)\n        print \"The function %s lasted: %f\" %(f.__name__, now() - start)\n```", "```py\n>>> def alternation(text):\n       pat = re.compile('spa(in|niard)')\n       pat.search(text)\n>>> test(alternation, \"spain\")\nThe function alternation lasted: 0.000009\n```", "```py\n>>> import cProfile\n>>> cProfile.run(\"alternation('spaniard')\")\n```", "```py\n>>> re.compile('(\\w+\\d+)+-\\d\\d', re.DEBUG)\nmax_repeat 1 4294967295\n  subpattern 1\n    max_repeat 1 4294967295\n      in\n        category category_word\n    max_repeat 1 4294967295\n      in\n        category category_digit\nliteral 45\nin\n  category category_digit\nin\n  category category_digit\n```", "```py\n    >>>re.search(\"engineer|engineering\", \"engineering\").group()'engineer'\n    ```", "```py\n>>> def catastrophic(n):\n        print \"Testing with %d characters\" %n\n        pat = re.compile('(a+)+c')\n**text = \"%s\" %('a' * n)**\n        pat.search(text)\n```", "```py\n>>> for n in range(20, 30):\n        test(catastrophic, n)\nTesting with 20 characters\nThe function catastrophic lasted: 0.130457\nTesting with 21 characters\nThe function catastrophic lasted: 0.245125\n\u2026\u2026\nThe function catastrophic lasted: 14.828221\nTesting with 28 characters\nThe function catastrophic lasted: 29.830929\nTesting with 29 characters\nThe function catastrophic lasted: 61.110949\n```", "```py\n>>> def catastrophic(n):\n        print \"Testing with %d characters\" %n\n        pat = re.compile('(x+)+(b+)+c')\n        **text = 'x' * n**\n        **text += 'b' * n**\n        pat.search(text)\n>>> for n in range(12, 18):\n        test(catastrophic, n)\nTesting with 12 characters\nThe function catastrophic lasted: 1.035162\nTesting with 13 characters\nThe function catastrophic lasted: 4.084714\nTesting with 14 characters\nThe function catastrophic lasted: 16.319145\nTesting with 15 characters\nThe function catastrophic lasted: 65.855182\nTesting with 16 characters\nThe function catastrophic lasted: 276.941307\n```", "```py\n>>> def non_catastrophic(n):\n        print \"Testing with %d characters\" %n\n        pat = re.compile('(x+)+(b+)+c')\n        **text = 'x' * n**\n        **text += 'b' * n**\n        **text += 'c'**\n        pat.search(text)\n>>> for n in range(12, 18):\n        test(non_catastrophic, n)\nTesting with 10 characters\nThe function catastrophic lasted: 0.000029\n\u2026\u2026\nTesting with 19 characters\nThe function catastrophic lasted: 0.000012\n```", "```py\n>>> def **dontreuse**():\n        pattern = re.compile(r'\\bfoo\\b')\n        pattern.match(\"foo bar\")\n\n>>> def callonethousandtimes():\n        for _ in range(1000):\n            dontreuse()\n\n>>> test(callonethousandtimes)\nThe function callonethousandtimes lasted: 0.001965\n\n>>> pattern = re.compile(r'\\bfoo\\b')\n>>> def **reuse**():\n        pattern.match(\"foo bar\")\n\n>>> def callonethousandtimes():\n        for _ in range(1000):\n            reuse()\n\n>>> test(callonethousandtimes)\nThe function callonethousandtimes lasted: 0.000633\n>>>\n```", "```py\n>>> pattern = re.compile(r'/(Hello\\sWorld|Hello\\sContinent|Hello\\sCountry)')\n>>> def **nonoptimized**():\n         pattern.match(\"Hello\\sCountry\")\n\n>>> def callonethousandtimes():\n         for _ in range(1000):\n             nonoptimized()\n\n>>> test(callonethousandtimes)\nThe function callonethousandtimes lasted: 0.000645\n\n>>> pattern = re.compile(r'/Hello\\s(World|Continent|Country)')\n>>> def **optimized**():\n         pattern.match(\"Hello\\sCountry\")\n\n>>> def callonethousandtimes():\n         for _ in range(1000):\n             optimized()\n\n>>> test(callonethousandtimes)\nThe function callonethousandtimes lasted: 0.000543\n>>>\n```", "```py\n>>> pattern = re.compile(r'(white|black|red|blue|green)')\n>>> def **optimized**():\n         pattern.match(\"white\")\n\n>>> def callonethousandtimes():\n         for _ in range(1000):\n             optimized()\n\n>>> test(callonethousandtimes)\nThe function callonethousandtimes lasted: 0.000667\n>>>\n\n>>> pattern = re.compile(r'(green|blue|red|black|white)')\n>>> def **nonoptimized**():\n         pattern.match(\"white\")\n\n>>> def callonethousandtimes():\n         for _ in range(1000):\n             nonoptimized()\n\n>>> test(callonethousandtimes)\nThe function callonethousandtimes lasted: 0.000862\n>>>\n```"]