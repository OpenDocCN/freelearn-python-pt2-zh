["```py\n    **@decorator**\n    **def original_function():**\n     **pass**\n\n    ```", "```py\n    **def original_function():**\n     **pass**\n    **original_function= decorator(original_function)**\n\n    ```", "```py\n**new_function = decorator(original_function)**\n\n```", "```py\n**from functools import wraps**\n**def nullable(function):**\n **@wraps(function)**\n **def null_wrapper(arg):**\n **return None if arg is None else function(arg)**\n **return null_wrapper**\n\n```", "```py\n**nlog = nullable(math.log)**\n\n```", "```py\n**>>> some_data = [10, 100, None, 50, 60]**\n**>>> scaled = map(nlog, some_data)** \n**>>> list(scaled)**\n**[2.302585092994046, 4.605170185988092, None, 3.912023005428146, 4.0943445622221]**\n\n```", "```py\n**@nullable**\n**def nround4(x):**\n **return round(x,4)**\n\n```", "```py\n**nround4= nullable(lambda x: round(x,4))**\n\n```", "```py\n**>>> some_data = [10, 100, None, 50, 60]**\n**>>> scaled = map(nlog, some_data)**\n**>>> [nround4(v) for v in scaled]**\n**[2.3026, 4.6052, None, 3.912, 4.0943]**\n\n```", "```py\n**('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')**\n\n```", "```py\n**@f**\n**def g(x):**\n **something**\n\n```", "```py\n**@wraps(argument_function)**\n**def something_wrapper(*args, **kw):**\n **# The \"before\" part, w_\u03b1, applied to *args or **kw**\n **result= argument_function(*args, **kw)**\n **# the \"after\" part, w_\u03b2, applied to the result**\n\n```", "```py\n**import decimal**\n**def bad_data(function):**\n **@wraps(function)**\n **def wrap_bad_data(text, *args, **kw):**\n **try:**\n **return function(text, *args, **kw)**\n **except (ValueError, decimal.InvalidOperation):**\n **cleaned= text.replace(\",\", \"\")**\n **return function(cleaned, *args, **kw)**\n **return wrap_bad_data**\n\n```", "```py\n**bd_int= bad_data(int)**\n**bd_float= bad_data(float)**\n**bd_decimal= bad_data(Decimal)**\n\n```", "```py\n**>>> bd_int(\"13\")**\n**13**\n**>>> bd_int(\"1,371\")**\n**1371**\n**>>> bd_int(\"1,371\", base=16)**\n**4977**\n\n```", "```py\n**@deco(arg)**\n**def func( ):**\n **something**\n\n```", "```py\n**def func( ):**\n **something**\n**func= deco(arg)(func)**\n\n```", "```py\n**import decimal**\n**def bad_char_remove(*char_list):**\n **def cr_decorator(function):**\n **@wraps(function)**\n **def wrap_char_remove(text, *args, **kw):**\n **try:**\n **return function(text, *args, **kw)**\n **except (ValueError, decimal.InvalidOperation):**\n **cleaned= clean_list(text, char_list)**\n **return function(cleaned, *args, **kw)**\n **return wrap_char_remove**\n **return cr_decorator**\n\n```", "```py\n**@bad_char_remove(\"$\", \",\")**\n**def currency(text, **kw):**\n **return Decimal(text, **kw)**\n\n```", "```py\n**>>> currency(\"13\")**\n**Decimal('13')**\n**>>> currency(\"$3.14\")**\n**Decimal('3.14')**\n**>>> currency(\"$1,701.00\")**\n**Decimal('1701.00')**\n\n```", "```py\n**@f_wrap**\n**@g_wrap**\n**def h(x):**\n **something**\n\n```", "```py\n**f_g_h= f_wrap(g_wrap(h))**\n\n```", "```py\n**@cleanse_before(cleanser)**\n**def convert(text):**\n **something**\n\n```", "```py\n**@then_convert(converter)**\n**def clean(text):**\n **something**\n\n```", "```py\n**def then_convert(convert_function):**\n **def clean_convert_decorator(clean_function):**\n **@wraps(clean_function)**\n **def cc_wrapper(text, *args, **kw):**\n **try:**\n **return convert_function(text, *args, **kw)**\n **except (ValueError, decimal.InvalidOperation):**\n **cleaned= clean_function(text)**\n **return convert_function(cleaned, *args, **kw)**\n **return cc_wrapper**\n **return clean_convert_decorator**\n\n```", "```py\n**@then_convert(int)**\n**def drop_punct(text):**\n **return text.replace(\",\", \"\").replace(\"$\", \"\")**\n\n```", "```py\n**>>> drop_punct(\"1,701\")**\n**1701**\n**>>> drop_punct(\"97\")**\n**97**\n\n```", "```py\n**def drop_punct(text):**\n **return text.replace(\",\", \"\").replace(\"$\", \"\")**\n**drop_punct_int = then_convert(int)(drop_punct)**\n\n```"]