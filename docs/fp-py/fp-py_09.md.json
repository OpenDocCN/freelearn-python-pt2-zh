["```py\n**{(1, C), (1, D), (1, H), (1, S), (2, C), (2, D), (2, H), (2, S), ..., (13, C), (13, D), (13, H), (13, S)}**\n\n```", "```py\n**>>> list(product(range(1, 14), '\u2663\u2666\u2665\u2660'))**\n**[(1, '\u2663'), (1, '\u2666'), (1, '\u2665'), (1, '\u2660'),(2, '\u2663'), (2, '\u2666'), (2, '\u2665'), (2, '\u2660'),\u2026 (13, '\u2663'), (13, '\u2666'), (13, '\u2665'), (13, '\u2660')]**\n\n```", "```py\n**def join(t1, t2, where):):**\n **return filter(where, product(t1, t2)))))**\n\n```", "```py\n**[Color(rgb=(239, 222, 205), name='Almond'), Color(rgb=(255, 255, 153), name='Canary'), Color(rgb=(28, 172, 120), name='Green'),...Color(rgb=(255, 174, 66), name='Yellow Orange')]**\n\n```", "```py\n**pixels= [(([(r, g, b), (r, g, b), (r, g, b), ...)**\n\n```", "```py\n**def pixel_iter(image):**\n **w, h = img.size**\n **return ((c, img.getpixel(c)) for c in product(range(w), range(h)))**\n\n```", "```py\n**def euclidean(pixel, color):**\n **return math.sqrt(sum(map(lambda x, y: (x-y)**2, pixel, color.rgb)))))))**\n**def manhattan(pixel, color):**\n **return sum(map(lambda x, y: abs(x-y), pixel, color.rgb)))))**\n\n```", "```py\n**(((0, 0), (92, 139, 195), Color(rgb=(239, 222, 205), name='Almond'), 169.10943202553784), ((0, 0), (92, 139, 195), Color(rgb=(255, 255, 153), name='Canary'), 204.42357985320578), ((0, 0), (92, 139, 195), Color(rgb=(28, 172, 120), name='Green'), 103.97114984456024), ((0, 0), (92, 139, 195), Color(rgb=(48, 186, 143), name='Mountain Meadow'), 82.75868534480233), ((0, 0), (92, 139, 195), Color(rgb=(255, 73, 108), name='Radical Red'), 196.19887869200477), ((0, 0), (92, 139, 195), Color(rgb=(253, 94, 83), name='Sunset Orange'), 201.2212712413874), ((0, 0), (92, 139, 195), Color(rgb=(255, 174, 66), name='Yellow Orange'), 210.7961100210343))**\n\n```", "```py\n**min(choices, key=lambda xypcd: xypcd[3]))])**\n\n```", "```py\n**xy = lambda xyp_c: xyp_c[0][0]**\n**p = lambda xyp_c: xyp_c[0][1]**\n**c = lambda xyp_c: xyp_c[1]**\n**distances= (( = ((xy(item), p(item), c(item), euclidean(p(item), c(item)))**\n **for item in product(pixel_iter(img), colors)))))**\n\n```", "```py\n**for _, choices in groupby(distances, key=lambda xy_p_c_d:**\n **xy_p_c_d[0]):**\n **print(min(choices, key=lambda xypcd: xypcd[3])))]))**\n\n```", "```py\n**from collections import defaultdict, Counter**\n**palette = defaultdict(list)**\n**for xy_p in pixel_iter(img):**\n **xy, p = xy_p**\n **palette[p].append(xy)**\n**w, h = img.size**\n**print(\"\"(\"Total pixels\", w*h)**\n**print(\"\"(\"Total colors\", len(palette)))))**\n\n```", "```py\n**masked_color= tuple(map(lambda x: x&0b11100000, c))**\n\n```", "```py\n    **product(range(0,256,32), range(0,256,32), range(0,256,32))**\n\n    ```", "```py\n**bit3 = range(0, 256, 0b100000)**\n**best = (min(((((euclidean(rgb, c), rgb, c) for c in colors)**\n **for rgb in product(bit3, bit3, bit3)))))**\n**color_map = dict(((((b[1], b[2].rgb) for b in best)**\n\n```", "```py\n**clone = img.copy()**\n**for xy, p in pixel_iter(img):**\n **r, g, b = p**\n **repl = color_map[(([(0b11100000&r, 0b11100000&g, 0b11100000&b)]])]**\n **clone.putpixel(xy, repl)**\n**clone.show()**\n\n```", "```py\n**perms = permutations(range(6)))))**\n**alt= [(([(sum(cost[x][y] for y, x in enumerate(perm)), perm) for perm in perms]**\n**m = min(alt)[0]**\n**print([[([ans for s, ans in alt if s == m]))])**\n\n```", "```py\n**hands = list(combinations(tuple(product(range(13), '\u2660\u2665\u2666\u2663')), 5))**\n\n```", "```py\n**combinations(range(v), 2)**\n\n```", "```py\n**[('year', 'Per capita consumption of cheese (US)Pounds (USDA)', 'Number of people who died by becoming tangled in their bedsheetsDeaths (US) (CDC)', 'year', 'Per capita consumption of mozzarella cheese (US)Pounds (USDA)', 'Civil engineering doctorates awarded (US)Degrees awarded (National Science Foundation)', 'year', 'US crude oil imports from VenezuelaMillions of barrels (Dept. of Energy)', 'Per capita consumption of high fructose corn syrup (US)Pounds (USDA)'),**\n**(2000, 29.8, 327, 2000, 9.3, 480, 2000, 446, 62.6),(2001, 30.1, 456, 2001, 9.7, 501, 2001, 471, 62.5),(2002, 30.5, 509, 2002, 9.7, 540, 2002, 438, 62.8),(2003, 30.6, 497, 2003, 9.7, 552, 2003, 436, 60.9),(2004, 31.3, 596, 2004, 9.9, 547, 2004, 473, 59.8),(2005, 31.7, 573, 2005, 10.2, 622, 2005, 449, 59.1),(2006, 32.6, 661, 2006, 10.5, 655, 2006, 416, 58.2),(2007, 33.1, 741, 2007, 11, 701, 2007, 420, 56.1),(2008, 32.7, 809, 2008, 10.6, 712, 2008, 381, 53),(2009, 32.8, 717, 2009, 10.6, 708, 2009, 352, 50.1)]**\n\n```", "```py\n**combinations(range(9), 2)**\n\n```", "```py\n**def column(source, x):**\n **for row in source:**\n **yield row[x]**\n\n```", "```py\n**from itertools import ***\n**from Chapter_4.ch04_ex4 import corr**\n**for p, q in combinations(range(9), 2):**\n **header_p, *data_p = list(column(source, p))**\n **header_q, *data_q = list(column(source, q))**\n **if header_p == header_q: continue**\n **r_pq = corr(data_p, data_q)**\n **print(\"{\"{(\"{2: 4.2f}: {0} vs {1}\".format(header_p, header_q, r_pq)))))**\n\n```", "```py\n**0.96: year vs Per capita consumption of cheese (US)Pounds (USDA)**\n**0.95: year vs Number of people who died by becoming tangled in their bedsheetsDeaths (US) (CDC)**\n**0.92: year vs Per capita consumption of mozzarella cheese (US)Pounds (USDA)**\n**0.98: year vs Civil engineering doctorates awarded (US)Degrees awarded (National Science Foundation)**\n**-0.80: year vs US crude oil imports from VenezuelaMillions of barrels (Dept. of Energy)**\n**-0.95: year vs Per capita consumption of high fructose corn syrup (US)Pounds (USDA)**\n**0.95: Per capita consumption of cheese (US)Pounds (USDA) vs Number of people who died by becoming tangled in their bedsheetsDeaths (US) (CDC)**\n**0.96: Per capita consumption of cheese (US)Pounds (USDA) vs year**\n**0.98: Per capita consumption of cheese (US)Pounds (USDA) vs Per capita consumption of mozzarella cheese (US)Pounds (USDA)**\n**...**\n**0.88: US crude oil imports from VenezuelaMillions of barrels (Dept. of Energy) vs Per capita consumption of high fructose corn syrup (US)Pounds (USDA)**\n\n```"]