["```py\n**first_leg= ((37.54901619777347, -76.33029518659048), (37.840832, -76.273834), 17.7246)**\n\n```", "```py\n**start= lambda leg: leg[0]**\n**end= lambda leg: leg[1]**\n**distance= lambda leg: leg[2]**\n**latitude= lambda pt: pt[0]**\n**longitude= lambda pt: pt[1]**\n\n```", "```py\n**start_point = lambda leg: leg[0]**\n**distance_nm= lambda leg: leg[2]**\n**latitude_value= lambda point: point[0]**\n\n```", "```py\n**start= lambda start, end, distance: start**\n**end= lambda start, end, distance: end**\n**distance= lambda start, end, distance: distance**\n**latitude= lambda lat, lon: lat**\n**longitude= lambda lat, lon: lon**\n\n```", "```py\nLeg = namedtuple(\"Leg\", (\"start\", \"end\", \"distance\"))\nPoint = namedtuple(\"Point\", (\"latitude\", \"longitude\"))\n```", "```py\n**def float_lat_lon(row_iter):**\n **return (tuple(map(float, pick_lat_lon(*row))) for row in row_iter)**\n\n```", "```py\n**def float_lat_lon(row_iter):**\n **return (Point(*map(float, pick_lat_lon(*row))) for row in row_iter)**\n\n```", "```py\n**with urllib.request.urlopen(\"file:./Winter%202012-2013.kml\") as source:**\n **path_iter = float_lat_lon(row_iter_kml(source))**\n **pair_iter = legs(path_iter)**\n **trip_iter = (Leg(start, end, round(haversine(start, end),4)) for start,end in pair_iter)**\n **trip= tuple(trip_iter)**\n\n```", "```py\n**(Leg(start=Point(latitude=37.54901619777347, longitude=-76.33029518659048), end=Point(latitude=37.840832, longitude=-76.273834), distance=17.7246), Leg(start=Point(latitude=37.840832, longitude=-76.273834), end=Point(latitude=38.331501, longitude=-76.459503), distance=30.7382),...**\n**Leg(start=Point(latitude=38.330166, longitude=-76.458504), end=Point(latitude=38.976334, longitude=-76.473503), distance=38.8019))**\n\n```", "```py\n    **Leg(start, end, round(haversine(start, end),4))**\n\n    ```", "```py\n    **Point(*map(float, pick_lat_lon(*row)))**\n\n    ```", "```py\n    **Point(longitude=float(row[0]), latitude=float(row[1]))**\n\n    ```", "```py\n**from ch03_ex5 import series, head_map_filter, row_iter**\n**with open(\"Anscombe.txt\") as source:**\n **data = tuple(head_map_filter(row_iter(source)))**\n **series_I= tuple(series(0,data))**\n **series_II= tuple(series(1,data))**\n **series_III= tuple(series(2,data))**\n **series_IV= tuple(series(3,data))**\n\n```", "```py\n**(Pair(x=10.0, y=8.04), Pair(x=8.0, y=6.95), \u2026, Pair(x=5.0, y=5.68))**\n\n```", "```py\n**y_rank= tuple(enumerate(sorted(series_I, key=lambda p: p.y)))**\n**xy_rank= tuple(enumerate(sorted(y_rank, key=lambda rank: rank[1].x)))**\n\n```", "```py\n**((0, Pair(x=8.0, y=5.25)), (1, Pair(x=8.0, y=5.56)), ..., (10, Pair(x=19.0, y=12.5)))**\n\n```", "```py\n**((0, (0, Pair(x=4.0, y=4.26))), (1, (2, Pair(x=5.0, y=5.68))), ..., (10, (9, Pair(x=14.0, y=9.96))))**\n\n```", "```py\n**x_rank = lambda ranked: ranked[0]**\n**y_rank= lambda ranked: ranked[1][0]**\n**raw = lambda ranked: ranked[1][1]**\n\n```", "```py\n**from collections import defaultdict**\n**def rank(data, key=lambda obj:obj):** \n **def rank_output(duplicates, key_iter, base=0):**\n **for k in key_iter:**\n **dups= len(duplicates[k])**\n **for value in duplicates[k]:**\n **yield (base+1+base+dups)/2, value**\n **base += dups**\n **def build_duplicates(duplicates, data_iter, key):**\n **for item in data_iter:**\n **duplicates[key(item)].append(item)**\n **return duplicates**\n **duplicates= build_duplicates(defaultdict(list), iter(data), key)**\n **return rank_output(duplicates, iter(sorted(duplicates)), 0)**\n\n```", "```py\n**>>> list(rank([0.8, 1.2, 1.2, 2.3, 18]))**\n**[(1.0, 0.8), (2.5, 1.2), (2.5, 1.2), (4.0, 2.3), (5.0, 18)]**\n**>>> data= ((2, 0.8), (3, 1.2), (5, 1.2), (7, 2.3), (11, 18))**\n**>>> list(rank(data, key=lambda x:x[1]))**\n**[(1.0, (2, 0.8)), (2.5, (3, 1.2)), (2.5, (5, 1.2)), (4.0, (7, 2.3)), (5.0, (11, 18))]**\n\n```", "```py\n**Ranked_Y= namedtuple(\"Ranked_Y\", (\"r_y\", \"raw\",))**\n**def rank_y(pairs):**\n **return (Ranked_Y(*row) for row in rank(pairs, lambda pair: pair.y))**\n\n```", "```py\n**>>> data = (Pair(x=10.0, y=8.04), Pair(x=8.0, y=6.95), ..., Pair(x=5.0, y=5.68))**\n\n```", "```py\n**>>> list(rank_y(data))**\n**[Ranked_Y(r_y=1.0, raw=Pair(x=4.0, y=4.26)), Ranked_Y(r_y=2.0, raw=Pair(x=7.0, y=4.82)), ... Ranked_Y(r_y=11.0, raw=Pair(x=12.0, y=10.84))]**\n\n```", "```py\n**Ranked_XY= namedtuple(\"Ranked_XY\", (\"r_x\", \"r_y\", \"raw\",))**\n\n```", "```py\n**def rank_xy(pairs):**\n **return (Ranked_XY(r_x=r_x, r_y=rank_y_raw[0], raw=rank_y_raw[1])**\n **for r_x, rank_y_raw in rank(rank_y(pairs), lambda r: r.raw.x))**\n\n```", "```py\n**>>> data = (Pair(x=10.0, y=8.04), Pair(x=8.0, y=6.95), ..., Pair(x=5.0, y=5.68))**\n\n```", "```py\n**>>> list(rank_xy(data))**\n**[Ranked_XY(r_x=1.0, r_y=1.0, raw=Pair(x=4.0, y=4.26)), Ranked_XY(r_x=2.0, r_y=3.0, raw=Pair(x=5.0, y=5.68)), ...,** \n**Ranked_XY(r_x=11.0, r_y=10.0, raw=Pair(x=14.0, y=9.96))]**\n\n```", "```py\n**def rank_corr(pairs):**\n **ranked= rank_xy(pairs)**\n **sum_d_2 = sum((r.r_x - r.r_y)**2 for r in ranked)**\n **n = len(pairs)**\n **return 1-6*sum_d_2/(n*(n**2-1))**\n\n```", "```py\n**>>> data = (Pair(x=10.0, y=8.04), Pair(x=8.0, y=6.95), \u2026, Pair(x=5.0, y=5.68))**\n**>>> round(rank_corr( data ), 3)**\n**0.818**\n\n```", "```py\n**import ch04_ex4**\n**def pearson_corr(pairs):**\n **X = tuple(p.x for p in pairs)**\n **Y = tuple(p.y for p in pairs)**\n **return ch04_ex4.corr(X, Y)**\n\n```", "```py\n**Rank_Data = namedtuple(\"Rank_Data\", (\"rank_seq\", \"raw\"))**\n\n```", "```py\n**def some_function(seq_or_iter):**\n **if not isinstance(seq_or_iter,collections.abc.Iterator):**\n **yield from some_function(iter(seq_or_iter), key)**\n **return**\n **# Do the real work of the function using the iterable**\n\n```", "```py\n**def rank_data(seq_or_iter, key=lambda obj:obj):**\n **# Not a sequence? Materialize a sequence object**\n **if isinstance(seq_or_iter, collections.abc.Iterator):**\n **yield from rank_data(tuple(seq_or_iter), key)**\n **data = seq_or_iter**\n **head= seq_or_iter[0]**\n **# Convert to Rank_Data and process.**\n **if not isinstance(head, Rank_Data):**\n **ranked= tuple(Rank_Data((),d) for d in data)**\n **for r, rd in rerank(ranked, key):**\n **yield Rank_Data(rd.rank_seq+(r,), rd.raw)**\n **return**\n **# Collection of Rank_Data is what we prefer.**\n **for r, rd in rerank(data, key):**\n **yield Rank_Data(rd.rank_seq+(r,), rd.raw)**\n\n```", "```py\n**def rerank(rank_data_collection, key):**\n **sorted_iter= iter(sorted( rank_data_collection, key=lambda obj: key(obj.raw)))**\n **head = next(sorted_iter)**\n **yield from ranker(sorted_iter, 0, [head], key)**\n\n```", "```py\n**def ranker(sorted_iter, base, same_rank_seq, key):**\n **\"\"\"Rank values from a sorted_iter using a base rank value.**\n **If the next value's key matches same_rank_seq, accumulate those.**\n **If the next value's key is different, accumulate same rank values**\n **and start accumulating a new sequence.**\n **\"\"\"**\n **try:**\n **value= next(sorted_iter)**\n **except StopIteration:**\n **dups= len(same_rank_seq)**\n **yield from yield_sequence((base+1+base+dups)/2, iter(same_rank_seq))**\n **return**\n **if key(value.raw) == key(same_rank_seq[0].raw):**\n **yield from ranker(sorted_iter, base, same_rank_seq+[value], key)**\n **else:**\n **dups= len(same_rank_seq)**\n **yield from yield_sequence( (base+1+base+dups)/2, iter(same_rank_seq))**\n **yield from ranker(sorted_iter, base+dups, [value], key)**\n\n```", "```py\n**def yield_sequence(rank, same_rank_iter):**\n **head= next(same_rank_iter)**\n **yield rank, head**\n **yield from yield_sequence(rank, same_rank_iter)**\n\n```", "```py\n**>>> scalars= [0.8, 1.2, 1.2, 2.3, 18]**\n**>>> list(ranker(scalars))**\n**[Rank_Data(rank_seq=(1.0,), raw=0.8), Rank_Data(rank_seq=(2.5,), raw=1.2), Rank_Data(rank_seq=(2.5,), raw=1.2), Rank_Data(rank_seq=(4.0,), raw=2.3), Rank_Data(rank_seq=(5.0,), raw=18)]**\n\n```", "```py\n**>>> pairs= ((2, 0.8), (3, 1.2), (5, 1.2), (7, 2.3), (11, 18))**\n**>>> rank_x= tuple(ranker(pairs, key=lambda x:x[0] ))**\n**>>> rank_x**\n**(Rank_Data(rank_seq=(1.0,), raw=(2, 0.8)), Rank_Data(rank_seq=(2.0,), raw=(3, 1.2)), Rank_Data(rank_seq=(3.0,), raw=(5, 1.2)), Rank_Data(rank_seq=(4.0,), raw=(7, 2.3)), Rank_Data(rank_seq=(5.0,), raw=(11, 18)))**\n**>>> rank_xy= (ranker(rank_x, key=lambda x:x[1] ))**\n**>>> tuple(rank_xy)**\n**(Rank_Data(rank_seq=(1.0, 1.0), raw=(2, 0.8)),Rank_Data(rank_seq=(2.0, 2.5), raw=(3, 1.2)), Rank_Data(rank_seq=(3.0, 2.5), raw=(5, 1.2)), Rank_Data(rank_seq=(4.0, 4.0), raw=(7, 2.3)), Rank_Data(rank_seq=(5.0, 5.0), raw=(11, 18)))**\n\n```"]