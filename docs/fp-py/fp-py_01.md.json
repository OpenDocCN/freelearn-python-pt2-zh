["```py\ns = 0\nfor n in range(1, 10):\n    if n % 3 == 0 or n % 5 == 0:\n        s += n\nprint(s)\n```", "```py\nm = list()\nfor n in range(1, 10):\n    if n % 3 == 0 or n % 5 == 0:\n        m.append(n)\nprint(sum(m))\n```", "```py\nclass SummableList(list):\n    def sum( self ):\n        s= 0\n        for v in self.__iter__():\n            s += v\n        return s\n```", "```py\ndef sum(seq):\n    if len(seq) == 0: return 0\n    return seq[0] + sum(seq[1:])\n```", "```py\ndef until(n, filter_func, v):\n    if v == n: return []\n    if filter_func(v): return [v] + until( n, filter_func, v+1 )\n    else: return until(n, filter_func, v+1)\n```", "```py\nmult_3_5= lambda x: x%3==0 or x%5==0\n```", "```py\n**>>> mult_3_5(3)**\n**True**\n**>>> mult_3_5(4)**\n**False**\n**>>> mult_3_5(5)**\n**True**\n\n```", "```py\n**>>> until(10, lambda x: x%3==0 or x%5==0, 0)**\n**[0, 3, 5, 6, 9]**\n\n```", "```py\n**print( sum(n for n in range(1, 10) if n%3==0 or n%5==0) )**\n\n```", "```py\n**>>> sum( n for n in range(1, 10) if n%3==0 or n%5==0 )**\n**23**\n**>>> n**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**NameError: name 'n' is not defined**\n\n```", "```py\n**>>> 1+2+3+4**\n**10**\n\n```", "```py\n**>>> ((1+2)+3)+4**\n**10**\n**>>> 1+(2+(3+4))**\n**10**\n\n```", "```py\n**>>> import timeit**\n**>>> timeit.timeit(\"((([]+[1])+[2])+[3])+[4]\")**\n**0.8846941249794327**\n**>>> timeit.timeit(\"[]+([1]+([2]+([3]+[4])))\")**\n**1.0207440659869462**\n\n```", "```py\n**def next_(n, x):**\n **return (x+n/x)/2**\n\n```", "```py\n**>>> n= 2**\n**>>> f= lambda x: next_(n, x)**\n**>>> a0= 1.0**\n**>>> [ round(x,4) for x in (a0, f(a0), f(f(a0)), f(f(f(a0))),) ]**\n**[1.0, 1.5, 1.4167, 1.4142]**\n\n```", "```py\n**def repeat(f, a):**\n **yield a**\n **for v in repeat(f, f(a)):**\n **yield v**\n\n```", "```py\n    for x in some_iter: yield x.\n    ```", "```py\n    yield from some_iter.\n    ```", "```py\n**def within(\u03b5, iterable):**\n **def head_tail(\u03b5, a, iterable):**\n **b= next(iterable)**\n **if abs(a-b) <= \u03b5: return b**\n **return head_tail(\u03b5, b, iterable)**\n **return head_tail(\u03b5, next(iterable), iterable)**\n\n```", "```py\n**def sqrt(a0, \u03b5, n):**\n **return within(\u03b5, repeat(lambda x: next_(n,x), a0))**\n\n```"]