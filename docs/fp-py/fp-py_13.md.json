["```py\n**>>> prod= lambda iterable: functools.reduce(lambda x, y: x*y, iterable, 1)**\n**>>> prod((1,2,3))**\n**6**\n\n```", "```py\n**(x if n==1 else (y if n==2 else z))**\n\n```", "```py\n**def fact(n):**\n **f= { n == 0: lambda n: 1,**\n **n == 1: lambda n: 1,**\n **n == 2: lambda n: 2,**\n **n > 2: lambda n: fact(n-1)*n }[True]**\n **return f(n)**\n\n```", "```py\n**def max(a, b):**\n **f = {a >= b: lambda: a, b >= a: lambda: b}[True]**\n **return f()**\n\n```", "```py\n**def semifact(n):**\n **alternatives= [(n == 0, lambda n: 1),**\n **(n == 1, lambda n: 1),**\n **(n == 2, lambda n: 2),**\n **(n > 2, lambda n: semifact(n-2)*n)]**\n **c, f= next(filter(itemgetter(0), alternatives))**\n **return f(n)**\n\n```", "```py\n**fst = lambda x: x[0]**\n**snd = lambda x: x[1]**\n\n```", "```py\n**>>> year_cheese = [(2000, 29.87), (2001, 30.12), (2002, 30.6), (2003, 30.66), (2004, 31.33), (2005, 32.62), (2006, 32.73), (2007, 33.5), (2008, 32.84), (2009, 33.02), (2010, 32.92)]**\n\n```", "```py\n**>>> min(year_cheese, key=snd)**\n**(2000, 29.87)**\n\n```", "```py\n**>>> from operator import ***\n**>>> max( year_cheese, key=itemgetter(1))**\n**(2007, 33.5)**\n\n```", "```py\n**>>> from collections import namedtuple**\n**>>> YearCheese = namedtuple(\"YearCheese\", (\"year\", \"cheese\"))**\n**>>> year_cheese_2 = list(YearCheese(*yc) for yc in year_cheese)**\n**>>> year_cheese_2**\n**[YearCheese(year=2000, cheese=29.87), YearCheese(year=2001, cheese=30.12), YearCheese(year=2002, cheese=30.6), YearCheese(year=2003, cheese=30.66), YearCheese(year=2004, cheese=31.33), YearCheese(year=2005, cheese=32.62), YearCheese(year=2006, cheese=32.73), YearCheese(year=2007, cheese=33.5), YearCheese(year=2008, cheese=32.84), YearCheese(year=2009, cheese=33.02), YearCheese(year=2010, cheese=32.92)]**\n\n```", "```py\n**>>> min(year_cheese_2, key=attrgetter('cheese'))**\n**YearCheese(year=2000, cheese=29.87)**\n**>>> max(year_cheese_2, key=lambda x: x.cheese)**\n**YearCheese(year=2007, cheese=33.5)**\n\n```", "```py\n**>>> d= starmap(pow, zip_longest([], range(4), fillvalue=60))**\n\n```", "```py\n**[(60, 0), (60, 1), (60, 2), (60, 3)]**\n\n```", "```py\n**>>> p = (3, 8, 29, 44)**\n**>>> pi = sum(starmap(truediv, zip(p, d)))**\n\n```", "```py\n**>>> pi = sum(map(truediv, p, d))**\n**>>> pi**\n**3.1415925925925925**\n\n```", "```py\n**>>> num= map(fact, count())**\n**>>> den= map(semifact, (2*n+1 for n in count()))**\n**>>> terms= takewhile(lambda t: t > 1E-10, map(truediv, num, den))**\n**>>> 2*sum(terms)**\n**3.1415926533011587**\n\n```", "```py\n**sum= functools.partial(functools.reduce, operator.add)**\n\n```", "```py\n**prod= functools.partial(functools.reduce, operator.mul)**\n\n```", "```py\n**fact= lambda n: 1 if n < 2 else n*prod(range(1,n))**\n\n```"]