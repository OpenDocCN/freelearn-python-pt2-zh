["```py\n**import urllib.request**\n**with urllib.request.urlopen(\"\"http://slott-softwarearchitect.blogspot.com\"\") as response:**\n **print(response.read())**\n\n```", "```py\n**from http.server import HTTPServer, SimpleHTTPRequestHandler**\n**running = True**\n**httpd = HTTPServer(('localhost',8080), SimpleHTTPRequestHandler)**\n**while running:**\n **httpd.handle_request()**\n**httpd.shutdown()**\n\n```", "```py\n**response = httpd(request)**\n\n```", "```py\n**headers, content = httpd(headers, request, [uploads])**\n\n```", "```py\n**response= content(authentication(csrf(session(headers, request, [forms]))))**\n\n```", "```py\n**def session(headers, request, forms):**\n **pre-process: determine session**\n **content= csrf(headers, request, forms)**\n **post-processes the content**\n **return the content**\n**def csrf(headers, request, forms):**\n **pre-process: validate csrf tokens**\n **content=  authenticate(headers, request, forms)**\n **post-processes the content**\n **return the content**\n\n```", "```py\n**def some_app(environ, start_response):**\n **return content**\n\n```", "```py\n**SCRIPT_MAP = {**\n **\"\"demo\"\": demo_app,**\n **\"\"static\"\": static_app,**\n **\"\"\"\": welcome_app,**\n**}**\n**def routing(environ, start_response):**\n **top_level= wsgiref.util.shift_path_info(environ)**\n **app= SCRIPT_MAP.get(top_level, SCRIPT_MAP[''])**\n **content= app(environ, start_response)**\n **return content**\n\n```", "```py\n**def static_app(environ, start_response):**\n **try:**\n **with open(CONTENT_HOME+environ['PATH_INFO']) as static:**\n **content= static.read().encode(\"\"utf-8\"\")**\n **headers= [**\n **(\"\"Content-Type\"\",'text/plain; charset=\"\"utf-8\"\"'),(\"\"Content-Length\"\",str(len(content))),]**\n **start_response('200 OK', headers)**\n **return [content]**\n **except IsADirectoryError as e:**\n **return index_app(environ, start_response)**\n **except FileNotFoundError as e:**\n **start_response('404 NOT FOUND', [])**\n **return([repr(e).encode(\"\"utf-8\"\")])**\n\n```", "```py\n**http://localhost:8080/anscombe/III/?form=csv**\n\n```", "```py\n**import re**\n**path_pat= re.compile(r\"\"^/anscombe/(?P<dataset>.*?)/?$\"\")**\n\n```", "```py\n**/anscombe/{dataset}/**\n\n```", "```py\n**test_pattern= \"\"\"\"\"\"**\n**>>> m1= path_pat.match(\"\"/anscombe/I\"\")**\n**>>> m1.groupdict()**\n**{'dataset': 'I'}**\n**>>> m2= path_pat.match(\"\"/anscombe/II/\"\")**\n**>>> m2.groupdict()**\n**{'dataset': 'II'}**\n**>>> m3= path_pat.match(\"\"/anscombe/\"\")**\n**>>> m3.groupdict()**\n**{'dataset': ''}**\n**\"\"\"\"\"\"**\n\n```", "```py\n**__test__ = {**\n **\"\"test_pattern\"\": test_pattern,**\n**}**\n\n```", "```py\n**import traceback**\n**import urllib**\n**def anscombe_app(environ, start_response):**\n **log= environ['wsgi.errors']**\n **try:**\n **match= path_pat.match(environ['PATH_INFO'])**\n **set_id= match.group('dataset').upper()**\n **query= urllib.parse.parse_qs(environ['QUERY_STRING'])**\n **print(environ['PATH_INFO'], environ['QUERY_STRING'],match.groupdict(), file=log)**\n **log.flush()**\n **dataset= anscombe_filter(set_id, raw_data())**\n **content, mime= serialize(query['form'][0], set_id, dataset)**\n **headers= [**\n **('Content-Type', mime),('Content-Length', str(len(content))),        ]**\n **start_response(\"\"200 OK\"\", headers)**\n **return [content]**\n **except Exception as e:**\n **traceback.print_exc(file=log)**\n **tb= traceback.format_exc()**\n **page= error_page.substitute(title=\"\"Error\"\", message=repr(e), traceback=tb)**\n **content= page.encode(\"\"utf-8\"\")**\n **headers = [**\n **('Content-Type', \"\"text/html\"\"),('Content-Length', str(len(content))),]**\n **start_response(\"\"404 NOT FOUND\"\", headers)**\n **return [content]**\n\n```", "```py\n**from Chapter_3.ch03_ex5 import series, head_map_filter, row_iter, Pair**\n**def raw_data():**\n **\"\"\"\"\"\"**\n **>>> raw_data()['I'] #doctest: +ELLIPSIS**\n **(Pair(x=10.0, y=8.04), Pair(x=8.0, y=6.95), ...**\n **\"\"\"\"\"\"**\n **with open(\"\"Anscombe.txt\"\") as source:**\n **data = tuple(head_map_filter(row_iter(source)))**\n **mapping = dict((id_str, tuple(series(id_num,data)))**\n **for id_num, id_str in enumerate(['I', 'II', 'III', 'IV'])**\n **)**\n **return mapping**\n\n```", "```py\n**def anscombe_filter(set_id, raw_data):**\n **\"\"\"\"\"\"**\n **>>> anscombe_filter(\"\"II\"\", raw_data()) #doctest: +ELLIPSIS**\n **(Pair(x=10.0, y=9.14), Pair(x=8.0, y=8.14), Pair(x=13.0, y=8.74), ...**\n **\"\"\"\"\"\"**\n **return raw_data[set_id]**\n\n```", "```py\n**serializers = {**\n **'xml': ('application/xml', serialize_xml),**\n **'html': ('text/html', serialize_html),**\n **'json': ('application/json', serialize_json),**\n **'csv': ('text/csv', serialize_csv),**\n**}**\n**def serialize(format, title, data):**\n **\"\"\"\"\"\"json/xml/csv/html serialization.**\n **>>> data = [Pair(2,3), Pair(5,7)]**\n **>>> serialize(\"\"json\"\", \"\"test\"\", data)**\n **(b'[{\"\"x\"\": 2, \"\"y\"\": 3}, {\"\"x\"\": 5, \"\"y\"\": 7}]', 'application/json')**\n **\"\"\"\"\"\"**\n **mime, function = serializers.get(format.lower(), ('text/html', serialize_html))**\n **return function(title, data), mime**\n\n```", "```py\n**from functools import wraps**\n**def to_bytes(function):**\n **@wraps(function)**\n **def decorated(*args, **kw):**\n **text= function(*args, **kw)**\n **return text.encode(\"\"utf-8\"\")**\n **return decorated**\n\n```", "```py\n**serializers = {**\n **'xml': ('application/xml', serialize_xml),**\n **'html': ('text/html', to_bytes(serialize_html)),**\n **'json': ('application/json', to_bytes(serialize_json)),**\n **'csv': ('text/csv', to_bytes(serialize_csv)),**\n**}**\n\n```", "```py\n**import json**\n**@to_bytes**\n**def serialize_json(series, data):**\n **\"\"\"\"\"\"**\n **>>> data = [Pair(2,3), Pair(5,7)]**\n **>>> serialize_json(\"\"test\"\", data)**\n **b'[{\"\"x\"\": 2, \"\"y\"\": 3}, {\"\"x\"\": 5, \"\"y\"\": 7}]'**\n **\"\"\"\"\"\"**\n **obj= [dict(x=r.x, y=r.y) for r in data]**\n **text= json.dumps(obj, sort_keys=True)**\n **return text**\n\n```", "```py\n**import csv, io**\n**@to_bytes**\n**def serialize_csv(series, data):**\n **\"\"\"\"\"\"**\n\n **>>> data = [Pair(2,3), Pair(5,7)]**\n **>>> serialize_csv(\"\"test\"\", data)**\n **b'x,y\\\\r\\\\n2,3\\\\r\\\\n5,7\\\\r\\\\n'**\n **\"\"\"\"\"\"**\n **buffer= io.StringIO()**\n **wtr= csv.DictWriter(buffer, Pair._fields)**\n **wtr.writeheader()**\n **wtr.writerows(r._asdict() for r in data)**\n **return buffer.getvalue()**\n\n```", "```py\n**import xml.etree.ElementTree as XML**\n**def serialize_xml(series, data):**\n **\"\"\"\"\"\"**\n **>>> data = [Pair(2,3), Pair(5,7)]**\n **>>> serialize_xml(\"\"test\"\", data)**\n **b'<series name=\"\"test\"\"><row><x>2</x><y>3</y></row><row><x>5</x><y>7</y></row></series>'**\n **\"\"\"\"\"\"**\n **doc= XML.Element(\"\"series\"\", name=series)**\n **for row in data:**\n **row_xml= XML.SubElement(doc, \"\"row\"\")**\n **x= XML.SubElement(row_xml, \"\"x\"\")**\n **x.text= str(row.x)**\n **y= XML.SubElement(row_xml, \"\"y\"\")**\n **y.text= str(row.y)**\n **return XML.tostring(doc, encoding='utf-8')**\n\n```", "```py\n**import string**\n**data_page = string.Template(\"\"\"\"\"\"<html><head><title>Series ${title}</title></head><body><h1>Series ${title}</h1><table><thead><tr><td>x</td><td>y</td></tr></thead><tbody>${rows}</tbody></table></body></html>\"\"\"\"\"\")**\n**@to_bytes**\n**def serialize_html(series, data):**\n **\"\"\"\"\"\">>> data = [Pair(2,3), Pair(5,7)]>>> serialize_html(\"\"test\"\", data) #doctest: +ELLIPSISb'<html>...<tr><td>2</td><td>3</td></tr>\\\\n<tr><td>5</td><td>7</td></tr>...\"\"\"\"\"\"**\n **text= data_page.substitute(title=series,rows=\"\"\\n\"\".join(**\n **\"\"<tr><td>{0.x}</td><td>{0.y}</td></tr>\"\".format(row)**\n **for row in data)**\n **)**\n **return text**\n\n```", "```py\n**import random**\n**rng= random.SystemRandom()**\n**import base64**\n**def make_key_1(rng=rng, size=1):**\n **key_bytes= bytes(rng.randrange(0,256) for i in range(18*size))**\n **key_string= base64.urlsafe_b64encode(key_bytes)**\n **return key_string**\n\n```", "```py\n**>>> 2**(18*8)**\n**22300745198530623141535718272648361505980416**\n\n```"]