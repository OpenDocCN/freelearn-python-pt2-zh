["```py\n**>>> max(1, 2, 3)**\n**3**\n**>>> max((1,2,3,4))**\n**4**\n\n```", "```py\n**(((37.54901619777347, -76.33029518659048), (37.840832, -76.273834), 17.7246), ((37.840832, -76.273834), (38.331501, -76.459503), 30.7382), ((38.331501, -76.459503), (38.845501, -76.537331), 31.0756), ((36.843334, -76.298668), (37.549, -76.331169), 42.3962), ((37.549, -76.331169), (38.330166, -76.458504), 47.2866), ((38.330166, -76.458504), (38.976334, -76.473503), 38.8019))**\n\n```", "```py\n**from ch02_ex3 import float_from_pair, lat_lon_kml, limits, haversine, legs**\n**path= float_from_pair(lat_lon_kml())**\n**trip= tuple((start, end, round(haversine(start, end),4))for start,end in legs(iter(path)))**\n\n```", "```py\n**long, short = max(dist for start,end,dist in trip), min(dist for start,end,dist in trip)**\n**print(long, short)**\n\n```", "```py\n**129.7748 0.1731**\n\n```", "```py\n**def wrap(leg_iter):**\n **return ((leg[2],leg) for leg in leg_iter)**\n\n**def unwrap(dist_leg):**\n **distance, leg = dist_leg**\n **return leg**\n**long, short = unwrap(max(wrap(trip))), unwrap(min(wrap(trip)))**\n**print(long, short)**\n\n```", "```py\n**((27.154167, -80.195663), (29.195168, -81.002998), 129.7748)**\n**((35.505665, -76.653664), (35.508335, -76.654999), 0.1731)**\n\n```", "```py\n**def by_dist(leg):**\n **lat, lon, dist= leg**\n **return dist**\n**long, short = max(trip, key=by_dist), min(trip, key=by_dist)**\n**print(long, short)**\n\n```", "```py\n**wrap= ((key(leg),leg) for leg in trip)**\n**return max(wrap)[1]**\n\n```", "```py\n**long, short = max(trip, key=lambda leg: leg[2]), min(trip, key=lambda leg: leg[2])**\n**print(long, short)**\n\n```", "```py\n**start= lambda x: x[0]**\n**end = lambda x: x[1]**\n**dist = lambda x: x[2]**\n\n```", "```py\n**>>> leg = ((27.154167, -80.195663), (29.195168, -81.002998), 129.7748)**\n**>>> start= lambda x: x[0]**\n**>>> end  = lambda x: x[1]**\n**>>> dist = lambda x: x[2]**\n**>>> dist(leg)**\n**129.7748**\n\n```", "```py\n**>>> start(leg)**\n**(27.154167, -80.195663)**\n**>>>** \n**>>> lat = lambda x: x[0]**\n**>>> lon = lambda x: x[1]**\n**>>> lat(start(leg))**\n**27.154167**\n\n```", "```py\n**>>> text= \"\"\"\\**\n**...       2      3      5      7     11     13     17     19     23     29** \n**...      31     37     41     43     47     53     59     61     67     71** \n**...      73     79     83     89     97    101    103    107    109    113** \n**...     127    131    137    139    149    151    157    163    167    173** \n**...     179    181    191    193    197    199    211    223    227    229** \n**... \"\"\"**\n\n```", "```py\n**>>> data= list(v for line in text.splitlines() for v in line.split())**\n\n```", "```py\n**['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97', '101', '103', '107', '109', '113', '127', '131', '137', '139', '149', '151', '157', '163', '167', '173', '179', '181', '191', '193', '197', '199', '211', '223', '227', '229']**\n\n```", "```py\n**>>> list(map(int,data))**\n**[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229]**\n\n```", "```py\n**map(lambda x: (start(x),end(x),dist(x)*6076.12/5280), trip)**\n\n```", "```py\n**((start(x),end(x),dist(x)*6076.12/5280) for x in trip)**\n\n```", "```py\n**map(function, zip(one_iterable, another_iterable))**\n\n```", "```py\n**(function(x,y) for x,y in zip(one_iterable, another_iterable))**\n\n```", "```py\n**def star_map(function, *iterables)**\n **return (function(*args) for args in zip(*iterables))**\n\n```", "```py\n**>>> waypoints= range(4)**\n**>>> zip(waypoints, waypoints[1:])**\n**<zip object at 0x101a38c20>**\n**>>> list(_)**\n**[(0, 1), (1, 2), (2, 3)]**\n\n```", "```py\n**from ch02_ex3 import lat_lon_kml, float_from_pair, haversine**\n**path= tuple(float_from_pair(lat_lon_kml()))**\n**distances1= map( lambda s_e: (s_e[0], s_e[1], haversine(*s_e)), zip(path, path[1:]))**\n\n```", "```py\n**distances2= map(lambda s, e: (s, e, haversine(s, e)), path, path[1:])**\n\n```", "```py\n**long= list(filter(lambda leg: dist(leg) >= 50, trip)))**\n\n```", "```py\n**>>> filter(lambda x: x%3==0 or x%5==0, range(10))**\n**<filter object at 0x101d5de50>**\n**>>> sum(_)**\n**23**\n\n```", "```py\n**>>> list(x for x in range(10) if x%3==0 or x%5==0)**\n**[0, 3, 5, 6, 9]**\n\n```", "```py\n**>>> from ch01_ex1 import isprimeg**\n**>>> list(filter(isprimeg, range(100)))**\n**[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]**\n\n```", "```py\n**from stats import mean, stdev, z**\n**dist_data = list(map(dist, trip))**\n**\u03bc_d = mean(dist_data)**\n**\u03c3_d = stdev(dist_data)**\n**outlier = lambda leg: z(dist(leg),\u03bc_d,\u03c3_d) > 3**\n**print(\"Outliers\", list(filter(outlier, trip)))**\n\n```", "```py\n**>>> tail= iter([1, 2, 3, None, 4, 5, 6].pop, None)**\n**>>> list(tail)**\n**[6, 5, 4]**\n\n```", "```py\n**(((37.54901619777347, -76.33029518659048), (37.840832, -76.273834), 17.7246), ((37.840832, -76.273834), (38.331501, -76.459503), 30.7382), ((38.331501, -76.459503), (38.845501, -76.537331), 31.0756), ((36.843334, -76.298668), (37.549, -76.331169), 42.3962), ((37.549, -76.331169), (38.330166, -76.458504), 47.2866), ((38.330166, -76.458504), (38.976334, -76.473503), 38.8019))**\n\n```", "```py\n**>>> sorted(dist(x) for x in trip)**\n**[0.1731, 0.1898, 1.4235, 4.3155, ... 86.2095, 115.1751, 129.7748]**\n\n```", "```py\n**>>> sorted(trip, key=dist)**\n**[((35.505665, -76.653664), (35.508335, -76.654999), 0.1731), ((35.028175, -76.682495), (35.031334, -76.682663), 0.1898), ((27.154167, -80.195663), (29.195168, -81.002998), 129.7748)]**\n\n```", "```py\n**dist = lambda leg: leg[2]**\n\n```", "```py\n    map(f, C)\n    ```", "```py\n    (f(x) for x in C)\n    ```", "```py\n    def mymap(f, C):\n        for x in C:\n            yield f(x)\n    mymap(f, C)\n    ```", "```py\n    filter(f, C)\n    ```", "```py\n    (x for x in C if f(x))\n    ```", "```py\n    def myfilter(f, C):\n        for x in C:\n            if f(x):\n                yield x\n    myfilter(f, C)\n    ```", "```py\n**def convert(conversion, trip):**\n **return (conversion(distance) for start, end, distance in trip)**\n\n```", "```py\n**to_miles = lambda nm: nm*5280/6076.12**\n**to_km = lambda nm: nm*1.852**\n**to_nm = lambda nm: nm**\n\n```", "```py\n**convert(to_miles, trip)**\n\n```", "```py\n**[20.397120559090908, 35.37291511060606, ..., 44.652462240151515]**\n\n```", "```py\n**fst= lambda x: x[0]**\n**snd= lambda x: x[1]**\n**sel2= lambda x: x[2]**\n\n```", "```py\n**to_miles= lambda s_e_d: to_miles(sel2(s_e_d))**\n\n```", "```py\n**to_miles(s_e_d) for s_e_d in trip**\n\n```", "```py\n**from ch02_ex3 import float_from_pair, lat_lon_kml, limits, haversine, legs**\n**path= float_from_pair(lat_lon_kml())**\n**trip= tuple((start, end, round(haversine(start, end),4)) for start,end in legs(iter(path)))**\n\n```", "```py\n**def cons_distance(distance, legs_iter):**\n **return ((start, end, round(distance(start,end),4)) for start, end in legs_iter)**\n\n```", "```py\n**path= float_from_pair(lat_lon_kml())**\n**trip2= tuple(cons_distance(haversine, legs(iter(path))))**\n\n```", "```py\n**def cons_distance3(distance, legs_iter):**\n **return ( leg+(round(distance(*leg),4),) for leg in legs_iter)**\n\n```", "```py\n**text= \"\"\"\\**\n **2      3      5      7     11     13     17     19     23     29**\n **31     37     41     43     47     53     59     61     67     71**\n **73     79     83     89     97    101    103    107    109    113**\n **127    131    137    139    149    151    157    163    167    173**\n **179    181    191    193    197    199    211    223    227    229**\n**\"\"\"**\n\n```", "```py\n**data= list(v for line in text.splitlines() for v in line.split())**\n\n```", "```py\n**['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97', '101', '103', '107', '109', '113', '127', '131', '137', '139', '149', '151', '157', '163', '167', '173', '179', '181', '191', '193', '197', '199', '211', '223', '227', '229']**\n\n```", "```py\n**def numbers_from_rows(conversion, text):**\n **return (conversion(v) for line in text.splitlines() for v in line.split())**\n\n```", "```py\n**print(list(numbers_from_rows(float, text)))**\n\n```", "```py\n**map(float, v for line in text.splitlines() for v in line.split())**\n\n```", "```py\n**def group_by_iter(n, iterable):**\n **row= tuple(next(iterable) for i in range(n))**\n **while row:**\n **yield row**\n **row= tuple(next(iterable) for i in range(n))**\n\n```", "```py\n **group_by_iter(7, filter( lambda x: x%3==0 or x%5==0, range(100)))**\n\n```", "```py\n**def group_filter_iter(n, predicate, iterable):**\n **data = filter(predicate, iterable)**\n **row= tuple(next(data) for i in range(n))**\n **while row:**\n **yield row**\n **row= tuple(next(data) for i in range(n))**\n\n```", "```py\n**group_filter_iter(7, lambda x: x%3==0 or x%5==0, range(1,100))**\n\n```", "```py\n**def first(predicate, collection):**\n **for x in collection:**\n **if predicate(x): return x**\n\n```", "```py\n**import math**\n**def isprimeh(x):**\n **if x == 2: return True**\n **if x % 2 == 0: return False**\n **factor= first( lambda n: x%n==0, range(3,int(math.sqrt(x)+.5)+1,2))**\n **return factor is None**\n\n```", "```py\n**def map_not_none(function, iterable):**\n **for x in iterable:**\n **try:**\n **yield function(x)**\n **except Exception as e:**\n **pass # print(e)**\n\n```", "```py\n**data = map_not_none(int, some_source)**\n\n```", "```py\n**from collections.abc import Callable**\n**class NullAware(Callable):**\n **def __init__(self, some_func):**\n **self.some_func= some_func**\n **def __call__(self, arg):**\n **return None if arg is None else self.some_func(arg)**\n\n```", "```py\n**null_log_scale= NullAware(math.log)**\n\n```", "```py\n**>>> some_data = [10, 100, None, 50, 60]**\n**>>> scaled = map(null_log_scale, some_data)**\n**>>> list(scaled)**\n**[2.302585092994046, 4.605170185988092, None, 3.912023005428146, 4.0943445622221]**\n\n```", "```py\n**>>> scaled= map(NullAware( math.log ), some_data)**\n**>>> list(scaled)**\n**[2.302585092994046, 4.605170185988092, None, 3.912023005428146, 4.0943445622221]**\n\n```", "```py\n**from collections.abc import Callable**\n**class Sum_Filter(Callable):**\n **__slots__ = [\"filter\", \"function\"]**\n **def __init__(self, filter, function):**\n **self.filter= filter**\n **self.function= function**\n **def __call__(self, iterable):**\n **return sum(self.function(x) for x in iterable ifself.filter(x))**\n\n```", "```py\n**count_not_none = Sum_Filter(lambda x: x is not None, lambda x: 1)**\n\n```", "```py\n**N= count_not_none(data)**\n\n```", "```py\n**N= sum_filter_f(valid, count_, data)**\n\n```"]