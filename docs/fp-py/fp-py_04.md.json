["```py\nfst = lambda x: x[0]\nsnd = lambda x: x[1]\n```", "```py\n<Placemark><Point>\n<coordinates>-76.33029518659048,37.54901619777347,0</coordinates>\n</Point></Placemark>\n```", "```py\n**import xml.etree.ElementTree as XML**\n**def row_iter_kml(file_obj):**\n **ns_map= {**\n **\"ns0\": \"http://www.opengis.net/kml/2.2\",**\n **\"ns1\": \"http://www.google.com/kml/ext/2.2\"}**\n **doc= XML.parse(file_obj)**\n **return (comma_split(coordinates.text)**\n **for coordinates in doc.findall(\"./ns0:Document/ns0:Folder/ns0:Placemark/ns0:Point/ns0:coordinates\", ns_map))**\n\n```", "```py\n**def comma_split(text):**\n **return text.split(\",\")**\n\n```", "```py\n**[['-76.33029518659048', '37.54901619777347', '0'], ['-76.27383399999999', '37.840832', '0'], ['-76.459503', '38.331501', '0'], and so on ['-76.47350299999999', '38.976334', '0']]**\n\n```", "```py\n**def pick_lat_lon(lon, lat, alt):**\n **return lat, lon**\n\n```", "```py\n**def lat_lon_kml(row_iter):**\n **return (pick_lat_lon(*row) for row in row_iter)**\n\n```", "```py\n**with urllib.request.urlopen(\"file:./Winter%202012-2013.kml\") as source:**\n **v1= tuple(lat_lon_kml(row_iter_kml(source)))**\n**print(v1)**\n\n```", "```py\n**(('37.54901619777347', '-76.33029518659048'), ('37.840832', '-76.27383399999999'), ('38.331501', '-76.459503'), ('38.330166', '-76.458504'), ('38.976334', '-76.47350299999999'))**\n\n```", "```py\n**begin= next(iterable)**\n**for end in iterable:**\n **compute_something(begin, end)**\n **begin = end**\n\n```", "```py\n**def pairs(iterable):**\n **def pair_from( head, iterable_tail ):**\n **nxt= next(iterable_tail)**\n **yield head, nxt**\n **yield from pair_from( nxt, iterable_tail )**\n **try:**\n **return pair_from( next(iterable), iterable )**\n **except StopIteration:**\n **return**\n\n```", "```py\n**def legs(lat_lon_iter):**\n **begin= next(lat_lon_iter)**\n **for end in lat_lon_iter:**\n **yield begin, end**\n **begin= end**\n\n```", "```py\n**list[0:1], list[1:2], list[2:3], ..., list[-2:]**\n\n```", "```py\n**zip(list, list[1:])**\n\n```", "```py\n**>>> list(legs(x for x in range(3)))**\n**[(0, 1), (1, 2)]**\n**>>> list(legs([0,1,2]))**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n **File \"<stdin>\", line 2, in legs**\n**TypeError: 'list' object is not an iterator**\n**>>> list(legs( iter([0,1,2])))**\n**[(0, 1), (1, 2)]**\n\n```", "```py\n**def legs_filter(lat_lon_iter):**\n **begin= next(lat_lon_iter)**\n **for end in lat_lon_iter:**\n **if #some rule for rejecting:**\n **continue**\n **yield begin, end**\n **begin= end**\n\n```", "```py\n**print(tuple(legs((float(lat), float(lon)) for lat,lon in lat_lon_kml())))**\n\n```", "```py\n**flt= ((float(lat), float(lon)) for lat,lon in lat_lon_kml())**\n**print(tuple(legs(flt)))**\n\n```", "```py\n**def float_from_pair( lat_lon_iter ):**\n **return ((float(lat), float(lon)) for lat,lon in lat_lon_iter)**\n\n```", "```py\n**legs( float_from_pair(lat_lon_kml()))**\n\n```", "```py\n**(('37.54901619777347', '-76.33029518659048'), ('37.840832', '-76.27383399999999'), ... ('38.976334', '-76.47350299999999'))**\n\n```", "```py\n**(((37.54901619777347, -76.33029518659048), (37.840832, -76.273834)), ((37.840832, -76.273834), \u2026 ((38.330166, -76.458504), (38.976334, -76.473503)))**\n\n```", "```py\n**from math import radians, sin, cos, sqrt, asin**\n\n**MI= 3959**\n**NM= 3440**\n**KM= 6371**\n\n**def haversine( point1, point2, R=NM ):**\n **lat_1, lon_1= point1**\n **lat_2, lon_2= point2**\n\n **\u0394_lat = radians(lat_2 - lat_1)**\n **\u0394_lon = radians(lon_2 - lon_1)**\n **lat_1 = radians(lat_1)**\n **lat_2 = radians(lat_2)**\n **a = sin(\u0394_lat/2)**2 + cos(lat_1)*cos(lat_2)*sin(\u0394_lon/2)**2**\n **c = 2*asin(sqrt(a))**\n\n **return R * c**\n\n```", "```py\n **trip= ((start, end, round(haversine(start, end),4))**\n **for start,end in legs(float_from_pair(lat_lon_kml())))**\n **for start, end, dist in trip:**\n **print(start, end, dist)**\n\n```", "```py\n**(37.54901619777347, -76.33029518659048) (37.840832, -76.273834) 17.7246**\n**(37.840832, -76.273834) (38.331501, -76.459503) 30.7382**\n**(38.331501, -76.459503) (38.845501, -76.537331) 31.0756**\n**(36.843334, -76.298668) (37.549, -76.331169) 42.3962**\n**(37.549, -76.331169) (38.330166, -76.458504) 47.2866**\n**(38.330166, -76.458504) (38.976334, -76.473503) 38.8019**\n\n```", "```py\n**all(isprime(x) for x in someset)**\n\n```", "```py\n**not all(isprime(x) for x in someset)**\n**any(not isprime(x) for x in someset)**\n\n```", "```py\n**>>> all(())**\n**True**\n**>>> any(())**\n**False**\n\n```", "```py\n**>>> sum(())**\n**0**\n\n```", "```py\n**def mean( iterable ):**\n **return sum(iterable)/len(iterable)**\n\n```", "```py\n**import math**\n**s0= len(data) # sum(1 for x in data) # x**0**\n**s1= sum(data) # sum(x for x in data) # x**1**\n**s2= sum(x*x for x in data)**\n\n**mean= s1/s0**\n**stdev= math.sqrt(s2/s0 - (s1/s0)**2)**\n\n```", "```py\n**def z( x, \u03bc_x, \u03c3_x ):**\n **return (x-\u03bc_x)/\u03c3_x**\n\n```", "```py\n**>>> d = [2, 4, 4, 4, 5, 5, 7, 9]**\n**>>> list(z(x, mean(d), stdev(d)) for x in d)**\n**[-1.5, -0.5, -0.5, -0.5, 0.0, 0.0, 1.0, 2.0]**\n\n```", "```py\n**def mean(x):** \n **return s1(x)/s0(x)**\n**def stdev(x):**\n **return math.sqrt(s2(x)/s0(x) - (s1(x)/s0(x))**2)**\n\n```", "```py\n**def s0(data):**\n **return sum(1 for x in data) # or len(data)**\n**def s1(data):** \n **return sum(x for x in data) # or sum(data)**\n**def s2(data):** \n **return sum(x*x for x in data)**\n\n```", "```py\n**def corr( sample1, sample2 ):**\n **\u03bc_1, \u03c3_1 = mean(sample1), stdev(sample1)**\n **\u03bc_2, \u03c3_2 = mean(sample2), stdev(sample2)**\n **z_1 = (z(x, \u03bc_1, \u03c3_1) for x in sample1)**\n **z_2 = (z(x, \u03bc_2, \u03c3_2) for x in sample2)**\n **r = sum(zx1*zx2 for zx1, zx2 in zip(z_1, z_2) )/s0(sample1)**\n **return r**\n\n```", "```py\n **>>> xi= [1.47, 1.50, 1.52, 1.55, 1.57, 1.60, 1.63, 1.65,...    1.68, 1.70, 1.73, 1.75, 1.78, 1.80, 1.83,] #  Height (m)**\n **>>> yi= [52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93, 61.29,...    63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46,] # ...    Mass (kg)**\n **>>> round(corr( xi, yi ), 5)**\n **0.99458**\n\n```", "```py\n**>>> xi= [1.47, 1.50, 1.52, 1.55, 1.57, 1.60, 1.63, 1.65,... 1.68, 1.70, 1.73, 1.75, 1.78, 1.80, 1.83,]** \n**>>> yi= [52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93, 61.29,... 63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46,]** \n**>>> zip( xi, yi )**\n**<zip object at 0x101d62ab8>**\n**>>> list(zip( xi, yi ))**\n**[(1.47, 52.21), (1.5, 53.12), (1.52, 54.48), (1.55, 55.84), (1.57, 57.2), (1.6, 58.57), (1.63, 59.93), (1.65, 61.29), (1.68, 63.11), (1.7, 64.47), (1.73, 66.28), (1.75, 68.1), (1.78, 69.92), (1.8, 72.19), (1.83, 74.46)]**\n\n```", "```py\n**>>> zip()**\n**<zip object at 0x101d62ab8>**\n**>>> list(_)**\n**[]**\n\n```", "```py\n**>>> zip( (1,2,3) )**\n**<zip object at 0x101d62ab8>**\n**>>> list(_)**\n**[(1,), (2,), (3,)]**\n\n```", "```py\n**>>> list(zip((1, 2, 3), ('a', 'b')))**\n**[(1, 'a'), (2, 'b')]**\n\n```", "```py\n**p0= (x[0] for x in pairs)**\n**p1= (x[1] for x in pairs)**\n\n```", "```py\n**sum(p0*p1 for for p0, p1 in pairs)**\n\n```", "```py\n **2      3      5      7     11     13     17     19     23     29**\n **31     37     41     43     47     53     59     61     67     71**\n **...**\n\n```", "```py\n**blocked = [['2', '3', '5', '7', '11', '13', '17', '19', '23', '29'], ['31', '37', '41', '43', '47', '53', '59', '61', '67', '71'],...**\n\n```", "```py\n**>>> (x for line in blocked for x in line)**\n**<generator object <genexpr> at 0x101cead70>**\n**>>> list(_)**\n**['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', \u2026 ]**\n\n```", "```py\n**for line in data:**\n **for x in line:**\n **yield x**\n\n```", "```py\n**flat= ['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', ... ]**\n\n```", "```py\n**>>> flat_iter=iter(flat)**\n**>>> (tuple(next(flat_iter) for i in range(5)) for row in range(len(flat)//5))**\n**<generator object <genexpr> at 0x101cead70>**\n**>>> list(_)**\n**[('2', '3', '5', '7', '11'), ('13', '17', '19', '23', '29'), ('31', '37', '41', '43', '47'), ('53', '59', '61', '67', '71'), ('73', '79', '83', '89', '97'), ('101', '103', '107', '109', '113'), ('127', '131', '137', '139', '149'), ('151', '157', '163', '167', '173'), ('179', '181', '191', '193', '197'), ('199', '211', '223', '227', '229')]**\n\n```", "```py\n**def group_by_seq(n, sequence):**\n **flat_iter=iter(sequence)**\n **full_sized_items = list( tuple(next(flat_iter)** \n **for i in range(n))**\n **for row in range(len(sequence)//n))**\n **trailer = tuple(flat_iter)**\n **if trailer:**\n **return full_sized_items + [trailer]**\n **else:**\n **return full_sized_items**\n\n```", "```py\n**def group_by_iter( n, iterable ):** \n **row= tuple(next(iterable) for i in range(n))**\n **while row:**\n **yield row**\n **row= tuple(next(iterable) for i in range(n))**\n\n```", "```py\n**flat= ['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71',... ]**\n\n```", "```py\n**zip(flat[0::2], flat[1::2])**\n\n```", "```py\n**zip(*(flat[i::n] for i in range(n)))**\n\n```", "```py\n**def digits(x, b):**\n **if x == 0: return**\n **yield x % b**\n **for d in to_base(x//b, b):**\n **yield d**\n\n```", "```py\n**def to_base(x, b):**\n **return reversed(tuple(digits(x, b)))**\n\n```", "```py\n**>>> xi**\n**[1.47, 1.5, 1.52, 1.55, 1.57, 1.6, 1.63, 1.65, 1.68, 1.7, 1.73, 1.75, 1.78, 1.8, 1.83]**\n**>>> list(enumerate(xi))**\n**[(0, 1.47), (1, 1.5), (2, 1.52), (3, 1.55), (4, 1.57), (5, 1.6), (6, 1.63), (7, 1.65), (8, 1.68), (9, 1.7), (10, 1.73), (11, 1.75), (12, 1.78), (13, 1.8), (14, 1.83)]**\n\n```", "```py\n**zip(range(len(source)), source)**\n\n```"]