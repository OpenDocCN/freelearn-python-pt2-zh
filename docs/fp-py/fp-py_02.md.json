["```py\n**>>> def example(a, b, **kw):**\n**...    return a*b**\n**...**\n**>>> type(example)**\n**<class 'function'>**\n**>>> example.__code__.co_varnames**\n**('a', 'b', 'kw')**\n**>>> example.__code__.co_argcount**\n**2**\n\n```", "```py\n**>>> mersenne = lambda x: 2**x-1**\n**>>> mersenne(17)**\n**131071**\n\n```", "```py\n**>>> year_cheese = [(2000, 29.87), (2001, 30.12), (2002, 30.6), (2003, 30.66),(2004, 31.33), (2005, 32.62), (2006, 32.73), (2007, 33.5), (2008, 32.84), (2009, 33.02), (2010, 32.92)]**\n\n```", "```py\n**>>> max(year_cheese)**\n**(2010, 32.92)**\n\n```", "```py\n**>>> max(year_cheese, key=lambda yc: yc[1])**\n**(2007, 33.5)**\n\n```", "```py\n**>>> max(map(lambda yc: (yc[1],yc), year_cheese))**\n**(33.5, (2007, 33.5))**\n**>>> _[1]**\n**(2007, 33.5)**\n\n```", "```py\n**snd= lambda x: x[1]**\n**snd( max(map(lambda yc: (yc[1],yc), year_cheese)))**\n\n```", "```py\n**>>> 0 and print(\"right\")**\n**0**\n**>>> True and print(\"right\")**\n**right**\n\n```", "```py\n**>>> def numbers():**\n**...    for i in range(1024):**\n**...        print( \"=\", i )**\n**...        yield i**\n\n```", "```py\n**>>> def sum_to(n):**\n**...    sum= 0**\n**...    for i in numbers():**\n**...        if i == n: break**\n**...        sum += i**\n**...    return sum**\n\n```", "```py\n**>>> sum_to(5)**\n**= 0**\n**= 1**\n**= 2**\n**= 3**\n**= 4**\n**= 5**\n**10**\n\n```", "```py\n**not any(n%p==0 for p in range(2,int(math.sqrt(n))+1))**\n\n```", "```py\ndef isprimer(n):\n    def isprime(k, coprime):\n        \"\"\"Is k relatively prime to the value coprime?\"\"\"\n        if k < coprime*coprime: return True\n        if k % coprime == 0: return False\n        return isprime(k, coprime+2)\n    if n < 2: return False\n    if n == 2: return True\n    if n % 2 == 0: return False\n    return isprime(n, 3)\n```", "```py\ndef isprime(p):\n    if p < 2: return False\n    if p == 2: return True\n    if p % 2 == 0: return False\n    return not any(p==0 for p in range(3,int(math.sqrt(n))+1,2))\n```", "```py\n**some_object.foo().bar().yet_more()**\n\n```", "```py\n**yet_more(bar(foo(some_object)))**\n\n```"]