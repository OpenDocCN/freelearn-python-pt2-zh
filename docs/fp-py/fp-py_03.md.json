["```py\n **def some_function(a, b, t):**\n **return a+b*t+global_adjustment**\n\n```", "```py\n**def open(iname, oname):**\n **global ifile, ofile**\n **ifile= open(iname, \"r\")**\n **ofile= open(oname, \"w\")**\n\n```", "```py\n**import collections**\n**class Mersenne1(collections.Callable):**\n **def __init__(self, algorithm):**\n **self.pow2= algorithm**\n **def __call__(self, arg):**\n **return self.pow2(arg)-1**\n\n```", "```py\n**def shifty(b):**\n **return 1 << b**\n**def multy(b):**\n **if b == 0: return 1**\n **return 2*multy(b-1)**\n**def faster(b):**\n **if b == 0: return 1**\n **if b%2 == 1: return 2*faster(b-1)**\n **t= faster(b//2)**\n **return t*t**\n\n```", "```py\n**m1s= Mersenne1(shifty)**\n**m1m= Mersenne1(multy)**\n**m1f= Mersenne1(faster)**\n\n```", "```py\n**from decimal import ***\n**def clean_decimal(text):**\n **if text is None: return text**\n **try:**\n **return Decimal(text.replace(\"$\", \"\").replace(\",\", \"\"))**\n **except InvalidOperation:**\n **return text**\n\n```", "```py\n**def replace(data, a, b):**\n **return data.replace(a,b)**\n\n```", "```py\n**>>> replace=str.replace**\n**>>> replace(\"$12.45\",\"$\",\"\")**\n\n```", "```py\n**def remove( str, chars ):**\n **if chars: return remove( str.replace(chars[0], \"\"), chars[1:] )**\n **return str**\n\n```", "```py\n**red = lambda color: color[0]**\n**green = lambda color: color[1]**\n**blue = lambda color: color[2]**\n\n```", "```py\n**Color = namedtuple(\"Color\", (\"red\", \"green\", \"blue\", \"name\"))**\n\n```", "```py\n**def pfactorsl(x):**\n **if x % 2 == 0:**\n **yield 2**\n **if x//2 > 1:**\n **yield from pfactorsl(x//2)**\n **return**\n **for i in range(3,int(math.sqrt(x)+.5)+1,2):**\n **if x % i == 0:**\n **yield i**\n **if x//i > 1:**\n **yield from pfactorsl(x//i)**\n **return**\n **yield x**\n\n```", "```py\n**def pfactorsr(x):**\n **def factor_n(x, n):**\n **if n*n > x:**\n **yield x**\n **return**\n **if x % n == 0:**\n **yield n**\n **if x//n > 1:**\n **yield from factor_n(x//n, n)**\n **else:**\n **yield from factor_n(x, n+2)**\n **if x % 2 == 0:**\n **yield 2**\n **if x//2 > 1:**\n **yield from pfactorsr(x//2)**\n **return**\n **yield from factor_n(x, 3)**\n\n```", "```py\n**>>> from ch02_ex4 import ***\n**>>> pfactorsl( 1560 )**\n**<generator object pfactorsl at 0x1007b74b0>**\n**>>> list(pfactorsl(1560))**\n**[2, 2, 2, 3, 5, 13]**\n**>>> len(pfactorsl(1560))**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**TypeError: object of type 'generator' has no len()**\n\n```", "```py\n**>>> result= pfactorsl(1560)**\n**>>> sum(result)**\n**27**\n**>>> sum(result)**\n**0**\n\n```", "```py\n**import itertools**\n**def limits(iterable):**\n **max_tee, min_tee = itertools.tee(iterable, 2)**\n **return max(max_tee), min(min_tee)**\n\n```", "```py\n**g_f_x = (g(f(x)) for x in range())**\n\n```", "```py\n**g_f_x = (g(y) for y in (f(x) for x in range()))**\n\n```", "```py\n**f_x= (f(x) for x in range())**\n**g_f_x= (g(y) for y in f_x)**\n\n```", "```py\nAnscombe's quartet\nI  II  III  IV\nx  y  x  y  x  y  x  y\n10.0  8.04  10.0  9.14\t  10.0  7.46  8.0  6.58\n8.0\t6.95  8.0  8.14  8.0  6.77  8.0  5.76\n13.0  7.58  13.0  8.74  13.0  12.74  8.0  7.71\n```", "```py\n**import csv**\n**def row_iter(source):**\n **return csv.reader(source, delimiter=\"\\t\")**\n\n```", "```py\n**with open(\"Anscombe.txt\") as source:**\n **print( list(row_iter(source)) )**\n\n```", "```py\n**[[\"Anscombe's quartet\"], ['I', 'II', 'III', 'IV'], ['x', 'y', 'x', 'y', 'x', 'y', 'x', 'y'],** \n\n```", "```py\n**def head_split_fixed(row_iter):**\n **title= next(row_iter)**\n **assert len(title) == 1 and title[0] == \"Anscombe's quartet\"**\n **heading= next(row_iter)**\n **assert len(heading) == 4 and heading == ['I', 'II', 'III', 'IV']**\n **columns= next(row_iter)**\n **assert len(columns) == 8 and columns == ['x', 'y', 'x', 'y', 'x', 'y', 'x', 'y']**\n **return row_iter**\n\n```", "```py\n**with open(\"Anscombe.txt\") as source:**\n **print( list(head_split_fixed(row_iter(source))))**\n\n```", "```py\n**>>> range(10)**\n**range(0, 10)**\n**>>> [range(10)]**\n**[range(0, 10)]**\n**>>> [x for x in range(10)]**\n**[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]**\n**>>> list(range(10))**\n**[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]**\n\n```", "```py\n**with open(\"Anscombe.txt\") as source:**\n **data = head_split_fixed(row_iter(source))**\n **print(list(data))**\n\n```", "```py\n**[['10.0', '8.04', '10.0', '9.14', '10.0', '7.46', '8.0', '6.58'],** \n**['8.0', '6.95', '8.0', '8.14', '8.0', '6.77', '8.0', '5.76'], ...**\n**['5.0', '5.68', '5.0', '4.74', '5.0', '5.73', '8.0', '6.89']]**\n\n```", "```py\n**from collections import namedtuple**\n**Pair = namedtuple(\"Pair\", (\"x\", \"y\"))**\n**def series(n, row_iter):**\n **for row in row_iter:**\n **yield Pair(*row[n*2:n*2+2])**\n\n```", "```py\n**with open(\"Anscombe.txt\") as source:**\n **data = tuple(head_split_fixed(row_iter(source)))**\n **sample_I= tuple(series(0,data))**\n **sample_II= tuple(series(1,data))**\n **sample_III= tuple(series(2,data))**\n **sample_IV= tuple(series(3,data))**\n\n```", "```py\n**(Pair(x='10.0', y='8.04'), Pair(x='8.0', y='6.95'),** \n**Pair(x='13.0', y='7.58'), Pair(x='9.0', y='8.81'),** \n**Etc.** \n**Pair(x='5.0', y='5.68'))**\n\n```", "```py\n **mean = sum(float(pair.y) for pair in sample_I)/len(sample_I)**\n\n```", "```py\n**for subset in sample_I, sample_II, sample_III, sample_III:**\n **mean = sum(float(pair.y) for pair in subset)/len(subset)**\n **print(mean)**\n\n```", "```py\n **GIMP Palette**\n **Name: Small**\n **Columns: 3**\n **#**\n **0  0  0    Black**\n **255 255 255    White**\n **238  32  77    Red**\n **28 172 120      Green**\n **31 117 254      Blue**\n\n```", "```py\n**from collections import namedtuple**\n**Color = namedtuple(\"Color\", (\"red\", \"green\", \"blue\", \"name\"))**\n\n```", "```py\n**(Color(red=239, green=222, blue=205, name='Almond'), Color(red=205, green=149, blue=117, name='Antique Brass'), Color(red=253, green=217, blue=181, name='Apricot'), Color(red=197, green=227, blue=132, name='Yellow Green'), Color(red=255, green=174, blue=66, name='Yellow Orange'))**\n\n```", "```py\n**name_map= dict( (c.name, c) for c in sequence )**\n\n```", "```py\n**{'Caribbean Green': Color(red=28, green=211, blue=162, name='Caribbean Green'),'Peach': Color(red=255, green=207, blue=171, name='Peach'), 'Blizzard Blue': Color(red=172, green=229, blue=238, name='Blizzard Blue'),**\n\n```", "```py\n**import bisect**\n**from collections.abc import Mapping**\n**class StaticMapping(Mapping):**\n **def __init__( self, iterable ):**\n **self._data = tuple(iterable)**\n **self._keys = tuple(sorted(key for key, _ in self._data))**\n\n **def __getitem__(self, key):**\n **ix= bisect.bisect_left(self._keys, key)**\n **if ix != len(self._keys) and self._keys[ix] == key:**\n **return self._data[ix][1]**\n **raise ValueError(\"{0!r} not found\".format(key))**\n **def __iter__(self):**\n **return iter(self._keys)**\n **def __len__(self):**\n **return len(self._keys)**\n\n```"]