["```py\n**from functools import reduce**\n**from operator import mul**\n**prod = lambda x: reduce(mul, x)**\n\n```", "```py\n**from collections.abc import Callable**\n**class Binomial(Callable):**\n **def __init__(self):**\n **self.fact_cache= {}**\n **self.bin_cache= {}**\n **def fact(self, n):**\n **if n not in self.fact_cache:**\n **self.fact_cache[n] = prod(range(1,n+1))**\n **return self.fact_cache[n]**\n **def __call__(self, n, m):**\n **if (n,m) not in self.bin_cache:**\n **self.bin_cache[n,m] = self.fact(n)//(self.fact(m)*self.fact(n-m))**\n **return self.bin_cache[n,m]**\n\n```", "```py\n**>>> binom= Binomial()**\n**>>> binom(52,5)**\n**2598960**\n\n```", "```py\n    **def fact(n):**\n     **if n == 0: return 1**\n     **else: return n*fact(n-1)**\n\n    ```", "```py\n    **def facti(n):**\n     **if n == 0: return 1**\n     **f= 1**\n     **for i in range(2,n):**\n     **f= f*i**\n     **return f**\n\n    ```", "```py\n**def fact(n):**\n **\"\"\"Recursive Factorial**\n **>>> fact(0)**\n **1**\n **>>> fact(1)**\n **1**\n **>>> fact(7)**\n **5040**\n **\"\"\"**\n **if n == 0: return 1**\n **else: return n*fact(n-1)**\n\n```", "```py\n**test_example=\"\"\"**\n**>>> binom= Binomial()**\n**>>> binom(52,5)**\n**2598960**\n**\"\"\"**\n**__test__ = {**\n **\"test_example\": test_example,**\n**}**\n\n```", "```py\n**SELECT SHIFT, DEFECT_CODE, SERIAL_NUMBER**\n**FROM some tables;**\n\n```", "```py\nshift,defect_code,serial_number\n1,None,12345\n1,None,12346\n1,A,12347\n1,B,12348\nand so on. for thousands of wafers\n```", "```py\nshift,defect_code,count\n1,A,15\n2,A,26\n3,A,33\nand so on.\n```", "```py\n**import csv**\n**from collections import Counter**\n**from types import SimpleNamespace**\n**def defect_reduce(input):**\n **rdr= csv.DictReader(input)**\n **assert sorted(rdr.fieldnames) == [\"defect_type\", \"serial_number\", \"shift\"]**\n **rows_ns = (SimpleNamespace(**row) for row in rdr)**\n **defects = ((row.shift, row.defect_type) for row in rows_ns:**\n **if row.defect_type)**\n **tally= Counter(defects)**\n **return tally**\n\n```", "```py\n**with open(\"qa_data.csv\", newline=\"\" ) as input:**\n **defects= defect_reduce(input)**\n**print(defects)**\n\n```", "```py\n**Counter({('3', 'C'): 49, ('1', 'C'): 45, ('2', 'C'): 34, ('3', 'A'): 33, ('2', 'B'): 31, ('2', 'A'): 26, ('1', 'B'): 21, ('3', 'D'): 20, ('3', 'B'): 17, ('1', 'A'): 15, ('1', 'D'): 13, ('2', 'D'): 5})**\n\n```", "```py\n**from collections import Counter**\n**import csv**\n**def defect_counts(source):**\n **rdr= csv.DictReader(source)**\n **assert rdr.fieldnames == [\"shift\", \"defect_code\", \"count\"]**\n **convert = map(lambda d: ((d['shift'], d['defect_code']), int(d['count'])),**\n **rdr)**\n **return Counter(dict(convert))**\n\n```", "```py\n**Counter({('3', 'C'): 49, ('1', 'C'): 45, ('2', 'C'): 34, ('3', 'A'): 33, ('2', 'B'): 31, ('2', 'A'): 26,('1', 'B'): 21, ('3', 'D'): 20, ('3', 'B'): 17, ('1', 'A'): 15, ('1', 'D'): 13, ('2', 'D'): 5})**\n\n```", "```py\n**total= sum(defects.values())**\n\n```", "```py\n**shift_totals= sum((Counter({s:defects[s,d]}) for s,d in defects), Counter())**\n\n```", "```py\n**type_totals= sum((Counter({d:defects[s,d]}) for s,d in defects), Counter())**\n\n```", "```py\n**Counter({'3': 119, '2': 96, '1': 94})**\n\n```", "```py\n**Counter({'C': 128, 'A': 74, 'B': 69, 'D': 38})**\n\n```", "```py\n**from fractions import Fraction**\n**P_shift = dict( (shift, Fraction(shift_totals[shift],total))**\n**for shift in sorted(shift_totals))**\n**P_type = dict((type, Fraction(type_totals[type],total)) for type in sorted(type_totals))**\n\n```", "```py\n**{'2': Fraction(32, 103), '3': Fraction(119, 309), '1': Fraction(94, 309)}**\n\n```", "```py\n**{'B': Fraction(23, 103), 'C': Fraction(128, 309), 'A': Fraction(74, 309), 'D': Fraction(38, 309)}**\n\n```", "```py\n**expected = dict(((s,t), P_shift[s]*P_type[t]*total) for t in P_type:for s in P_shift)**\n\n```", "```py\n**{('2', 'B'): Fraction(2208, 103), ('2', 'D'): Fraction(1216, 103),('3', 'D'): Fraction(4522, 309), ('2', 'A'): Fraction(2368, 103),('1', 'A'): Fraction(6956, 309), ('1', 'B'): Fraction(2162, 103),('3', 'B'): Fraction(2737, 103), ('1', 'C'): Fraction(12032, 309),('3', 'C'): Fraction(15232, 309), ('2', 'C'): Fraction(4096, 103),('3', 'A'): Fraction(8806, 309), ('1', 'D'): Fraction(3572, 309)}**\n\n```", "```py\n**obs exp    obs exp    obs exp    obs exp** \n**15 22.51    21 20.99    45 38.94    13 11.56    94**\n**26 22.99    31 21.44    34 39.77     5 11.81    96**\n**33 28.50    17 26.57    49 49.29    20 14.63    119**\n**74        69        128        38        309**\n\n```", "```py\n**print(\"obs exp\"*len(type_totals))**\n**for s in sorted(shift_totals):**\n **pairs= [\"{0:3d} {1:5.2f}\".format(defects[s,t], float(expected[s,t])) for t in sorted(type_totals)]**\n **print(\"{0} {1:3d}\".format( \"\".join(pairs), shift_totals[s]))**\n**footers= [\"{0:3d}\".format(type_totals[t]) for t in sorted(type_totals)]**\n**print(\"{0} {1:3d}\".format(\"\".join(footers), total))**\n\n```", "```py\n**diff= lambda e,o: (e-o)**2/e**\n**chi2= sum(diff(expected[s,t], defects[s,t]) for s in shift_totals:**\n **for t in type_totals**\n **)**\n\n```", "```py\n**@lru_cache(128)**\n**def fact(k):**\n **if k < 2: return 1**\n **return reduce(operator.mul, range(2, int(k)+1))**\n\n```", "```py\n **2/1, -2/1, 4/3, -2/3, 4/15, -4/45, ..., -2/638512875**\n\n```", "```py\n**def gamma(s, z):**\n **def terms(s, z):**\n **for k in range(100):**\n **t2= Fraction(z**(s+k))/(s+k)**\n **term= Fraction((-1)**k,fact(k))*t2**\n **yield term**\n **warnings.warn(\"More than 100 terms\")**\n **def take_until(function, iterable):**\n **for v in iterable:**\n **if function(v): return**\n **yield v**\n **\u03b5= 1E-8**\n **return sum(take_until(lambda t:abs(t) < \u03b5, terms(s, z)))**\n\n```", "```py\n**sqrt_pi = Fraction(677622787, 382307718)**\n**def Gamma_Half(k):**\n **if isinstance(k,int):**\n **return fact(k-1)**\n **elif isinstance(k,Fraction):**\n **if k.denominator == 1:**\n **return fact(k-1)**\n **elif k.denominator == 2:**\n **n = k-Fraction(1,2)**\n **return fact(2*n)/(Fraction(4**n)*fact(n))*sqrt_pi**\n **raise ValueError(\"Can't compute \u0393({0})\".format(k))**\n\n```", "```py\n **>>> g= Gamma_Half(Fraction(3,2))**\n **>>> g.limit_denominator(2000000)**\n **Fraction(291270, 328663)**\n\n```", "```py\n**def cdf(x, k):**\n **\"\"\"X\u00b2 cumulative distribution function.**\n **:param x: X\u00b2 value -- generally sum (obs[i]-exp[i])**2/exp[i]**\n **for parallel sequences of observed and expected values.:param k: degrees of freedom >= 1; generally len(data)-1**\n **\"\"\"**\n **return 1-gamma(Fraction(k,2), Fraction(x/2))/Gamma_Half(Fraction(k,2))**\n\n```", "```py\n**>>> round(float(cdf(0.004, 1)), 2)**\n**0.95**\n**>>> cdf(0.004, 1).limit_denominator(100)**\n**Fraction(94, 99)**\n**>>> round(float(cdf(10.83, 1)), 3)**\n**0.001**\n**>>> cdf(10.83, 1).limit_denominator(1000)**\n**Fraction(1, 1000)**\n**>>> round(float(cdf(3.94, 10)), 2)**\n**0.95**\n**>>> cdf(3.94, 10).limit_denominator(100)**\n**Fraction(19, 20)**\n**>>> round(float(cdf(29.59, 10)), 3)**\n**0.001**\n**>>> cdf(29.59, 10).limit_denominator(10000)**\n**Fraction(8, 8005)**\n\n```", "```py\n**>>> chi2= [0.004, 0.02, 0.06, 0.15, 0.46, 1.07, 1.64, 2.71, 3.84, 6.64, 10.83]**\n**>>> act= [round(float(x), 3) for x in map(cdf, chi2, [1]*len(chi2))]**\n**>>> act**\n**[0.95, 0.888, 0.806, 0.699, 0.498, 0.301, 0.2, 0.1, 0.05, 0.01, 0.001]**\n\n```", "```py\n**[0.95, 0.90, 0.80, 0.70, 0.50, 0.30, 0.20, 0.10, 0.05, 0.01, 0.001]**\n\n```", "```py\n**>>> round(float(cdf(12.5916, 6)), 2)**\n**0.05**\n\n```", "```py\n**>>> round(float(cdf(19.18, 6)), 5)**\n**0.00387**\n\n```"]