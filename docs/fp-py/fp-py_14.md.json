["```py\n**>>> import pymonad**\n**>>> help(pymonad)**\n\n```", "```py\n**from pymonad import curry**\n**@curry**\n**def systolic_bp(bmi, age, gender_male, treatment):**\n **return 68.15+0.58*bmi+0.65*age+0.94*gender_male+6.44*treatment**\n\n```", "```py\n**>>> systolic_bp(25, 50, 1, 0)**\n**116.09**\n**>>> systolic_bp(25, 50, 0, 1)**\n**121.59**\n\n```", "```py\n**>>> treated= systolic_bp(25, 50, 0)**\n**>>> treated(0)**\n**115.15**\n**>>> treated(1)**\n**121.59**\n\n```", "```py\n**>>> g_t= systolic_bp(25, 50)**\n**>>> g_t(1, 0)**\n**116.09**\n**>>> g_t(0, 1)**\n**121.59**\n\n```", "```py\n**sum= reduce(operator.add)**\n**prod= reduce(operator.mul)**\n\n```", "```py\n**import collections.abc**\n**from pymonad import curry**\n**@curry**\n**def myreduce(function, iterable_or_sequence):**\n **if isinstance(iterable_or_sequence, collections.abc.Sequence):**\n **iterator= iter(iterable_or_sequence)**\n **else:**\n **iterator= iterable_or_sequence**\n **s = next(iterator)**\n **for v in iterator:**\n **s = function(s,v)**\n **return s**\n\n```", "```py\n**>>> from operator import ***\n**>>> sum= myreduce(add)**\n**>>> sum([1,2,3])**\n**6**\n**>>> max= myreduce(lambda x,y: x if x > y else y)**\n**>>> max([2,5,3])**\n**5**\n\n```", "```py\n**def f(x, *args):**\n **def f1(y, *args):**\n **def f2(z):**\n **return (x+y)*z**\n **if args:**\n **return f2(*args)**\n **return f2**\n **if args:**\n **return f1(*args)**\n **return f1**\n\n```", "```py\n**import  operator**\n**prod = myreduce(operator.mul)**\n\n```", "```py\n**@curry**\n**def alt_range(n):**\n **if n == 0: return range(1,2) # Only 1**\n **if n % 2 == 0:**\n **return range(2,n+1,2)**\n **else:**\n **return range(1,n+1,2)**\n\n```", "```py\n**>>> semi_fact= prod * alt_range**\n**>>> semi_fact(9)**\n**945**\n\n```", "```py\n**semi_fact= lambda x: prod(alt_range(x))**\n\n```", "```py\n**sumwhile= sum * takewhile(lambda x: x > 1E-7)**\n\n```", "```py\n**pi= lambda : 3.14**\n\n```", "```py\n**>>> x1= systolic_bp * Just(25) & Just(50) & Just(1) & Just(0)**\n**>>> x1.getValue()**\n**116.09**\n**>>> x2= systolic_bp * Just(25) & Just(50) & Just(1) & Nothing**\n**>>> x2.getValue() is None**\n**True**\n\n```", "```py\n**>>> list(range(10))**\n**[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]**\n**>>> List(range(10))**\n**[range(0, 10)]**\n\n```", "```py\n**>>> x= List(range(10))**\n**>>> x**\n**[range(0, 10)]**\n**>>> list(x[0])**\n**[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]**\n\n```", "```py\n**@curry**\n**def range1n(n):**\n **if n == 0: return range(1,2) # Only 1**\n **return range(1,n+1)**\n\n```", "```py\n**>>> fact= prod * range1n**\n**>>> seq1 = List(*range(20))**\n**>>> f1 = fact * seq1**\n**>>> f1[:10]**\n**[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]**\n\n```", "```py\n**@curry**\n**def n21(n):**\n **return 2*n+1**\n\n```", "```py\n**>>> semi_fact= prod * alt_range**\n**>>> f2 = semi_fact * n21 * seq1**\n**>>> f2[:10]**\n**[1, 3, 15, 105, 945, 10395, 135135, 2027025, 34459425, 654729075]**\n\n```", "```py\n**>>> 2*sum(map(operator.truediv, f1, f2))**\n**3.1415919276751456**\n\n```", "```py\n**Just(some file) >> read header >> read next >> read next**\n\n```", "```py\n**bind(bind(bind(Just(some file), read header), read next), read next)**\n\n```", "```py\n**import random**\n**def rng():**\n **return (random.randint(1,6), random.randint(1,6))**\n\n```", "```py\n**def craps():**\n **outcome= Just((\"\",0, []) ) >> come_out_roll(rng) >> point_roll(rng)**\n **print(outcome.getValue())**\n\n```", "```py\n**@curry**\n**def come_out_roll(dice, status):**\n **d= dice()**\n **if sum(d) in (7, 11):**\n **return Just((\"win\", sum(d), [d]))**\n **elif sum(d) in (2, 3, 12):**\n **return Just((\"lose\", sum(d), [d]))**\n **else:**\n **return Just((\"point\", sum(d), [d]))**\n\n```", "```py\n**@curry**\n**def point_roll(dice, status):**\n **prev, point, so_far = status**\n **if prev != \"point\":**\n **return Just(status)**\n **d = dice()**\n **if sum(d) == 7:**\n **return Just((\"craps\", point, so_far+[d]))**\n **elif sum(d) == point:**\n **return Just((\"win\", point, so_far+[d]))**\n **else:**\n **return Just((\"point\", point, so_far+[d])) >> point_roll(dice)**\n\n```", "```py\n**>>> craps()**\n**('craps', 5, [(2, 3), (1, 3), (1, 5), (1, 6)])**\n\n```"]