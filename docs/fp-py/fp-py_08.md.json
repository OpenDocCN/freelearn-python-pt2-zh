["```py\n**enumerate = lambda x, start=0: zip(count(start),x)**\n\n```", "```py\n**zip(count(), some_iterator)**\n**enumerate(some_iterator)**\n\n```", "```py\n**zip(count(1,3), some_iterator)**\n\n```", "```py\n**((1+3*e, x) for e,x in enumerate(a))**\n\n```", "```py\n**def until(terminate, iterator):**\n **i = next(iterator)**\n **if terminate(*i): return i**\n **return until(terminate, iterator)**\n\n```", "```py\n**source = zip(count(0, .1), (.1*c for c in count()))**\n**neq = lambda x, y: abs(x-y) > 1.0E-12**\n\n```", "```py\n**(92.799999999999, 92.80000000000001)**\n\n```", "```py\n**>>> until(lambda x, y: x != y, source)**\n**(0.6, 0.6000000000000001)**\n\n```", "```py\n**m3= (i == 0 for i in cycle(range(3)))**\n\n**m5= (i == 0 for i in cycle(range(5)))**\n\n```", "```py\n**multipliers = zip(range(10), m3, m5)**\n\n```", "```py\n**sum(i for i, *multipliers in multipliers if any(multipliers))**\n\n```", "```py\n**chooser = (x == 0 for x in cycle(range(c)))**\n**rdr= csv.reader(source_file)**\n**wtr= csv.writer(target_file)**\n**wtr.writerows(row for pick, row in zip(chooser, rdr) if pick)**\n\n```", "```py\n**all = repeat(0)**\n**subset= cycle(range(100))**\n**chooser = (x == 0 for x in either_all_or_subset)**\n\n```", "```py\n**>>> list(tuple(repeat(i, times=i)) for i in range(10))**\n**[(), (1,), (2, 2), (3, 3, 3), (4, 4, 4, 4), (5, 5, 5, 5, 5), (6, 6, 6, 6, 6, 6), (7, 7, 7, 7, 7, 7, 7), (8, 8, 8, 8, 8, 8, 8, 8), (9, 9, 9, 9, 9, 9, 9, 9, 9)]**\n**>>> list(sum(repeat(i, times=i)) for i in range(10))**\n**[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]**\n\n```", "```py\n**pairs = tuple(enumerate(sorted(raw_values)))**\n\n```", "```py\n**>>> raw_values= [1.2, .8, 1.2, 2.3, 11, 18]**\n**>>> tuple(enumerate( sorted(raw_values)))**\n**((0, 0.8), (1, 1.2), (2, 1.2), (3, 2.3), (4, 11), (5, 18))**\n\n```", "```py\n**(Leg(start=Point(latitude=37.54901619777347, longitude=-76.33029518659048), end=Point(latitude=37.840832, longitude=-76.273834), distance=17.7246), Leg(start=Point(latitude=37.840832, longitude=-76.273834), end=Point(latitude=38.331501, longitude=-76.459503), distance=30.7382), Leg(start=Point(latitude=38.331501, longitude=-76.459503), end=Point(latitude=38.845501, longitude=-76.537331), distance=31.0756),...,Leg(start=Point(latitude=38.330166, longitude=-76.458504), end=Point(latitude=38.976334, longitude=-76.473503), distance=38.8019))**\n\n```", "```py\n**Leg = namedtuple(\"Leg\", (\"order\", \"start\", \"end\", \"distance\"))**\n\n```", "```py\n**def ordered_leg_iter(pair_iter):**\n **for order, pair in enumerate(pair_iter):**\n **start, end = pair**\n **yield Leg(order, start, end, round(haversine(start, end),4))**\n\n```", "```py\n**with urllib.request.urlopen(\"file:./Winter%202012-2013.kml\") as source:**\n **path_iter = float_lat_lon(row_iter_kml(source))**\n **pair_iter = legs(path_iter)**\n **trip_iter = ordered_leg_iter(pair_iter)**\n **trip= tuple(trip_iter)**\n\n```", "```py\n**(Leg(start=Point(latitude=37.54901619777347, longitude=-76.33029518659048), end=Point(latitude=37.840832, longitude=-76.273834), distance=17.7246), Leg(start=Point(latitude=37.840832, longitude=-76.273834), end=Point(latitude=38.331501, longitude=-76.459503), distance=30.7382), ..., Leg(start=Point(latitude=38.330166, longitude=-76.458504), end=Point(latitude=38.976334, longitude=-76.473503), distance=38.8019))**\n\n```", "```py\n**distances= (leg.distance for leg in trip)**\n**distance_accum= tuple(accumulate(distances))**\n**total= distance_accum[-1]+1.0**\n**quartiles= tuple(int(4*d/total) for d in distance_accum)**\n\n```", "```py\n**(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)**\n\n```", "```py\n**from contextlib import ExitStack**\n**import csv**\n**def row_iter_csv_tab(*filenames):**\n **with ExitStack() as stack:**\n **files = [stack.enter_context(open(name, 'r', newline=''))**\n **for name in filenames]**\n **readers = [csv.reader(f, delimiter='\\t') for f in files]**\n **readers = map(lambda f: csv.reader(f, delimiter='\\t'), files)**\n **yield from chain(*readers)**\n\n```", "```py\n**readers = map(lambda f: csv.reader(f, delimiter='\\t'), files)**\n\n```", "```py\n**group_iter= groupby(zip(quartile, trip), key=lambda q_raw:**\n **q_raw[0])**\n**for group_key, group_iter in group_iter:**\n **print(group_key, tuple(group_iter))**\n\n```", "```py\n**def groupby_2(iterable, key):**\n **groups = defaultdict(list)**\n **for item in iterable:**\n **groups[key(item)].append(item)**\n **for g in groups:**\n **yield iter(groups[g])**\n\n```", "```py\n**def filter(iterable, function):**\n **i1, i2 = tee(iterable, 2)**\n **return compress(i1, (function(x) for x in i2))**\n\n```", "```py\n**chooser = (x == 0 for x in cycle(range(c)))**\n**keep= (row for pick, row in zip(chooser, some_source) if pick)**\n\n```", "```py\n**all = repeat(0)**\n**subset = cycle(range(c))**\n**randomized = random.randrange(c)**\n**selection_rule = one of all, subset, or randomized**\n**chooser = (x == 0 for x in selection_rule)**\n**keep = compress(some_source, chooser)**\n\n```", "```py\n**flat= ['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71',... ]**\n\n```", "```py\n**zip(flat[0::2], flat[1::2])**\n\n```", "```py\n**flat_iter_1= iter(flat)**\n**flat_iter_2= iter(flat)**\n**zip(islice(flat_iter_1, 0, None, 2), islice(flat_iter_2, 1, None, 2))**\n\n```", "```py\n**[(2, 3), (5, 7), (11, 13), (17, 19), (23, 29), ... (7883, 7901), (7907, 7919)]**\n\n```", "```py\nGIMP Palette\nName: Crayola\nColumns: 16\n#\n```", "```py\n255  73 108  Radical Red\n```", "```py\n**with open(\"crayola.gpl\") as source:**\n **rdr = csv.reader(source, delimiter='\\t')**\n **rows = dropwhile(lambda row: row[0] != '#', rdr)**\n\n```", "```py\n **color_rows = islice(rows, 1, None)**\n **colors = ((color.split(), name) for color, name in color_rows)**\n **print(list(colors))**\n\n```", "```py\n**filterfalse = lambda pred, iterable:**\n **filter(lambda x: not pred(x), iterable)**\n\n```", "```py\n**>>> filter(None, [0, False, 1, 2])**\n**<filter object at 0x101b43a50>**\n**>>> list(_)**\n**[1, 2]**\n**>>> filterfalse(None, [0, False, 1, 2])**\n**<itertools.filterfalse object at 0x101b43a50>**\n**>>> list(_)**\n**[0, False]**\n\n```", "```py\n**iter_1, iter_2 = iter(some_source), iter(some_source)**\n**good = filter(test, iter_1)**\n**bad = filterfalse(test, iter_2)**\n\n```", "```py\n**map(function, arg_iter) == (function(a) for a in arg_iter)**\n\n```", "```py\n**starmap(function, arg_iter) == (function(*a) for a in arg_iter)**\n\n```", "```py\n**(function(*args) for args in zip(iter1, iter2, ..., itern))**\n**starmap(function, zip(iter1, iter2, ..., itern))**\n\n```", "```py\n**((Point(latitude=37.54901619777347, longitude=-76.33029518659048), Point(latitude=37.840832, longitude=-76.273834)), ...,(Point(latitude=38.330166, longitude=-76.458504), Point(latitude=38.976334, longitude=-76.473503)))**\n\n```", "```py\n**with urllib.request.urlopen(url) as source:**\n **path_iter = float_lat_lon(row_iter_kml(source))**\n **pair_iter = legs(path_iter)**\n **make_leg = lambda start, end: Leg(start, end, haversine(start,end))**\n **trip = list(starmap(make_leg, pair_iter))**\n\n```", "```py\n**def mean(iterator):**\n **it0, it1= tee(iterator,2)**\n **s0= sum(1 for x in it0)**\n **s1= sum(x for x in it1)**\n **return s0/s1**\n\n```"]