["```py\n>>> x = 1000\n\n```", "```py\n>>> x = 500\n\n```", "```py\n>>> y = x\n\n```", "```py\n>>> x = 3000\n\n```", "```py\n>>> a = 496\n>>> id(a)\n4302202064\n>>> b = 1729\n>>> id(b)\n4298456016\n>>> b = a\n>>> id(b)\n4302202064\n>>> id(a) == id(b)\nTrue\n\n```", "```py\n>>> a is b\nTrue\n\n```", "```py\n>>> a is None\nFalse\n\n```", "```py\n>>> t = 5\n>>> id(t)\n4297261280\n>>> t += 2\n>>> id(t)\n4297261344\n\n```", "```py\n>>> r = [2, 4, 6]\n>>> r\n[2, 4, 6]\n\n```", "```py\n>>> s = r\n>>> s\n[2, 4, 6]\n\n```", "```py\n>>> s[1] = 17\n>>> s\n[2, 17, 6]\n>>> r\n[2, 17, 6]\n\n```", "```py\n>>> s is r\nTrue\n\n```", "```py\n>>> p = [4, 7, 11]\n>>> q = [4, 7, 11]\n>>> p == q\nTrue\n>>> p is q\nFalse\n\n```", "```py\n>>> p == p\nTrue\n\n```", "```py\n>>> m = [9, 15, 24]\n\n```", "```py\n>>> def modify(k):\n...     k.append(39)\n...     print(\"k =\", k)\n...\n\n```", "```py\n>>> modify(m)\nk = [9, 15, 24, 39]\n\n```", "```py\n>>> m\n[9, 15, 24, 39]\n\n```", "```py\n>>> f = [14, 23, 37]\n\n```", "```py\n>>> def replace(g):\n...     g = [17, 28, 45]\n...     print(\"g =\", g)\n...\n\n```", "```py\n>>> replace(f)\ng = [17, 28, 45]\n\n```", "```py\n>>> f\n[14, 23, 37]\n\n```", "```py\n>>> def replace_contents(g):\n...     g[0] = 17\n...     g[1] = 28\n...     g[2] = 45\n...     print(\"g =\", g)\n...\n>>> f\n[14, 23, 37]\n>>> replace_contents(f)\ng = [17, 28, 45]\n\n```", "```py\n>>> f\n[17, 28, 45]\n\n```", "```py\n>>> def f(d):\n...     return d\n...\n\n```", "```py\n>>> c = [6, 10, 16]\n>>> e = f(c)\n>>> c is e\nTrue\n\n```", "```py\n1 >>> def banner(message, border='-'):\n2 ...     line = border * len(message)\n3 ...     print(line)\n4 ...     print(message)\n5 ...     print(line)\n6 ...\n\n```", "```py\n>>> banner(\"Norwegian Blue\")\n--------------\nNorwegian Blue\n--------------\n\n```", "```py\n>>> banner(\"Sun, Moon and Stars\", \"*\")\n*******************\nSun, Moon and Stars\n*******************\n\n```", "```py\n>>> banner(\"Sun, Moon and Stars\", border=\"*\")\n*******************\nSun, Moon and Stars\n*******************\n\n```", "```py\n>>> banner(border=\".\", message=\"Hello from Earth\")\n................\nHello from Earth\n................\n\n```", "```py\n>>> import time\n\n```", "```py\n>>> time.ctime()\n'Sat Feb 13 16:06:29 2016'\n\n```", "```py\n>>> def show_default(arg=time.ctime()):\n...     print(arg)\n...\n>>> show_default()\nSat Feb 13 16:07:11 2016\n\n```", "```py\n>>> show_default()\nSat Feb 13 16:07:11 2016\n\n```", "```py\n>>> show_default()\nSat Feb 13 16:07:11 2016\n\n```", "```py\n>>> def add_spam(menu=[]):\n...     menu.append(\"spam\")\n...     return menu\n...\n\n```", "```py\n>>> breakfast = ['bacon', 'eggs']\n\n```", "```py\n>>> add_spam(breakfast)\n['bacon', 'eggs', 'spam']\n\n```", "```py\n>>> lunch = ['baked beans']\n>>> add_spam(lunch)\n['baked beans', 'spam']\n\n```", "```py\n>>> add_spam()\n['spam']\n\n```", "```py\n>>> add_spam()\n['spam', 'spam']\n\n```", "```py\n>>> add_spam()\n['spam', 'spam', 'spam']\n\n```", "```py\n>>> add_spam()\n['spam', 'spam', 'spam', 'spam']\n\n```", "```py\n>>> def add_spam(menu=None):\n...     if menu is None:\n...         menu = []\n...     menu.append('spam')\n...     return menu\n...\n>>> add_spam()\n['spam']\n>>> add_spam()\n['spam']\n>>> add_spam()\n['spam']\n\n```", "```py\n>>> def add(a, b):\n...     return a + b\n...\n\n```", "```py\n>>> add(5, 7):\n12\n\n```", "```py\n>>> add(3.1, 2.4)\n5.5\n\n```", "```py\n>>> add(\"news\", \"paper\")\n'newspaper'\n\n```", "```py\n>>> add([1, 6], [21, 107])\n[1, 6, 21, 107]\n\n```", "```py\n>>> add(\"The answer is\", 42)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in add\nTypeError: Can't convert 'int' object to str implicitly\n\n```", "```py\ncount = 0\n\ndef show_count():\n    print(count)\n\ndef set_count(c):\n    count = c\n\n```", "```py\n$ python3\nPython 3.5.0 (default, Nov  3 2015, 13:17:02)\n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from scopes import *\n>>> show_count()\ncount =  0\n\n```", "```py\n>>> set_count(5)\n\n```", "```py\n>>> show_count()\ncount =  0\n\n```", "```py\ndef set_count(c):\n    global count\n    count = c\n\n```", "```py\n>>> from scopes import *\n>>> show_count()\ncount =  0\n>>> set_count(5)\n>>> show_count()\ncount =  5\n\n```", "```py\n$ python3\nPython 3.5.0 (default, Nov  3 2015, 13:17:02)\n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import words\n\n```", "```py\n>>> type(words)\n<class 'module'>\n\n```", "```py\n>>> dir(words)\n['__builtins__', '__cached__', '__doc__', '__file__', '__initializing__',\n'__loader__', '__name__', '__package__', 'fetch_words', 'main',\n'print_items', 'sys', 'urlopen']\n\n```", "```py\n>>> type(words.fetch_words)\n<class 'function'>\n\n```", "```py\n>>> dir(words.fetch_words)\n['__annotations__', '__call__', '__class__', '__closure__', '__code__',\n'__defaults__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__',\n'__format__', '__ge__', '__get__', '__getattribute__', '__globals__',\n'__gt__', '__hash__', '__init__', '__kwdefaults__', '__le__', '__lt__',\n'__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__',\n'__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__',\n'__subclasshook__']\n\n```", "```py\n>>> words.fetch_words.__name__\n'fetch_words'\n\n```", "```py\n>>> words.fetch_words.__doc__\n'Fetch a list of words from a URL.\\n\\n Args:\\n url: The URL of a\nUTF-8 text document.\\n\\n    Returns:\\n        A list of strings containing\nthe words from\\n        the document.\\n    '\n\n```"]