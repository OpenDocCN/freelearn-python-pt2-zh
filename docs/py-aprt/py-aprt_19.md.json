["```py\n$ mkdir palindrome\n$ cd palindrome\n\n```", "```py\n\"\"\"palindrome.py - Detect palindromic integers\"\"\"\n\nimport unittest\n\ndef digits(x):\n    \"\"\"Convert an integer into a list of digits.\n\n Args:\n x: The number whose digits we want.\n\n Returns: A list of the digits, in order, of ``x``.\n\n >>> digits(4586378)\n [4, 5, 8, 6, 3, 7, 8]\n \"\"\"\n\n    digs = []\n    while x != 0:\n        div, mod = divmod(x, 10)\n        digs.append(mod)\n        x = div\n    digs.reverse()\n    return digs\n\ndef is_palindrome(x):\n    \"\"\"Determine if an integer is a palindrome.\n\n Args:\n x: The number to check for palindromicity.\n\n Returns: True if the digits of ``x`` are a palindrome,\n False otherwise.\n\n >>> is_palindrome(1234)\n False\n >>> is_palindrome(2468642)\n True\n \"\"\"\n    digs = digits(x)\n    for f, r in zip(digs, reversed(digs)):\n        if f != r:\n            return False\n    return True\n\nclass Tests(unittest.TestCase):\n    \"Tests for the ``is_palindrome()`` function.\"\n    def test_negative(self):\n        \"Check that it returns False correctly.\"\n        self.assertFalse(is_palindrome(1234))\n\n    def test_positive(self):\n        \"Check that it returns True correctly.\"\n        self.assertTrue(is_palindrome(1234321))\n\n    def test_single_digit(self):\n        \"Check that it works for single digit numbers.\"\n        for i in range(10):\n            self.assertTrue(is_palindrome(i))\n\nif __name__ == '__main__':\n    unittest.main()\n\n```", "```py\nfrom distutils.core import setup\n\nsetup(\n    name = 'palindrome',\n    version = '1.0',\n    py_modules  = ['palindrome'],\n\n    # metadata\n    author = 'Austin Bingham',\n    author_email = 'austin@sixty-north.com',\n    description = 'A module for finding palindromic integers.',\n    license = 'Public domain',\n    keywords = 'palindrome',\n    )\n\n```", "```py\n$ python3 -m venv palindrome_env\n\n```", "```py\n$ source palindrome_env/bin/activate\n\n```", "```py\n> palindrome_env\\bin\\activate\n\n```", "```py\n(palindrome_env)$ python setup.py install\nrunning install\nrunning build\nrunning build_py\ncopying palindrome.py -> build/lib\nrunning install_lib\ncopying build/lib/palindrome.py -> /Users/sixty_north/examples/palindrome/palindrome_\\\nenv/lib/python3.5/site-packages\nbyte-compiling /Users/sixty_north/examples/palindrome/palindrome_env/lib/python3.5/si\\\nte-packages/palindrome.py to palindrome.cpython-35.pyc\nrunning install_egg_info\nWriting /Users/sixty_north/examples/palindrome/palindrome_env/lib/python3.5/site-pack\\\nages/palindrome-1.0-py3.5.egg-info\n\n```", "```py\ncopying build/lib/palindrome.py -> /Users/sixty_north/examples/palindrome/palindrome_\\\nenv/lib/python3.5/site-packages\n\n```", "```py\n(palindrome_env)$ cd ..\n(palindrome_env)$ python\nPython 3.5.2 (v3.5.2:4def2a2901a5, Jun 26 2016, 10:47:25)\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import palindrome\n>>> palindrome.__file__\n'/Users/sixty_north/examples/palindrome/palindrome_env/lib/python3.5/site-packages/pa\\\nlindrome.py'\n\n```", "```py\n(palindrome_env)$ cd palindrome\n\n```", "```py\n(palindrome_env)$ python setup.py sdist --format zip\nrunning sdist\nrunning check\nwarning: check: missing required meta-data: url\n\nwarning: sdist: manifest template 'MANIFEST.in' does not exist (using default file li\\\nst)\n\nwarning: sdist: standard file not found: should have one of README, README.txt\n\nwriting manifest file 'MANIFEST'\ncreating palindrome-1.0\nmaking hard links in palindrome-1.0...\nhard linking palindrome.py -> palindrome-1.0\nhard linking setup.py -> palindrome-1.0\ncreating dist\ncreating 'dist/palindrome-1.0.zip' and adding 'palindrome-1.0' to it\nadding 'palindrome-1.0/palindrome.py'\nadding 'palindrome-1.0/PKG-INFO'\nadding 'palindrome-1.0/setup.py'\nremoving 'palindrome-1.0' (and everything under it)\n\n```", "```py\n(palindrome_env) $ ls dist\npalindrome-1.0.zip\n\n```", "```py\n(palindrome_env)$ cd dist\n(palindrome_env)$ unzip palindrome-1.0.zip\nArchive:  palindrome-1.0.zip\n  inflating: palindrome-1.0/palindrome.py\n  inflating: palindrome-1.0/PKG-INFO\n  inflating: palindrome-1.0/setup.py\n\n```", "```py\n(palindrome_env) $ python setup.py sdist --help-formats\nList of available source distribution formats:\n  --formats=bztar  bzip2'ed tar-file\n  --formats=gztar  gzip'ed tar-file\n  --formats=tar    uncompressed tar file\n  --formats=zip    ZIP file\n  --formats=ztar   compressed tar file\n\n```", "```py\n(palindrome_env) $ python setup.py --help\nCommon commands: (see '--help-commands' for more)\n\n  setup.py build      will build the package underneath 'build/'\n  setup.py install    will install the package\n\nGlobal options:\n  --verbose (-v)      run verbosely (default)\n  --quiet (-q)        run quietly (turns verbosity off)\n  --dry-run (-n)      don't actually do anything\n  --help (-h)         show detailed help message\n  --command-packages  list of packages that provide distutils commands\n\nInformation display options (just display information, ignore any commands)\n  --help-commands     list all available commands\n  --name              print package name\n  --version (-V)      print package version\n  --fullname          print <package name>-<version>\n  --author            print the author's name\n  --author-email      print the author's email address\n  --maintainer        print the maintainer's name\n  --maintainer-email  print the maintainer's email address\n  --contact           print the maintainer's name if known, else the author's\n  --contact-email     print the maintainer's email address if known, else the\n                      author's\n  --url               print the URL for this package\n  --license           print the license of the package\n  --licence           alias for --license\n  --description       print the package description\n  --long-description  print the long package description\n  --platforms         print the list of platforms\n  --classifiers       print the list of classifiers\n  --keywords          print the list of keywords\n  --provides          print the list of packages/modules provided\n  --requires          print the list of packages/modules required\n  --obsoletes         print the list of packages/modules made obsolete\n\nusage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]\n   or: setup.py --help [cmd1 cmd2 ...]\n   or: setup.py --help-commands\n   or: setup.py cmd --help\n\n```"]