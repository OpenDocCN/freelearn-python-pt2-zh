["```py\n>>> words = \"If there is hope it lies in the proles\".split()\n>>> words\n['If', 'there', 'is', 'hope', 'it', 'lies', 'in', 'the', 'proles']\n\n```", "```py\n>>> [len(word) for word in words]\n[2, 5, 2, 4, 2, 4, 2, 3, 6]\n\n```", "```py\n[ expr(item) for item in iterable ]\n\n```", "```py\n>>> lengths = []\n>>> for word in words:\n...     lengths.append(len(word))\n...\n>>> lengths\n[2, 5, 2, 4, 2, 4, 2, 3, 6]\n\n```", "```py\n>>> from math import factorial\n>>> f = [len(str(factorial(x))) for x in range(20)]\n>>> f\n[1, 1, 1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18]\n\n```", "```py\n>>> type(f)\n<class 'list'>\n\n```", "```py\n>>> s = {len(str(factorial(x))) for x in range(20)}\n>>> s\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18}\n\n```", "```py\n>>> type(s)\n<class 'set'>\n\n```", "```py\n>>> country_to_capital = { 'United Kingdom': 'London',\n...                        'Brazil': 'Bras\u00edlia',\n...                        'Morocco': 'Rabat',\n...                        'Sweden': 'Stockholm' }\n\n```", "```py\n>>> capital_to_country = {capital: country for country, capital in country_to_capital\\\n.items()}\n>>> from pprint import pprint as pp\n>>> pp(capital_to_country)\n{'Bras\u00edlia': 'Brazil',\n 'London': 'United Kingdom',\n 'Rabat': 'Morocco',\n 'Stockholm': 'Sweden'}\n\n```", "```py\n>>> words = [\"hi\", \"hello\", \"foxtrot\", \"hotel\"]\n>>> { x[0]: x for x in words }\n{'h': 'hotel', 'f': 'foxtrot'}\n\n```", "```py\n>>> import os\n>>> import glob\n>>> file_sizes = {os.path.realpath(p): os.stat(p).st_size for p in glob.glob('*.py')}\n>>> pp(file_sizes)\n{'/Users/pyfund/examples/exceptional.py': 400,\n '/Users/pyfund/examples/keypress.py': 778,\n '/Users/pyfund/examples/scopes.py': 133,\n '/Users/pyfund/examples/words.py': 1185}\n\n```", "```py\n>>> from math import sqrt\n>>> def is_prime(x):\n...     if x < 2:\n...         return False\n...     for i in range(2, int(sqrt(x)) + 1):\n...         if x % i == 0:\n...             return False\n...     return True\n...\n\n```", "```py\n>>> [x for x in range(101) if is_prime(x)]\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, \\\n83, 89, 97]\n\n```", "```py\n>>> prime_square_divisors = {x*x:(1, x, x*x) for x in range(101) if is_prime(x)}\n>>> pp(prime_square_divisors)\n{4: (1, 2, 4),\n 9: (1, 3, 9),\n 25: (1, 5, 25),\n 49: (1, 7, 49),\n 121: (1, 11, 121),\n 169: (1, 13, 169),\n 289: (1, 17, 289),\n 361: (1, 19, 361),\n 529: (1, 23, 529),\n 841: (1, 29, 841),\n 961: (1, 31, 961),\n 1369: (1, 37, 1369),\n 1681: (1, 41, 1681),\n 1849: (1, 43, 1849),\n 2209: (1, 47, 2209),\n 2809: (1, 53, 2809),\n 3481: (1, 59, 3481),\n 3721: (1, 61, 3721),\n 4489: (1, 67, 4489),\n 5041: (1, 71, 5041),\n 5329: (1, 73, 5329),\n 6241: (1, 79, 6241),\n 6889: (1, 83, 6889),\n 7921: (1, 89, 7921),\n 9409: (1, 97, 9409)}\n\n```", "```py\n>>> iterable = ['Spring', 'Summer', 'Autumn', 'Winter']\n\n```", "```py\n>>> iterator = iter(iterable)\n\n```", "```py\n>>> next(iterator)\n'Spring'\n\n```", "```py\n>>> next(iterator)\n'Summer'\n>>> next(iterator)\n'Autumn'\n>>> next(iterator)\n'Winter'\n\n```", "```py\n>>> next(iterator)\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nStopIteration\n\n```", "```py\n>>> def first(iterable):\n...     iterator = iter(iterable)\n...     try:\n...         return next(iterator)\n...     except StopIteration:\n...         raise ValueError(\"iterable is empty\")\n...\n\n```", "```py\n>>> first([\"1st\", \"2nd\", \"3rd\"])\n'1st'\n>>> first({\"1st\", \"2nd\", \"3rd\"})\n'1st'\n>>> first(set())\nTraceback (most recent call last):\n  File \"./iterable.py\", line 17, in first\n    return next(iterator)\nStopIteration\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./iterable.py\", line 19, in first\n    raise ValueError(\"iterable is empty\")\nValueError: iterable is empty\n\n```", "```py\n>>> def gen123():\n...     yield 1\n...     yield 2\n...     yield 3\n...\n\n```", "```py\n>>> g = gen123()\n\n```", "```py\n>>> g\n<generator object gen123 at 0x1006eb230>\n\n```", "```py\n>>> next(g)\n1\n>>> next(g)\n2\n>>> next(g)\n3\n\n```", "```py\n>>> next(g)\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nStopIteration\n\n```", "```py\n>>> for v in gen123():\n...     print(v)\n...\n1\n2\n3\n\n```", "```py\n>>> h = gen123()\n>>> i = gen123()\n>>> h\n<generator object gen123 at 0x1006eb2d0>\n>>> i\n<generator object gen123 at 0x1006eb280>\n>>> h is i\nFalse\n\n```", "```py\n>>> next(h)\n1\n>>> next(h)\n2\n>>> next(i)\n1\n\n```", "```py\n>>> def gen246():\n...     print(\"About to yield 2\")\n...     yield 2\n...     print(\"About to yield 4\")\n...     yield 4\n...     print(\"About to yield 6\")\n...     yield 6\n...     print(\"About to return\")\n...\n>>> g = gen246()\n\n```", "```py\n>>> next(g)\nAbout to yield 2\n2\n\n```", "```py\n>>> next(g)\nAbout to yield 4\n4\n\n```", "```py\n>>> next(g)\nAbout to yield 6\n6\n\n```", "```py\n>>> next(g)\nAbout to return\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nStopIteration\n\n```", "```py\ndef take(count, iterable):\n    \"\"\"Take items from the front of an iterable.\n\n    Args:\n        count: The maximum number of items to retrieve.\n        iterable: The source of the items.\n\n    Yields:\n        At most 'count' items from 'iterable'.\n    \"\"\"\n    counter = 0\n    for item in iterable:\n        if counter == count:\n            return\n        counter += 1\n        yield item\n\n```", "```py\ndef run_take():\n    items = [2, 4, 6, 8, 10]\n    for item in take(3, items):\n        print(item)\n\n```", "```py\ndef distinct(iterable):\n    \"\"\"Return unique items by eliminating duplicates.\n\n    Args:\n        iterable: The source of the items.\n\n    Yields:\n        Unique elements in order from 'iterable'.\n    \"\"\"\n    seen = set()\n    for item in iterable:\n        if item in seen:\n            continue\n        yield item\n        seen.add(item)\n\n```", "```py\ndef run_distinct():\n    items = [5, 7, 7, 6, 5, 5]\n    for item in distinct(items):\n        print(item)\n\n```", "```py\ndef run_pipeline():\n    items = [3, 6, 6, 2, 1, 1]\n    for item in take(3, distinct(items)):\n        print(item)\n\n```", "```py\ntake(3, list(distinct(items)))\n\n```", "```py\ndef lucas():\n    yield 2\n    a = 2\n    b = 1\n    while True:\n        yield b\n        a, b = b, a + b\n\n```", "```py\n2, 1, 3, 4, 7, 11\n\n```", "```py\n>>> for x in lucas():\n...     print(x)\n...\n2\n1\n3\n4\n7\n11\n18\n29\n47\n76\n123\n199\n\n```", "```py\n( expr(item) for item in iterable )\n\n```", "```py\n>>> million_squares = (x*x for x in range(1, 1000001))\n\n```", "```py\n>>> million_squares\n<generator object <genexpr> at 0x1007a12d0>\n\n```", "```py\n>>> list(million_squares)\n. . .\n999982000081, 999984000064, 999986000049, 999988000036, 999990000025,\n999992000016, 999994000009, 999996000004, 999998000001, 1000000000000]\n\n```", "```py\n>>> list(million_squares)\n[]\n\n```", "```py\n>>> sum(x*x for x in range(1, 10000001))\n333333383333335000000\n\n```", "```py\n>>> sum(x for x in range(1001) if is_prime(x))\n76127\n\n```", "```py\nfrom itertools import islice, count\n\nislice(all_primes, 1000)\n\n```", "```py\n>>> thousand_primes = islice((x for x in count() if is_prime(x)), 1000)\n\n```", "```py\n>>> thousand_primes\n<itertools.islice object at 0x1006bae10>\n>>> list(thousand_primes)\n[2, 3, 5, 7, 11, 13 ... ,7877, 7879, 7883, 7901, 7907, 7919]\n\n```", "```py\n>>> sum(islice((x for x in count() if is_prime(x)), 1000))\n3682913\n\n```", "```py\n>>> any([False, False, True])\nTrue\n>>> all([False, False, True])\nFalse\n\n```", "```py\n>>> any(is_prime(x) for x in range(1328, 1361))\nFalse\n\n```", "```py\n>>> all(name == name.title() for name in ['London', 'Paris', 'Tokyo', 'New York', 'Sy\\\ndney', 'Kuala Lumpur'])\nTrue\n\n```", "```py\n>>> sunday = [12, 14, 15, 15, 17, 21, 22, 22, 23, 22, 20, 18]\n>>> monday = [13, 14, 14, 14, 16, 20, 21, 22, 22, 21, 19, 17]\n>>> for item in zip(sunday, monday):\n...     print(item)\n...\n(12, 13)\n(14, 14)\n(15, 14)\n(15, 14)\n(17, 16)\n(21, 20)\n(22, 21)\n(22, 22)\n(23, 22)\n(22, 21)\n(20, 19)\n(18, 17)\n\n```", "```py\n>>> for sun, mon in zip(sunday, monday):\n...     print(\"average =\", (sun + mon) / 2)\n...\naverage = 12.5\naverage = 14.0\naverage = 14.5\naverage = 14.5\naverage = 16.5\naverage = 20.5\naverage = 21.5\naverage = 22.0\naverage = 22.5\naverage = 21.5\naverage = 19.5\naverage = 17.5\n\n```", "```py\n>>> tuesday = [2, 2, 3, 7, 9, 10, 11, 12, 10, 9, 8, 8]\n>>> for temps in zip(sunday, monday, tuesday):\n...     print(\"min = {:4.1f}, max={:4.1f}, average={:4.1f}\".format(\n...            min(temps), max(temps), sum(temps) / len(temps)))\n...\nmin =  2.0, max=13.0, average= 9.0\nmin =  2.0, max=14.0, average=10.0\nmin =  3.0, max=15.0, average=10.7\nmin =  7.0, max=15.0, average=12.0\nmin =  9.0, max=17.0, average=14.0\nmin = 10.0, max=21.0, average=17.0\nmin = 11.0, max=22.0, average=18.0\nmin = 12.0, max=22.0, average=18.7\nmin = 10.0, max=23.0, average=18.3\nmin =  9.0, max=22.0, average=17.3\nmin =  8.0, max=20.0, average=15.7\nmin =  8.0, max=18.0, average=14.3\n\n```", "```py\n>>> from itertools import chain\n>>> temperatures = chain(sunday, monday, tuesday)\n\n```", "```py\n>>> all(t > 0 for t in temperatures)\nTrue\n\n```", "```py\n>>> for x in (p for p in lucas() if is_prime(p)):\n...     print(x)\n...\n2\n3\n7\n11\n29\n47\n199\n521\n2207\n3571\n9349\n3010349\n54018521\n370248451\n6643838879\n119218851371\n5600748293801\n688846502588399\n32361122672259149\n\n```"]