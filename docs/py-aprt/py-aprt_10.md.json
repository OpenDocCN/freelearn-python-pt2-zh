["```py\n>>> t = (\"Norway\", 4.953, 3)\n>>> t\n('Norway', 4.953, 3)\n\n```", "```py\n>>> t[0]\n'Norway'\n>>> t[2]\n3\n\n```", "```py\n>>> len(t)\n3\n\n```", "```py\n>>> for item in t:\n>>>    print(item)\nNorway\n4.953\n3\n\n```", "```py\n>>> t + (338186.0, 265E9)\n('Norway', 4.953, 3, 338186.0, 265000000000.0)\n\n```", "```py\n>>> t * 3\n('Norway', 4.953, 3, 'Norway', 4.953, 3, 'Norway', 4.953, 3)\n\n```", "```py\n>>> a = ((220, 284), (1184, 1210), (2620, 2924), (5020, 5564), (6232, 6368))\n\n```", "```py\n>>> a[2][1]\n2924\n\n```", "```py\n>>> h = (391)\n>>> h\n391\n>>> type(h)\n<class 'int'>\n\n```", "```py\n>>> k = (391,)\n>>> k\n(391,)\n>>> type(k)\n<class 'tuple'>\n\n```", "```py\n>>> e = ()\n>>> e\n>>> type(e)\n<class 'tuple'>\n\n```", "```py\n>>> p = 1, 1, 1, 4, 6, 19\n>>> p\n(1, 1, 1, 4, 6, 19)\n>>> type(p)\n<class 'tuple'>\n\n```", "```py\n>>> def minmax(items):\n...     return min(items), max(items)\n...\n>>> minmax([83, 33, 84, 32, 85, 31, 86])\n(31, 86)\n\n```", "```py\n>>> lower, upper = minmax([83, 33, 84, 32, 85, 31, 86])\n>>> lower\n31\n>>> upper\n86\n\n```", "```py\n>>> (a, (b, (c, d))) = (4, (3, (2, 1)))\n>>> a\n4\n>>> b\n3\n>>> c\n2\n>>> d\n1\n\n```", "```py\n>>> a = 'jelly'\n>>> b = 'bean'\n>>> a, b = b, a\n>>> a\nbean\n>>> b\njelly\n\n```", "```py\n>>> tuple([561, 1105, 1729, 2465])\n(561, 1105, 1729, 2465)\n\n```", "```py\n>>> tuple(\"Carmichael\")\n('C', 'a', 'r', 'm', 'i', 'c', 'h', 'a', 'e', 'l')\n\n```", "```py\n>>>  5 in (3, 5, 17, 257, 65537)\nTrue\n\n```", "```py\n>>> 5 not in (3, 5, 17, 257, 65537)\nFalse\n\n```", "```py\n>>> len(\"llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch\")\n58\n\n```", "```py\n>>> \"New\" + \"found\" + \"land\"\nNewfoundland\n\n```", "```py\n>>> s = \"New\"\n>>> s += \"found\"\n>>> s += \"land\"\n>>> s\n'Newfoundland'\n\n```", "```py\n>>> colors = ';'.join(['#45ff23', '#2321fa', '#1298a3', '#a32312'])\n>>> colors\n'#45ff23;#2321fa;#1298a3;#a32312'\n\n```", "```py\n>>> ''.join(['high', 'way', 'man'])\nhighwayman\n\n```", "```py\n>>> colors.split(';')\n['#45ff23', '#2321FA', '#1298A3', '#A32912']\n\n```", "```py\n>>> 'eggsandbaconandspam'.split('and')\n['eggs', 'bacon', 'spam']\n\n```", "```py\n>>> \"unforgettable\".partition('forget')\n('un', 'forget', 'table')\n\n```", "```py\n>>> departure, separator, arrival = \"London:Edinburgh\".partition(':')\n>>> departure\nLondon\n>>> arrival\nEdinburgh\n\n```", "```py\n>>> origin, _, destination = \"Seattle-Boston\".partition('-')\n\n```", "```py\n>>> \"The age of {0} is {1}\".format('Jim', 32)\n'The age of Jim is 32'\n\n```", "```py\n>>> \"The age of {0} is {1}. {0}'s birthday is on {2}\".format('Fred', 24, 'October 31')\n\n```", "```py\n>>> \"Reticulating spline {} of {}.\".format(4, 23)\n'Reticulating spline 4 of 23.'\n\n```", "```py\n>>> \"Current position {latitude} {longitude}\".format(latitude=\"60N\", longitude=\"5E\")\n'Current position 60N 5E'\n\n```", "```py\n>>> \"Galactic position x={pos[0]}, y={pos[1]}, z={pos[2]}\".format(pos=(65.2, 23.1, 82\\\n.2))\n'Galactic position x=65.2, y=23.1, z=82.2'\n\n```", "```py\n>>> import math\n>>> \"Math constants: pi={m.pi}, e={m.e}\".format(m=math)\n'Math constants: pi=3.141592653589793 e=2.718281828459045'\n\n```", "```py\n>>> \"Math constants: pi={m.pi:.3f}, e={m.e:.3f}\".format(m=math)\n'Math constants: pi=3.142, e=2.718'\n\n```", "```py\n>>> help(str)\n\n```", "```py\n>>> range(5)\nrange(0, 5)\n\n```", "```py\n>>> for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n\n```", "```py\n>>> range(5, 10)\nrange(5, 10)\n\n```", "```py\n>>> list(range(5, 10))\n[5, 6, 7, 8, 9]\n\n```", "```py\n>>> list(range(10, 15))\n[10, 11, 12, 13, 14]\n>>> list(range(5, 10)) + list(range(10, 15))\n[5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\n```", "```py\n>>> list(range(0, 10, 2))\n[0, 2, 4, 6, 8]\n\n```", "```py\n>>> s = [0, 1, 4, 6, 13]\n>>> for i in range(len(s)):\n...     print(s[i])\n...\n0\n1\n4\n6\n13\n\n```", "```py\n>>> s = [0, 1, 4, 6, 13]\n>>> for v in s:\n...     print(v)\n0\n1\n4\n6\n13\n\n```", "```py\n>>> t = [6, 372, 8862, 148800, 2096886]\n>>> for p in enumerate(t):\n>>>     print(p)\n(0, 6)\n(1, 372)\n(2, 8862)\n(3, 148800)\n(4, 2096886)\n\n```", "```py\n>>> for i, v in enumerate(t):\n...     print(\"i = {}, v = {}\".format(i, v))\n...\ni = 0, v = 6\ni = 1, v = 372\ni = 2, v = 8862\ni = 3, v = 148800\ni = 4, v = 2096886\n\n```", "```py\n>>> r = [1, -4, 10, -16, 15]\n>>> r[-1]\n15\n>>> r[-2]\n-16\n\n```", "```py\n>>> r[len(r) - 1]\n\n```", "```py\n>>> s = [3, 186, 4431, 74400, 1048443]\n>>> s[1:3]\n[186, 4431]\n\n```", "```py\n>>> s[1:-1]\n[186, 4431, 74400]\n\n```", "```py\n>>> s[3:]\n[74400, 1048443]\n\n```", "```py\n>>> s[:3]\n[3, 186, 4431]\n\n```", "```py\n>>> s[:]\n[3, 186, 4431, 74400, 1048443]\n\n```", "```py\n>>> t = s\n>>> t is s\nTrue\n\n```", "```py\n>>> r = s[:]\n\n```", "```py\n>>> r is s\nFalse\n\n```", "```py\n>>> r == s\nTrue\n\n```", "```py\n>>> u = s.copy()\n>>> u is s\nFalse\n\n```", "```py\n>>> v = list(s)\n\n```", "```py\n>>> a = [ [1, 2], [3, 4] ]\n\n```", "```py\n>>> b = a[:]\n\n```", "```py\n>>> a is b\nFalse\n\n```", "```py\n>>> a == b\nTrue\n\n```", "```py\n>>> a[0]\n[1, 2]\n>>> b[0]\n[1, 2]\n\n```", "```py\n>>> a[0] is b[0]\nTrue\n\n```", "```py\n>>> a[0] = [8, 9]\n\n```", "```py\n>>> a[0]\n[8, 9]\n>>> b[0]\n[1, 2]\n\n```", "```py\n>>> a[1].append(5)\n>>> a[1]\n[3, 4, 5]\n\n```", "```py\n>>> b[1]\n[3, 4, 5]\n\n```", "```py\n>>> a\n[[8, 9], [3, 4, 5]]\n>>> b\n[[1, 2], [3, 4, 5]]\n\n```", "```py\n>>> c = [21, 37]\n>>> d = c * 4\n>>> d\n[21, 37, 21, 37, 21, 37, 21, 37]\n\n```", "```py\n>>> [0] * 9\n[0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n```", "```py\n>>> s = [ [-1, +1] ] * 5\n>>> s\n[[-1, 1], [-1, 1], [-1, 1], [-1, 1], [-1, 1]]\n\n```", "```py\n>>> s[2].append(7)\n\n```", "```py\n>>> s\n[[-1, 1, 7], [-1, 1, 7], [-1, 1, 7], [-1, 1, 7], [-1, 1, 7]]\n\n```", "```py\n>>> w = \"the quick brown fox jumps over the lazy dog\".split()\n>>> w\n['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n>>> i = w.index('fox')\n>>> i\n3\n>>> w[i]\n'fox'\n\n```", "```py\n>>> w.index('unicorn')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: 'unicorn' is not in list\n\n```", "```py\n>>> w.count(\"the\")\n2\n\n```", "```py\n>>> 37 in [1, 78, 9, 37, 34, 53]\nTrue\n\n```", "```py\n>>> 78 not in [1, 78, 9, 37, 34, 53]\nFalse\n\n```", "```py\n>>> u = \"jackdaws love my big sphinx of quartz\".split()\n>>> u\n['jackdaws', 'love', 'my', 'big', 'sphinx', 'of', 'quartz']\n>>> del u[3]\n>>> u\n['jackdaws', 'love', 'my', 'sphinx', 'of', 'quartz']\n\n```", "```py\n>>> u.remove('jackdaws')\n>>> u\n['love', 'my', 'sphinx', 'of', 'quartz']\n\n```", "```py\n>>> del u[u.index('jackdaws')]\n\n```", "```py\n>>> u.remove('pyramid')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: list.remove(x): x not in list\n\n```", "```py\n>>> a = 'I accidentally the whole universe'.split()\n>>> a\n['I', 'accidentally', 'the', 'whole', 'universe']\n>>> a.insert(2, \"destroyed\")\n>>> a\n['I', 'accidentally', 'destroyed', 'the', 'whole', 'universe']\n>>> ' '.join(a)\n'I accidentally destroyed the whole universe'\n\n```", "```py\n>>> m = [2, 1, 3]\n>>> n = [4, 7, 11]\n>>> k = m + n\n>>> k\n[2, 1, 3, 4, 7, 11]\n\n```", "```py\n>>> k += [18, 29, 47]\n>>> k\n[2, 1, 3, 4, 7, 11, 18, 29, 47]\n\n```", "```py\n>>> k.extend([76, 129, 199])\n>>> k\n[2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199]\n\n```", "```py\n>>> g = [1, 11, 21, 1211, 112111]\n>>> g.reverse()\n>>> g\n[112111, 1211, 21, 11, 1]\n\n```", "```py\n>>> d = [5, 17, 41, 29, 71, 149, 3299, 7, 13, 67]\n>>> d.sort()\n>>> d\n[5, 7, 13, 17, 29, 41, 67, 71, 149, 3299]\n\n```", "```py\n>>> d.sort(reverse=True)\n>>> d\n[3299, 149, 71, 67, 41, 29, 17, 13, 7, 5]\n\n```", "```py\n>>> h = 'not perplexing do handwriting family where I illegibly know doctors'.split()\n>>> h\n['not', 'perplexing', 'do', 'handwriting', 'family', 'where', 'I', 'illegibly', 'know\\\n', 'doctors']\n>>> h.sort(key=len)\n>>> h\n['I', 'do', 'not', 'know', 'where', 'family', 'doctors', 'illegibly', 'perplexing', '\\\nhandwriting']\n>>> ' '.join(h)\n'I do not know where family doctors illegibly perplexing handwriting'\n\n```", "```py\n>>> x = [4, 9, 2, 1]\n>>> y = sorted(x)\n>>> y\n[1, 2, 4, 9]\n>>> x\n[4, 9, 2, 1]\n\n```", "```py\n>>> p = [9, 3, 1, 0]\n>>> q = reversed(p)\n>>> q\n<list_reverseiterator object at 0x1007bf290>\n>>> list(q)\n[0, 1, 3, 9]\n\n```", "```py\n>>> urls = {'Google': 'http://google.com',\n...         'Twitter': 'http://twitter.com',\n...         'Sixty North': 'http://sixty-north.com',\n...         'Microsoft': 'http://microsoft.com' }\n>>>\n\n```", "```py\n>>> urls['Twitter']\nhttp://twitter.com\n\n```", "```py\n>>> names_and_ages = [ ('Alice', 32), ('Bob', 48), ('Charlie', 28), ('Daniel', 33) ]\n>>> d = dict(names_and_ages)\n>>> d\n{'Charlie': 28, 'Bob': 48, 'Alice': 32, 'Daniel': 33}\n\n```", "```py\n>>> phonetic = dict(a='alfa', b='bravo', c='charlie', d='delta', e='echo', f='foxtrot\\\n')\n>>> phonetic\n{'a': 'alfa', 'c': 'charlie', 'b': 'bravo', 'e': 'echo', 'd': 'delta', 'f': 'foxtrot'}\n\n```", "```py\n>>> d = dict(goldenrod=0xDAA520, indigo=0x4B0082, seashell=0xFFF5EE)\n>>> e = d.copy()\n>>> e\n{'indigo': 4915330, 'goldenrod': 14329120, 'seashell': 16774638}\n\n```", "```py\n>>> f = dict(e)\n>>> f\n{'indigo': 4915330, 'seashell': 16774638, 'goldenrod': 14329120}\n\n```", "```py\n>>> g = dict(wheat=0xF5DEB3, khaki=0xF0E68C, crimson=0xDC143C)\n>>> f.update(g)\n>>> f\n>>> {'crimson': 14423100, 'indigo': 4915330, 'goldenrod': 14329120,\n      'wheat': 16113331, 'khaki': 15787660, 'seashell': 16774638}\n\n```", "```py\n>>> stocks = {'GOOG': 891, 'AAPL': 416, 'IBM': 194}\n>>> stocks.update({'GOOG': 894, 'YHOO': 25})\n>>> stocks\n{'YHOO': 25, 'AAPL': 416, 'IBM': 194, 'GOOG': 894}\n\n```", "```py\n>>> colors = dict(aquamarine='#7FFFD4', burlywood='#DEB887',\n...               chartreuse='#7FFF00', cornflower='#6495ED',\n...               firebrick='#B22222', honeydew='#F0FFF0',\n...               maroon='#B03060', sienna='#A0522D')\n>>> for key in colors:\n...     print(\"{key} => {value}\".format(key=key, value=colors[key]))\n...\nfirebrick => #B22222\nmaroon => #B03060\naquamarine => #7FFFD4\nburlywood => #DEB887\nhoneydew => #F0FFF0\nsienna => #A0522D\nchartreuse => #7FFF00\ncornflower => #6495ED\n\n```", "```py\n>>> for value in colors.values():\n...     print(value)\n...\n#B22222\n#B03060\n#7FFFD4\n#DEB887\n#F0FFF0\n#A0522D\n#DEB887\n#6495ED\n\n```", "```py\n>>> for key in colors.keys():\n...     print(key)\n...\nfirebrick\nmaroon\naquamarine\nburlywood\nhoneydew\nsienna\nchartreuse\ncornflower\n\n```", "```py\n>>> for key, value in colors.items():\n...     print(\"{key} => {value}\".format(key=key, value=value))\n...\nfirebrick => #B22222\nmaroon => #B03060\naquamarine => #7FFFD4\nburlywood => #DEB887\nhoneydew => #F0FFF0\nsienna => #A0522D\nchartreuse => #DEB887\ncornflower => #6495ED\n\n```", "```py\n>>> symbols = dict(\n...     usd='\\u0024', gbp='\\u00a3', nzd='\\u0024', krw='\\u20a9',\n...     eur='\\u20ac', jpy='\\u00a5',  nok='kr', hhg='Pu', ils='\\u20aa')\n>>> symbols\n{'jpy': '\u00a5', 'krw': '\u20a9', 'eur': '\u20ac', 'ils': '\u20aa', 'nzd': '$', 'nok': 'kr',\n  'gbp': '\u00a3', 'usd': '$', 'hhg': 'Pu'}\n>>> 'nzd' in symbols\nTrue\n>>> 'mkd' not in symbols\nTrue\n\n```", "```py\n>>> z = {'H': 1, 'Tc': 43, 'Xe': 54, 'Un': 137, 'Rf': 104, 'Fm': 100}\n>>> del z['Un']\n>>> z\n{'H': 1, 'Fm': 100, 'Rf': 104, 'Xe': 54, 'Tc': 43}\n\n```", "```py\n>>> m = {'H': [1, 2, 3],\n...      'He': [3, 4],\n...      'Li': [6, 7],\n...      'Be': [7, 9, 10],\n...      'B': [10, 11],\n...      'C': [11, 12, 13, 14]}\n\n```", "```py\n>>> m['H'] += [4, 5, 6, 7]\n>>> m\n{'H': [1, 2, 3, 4, 5, 6, 7], 'Li': [6, 7], 'C': [11, 12, 13, 14], 'B':\n[10, 11], 'He': [3, 4], 'Be': [7, 9, 10]}\n\n```", "```py\n>>> m['N'] = [13, 14, 15]\n\n```", "```py\n>>> from pprint import pprint as pp\n\n```", "```py\n>>> pp(m)\n{'B': [10, 11],\n  'Be': [7, 9, 10],\n  'C': [11, 12, 13, 14],\n  'H': [1, 2, 3, 4, 5, 6, 7],\n  'He': [3, 4],\n  'Li': [6, 7],\n  'N': [13, 14, 15]}\n\n```", "```py\n>>> p = {6, 28, 496, 8128, 33550336}\n\n```", "```py\n>>> p\n{33550336, 8128, 28, 496, 6}\n\n```", "```py\n>>> type(p)\n<class 'set'>\n\n```", "```py\n>>> d = {}\n>>> type(d)\n<class 'dict'>\n\n```", "```py\n>>> e = set()\n>>> e\nset()\n\n```", "```py\n>>> s = set([2, 4, 16, 64, 4096, 65536, 262144])\n>>> s\n{64, 4096, 2, 4, 65536, 16, 262144}\n\n```", "```py\n>>> t = [1, 4, 2, 1, 7, 9, 9]\n>>> set(t)\n{1, 2, 4, 9, 7}\n\n```", "```py\n>>> for x in {1, 2, 4, 8, 16, 32}:\n>>>     print(x)\n32\n1\n2\n4\n8\n16\n\n```", "```py\n>>> q = { 2, 9, 6, 4 }\n>>> 3 in q\nFalse\n>>> 3 not in q\nTrue\n\n```", "```py\n>>> k = {81, 108}\n>>> k\n{81, 108}\n>>> k.add(54)\n>>> k\n{81, 108, 54}\n>>> k.add(12)\n>>> k\n{81, 108, 54, 12}\n\n```", "```py\n>>> k.add(108)\n\n```", "```py\n>>> k.update([37, 128, 97])\n>>> k\n{128, 81, 37, 54, 97, 12, 108}\n\n```", "```py\n>>> k.remove(97)\n>>> k\n{128, 81, 37, 54, 12, 108}\n>>> k.remove(98)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 98\n\n```", "```py\n>>> k.discard(98)\n>>> k\n{128, 81, 37, 54, 12, 108}\n\n```", "```py\n>>> j = k.copy()\n>>> j\n{128, 81, 37, 54, 108, 12}\n\n```", "```py\n>>> m = set(j)\n>>> m\n{128, 81, 37, 54, 108, 12}\n\n```", "```py\n>>> blue_eyes = {'Olivia', 'Harry', 'Lily', 'Jack', 'Amelia'}\n>>> blond_hair = {'Harry', 'Jack', 'Amelia', 'Mia', 'Joshua'}\n>>> smell_hcn = {'Harry', 'Amelia'}\n>>> taste_ptc = {'Harry', 'Lily', 'Amelia', 'Lola'}\n>>> o_blood = {'Mia', 'Joshua', 'Lily', 'Olivia'}\n>>> b_blood = {'Amelia', 'Jack'}\n>>> a_blood = {'Harry'}\n>>> ab_blood = {'Joshua', 'Lola'}\n\n```", "```py\n>>> blue_eyes.union(blond_hair)\n{'Olivia', 'Jack', 'Joshua', 'Harry', 'Mia', 'Amelia', 'Lily'}\n\n```", "```py\n>>> blue_eyes.union(blond_hair) == blond_hair.union(blue_eyes)\nTrue\n\n```", "```py\n>>> blue_eyes.intersection(blond_hair)\n{'Amelia', 'Jack', 'Harry'}\n\n```", "```py\n>>> blue_eyes.intersection(blond_hair) == blond_hair.intersection(blue_eyes)\nTrue\n\n```", "```py\n>>> blond_hair.difference(blue_eyes)\n{'Joshua', 'Mia'}\n\n```", "```py\n>>> blond_hair.difference(blue_eyes) == blue_eyes.difference(blond_hair)\nFalse\n\n```", "```py\n>>> blond_hair.symmetric_difference(blue_eyes)\n{'Olivia', 'Joshua', 'Mia', 'Lily'}\n\n```", "```py\n>>> blond_hair.symmetric_difference(blue_eyes) == blue_eyes.symmetric_difference(blon\\\nd_hair)\nTrue\n\n```", "```py\n>>> smell_hcn.issubset(blond_hair)\nTrue\n\n```", "```py\n>>> taste_ptc.issuperset(smell_hcn)\nTrue\n\n```", "```py\n>>> a_blood.isdisjoint(o_blood)\nTrue\n\n```", "```py\nitem in container\nitem not in container\n\n```", "```py\nfor item in iterable:\n    print(item)\n\n```", "```py\nitem = sequence[index]\n\n```", "```py\ni = sequence.index(item)\n\n```", "```py\nnum = sequence.count(item)\n\n```", "```py\nr = reversed(sequence)\n\n```"]