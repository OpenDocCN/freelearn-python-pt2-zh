["```py\n > python\nPython 3.5.0 (v3.5.0:374f501f4567, Sep 13 2015, 02:27:37) [MSC v.1900 64 bit (AMD64)]\\\n on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n```", "```py\n > python\nPython 3.5.0 (default, Nov  3 2015, 13:17:02) \n[GCC 4.2.1 Compatible Apple LLVM 6.1.0 (clang-602.0.53)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n\n```", "```py\n$ python3.5\nPython 3.5.0+ (default, Oct 11 2015, 09:05:38)\n[GCC 5.2.1 20151010] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n\n```", "```py\n>>> 2 + 2\n4\n>>> 6 * 7\n42\n\n```", "```py\n>>> x = 5\n\n```", "```py\n>>> x\n5\n\n```", "```py\n>>> 3 * x\n15\n\n```", "```py\n>>> _\n15\n\n```", "```py\n>>> _ * 2\n30\n\n```", "```py\n>>> print('Hello, Python')\nHello, Python\n\n```", "```py\n$ fg\n\n```", "```py\n>>>\n\n```", "```py\n> python\n\n```", "```py\n$ python3\n\n```", "```py\n>>> for i in range(5):\n...\n\n```", "```py\n...     x = i * 10\n\n```", "```py\n...     print(x)\n\n```", "```py\n...\n\n```", "```py\n0\n10\n20\n30\n40\n\n```", "```py\n>>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n\n```", "```py\n>>> import math\n\n```", "```py\n>>> math.sqrt(81)\n9.0\n\n```", "```py\n>>> help\nType help() for interactive help, or help(object) for help about object.\n\n```", "```py\n>>> help(math)\nHelp on module math:\n\nNAME\n    math\n\nMODULE REFERENCE\n        http://docs.python.org/3.3/library/math\n\n    The following documentation is automatically generated from the Python\n    source files.  It may be incomplete, incorrect or include features that\n    are considered implementation detail and may vary between Python\n    implementations.  When in doubt, consult the module reference at the\n    location listed above.\n\nDESCRIPTION\n    This module is always available.  It provides access to the\n    mathematical functions defined by the C standard.\n\nFUNCTIONS\n    acos(...)\n    acos(x)\n\n        Return the arc cosine (measured in radians) of x.\n\n```", "```py\n>>> help(math.factorial)\nHelp on built-in function factorial in module math:\n\nfactorial(...)\n    factorial(x) -> Integral\n\n    Find x!. Raise a ValueError if x is negative or non-integral.\n\n```", "```py\n>>> math.factorial(5)\n120\n>>> math.factorial(6)\n720\n\n```", "```py\n>>> n = 5\n>>> k = 3\n>>> math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n10.0\n\n```", "```py\n>>> from math import factorial\n>>> factorial(n) / (factorial(k) * factorial(n - k))\n10.0\n\n```", "```py\n>>> from math import factorial as fac\n>>> fac(n) / (fac(k) * fac(n - k))\n10.0\n\n```", "```py\n>>> from math import factorial as fac\n>>> fac(n) // (fac(k) * fac(n - k))\n10\n\n```", "```py\n>>> 2**31 - 1\n2147483647\n\n```", "```py\n>>> fac(13)\n6227020800\n\n```", "```py\n>>> n = 100\n>>> k = 2\n>>> fac(n) // (fac(k) * fac(n - k))\n4950\n\n```", "```py\n>>> fac(n)\n9332621544394415268169923885626670049071596826438162146859296389521759999322991560894\\\n1463976156518286253697920827223758251185210916864000000000000000000000000\n\n```", "```py\n>>> len(str(fac(n)))\n158\n\n```", "```py\n>>> 10\n10\n\n```", "```py\n>>> 0b10\n2\n\n```", "```py\n>>> 0o10\n8\n\n```", "```py\n>>> 0x10\n16\n\n```", "```py\n>>> int(3.5)\n3\n\n```", "```py\n>>> int(-3.5)\n-3\n>>> int(3.5)\n3\n\n```", "```py\n>>> int(\"496\")\n496\n\n```", "```py\n>>> int(\"10000\", 3)\n81\n\n```", "```py\n>>> 3.125\n3.125\n\n```", "```py\n>>> 3e8\n300000000.0\n\n```", "```py\n>>> 1.616e-35\n1.616e-35\n\n```", "```py\n>>> float(7)\n7.0\n\n```", "```py\n>>> float(\"1.618\")\n1.618\n\n```", "```py\n>>> float(\"nan\")\nnan\n>>> float(\"inf\")\ninf\n>>> float(\"-inf\")\n-inf\n\n```", "```py\n>>> 3.0 + 1\n4.0\n\n```", "```py\n>>> None\n>>>\n\n```", "```py\n>>> a = None\n\n```", "```py\n>>> a is None\nTrue\n\n```", "```py\n>>> True\nTrue\n>>> False\nFalse\n\n```", "```py\n>>> bool(0)\nFalse\n>>> bool(42)\nTrue\n>>> bool(-1)\nTrue\n\n```", "```py\n>>> bool(0.0)\nFalse\n>>> bool(0.207)\nTrue\n>>> bool(-1.117)\nTrue\n>>> bool(float(\"NaN\"))\nTrue\n\n```", "```py\n>>> bool([])\nFalse\n>>> bool([1, 5, 9])\nTrue\n\n```", "```py\n>>> bool(\"\")\nFalse\n>>> bool(\"Spam\")\nTrue\n\n```", "```py\n>>> bool(\"False\")\nTrue\n\n```", "```py\n>>> g = 20\n\n```", "```py\n>>> g == 20\nTrue\n>>> g == 13\nFalse\n\n```", "```py\n>>> g != 20\nFalse\n>>> g != 13\nTrue\n\n```", "```py\n>>> g < 30\nTrue\n\n```", "```py\n>>> g > 30\nFalse\n\n```", "```py\n>>> g <= 20\nTrue\n\n```", "```py\n>>> g >= 20\nTrue\n\n```", "```py\n>>> if True:\n\n```", "```py\n...     print(\"It's true!\")\n...\nIt's true!\n\n```", "```py\n>>> if False:\n...     print(\"It's true!\")\n...\n>>>\n\n```", "```py\n>>> if bool(\"eggs\"):\n...     print(\"Yes please!\")\n...\nYes please!\n\n```", "```py\n>>> if \"eggs\":\n...     print(\"Yes please!\")\n...\nYes please!\n\n```", "```py\n>>> h = 42\n>>> if h > 50:\n...     print(\"Greater than 50\")\n\n```", "```py\n... else:\n...     print(\"50 or smaller\")\n...\n50 or smaller\n\n```", "```py\n>>> if h > 50:\n...     print(\"Greater than 50\")\n... else:\n...     if h < 20:\n...         print(\"Less than 20\")\n...     else:\n...         print(\"Between 20 and 50\")\n...\nBetween 20 and 50\n\n```", "```py\n>>> if h > 50:\n...     print(\"Greater than 50\")\n... elif h < 20:\n...     print(\"Less than 20\")\n... else:\n...      print(\"Between 20 and 50\")\n...\nBetween 20 and 50\n\n```", "```py\n>>> c = 5\n>>> while c != 0:\n...     print(c)\n...     c -= 1\n...\n5\n4\n3\n2\n1\n\n```", "```py\n>>> c = 5\n>>> while c:\n...     print(c)\n...     c -= 1\n...\n5\n4\n3\n2\n1\n\n```", "```py\n>>> while True:\n...     print(\"Looping!\")\n...\nLooping!\nLooping!\nLooping!\nLooping!\nLooping!\nLooping!\nLooping!\nLooping!\n\n```", "```py\nLooping!\nLooping!\nLooping!\nLooping!\nLooping!\nLooping!^C\nTraceback (most recent call last):\nFile \"<stdin>\", line 2, in <module>\nKeyboardInterrupt\n>>>\n\n```", "```py\n>>> while True:\n...     response = input()\n...     if int(response) % 7 == 0:\n...         break\n...\n\n```", "```py\n12\n67\n34\n28\n>>>\n\n```"]