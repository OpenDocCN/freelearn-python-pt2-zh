["```py\n>>> type(5)\n<class 'int'>\n>>> type(\"python\")\n<class 'str'>\n>>> type([1, 2, 3])\n<class 'list'>\n>>> type(x*x for x in [2, 4, 6])\n<class 'generator'>\n\n```", "```py\n\"\"\"Model for aircraft flights.\"\"\"\n\nclass Flight:\n    pass\n\n```", "```py\n>>> from airtravel import Flight\n\n```", "```py\n>>> Flight\n<class 'airtravel.Flight'>\n\n```", "```py\n>>> f = Flight()\n\n```", "```py\n>>> type(f)\n<class 'airtravel.Flight'>\n\n```", "```py\nclass Flight:\n\n    def number(self):\n        return \"SN060\"\n\n```", "```py\n>>> from airtravel import Flight\n>>> f = Flight()\n>>> f.number()\nSN060\n\n```", "```py\n>>> f.number()\nSN060\n\n```", "```py\n>>> Flight.number(f)\nSN060\n\n```", "```py\nclass Flight:\n\n    def __init__(self, number):\n        self._number = number\n\n    def number(self):\n        return self._number\n\n```", "```py\n>>> from airtravel import Flight\n>>> f = Flight(\"SN060\")\n>>> f.number()\nSN060\n\n```", "```py\n>>> f._number\nSN060\n\n```", "```py\nclass Flight:\n\n    def __init__(self, number):\n        if not number[:2].isalpha():\n            raise ValueError(\"No airline code in '{}'\".format(number))\n\n        if not number[:2].isupper():\n            raise ValueError(\"Invalid airline code '{}'\".format(number))\n\n        if not (number[2:].isdigit() and int(number[2:]) <= 9999):\n            raise ValueError(\"Invalid route number '{}'\".format(number))\n\n        self._number = number\n\n    def number(self):\n        return self._number\n\n```", "```py\n>>> from airtravel import Flight\n>>> f = Flight(\"SN060\")\n>>> f = Flight(\"060\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./airtravel.py\", line 8, in __init__\n    raise ValueError(\"No airline code in '{};\".format(number))\nValueError: No airline code in '060'\n>>> f = Flight(\"sn060\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./airtravel.py\", line 11, in __init__\n    raise ValueError(\"Invalid airline code '{}'\".format(number))\nValueError: Invalid airline code 'sn060'\n>>> f = Flight(\"snabcd\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./airtravel.py\", line 11, in __init__\n    raise ValueError(\"Invalid airline code '{}'\".format(number))\nValueError: Invalid airline code 'snabcd'\n>>> f = Flight(\"SN12345\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./airtravel.py\", line 11, in __init__\n    raise ValueError(\"Invalid airline code '{}'\".format(number))\nValueError: Invalid airline code 'sn12345'\n\n```", "```py\ndef airline(self):\n    return self._number[:2]\n\n```", "```py\nclass Aircraft:\n\n    def __init__(self, registration, model, num_rows, num_seats_per_row):\n        self._registration = registration\n        self._model = model\n        self._num_rows = num_rows\n        self._num_seats_per_row = num_seats_per_row\n\n    def registration(self):\n        return self._registration\n\n    def model(self):\n        return self._model\n\n```", "```py\ndef seating_plan(self):\n  return (range(1, self._num_rows + 1),\n          \"ABCDEFGHJK\"[:self._num_seats_per_row])\n\n```", "```py\n  >>> from airtravel import *\n  >>> a = Aircraft(\"G-EUPT\", \"Airbus A319\", num_rows=22, num_seats_per_row=6)\n  >>> a.registration()\n  'G-EUPT'\n  >>> a.model()\n  'Airbus A319'\n  >>> a.seating_plan()\n  (range(1, 23), 'ABCDEF')\n\n```", "```py\nclass Flight:\n    \"\"\"A flight with a particular passenger aircraft.\"\"\"\n\n    def __init__(self, number, aircraft):\n        if not number[:2].isalpha():\n            raise ValueError(\"No airline code in '{}'\".format(number))\n\n        if not number[:2].isupper():\n            raise ValueError(\"Invalid airline code '{}'\".format(number))\n\n        if not (number[2:].isdigit() and int(number[2:]) <= 9999):\n            raise ValueError(\"Invalid route number '{}'\".format(number))\n\n        self._number = number\n        self._aircraft = aircraft\n\n    def number(self):\n        return self._number\n\n    def airline(self):\n        return self._number[:2]\n\n    def aircraft_model(self):\n        return self._aircraft.model()\n\n```", "```py\n>>> from airtravel import *\n>>> f = Flight(\"BA758\", Aircraft(\"G-EUPT\", \"Airbus A319\", num_rows=22,\n...                              num_seats_per_row=6))\n>>> f.aircraft_model()\n'Airbus A319'\n\n```", "```py\ndef aircraft_model(self):\n    return self._aircraft.model()\n\n```", "```py\nrows, seats = self._aircraft.seating_plan()\nself._seating = [None] + [{letter: None for letter in seats} for _ in rows]\n\n```", "```py\ndef __init__(self, number, aircraft):\n    if not number[:2].isalpha():\n        raise ValueError(\"No airline code in '{}'\".format(number))\n\n    if not number[:2].isupper():\n        raise ValueError(\"Invalid airline code '{}'\".format(number))\n\n    if not (number[2:].isdigit() and int(number[2:]) <= 9999):\n        raise ValueError(\"Invalid route number '{}'\".format(number))\n\n    self._number = number\n    self._aircraft = aircraft\n\n    rows, seats = self._aircraft.seating_plan()\n    self._seating = [None] + [{letter: None for letter in seats} for _ in rows]\n\n```", "```py\n>>> from airtravel import *\n>>> f = Flight(\"BA758\", Aircraft(\"G-EUPT\", \"Airbus A319\", num_rows=22,\n...                              num_seats_per_row=6))\n>>>\n\n```", "```py\n>>> f._seating\n[None, {'F': None, 'D': None, 'E': None, 'B': None, 'C': None, 'A': None},\n{'F': None, 'D': None, 'E': None, 'B': None, 'C': None, 'A': None}, {'F': None,\n'D': None, 'E': None, 'B': None, 'C': None, 'A': None}, {'F': None, 'D': None,\n'E': None, 'B': None, 'C': None, 'A': None}, {'F': None, 'D': None, 'E': None,\n'B': None, 'C': None, 'A': None}, {'F': None, 'D': None, 'E': None, 'B': None,\n'C': None, 'A': None}, {'F': None, 'D': None, 'E': None, 'B': None, 'C': None,\n'A': None}, {'F': None, 'D': None, 'E': None, 'B': None, 'C': None, 'A': None},\n{'F': None, 'D': None, 'E': None, 'B': None, 'C': None, 'A': None}, {'F': None,\n'D': None, 'E': None, 'B': None, 'C': None, 'A': None}, {'F': None, 'D': None,\n'E': None, 'B': None, 'C': None, 'A': None}, {'F': None, 'D': None, 'E': None,\n'B': None, 'C': None, 'A': None}, {'F': None, 'D': None, 'E': None, 'B': None,\n'C': None, 'A': None}, {'F': None, 'D': None, 'E': None, 'B': None, 'C': None,\n'A': None}, {'F': None, 'D': None, 'E': None, 'B': None, 'C': None, 'A': None},\n{'F': None, 'D': None, 'E': None, 'B': None, 'C': None, 'A': None}, {'F': None,\n'D': None, 'E': None, 'B': None, 'C': None, 'A': None}, {'F': None, 'D': None,\n'E': None, 'B': None, 'C': None, 'A': None}, {'F': None, 'D': None, 'E': None,\n'B': None, 'C': None, 'A': None}, {'F': None, 'D': None, 'E': None, 'B': None,\n'C': None, 'A': None}, {'F': None, 'D': None, 'E': None, 'B': None, 'C': None,\n'A': None}, {'F': None, 'D': None, 'E': None, 'B': None, 'C': None, 'A': None}]\n\n```", "```py\n>>> from pprint import pprint as pp\n>>> pp(f._seating)\n[None,\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None}]\n\n```", "```py\n 1 class Flight:\n 2 \n 3    # ...\n 4 \n 5    def allocate_seat(seat, passenger):\n 6        \"\"\"Allocate a seat to a passenger.\n 7 \n 8        Args:\n 9            seat: A seat designator such as '12C' or '21F'.\n10             passenger: The passenger name.\n11 \n12         Raises:\n13             ValueError: If the seat is unavailable.\n14         \"\"\"\n15         rows, seat_letters = self._aircraft.seating_plan()\n16 \n17         letter = seat[-1]\n18         if letter not in seat_letters:\n19             raise ValueError(\"Invalid seat letter {}\".format(letter))\n20 \n21         row_text = seat[:-1]\n22         try:\n23             row = int(row_text)\n24         except ValueError:\n25             raise ValueError(\"Invalid seat row {}\".format(row_text))\n26 \n27         if row not in rows:\n28             raise ValueError(\"Invalid row number {}\".format(row))\n29 \n30         if self._seating[row][letter] is not None:\n31             raise ValueError(\"Seat {} already occupied\".format(seat))\n32 \n33         self._seating[row][letter] = passenger\n\n```", "```py\n>>> from airtravel import *\n>>> f = Flight(\"BA758\", Aircraft(\"G-EUPT\", \"Airbus A319\",\n...            num_rows=22, num_seats_per_row=6))\n>>> f.allocate_seat('12A', 'Guido van Rossum')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  TypeError: allocate_seat() takes 2 positional arguments but 3 were given\n\n```", "```py\ndef allocate_seat(self, seat, passenger):\n    # ...\n\n```", "```py\n>>> from airtravel import *\n>>> from pprint import pprint as pp\n>>> f = Flight(\"BA758\", Aircraft(\"G-EUPT\", \"Airbus A319\",\n...            num_rows=22, num_seats_per_row=6))\n>>> f.allocate_seat('12A', 'Guido van Rossum')\n>>> f.allocate_seat('12A', 'Rasmus Lerdorf')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./airtravel.py\", line 57, in allocate_seat\n    raise ValueError(\"Seat {} already occupied\".format(seat))\nValueError: Seat 12A already occupied\n>>> f.allocate_seat('15F', 'Bjarne Stroustrup')\n>>> f.allocate_seat('15E', 'Anders Hejlsberg')\n>>> f.allocate_seat('E27', 'Yukihiro Matsumoto')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./airtravel.py\", line 45, in allocate_seat\n    raise ValueError(\"Invalid seat letter {}\".format(letter))\nValueError: Invalid seat letter 7\n>>> f.allocate_seat('1C', 'John McCarthy')\n>>> f.allocate_seat('1D', 'Richard Hickey')\n>>> f.allocate_seat('DD', 'Larry Wall')\nTraceback (most recent call last):\n  File \"./airtravel.py\", line 49, in allocate_seat\n    row = int(row_text)\nValueError: invalid literal for int() with base 10: 'D'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./airtravel.py\", line 51, in allocate_seat\n    raise ValueError(\"Invalid seat row {}\".format(row_text))\nValueError: Invalid seat row D\n\n>>> pp(f._seating)\n[None,\n  {'A': None,\n  'B': None,\n  'C': 'John McCarthy',\n  'D': 'Richard Hickey',\n  'E': None,\n  'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': 'Guido van Rossum',\n  'B': None,\n  'C': None,\n  'D': None,\n  'E': None,\n  'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None,\n  'B': None,\n  'C': None,\n  'D': None,\n  'E': 'Anders Hejlsberg',\n  'F': 'Bjarne Stroustrup'},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None}]\n\n```", "```py\nclass Flight:\n\n    # ...\n\n    def _parse_seat(self, seat):\n        \"\"\"Parse a seat designator into a valid row and letter.\n\n Args:\n seat: A seat designator such as 12F\n\n Returns:\n A tuple containing an integer and a string for row and seat.\n \"\"\"\n        row_numbers, seat_letters = self._aircraft.seating_plan()\n\n        letter = seat[-1]\n        if letter not in seat_letters:\n            raise ValueError(\"Invalid seat letter {}\".format(letter))\n\n        row_text = seat[:-1]\n        try:\n            row = int(row_text)\n        except ValueError:\n            raise ValueError(\"Invalid seat row {}\".format(row_text))\n\n        if row not in row_numbers:\n            raise ValueError(\"Invalid row number {}\".format(row))\n\n        return row, letter\n\n```", "```py\ndef allocate_seat(self, seat, passenger):\n    \"\"\"Allocate a seat to a passenger.\n\n Args:\n seat: A seat designator such as '12C' or '21F'.\n passenger: The passenger name.\n\n Raises:\n ValueError: If the seat is unavailable.\n \"\"\"\n    row, letter = self._parse_seat(seat)\n\n    if self._seating[row][letter] is not None:\n        raise ValueError(\"Seat {} already occupied\".format(seat))\n\n    self._seating[row][letter] = passenger\n\n```", "```py\nclass Flight:\n\n    # ...\n\n    def relocate_passenger(self, from_seat, to_seat):\n        \"\"\"Relocate a passenger to a different seat.\n\n Args:\n from_seat: The existing seat designator for the\n passenger to be moved.\n\n to_seat: The new seat designator.\n \"\"\"\n        from_row, from_letter = self._parse_seat(from_seat)\n        if self._seating[from_row][from_letter] is None:\n            raise ValueError(\"No passenger to relocate in seat {}\".format(from_seat))\n\n        to_row, to_letter = self._parse_seat(to_seat)\n        if self._seating[to_row][to_letter] is not None:\n            raise ValueError(\"Seat {} already occupied\".format(to_seat))\n\n        self._seating[to_row][to_letter] = self._seating[from_row][from_letter]\n        self._seating[from_row][from_letter] = None\n\n```", "```py\ndef make_flight():\n    f = Flight(\"BA758\", Aircraft(\"G-EUPT\", \"Airbus A319\",\n                num_rows=22, num_seats_per_row=6))\n    f.allocate_seat('12A', 'Guido van Rossum')\n    f.allocate_seat('15F', 'Bjarne Stroustrup')\n    f.allocate_seat('15E', 'Anders Hejlsberg')\n    f.allocate_seat('1C', 'John McCarthy')\n    f.allocate_seat('1D', 'Richard Hickey')\n    return f\n\n```", "```py\n>>> from airtravel import make_flight\n>>> f = make_flight()\n>>> f\n<airtravel.Flight object at 0x1007a6690>\n\n```", "```py\n>>> f.relocate_passenger('12A', '15D')\n>>> from pprint import pprint as pp\n>>> pp(f._seating)\n[None,\n  {'A': None,\n  'B': None,\n  'C': 'John McCarthy',\n  'D': 'Richard Hickey',\n  'E': None,\n  'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None,\n  'B': None,\n  'C': None,\n  'D': 'Guido van Rossum',\n  'E': 'Anders Hejlsberg',\n  'F': 'Bjarne Stroustrup'},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None},\n  {'A': None, 'B': None, 'C': None, 'D': None, 'E': None, 'F': None}]\n\n```", "```py\ndef num_available_seats(self):\n    return sum( sum(1 for s in row.values() if s is None)\n                for row in self._seating\n                if row is not None )\n\n```", "```py\n>>> from airtravel import make_flight\n>>> f = make_flight()\n>>> f.num_available_seats()\n127\n\n```", "```py\n>>> 6 * 22 - 5\n127\n\n```", "```py\ndef console_card_printer(passenger, seat, flight_number, aircraft):\n    output = \"| Name: {0}\"     \\\n              \"  Flight: {1}\"   \\\n              \"  Seat: {2}\"     \\\n              \"  Aircraft: {3}\" \\\n              \" |\".format(passenger, flight_number, seat, aircraft)\n    banner = '+' + '-' * (len(output) - 2) + '+'\n    border = '|' + ' ' * (len(output) - 2) + '|'\n    lines = [banner, border, output, border, banner]\n    card = '\\n'.join(lines)\n    print(card)\n    print()\n\n```", "```py\nclass Flight:\n\n    # ...\n\n    def make_boarding_cards(self, card_printer):\n        for passenger, seat in sorted(self._passenger_seats()):\n            card_printer(passenger, seat, self.number(), self.aircraft_model())\n\n```", "```py\ndef _passenger_seats(self):\n    \"\"\"An iterable series of passenger seating allocations.\"\"\"\n    row_numbers, seat_letters = self._aircraft.seating_plan()\n    for row in row_numbers:\n        for letter in seat_letters:\n            passenger = self._seating[row][letter]\n            if passenger is not None:\n                yield (passenger, \"{}{}\".format(row, letter))\n\n```", "```py\n>>> from airtravel import console_card_printer, make_flight\n>>> f = make_flight()\n>>> f.make_boarding_cards(console_card_printer)\n+-------------------------------------------------------------------------+\n|                                                                         |\n| Name: Anders Hejlsberg  Flight: BA758  Seat: 15E  Aircraft: Airbus A319 |\n|                                                                         |\n+-------------------------------------------------------------------------+\n\n+--------------------------------------------------------------------------+\n|                                                                          |\n| Name: Bjarne Stroustrup  Flight: BA758  Seat: 15F  Aircraft: Airbus A319 |\n|                                                                          |\n+--------------------------------------------------------------------------+\n\n+-------------------------------------------------------------------------+\n|                                                                         |\n| Name: Guido van Rossum  Flight: BA758  Seat: 12A  Aircraft: Airbus A319 |\n|                                                                         |\n+-------------------------------------------------------------------------+\n\n+---------------------------------------------------------------------+\n|                                                                     |\n| Name: John McCarthy  Flight: BA758  Seat: 1C  Aircraft: Airbus A319 |\n|                                                                     |\n+---------------------------------------------------------------------+\n\n+----------------------------------------------------------------------+\n|                                                                      |\n| Name: Richard Hickey  Flight: BA758  Seat: 1D  Aircraft: Airbus A319 |\n|                                                                      |\n+----------------------------------------------------------------------+\n\n```", "```py\nclass Aircraft:\n\n    def __init__(self, registration, model, num_rows, num_seats_per_row):\n        self._registration = registration\n        self._model = model\n        self._num_rows = num_rows\n        self._num_seats_per_row = num_seats_per_row\n\n    def registration(self):\n        return self._registration\n\n    def model(self):\n        return self._model\n\n    def seating_plan(self):\n        return (range(1, self._num_rows + 1),\n                \"ABCDEFGHJK\"[:self._num_seats_per_row])\n\n```", "```py\nclass AirbusA319:\n\n    def __init__(self, registration):\n        self._registration = registration\n\n    def registration(self):\n        return self._registration\n\n    def model(self):\n        return \"Airbus A319\"\n\n    def seating_plan(self):\n        return range(1, 23), \"ABCDEF\"\n\n```", "```py\nclass Boeing777:\n\n    def __init__(self, registration):\n        self._registration = registration\n\n    def registration(self):\n        return self._registration\n\n    def model(self):\n        return \"Boeing 777\"\n\n    def seating_plan(self):\n        # For simplicity's sake, we ignore complex\n        # seating arrangement for first-class\n        return range(1, 56), \"ABCDEGHJK\"\n\n```", "```py\ndef make_flights():\n    f = Flight(\"BA758\", AirbusA319(\"G-EUPT\"))\n    f.allocate_seat('12A', 'Guido van Rossum')\n    f.allocate_seat('15F', 'Bjarne Stroustrup')\n    f.allocate_seat('15E', 'Anders Hejlsberg')\n    f.allocate_seat('1C', 'John McCarthy')\n    f.allocate_seat('1D', 'Richard Hickey')\n\n    g = Flight(\"AF72\", Boeing777(\"F-GSPS\"))\n    g.allocate_seat('55K', 'Larry Wall')\n    g.allocate_seat('33G', 'Yukihiro Matsumoto')\n    g.allocate_seat('4B', 'Brian Kernighan')\n    g.allocate_seat('4A', 'Dennis Ritchie')\n\n    return f, g\n\n```", "```py\n>>> from airtravel import *\n>>> f, g = make_flights()\n>>> f.aircraft_model()\n'Airbus A319'\n>>> g.aircraft_model()\n'Boeing 777'\n>>> f.num_available_seats()\n127\n>>> g.num_available_seats()\n491\n>>> g.relocate_passenger('55K', '13G')\n>>> g.make_boarding_cards(console_card_printer)\n+---------------------------------------------------------------------+\n|                                                                     |\n| Name: Brian Kernighan  Flight: AF72  Seat: 4B  Aircraft: Boeing 777 |\n|                                                                     |\n+---------------------------------------------------------------------+\n\n+--------------------------------------------------------------------+\n|                                                                    |\n| Name: Dennis Ritchie  Flight: AF72  Seat: 4A  Aircraft: Boeing 777 |\n|                                                                    |\n+--------------------------------------------------------------------+\n\n+-----------------------------------------------------------------+\n|                                                                 |\n| Name: Larry Wall  Flight: AF72  Seat: 13G  Aircraft: Boeing 777 |\n|                                                                 |\n+-----------------------------------------------------------------+\n\n+-------------------------------------------------------------------------+\n|                                                                         |\n| Name: Yukihiro Matsumoto  Flight: AF72  Seat: 33G  Aircraft: Boeing 777 |\n|                                                                         |\n+-------------------------------------------------------------------------+\n\n```", "```py\ndef num_seats(self):\n    rows, row_seats = self.seating_plan()\n    return len(rows) * len(row_seats)\n\n```", "```py\nclass Aircraft:\n\n    def num_seats(self):\n        rows, row_seats = self.seating_plan()\n        return len(rows) * len(row_seats)\n\n```", "```py\n>>> from airtravel import *\n>>> base = Aircraft()\n>>> base.num_seats()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./airtravel.py\", line 125, in num_seats\n    rows, row_seats = self.seating_plan()\nAttributeError: 'Aircraft' object has no attribute 'seating_plan'\n\n```", "```py\nclass AirbusA319(Aircraft):\n\n    def __init__(self, registration):\n        self._registration = registration\n\n    def registration(self):\n        return self._registration\n\n    def model(self):\n        return \"Airbus A319\"\n\n    def seating_plan(self):\n        return range(1, 23), \"ABCDEF\"\n\n```", "```py\nclass Boeing777(Aircraft):\n\n    def __init__(self, registration):\n        self._registration = registration\n\n    def registration(self):\n        return self._registration\n\n    def model(self):\n        return \"Boeing 777\"\n\n    def seating_plan(self):\n        # For simplicity's sake, we ignore complex\n        # seating arrangement for first-class\n        return range(1, 56), \"ABCDEGHJK\"\n\n```", "```py\n>>> from airtravel import *\n>>> a = AirbusA319(\"G-EZBT\")\n>>> a.num_seats()\n132\n>>> b = Boeing777(\"N717AN\")\n>>> b.num_seats()\n495\n\n```", "```py\nclass Aircraft:\n\n    def __init__(self, registration):\n        self._registration = registration\n\n    def registration(self):\n        return self._registration\n\n    def num_seats(self):\n        rows, row_seats = self.seating_plan()\n        return len(rows) * len(row_seats)\n\nclass AirbusA319(Aircraft):\n\n    def model(self):\n        return \"Airbus A319\"\n\n    def seating_plan(self):\n        return range(1, 23), \"ABCDEF\"\n\nclass Boeing777(Aircraft):\n\n    def model(self):\n        return \"Boeing 777\"\n\n    def seating_plan(self):\n        # For simplicities sake, we ignore complex\n        # seating arrangement for first-class\n        return range(1, 56), \"ABCDEGHJK\"\n\n```"]