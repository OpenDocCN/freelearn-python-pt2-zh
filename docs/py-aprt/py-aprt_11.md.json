["```py\n\"\"\"A module for demonstrating exceptions.\"\"\"\n\ndef convert(s):\n    \"\"\"Convert to an integer.\"\"\"\n    x = int(s)\n    return x\n\n```", "```py\n$ python3\nPython 3.5.1 (v3.5.1:37a07cee5969, Dec  5 2015, 21:12:44)\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from exceptional import convert\n\n```", "```py\n>>> convert(\"33\")\n33\n\n```", "```py\n>>> convert(\"hedgehog\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./exceptional.py\", line 7, in convert\n    x = int(s)\nValueError: invalid literal for int() with base 10: 'hedgehog'\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    try:\n        x = int(s)\n    except ValueError:\n        x = -1\n    return x\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    try:\n        x = int(s)\n        print(\"Conversion succeeded! x =\", x)\n    except ValueError:\n        print(\"Conversion failed!\")\n        x = -1\n    return x\n\n```", "```py\n>>> from exceptional import convert\n>>> convert(\"34\")\nConversion succeeded! x = 34\n34\n>>> convert(\"giraffe\")\nConversion failed!\n-1\n\n```", "```py\n>>> convert([4, 6, 5])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./exceptional.py\", line 8, in convert\n    x = int(s)\nTypeError: int() argument must be a string or a number, not 'list'\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    try:\n        x = int(s)\n        print(\"Conversion succeeded! x =\", x)\n    except ValueError:\n        print(\"Conversion failed!\")\n        x = -1\n    except TypeError:\n        print(\"Conversion failed!\")\n        x = -1\n    return x\n\n```", "```py\n>>> from exceptional import convert\n>>> convert([1, 3, 19])\nConversion failed!\n-1\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    x = -1\n    try:\n        x = int(s)\n        print(\"Conversion succeeded! x =\", x)\n    except ValueError:\n        print(\"Conversion failed!\")\n    except TypeError:\n        print(\"Conversion failed!\")\n    return x\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    x = -1\n    try:\n        x = int(s)\n        print(\"Conversion succeeded! x =\", x)\n    except (ValueError, TypeError):\n        print(\"Conversion failed!\")\n    return x\n\n```", "```py\n>>> from exceptional import convert\n>>> convert(29)\nConversion succeeded! x = 29\n29\n>>> convert(\"elephant\")\nConversion failed!\n-1\n>>> convert([4, 5, 1])\nConversion failed!\n-1\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    x = -1\n    try:\n        x = int(s)\n    except (ValueError, TypeError):\n    return x\n\n```", "```py\n>>> from exceptional import convert\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./exceptional.py\", line 11\n    return x\n          ^\nIndentationError: expected an indented block\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    x = -1\n    try:\n        x = int(s)\n    except (ValueError, TypeError):\n        pass\n    return x\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    try:\n        return int(s)\n    except (ValueError, TypeError):\n        return -1\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    try:\n        return int(s)\n    except (ValueError, TypeError) as e:\n        return -1\n\n```", "```py\nimport sys\n\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    try:\n        return int(s)\n    except (ValueError, TypeError) as e:\n        print(\"Conversion error: {}\".format(str(e)), file=sys.stderr)\n        return -1\n\n```", "```py\n>>> from exceptional import convert\n>>> convert(\"fail\")\nConversion error: invalid literal for int() with base 10: 'fail'\n-1\n\n```", "```py\nfrom math import log\n\ndef string_log(s):\n    v = convert(s)\n    return log(v)\n\n```", "```py\n>>> from exceptional import string_log\n>>> string_log(\"ouch!\")\nConversion error: invalid literal for int() with base 10: 'ouch!'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./exceptional.py\", line 15, in string_log\n    return log(v)\nValueError: math domain error\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    try:\n        return int(s)\n    except (ValueError, TypeError) as e:\n        print(\"Conversion error: {}\".format(str(e)), file=sys.stderr)\n        raise\n\n```", "```py\n>>> from exceptional import string_log\n>>> string_log(\"25\")\n3.2188758248682006\n>>> string_log(\"cat\")\nConversion error: invalid literal for int() with base 10: 'cat'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./exceptional.py\", line 14, in string_log\n    v = convert(s)\n  File \"./exceptional.py\", line 6, in convert\n    return int(s)\nValueError: invalid literal for int() with base 10: 'cat'\n>>> string_log([5, 3, 1])\nConversion error: int() argument must be a string or a number, not 'list'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./exceptional.py\", line 14, in string_log\n    v = convert(s)\n  File \"./exceptional.py\", line 6, in convert\n    return int(s)\nTypeError: int() argument must be a string or a number, not 'list'\n\n```", "```py\ndef sqrt(x):\n    \"\"\"Compute square roots using the method of Heron of Alexandria.\n\n Args:\n x: The number for which the square root is to be computed.\n\n Returns:\n The square root of x.\n \"\"\"\n    guess = x\n    i = 0\n    while guess * guess != x and i < 20:\n        guess = (guess + x / guess) / 2.0\n        i += 1\n    return guess\n\ndef main():\n    print(sqrt(9))\n    print(sqrt(2))\n\nif __name__ == '__main__':\n    main()\n\n```", "```py\n$ python3 roots.py\n3.0\n1.41421356237\n\n```", "```py\ndef main():\n    print(sqrt(9))\n    print(sqrt(2))\n    print(sqrt(-1))\n\n```", "```py\n$ python3 sqrt.py\n3.0\n1.41421356237\nTraceback (most recent call last):\n  File \"sqrt.py\", line 14, in <module>\n    print(sqrt(-1))\n  File \"sqrt.py\", line 7, in sqrt\n    guess = (guess + x / guess) / 2.0\nZeroDivisionError: float division\n\n```", "```py\ndef main():\n    print(sqrt(9))\n    print(sqrt(2))\n    try:\n        print(sqrt(-1))\n    except ZeroDivisionError:\n        print(\"Cannot compute square root of a negative number.\")\n\n    print(\"Program execution continues normally here.\")\n\n```", "```py\n$ python sqrt.py\n3.0\n1.41421356237\nCannot compute square root of a negative number.\nProgram execution continues normally here.\n\n```", "```py\ndef main():\n    try:\n        print(sqrt(9))\n        print(sqrt(2))\n        print(sqrt(-1))\n        print(\"This is never printed.\")\n    except ZeroDivisionError:\n        print(\"Cannot compute square root of a negative number.\")\n\n    print(\"Program execution continues normally here.\")\n\n```", "```py\ndef sqrt(x):\n    \"\"\"Compute square roots using the method of Heron of Alexandria.\n\n Args:\n x: The number for which the square root is to be computed.\n\n Returns:\n The square root of x.\n \"\"\"\n    guess = x\n    i = 0\n    try:\n        while guess * guess != x and i < 20:\n            guess = (guess + x / guess) / 2.0\n            i += 1\n    except ZeroDivisionError:\n        raise ValueError()\n    return guess\n\n```", "```py\ndef sqrt(x):\n    \"\"\"Compute square roots using the method of Heron of Alexandria.\n\n Args:\n x: The number for which the square root is to be computed.\n\n Returns:\n The square root of x.\n\n Raises:\n ValueError: If x is negative.\n \"\"\"\n\n    if x < 0:\n        raise ValueError(\"Cannot compute square root of negative number {}\".format(x))\n\n    guess = x\n    i = 0\n    while guess * guess != x and i < 20:\n        guess = (guess + x / guess) / 2.0\n        i += 1\n    return guess\n\n```", "```py\n$ python roots.py\n3.0\n1.41421356237\nTraceback (most recent call last):\n  File \"sqrt.py\", line 25, in <module>\n    print(sqrt(-1))\n  File \"sqrt.py\", line 12, in sqrt\n    raise ValueError(\"Cannot compute square root of negative number {0}\".format(x))\nValueError: Cannot compute square root of negative number -1\n\n```", "```py\nimport sys\n\ndef main():\n    try:\n        print(sqrt(9))\n        print(sqrt(2))\n        print(sqrt(-1))\n        print(\"This is never printed.\")\n    except ValueError as e:\n        print(e, file=sys.stderr)\n\n    print(\"Program execution continues normally here.\")\n\n```", "```py\n$ python3 sqrt.py\n3.0\n1.41421356237\nCannot compute square root of negative number -1\nProgram execution continues normally here.\n\n```", "```py\n>>> z = [1, 4, 2]\n>>> z[4]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n\n```", "```py\n>>> int(\"jim\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: 'jim'\n\n```", "```py\n>>> codes = dict(gb=44, us=1, no=47, fr=33, es=34)\n>>> codes['de']\n  Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'de'\n\n```", "```py\ndef convert(s):\n    \"\"\"Convert a string to an integer.\"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Argument must be a string\")\n\n    try:\n        return int(s)\n    except (ValueError, TypeError) as e:\n        print(\"Conversion error: {}\".format(str(e)), file=sys.stderr)\n        raise\n\n```", "```py\nimport os\n\np = '/path/to/datafile.dat'\n\nif os.path.exists(p):\n    process_file(p)\nelse:\n    print('No such file as {}'.format(p))\n\n```", "```py\np = '/path/to/datafile.dat'\n\ntry:\n    process_file(f)\nexcept OSError as e:\n  print('Could not process file because {}'.format(str(e)))\n\n```", "```py\nimport os\n\ndef make_at(path, dir_name):\n    original_path = os.getcwd()\n    os.chdir(path)\n    os.mkdir(dir_name)\n    os.chdir(original_path)\n\n```", "```py\nimport os\nimport sys\n\ndef make_at(path, dir_name):\n  original_path = os.getcwd()\n  try:\n      os.chdir(path)\n      os.mkdir(dir_name)\n  except OSError as e:\n      print(e, file=sys.stderr)\n      raise\n  finally:\n      os.chdir(original_path)\n\n```", "```py\n\"\"\"keypress - A module for detecting a single keypress.\"\"\"\n\ntry:\n    import msvcrt\n\n    def getkey():\n        \"\"\"Wait for a keypress and return a single character string.\"\"\"\n        return msvcrt.getch()\n\nexcept ImportError:\n\n    import sys\n    import tty\n    import termios\n\n    def getkey():\n        \"\"\"Wait for a keypress and return a single character string.\"\"\"\n        fd = sys.stdin.fileno()\n        original_attributes = termios.tcgetattr(fd)\n        try:\n            tty.setraw(sys.stdin.fileno())\n            ch = sys.stdin.read(1)\n        finally:\n            termios.tcsetattr(fd, termios.TCSADRAIN, original_attributes)\n        return ch\n\n    # If either of the Unix-specific tty or termios modules are\n    # not found, we allow the ImportError to propagate from here\n\n```"]