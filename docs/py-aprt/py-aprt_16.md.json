["```py\n>>> import pdb\n>>> pdb.set_trace()\n--Return--\n> <stdin>(1)<module>()->None\n(Pdb)\n\n```", "```py\n(Pdb) help\n\nDocumented commands (type help <topic>):\n========================================\nEOF    cl         disable  interact  next     return  u          where\na      clear      display  j         p        retval  unalias\nalias  commands   down     jump      pp       run     undisplay\nargs   condition  enable   l         print    rv      unt\nb      cont       exit     list      q        s       until\nbreak  continue   h        ll        quit     source  up\nbt     d          help     longlist  r        step    w\nc      debug      ignore   n         restart  tbreak  whatis\n\nMiscellaneous help topics:\n==========================\npdb  exec\n\n```", "```py\n    (Pdb) help continue\n    c(ont(inue))\n            Continue execution, only stop when a breakpoint is encountered.\n\n```", "```py\nimport unittest\n\ndef digits(x):\n    \"\"\"Convert an integer into a list of digits.\n\n Args:\n x: The number whose digits we want.\n\n Returns: A list of the digits, in order, of ``x``.\n\n >>> digits(4586378)\n [4, 5, 8, 6, 3, 7, 8]\n \"\"\"\n\n    digs = []\n    while x != 0:\n        div, mod = divmod(x, 10)\n        digs.append(mod)\n        x = mod\n    digs.reverse()\n    return digs\n\ndef is_palindrome(x):\n    \"\"\"Determine if an integer is a palindrome.\n\n Args:\n x: The number to check for palindromicity.\n\n Returns: True if the digits of ``x`` are a palindrome,\n False otherwise.\n\n >>> is_palindrome(1234)\n False\n >>> is_palindrome(2468642)\n True\n \"\"\"\n    digs = digits(x)\n    for f, r in zip(digs, reversed(digs)):\n        if f != r:\n            return False\n    return True\n\nclass Tests(unittest.TestCase):\n    \"\"\"Tests for the ``is_palindrome()`` function.\"\"\"\n    def test_negative(self):\n        \"Check that it returns False correctly.\"\n        self.assertFalse(is_palindrome(1234))\n\n    def test_positive(self):\n        \"Check that it returns True correctly.\"\n        self.assertTrue(is_palindrome(1234321))\n\n    def test_single_digit(self):\n        \"Check that it works for single digit numbers.\"\n        for i in range(10):\n            self.assertTrue(is_palindrome(i))\n\nif __name__ == '__main__':\n    unittest.main()\n\n```", "```py\n$ python palindrome.py\n\n```", "```py\n$ python -m pdb palindrome.py\n> /Users/sixty_north/examples/palindrome.py(1)<module>()\n-> import unittest\n(Pdb)\n\n```", "```py\n(Pdb) where\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/bdb.py(387)run()\n-> exec cmd in globals, locals\n  <string>(1)<module>()\n> /Users/sixty_north/examples/palindrome.py(1)<module>()\n-> import unittest\n\n```", "```py\n(Pdb) next\n> /Users/sixty_north/examples/palindrome.py(3)<module>()\n-> def digits(x):\n(Pdb)\n\n```", "```py\n(Pdb) next\n> /Users/sixty_north/examples/palindrome.py(12)<module>()\n-> def is_palindrome(x):\n(Pdb)\n\n```", "```py\n(Pdb) cont\n^C\nProgram interrupted. (Use 'cont' to resume).\n> /Users/sixty_north/examples/palindrome.py(9)digits()\n-> x = mod\n(Pdb)\n\n```", "```py\n(Pdb) list\n  4       \"Convert an integer into a list of digits.\"\n  5       digs = []\n  6       while x != 0:\n  7           div, mod = divmod(x, 10)\n  8           digs.append(mod)\n  9  ->       x = mod\n 10       return digs\n 11\n 12   def is_palindrome(x):\n 13       \"Determine if an integer is a palindrome.\"\n 14       digs = digits(x)\n(Pdb)\n\n```", "```py\n(Pdb) r\n\n```", "```py\n(Pdb) quit\n%\n\n```", "```py\ndef digits(x):\n    \"\"\"Convert an integer into a list of digits.\n\n Args:\n x: The number whose digits we want.\n\n Returns: A list of the digits, in order, of ``x``.\n\n >>> digits(4586378)\n [4, 5, 8, 6, 3, 7, 8]\n \"\"\"\n\n    import pdb; pdb.set_trace()\n\n    digs = []\n    while x != 0:\n        div, mod = divmod(x, 10)\n        digs.append(mod)\n        x = mod\n    digs.reverse()\n    return digs\n\n```", "```py\n% python palindrome.py\n> /Users/sixty_north/examples/palindrome.py(8)digits()\n-> digs = []\n(Pdb)\n\n```", "```py\n(Pdb) where\n  /Users/sixty_north/examples/palindrome.py(35)<module>()\n-> unittest.main()\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/main.py(95\\\n)__init__()\n-> self.runTests()\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/main.py(22\\\n9)runTests()\n-> self.result = testRunner.run(self.test)\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/runner.py(\\\n151)run()\n-> test(result)\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/suite.py(7\\\n0)__call__()\n-> return self.run(*args, **kwds)\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/suite.py(1\\\n08)run()\n-> test(result)\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/suite.py(7\\\n0)__call__()\n-> return self.run(*args, **kwds)\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/suite.py(1\\\n08)run()\n-> test(result)\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/case.py(39\\\n1)__call__()\n-> return self.run(*args, **kwds)\n  /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/case.py(32\\\n7)run()\n-> testMethod()\n  /Users/sixty_north/examples/palindrome.py(25)test_negative()\n-> self.assertFalse(is_palindrome(1234))\n  /Users/sixty_north/examples/palindrome.py(17)is_palindrome()\n-> digs = digits(x)\n> /Users/sixty_north/examples/palindrome.py(8)digits()\n-> digs = []\n\n```", "```py\n(Pdb) next\n> /Users/sixty_north/examples/palindrome.py(9)digits()\n-> while x != 0:\n(Pdb) next\n> /Users/sixty_north/examples/palindrome.py(10)digits()\n-> div, mod = divmod(x, 10)\n(Pdb)\n\n```", "```py\n(Pdb) print(digs)\n[]\n(Pdb) print x\n1234\n\n```", "```py\n(Pdb) next\n> /Users/sixty_north/examples/palindrome.py(11)digits()\n-> digs.append(mod)\n(Pdb) print div,mod\n123 4\n\n```", "```py\n(Pdb) next\n> /Users/sixty_north/examples/palindrome.py(12)digits()\n-> x = mod\n\n```", "```py\n(Pdb) print digs\n[4]\n\n```", "```py\n(Pdb) next\n> /Users/sixty_north/examples/palindrome.py(9)digits()\n-> while x != 0:\n\n```", "```py\n(Pdb) print x\n4\n\n```", "```py\n(Pdb) quit\n\n```", "```py\ndef digits(x):\n    \"\"\"Convert an integer into a list of digits.\n\n    Args:\n      x: The number whose digits we want.\n\n    Returns: A list of the digits, in order, of ``x``.\n\n    >>> digits(4586378)\n    [4, 5, 8, 6, 3, 7, 8]\n    \"\"\"\n\n    digs = []\n    while x != 0:\n        div, mod = divmod(x, 10)\n        digs.append(mod)\n        x = div\n    digs.reverse()\n    return digs\n\n```", "```py\n$ python palindrome.py\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.001s\n\nOK\n\n```"]