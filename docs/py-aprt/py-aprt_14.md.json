["```py\n>>> import sys\n>>> sys.getdefaultencoding()\n'utf-8'\n\n```", "```py\n>>> f = open('wasteland.txt', mode='wt', encoding='utf-8')\n\n```", "```py\n>>> help(f)\n. . .\n |  write(self, text, /)\n |      Write string to stream.\n |      Returns the number of characters written (which is always equal to\n |      the length of the string).\n. . .\n\n```", "```py\n>>> f.write('What are the roots that clutch, ')\n32\n\n```", "```py\n>>> f.write('what branches grow\\n')\n19\n>>> f.write('Out of this stony rubbish? ')\n27\n\n```", "```py\n>>> f.close()\n\n```", "```py\n$ ls -l\n-rw-r--r--   1 rjs  staff    78 12 Jul 11:21 wasteland.txt\n\n```", "```py\n> dir\n Volume is drive C has no label.\n Volume Serial Number is 36C2-FF83\n\n Directory of c:\\Users\\pyfund\n\n12/07/2013  20:54                79 wasteland.txt\n 1 File(s)             79 bytes\n 0 Dir(s)  190,353,698,816 bytes free\n\n```", "```py\n>>> g = open('wasteland.txt', mode='rt', encoding='utf-8')\n\n```", "```py\n>>> g.read(32)\n'What are the roots that clutch, '\n\n```", "```py\n>>> g.read()\n'what branches grow\\nOut of this stony rubbish? '\n\n```", "```py\n>>> g.read()\n''\n\n```", "```py\n>>> g.seek(0)\n0\n\n```", "```py\n>>> g.readline()\n'What are the roots that clutch, what branches grow\\n'\n>>> g.readline()\n'Out of this stony rubbish? '\n\n```", "```py\n>>> g.readline()\n''\n\n```", "```py\n>>> g.seek(0)\n\n```", "```py\n>>> g.readlines()\n['What are the roots that clutch, what branches grow\\n',\n'Out of this stony rubbish? ']\n\n```", "```py\n>>> g.close()\n\n```", "```py\n>>> h = open('wasteland.txt', mode='at', encoding='utf-8')\n\n```", "```py\n>>> h.writelines(\n... ['Son of man,\\n',\n... 'You cannot say, or guess, ',\n... 'for you know only,\\n',\n... 'A heap of broken images, ',\n... 'where the sun beats\\n'])\n>>> h.close()\n\n```", "```py\nimport sys\n\ndef main(filename):\n    f = open(filename, mode='rt', encoding='utf-8')\n    for line in f:\n        print(line)\n    f.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n\n```", "```py\n$ python3 files.py wasteland.txt\nWhat are the roots that clutch, what branches grow\n\nOut of this stony rubbish? Son of man,\n\nYou cannot say, or guess, for you know only\n\nA heap of broken images, where the sun beats\n\n```", "```py\nimport sys\n\ndef main(filename):\n    f = open(filename, mode='rt', encoding='utf-8')\n    for line in f:\n        sys.stdout.write(line)\n    f.close()\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n\n```", "```py\n$ python3 files.py wasteland.txt\nWhat are the roots that clutch, what branches grow\nOut of this stony rubbish? Son of man,\nYou cannot say, or guess, for you know only\nA heap of broken images, where the sun beats\n\n```", "```py\nimport sys\nfrom itertools import count, islice\n\ndef sequence():\n    \"\"\"Generate Recaman's sequence.\"\"\"\n    seen = set()\n    a = 0\n    for n in count(1):\n        yield a\n        seen.add(a)\n        c = a - n\n        if c < 0 or c in seen:\n            c = a + n\n        a = c\n\ndef write_sequence(filename, num):\n    \"\"\"Write Recaman's sequence to a text file.\"\"\"\n    f = open(filename, mode='wt', encoding='utf-8')\n    f.writelines(\"{0}\\n\".format(r)\n                 for r in islice(sequence(), num + 1))\n    f.close()\n\nif __name__ == '__main__':\n    write_sequence(filename=sys.argv[1],\n                   num=int(sys.argv[2]))\n\n```", "```py\n$ python3 recaman.py recaman.dat 1000\n\n```", "```py\n\"\"\"Read and print an integer series.\"\"\"\n\nimport sys\n\ndef read_series(filename):\n    f = open(filename, mode='rt', encoding='utf-8')\n    series = []\n    for line in f:\n        a = int(line.strip())\n        series.append(a)\n    f.close()\n    return series\n\ndef main(filename):\n    series = read_series(filename)\n    print(series)\n\nif __name__ == '__main__':\n    main(sys.argv[1])\n\n```", "```py\n$ python3 series.py recaman.dat\n[0, 1, 3, 6, 2, 7, 13,\n ...\n,3683, 2688, 3684, 2687, 3685, 2686, 3686]\n\n```", "```py\n0\n1\n3\n6\n2\n7\n13\noops!\n12\n21\n\n```", "```py\n$ python3 series.py recaman.dat\nTraceback (most recent call last):\n  File \"series.py\", line 19, in <module>\n    main(sys.argv[1])\n  File \"series.py\", line 15, in main\n    series = read_series(filename)\n  File \"series.py\", line 9, in read_series\n    a = int(line.strip())\nValueError: invalid literal for int() with base 10: 'oops!'\n\n```", "```py\ndef read_series(filename):\n    try:\n        f = open(filename, mode='rt', encoding='utf-8')\n        series = []\n        for line in f:\n            a = int(line.strip())\n            series.append(a)\n    finally:\n        f.close()\n    return series\n\n```", "```py\ndef read_series(filename):\n    try:\n        f = open(filename, mode='rt', encoding='utf-8')\n        return [ int(line.strip()) for line in f ]\n    finally:\n        f.close()\n\n```", "```py\ndef read_series(filename):\n    with open(filename, mode='rt', encoding='utf-8') as f:\n        return [int(line.strip()) for line in f]\n\n```", "```py\ndef write_sequence(filename, num):\n    \"\"\"Write Recaman's sequence to a text file.\"\"\"\n    with open(filename, mode='wt', encoding='utf-8') as f:\n        f.writelines(\"{0}\\n\".format(r)\n                     for r in islice(sequence(), num + 1))\n\n```", "```py\nwith EXPR as VAR:\n    BLOCK\n\n```", "```py\nmgr = (EXPR)\nexit = type(mgr).__exit__  # Not calling it yet\nvalue = type(mgr).__enter__(mgr)\nexc = True\ntry:\n    try:\n        VAR = value  # Only if \"as VAR\" is present\n        BLOCK\n    except:\n        # The exceptional case is handled here\n        exc = False\n        if not exit(mgr, *sys.exc_info()):\n            raise\n        # The exception is swallowed if exit() returns true\nfinally:\n    # The normal and non-local-goto cases are handled here\n    if exc:\n        exit(mgr, None, None, None)\n\n```", "```py\n 1 # bmp.py\n 2 \n 3 \"\"\"A module for dealing with BMP bitmap image files.\"\"\"\n 4 \n 5 \n 6 def write_grayscale(filename, pixels):\n 7    \"\"\"Creates and writes a grayscale BMP file.\n 8 \n 9    Args:\n10         filename: The name of the BMP file to me created.\n11 \n12         pixels: A rectangular image stored as a sequence of rows.\n13             Each row must be an iterable series of integers in the\n14             range 0-255.\n15 \n16     Raises:\n17         OSError: If the file couldn't be written.\n18     \"\"\"\n19     height = len(pixels)\n20     width = len(pixels[0])\n21 \n22     with open(filename, 'wb') as bmp:\n23         # BMP Header\n24         bmp.write(b'BM')\n25 \n26         # The next four bytes hold the filesize as a 32-bit\n27         # little-endian integer. Zero placeholder for now.\n28         size_bookmark = bmp.tell()\n29         bmp.write(b'\\x00\\x00\\x00\\x00')\n30 \n31         # Two unused 16-bit integers - should be zero\n32         bmp.write(b'\\x00\\x00')\n33         bmp.write(b'\\x00\\x00')\n34 \n35         # The next four bytes hold the integer offset\n36         # to the pixel data. Zero placeholder for now.\n37         pixel_offset_bookmark = bmp.tell()\n38         bmp.write(b'\\x00\\x00\\x00\\x00')\n39 \n40         # Image Header\n41         bmp.write(b'\\x28\\x00\\x00\\x00')  # Image header size in bytes - 40 decimal\n42         bmp.write(_int32_to_bytes(width))   # Image width in pixels\n43         bmp.write(_int32_to_bytes(height))  # Image height in pixels\n44         # Rest of header is essentially fixed\n45         bmp.write(b'\\x01\\x00')          # Number of image planes\n46         bmp.write(b'\\x08\\x00')          # Bits per pixel 8 for grayscale\n47         bmp.write(b'\\x00\\x00\\x00\\x00')  # No compression\n48         bmp.write(b'\\x00\\x00\\x00\\x00')  # Zero for uncompressed images\n49         bmp.write(b'\\x00\\x00\\x00\\x00')  # Unused pixels per meter\n50         bmp.write(b'\\x00\\x00\\x00\\x00')  # Unused pixels per meter\n51         bmp.write(b'\\x00\\x00\\x00\\x00')  # Use whole color table\n52         bmp.write(b'\\x00\\x00\\x00\\x00')  # All colors are important\n53 \n54         # Color palette - a linear grayscale\n55         for c in range(256):\n56             bmp.write(bytes((c, c, c, 0)))  # Blue, Green, Red, Zero\n57 \n58         # Pixel data\n59         pixel_data_bookmark = bmp.tell()\n60         for row in reversed(pixels):  # BMP files are bottom to top\n61             row_data = bytes(row)\n62             bmp.write(row_data)\n63             padding = b'\\x00' * ((4 - (len(row) % 4)) % 4)  # Pad row to multiple\n64                                                             # of four bytes\n65             bmp.write(padding)\n66 \n67         # End of file\n68         eof_bookmark = bmp.tell()\n69 \n70         # Fill in file size placeholder\n71         bmp.seek(size_bookmark)\n72         bmp.write(_int32_to_bytes(eof_bookmark))\n73 \n74         # Fill in pixel offset placeholder\n75         bmp.seek(pixel_offset_bookmark)\n76         bmp.write(_int32_to_bytes(pixel_data_bookmark))\n\n```", "```py\ndef _int32_to_bytes(i):\n    \"\"\"Convert an integer to four bytes in little-endian format.\"\"\"\n    return bytes((i & 0xff,\n                  i >> 8 & 0xff,\n                  i >> 16 & 0xff,\n                  i >> 24 & 0xff))\n\n```", "```py\n# fractal.py\n\n\"\"\"Computing Mandelbrot sets.\"\"\"\n\nimport math\n\ndef mandel(real, imag):\n    \"\"\"The logarithm of number of iterations needed to\n determine whether a complex point is in the\n Mandelbrot set.\n\n Args:\n real: The real coordinate\n imag: The imaginary coordinate\n\n Returns:\n An integer in the range 1-255.\n \"\"\"\n    x = 0\n    y = 0\n    for i in range(1, 257):\n        if x*x + y*y > 4.0:\n            break\n        xt = real + x*x - y*y\n        y = imag + 2.0 * x * y\n        x = xt\n    return int(math.log(i) * 256 / math.log(256)) - 1\n\ndef mandelbrot(size_x, size_y):\n    \"\"\"Make an Mandelbrot set image.\n\n Args:\n size_x: Image width\n size_y: Image height\n\n Returns:\n A list of lists of integers in the range 0-255.\n \"\"\"\n    return [ [mandel((3.5 * x / size_x) - 2.5,\n                     (2.0 * y / size_y) - 1.0)\n              for x in range(size_x) ]\n            for y in range(size_y) ]\n\n```", "```py\n>>> import fractal\n>>> pixels = fractal.mandelbrot(448, 256)\n\n```", "```py\n>>> pixels\n[[31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n  31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,\n  ...\n  49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49]]\n\n```", "```py\n>>> import bmp\n>>> bmp.write_grayscale(\"mandel.bmp\", pixels)\n\n```", "```py\ndef dimensions(filename):\n    \"\"\"Determine the dimensions in pixels of a BMP image.\n\n Args:\n filename: The filename of a BMP file.\n\n Returns:\n A tuple containing two integers with the width\n and height in pixels.\n\n Raises:\n ValueError: If the file was not a BMP file.\n OSError: If there was a problem reading the file.\n \"\"\"\n\n    with open(filename, 'rb') as f:\n        magic = f.read(2)\n        if magic != b'BM':\n            raise ValueError(\"{} is not a BMP file\".format(filename))\n\n        f.seek(18)\n        width_bytes = f.read(4)\n        height_bytes = f.read(4)\n\n        return (_bytes_to_int32(width_bytes),\n                _bytes_to_int32(height_bytes))\n\n```", "```py\ndef _bytes_to_int32(b):\n    \"\"\"Convert a bytes object containing four bytes into an integer.\"\"\"\n    return b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)\n\n```", "```py\n>>> bmp.dimensions(\"mandel.bmp\")\n(448, 256)\n\n```", "```py\n>>> def words_per_line(flo):\n...    return [len(line.split()) for line in flo.readlines()]\n\n```", "```py\n>>> with open(\"wasteland.txt\", mode='rt', encoding='utf-8') as real_file:\n...     wpl = words_per_line(real_file)\n...\n>>> wpl\n[9, 8, 9, 9]\n\n```", "```py\n>>> type(real_file)\n<class '_io.TextIOWrapper'>\n\n```", "```py\n>>> from urllib.request import urlopen\n>>> with urlopen(\"http://sixty-north.com/c/t.txt\") as web_file:\n...    wpl = words_per_line(web_file)\n...\n>>> wpl\n[6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 7, 8, 14, 12, 8]\n\n```", "```py\n>>> type(web_file)\n<class 'http.client.HTTPResponse'>\n\n```", "```py\n# fridge.py\n\n\"\"\"Demonstrate raiding a refrigerator.\"\"\"\n\nclass RefrigeratorRaider:\n    \"\"\"Raid a refrigerator.\"\"\"\n\n    def open(self):\n        print(\"Open fridge door.\")\n\n    def take(self, food):\n        print(\"Finding {}...\".format(food))\n        if food == 'deep fried pizza':\n            raise RuntimeError(\"Health warning!\")\n        print(\"Taking {}\".format(food))\n\n    def close(self):\n        print(\"Close fridge door.\")\n\ndef raid(food):\n    r = RefrigeratorRaider()\n    r.open()\n    r.take(food)\n    r.close()\n\n```", "```py\n>>> from fridge import raid\n>>> raid(\"bacon\")\nOpen fridge door.\nFinding bacon...\nTaking bacon\nClose fridge door.\n\n```", "```py\n>>> raid(\"deep fried pizza\")\nOpen fridge door.\nFinding deep fried pizza...\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./fridge.py\", line 23, in raid\n    r.take(food)\n  File \"./fridge.py\", line 14, in take\n    raise RuntimeError(\"Health warning!\")\nRuntimeError: Health warning!\n\n```", "```py\n\"\"\"Demonstrate raiding a refrigerator.\"\"\"\n\nfrom contextlib import closing\n\nclass RefrigeratorRaider:\n    \"\"\"Raid a refrigerator.\"\"\"\n\n    def open(self):\n        print(\"Open fridge door.\")\n\n    def take(self, food):\n        print(\"Finding {}...\".format(food))\n        if food == 'deep fried pizza':\n            raise RuntimeError(\"Health warning!\")\n        print(\"Taking {}\".format(food))\n\n    def close(self):\n        print(\"Close fridge door.\")\n\ndef raid(food):\n    with closing(RefrigeratorRaider()) as r:\n        r.open()\n        r.take(food)\n        r.close()\n\n```", "```py\n>>> raid(\"spam\")\nOpen fridge door.\nFinding spam...\nTaking spam\nClose fridge door.\nClose fridge door.\n\n```", "```py\ndef raid(food):\n    with closing(RefrigeratorRaider()) as r:\n        r.open()\n        r.take(food)\n\n```", "```py\n>>> raid(\"deep fried pizza\")\nOpen fridge door.\nFinding deep fried pizza...\nClose fridge door.\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"./fridge.py\", line 23, in raid\n    r.take(food)\n  File \"./fridge.py\", line 14, in take\n    raise RuntimeError(\"Health warning!\")\nRuntimeError: Health warning!\n\n```"]