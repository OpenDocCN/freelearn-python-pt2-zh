["```py\n# text_analyzer.py\n\nimport unittest\n\nclass TextAnalysisTests(unittest.TestCase):\n    \"\"\"Tests for the ``analyze_text()`` function.\"\"\"\n\n    def test_function_runs(self):\n        \"\"\"Basic smoke test: does the function run.\"\"\"\n        analyze_text()\n\nif __name__ == '__main__':\n    unittest.main()\n\n```", "```py\n$ python text_analyzer.py\nE\n======================================================================\nERROR: test_function_runs (__main__.TextAnalysisTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"text_analyzer.py\", line 5, in test_function_runs\n    analyze_text()\nNameError: global name 'analyze_text' is not defined\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (errors=1)\n\n```", "```py\n# text_analyzer.py\n\ndef analyze_text():\n    \"\"\"Calculate the number of lines and characters in a file.\n \"\"\"\n    pass\n\n```", "```py\n% python text_analyzer.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n\n```", "```py\n# text_analyzer.py\n\nclass TextAnalysisTests(unittest.TestCase):\n    . . .\n    def setUp(self):\n        \"Fixture that creates a file for the text methods to use.\"\n        self.filename = 'text_analysis_test_file.txt'\n        with open(self.filename, 'w') as f:\n            f.write('Now we are engaged in a great civil war,\\n'\n                    'testing whether that nation,\\n'\n                    'or any nation so conceived and so dedicated,\\n'\n                    'can long endure.')\n\n```", "```py\n# text_analyzer.py\n\nimport os\n. . .\nclass TextAnalysisTests(unittest.TestCase):\n    . . .\n    def tearDown(self):\n        \"Fixture that deletes the files used by the test methods.\"\n        try:\n            os.remove(self.filename)\n        except OSError:\n            pass\n\n```", "```py\n# text_analyzer.py\n\nclass TextAnalysisTests(unittest.TestCase):\n    . . .\n    def test_function_runs(self):\n        \"Basic smoke test: does the function run.\"\n        analyze_text(self.filename)\n\n```", "```py\n% python text_analyzer.py\nE\n======================================================================\nERROR: test_function_runs (__main__.TextAnalysisTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"text_analyzer.py\", line 25, in test_function_runs\n    analyze_text(self.filename)\nTypeError: analyze_text() takes no arguments (1 given)\n\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nFAILED (errors=1)\n\n```", "```py\n# text_analyzer.py\n\ndef analyze_text(filename):\n    pass\n\n```", "```py\n% python text_analyzer.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.003s\n\nOK\n\n```", "```py\n# text_analyzer.py\n\nclass TextAnalysisTests(unittest.TestCase):\n    . . .\n    def test_line_count(self):\n        \"Check that the line count is correct.\"\n        self.assertEqual(analyze_text(self.filename), 4)\n\n```", "```py\n% python text_analyzer.py\n.F\n======================================================================\nFAIL: test_line_count (__main__.TextAnalysisTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"text_analyzer.py\", line 28, in test_line_count\n    self.assertEqual(analyze_text(self.filename), 4)\nAssertionError: None != 4\n\n----------------------------------------------------------------------\nRan 2 tests in 0.003s\n\nFAILED (failures=1)\n\n```", "```py\n# text_analyzer.py\n\ndef analyze_text(filename):\n    \"\"\"Calculate the number of lines and characters in a file.\n\n Args:\n filename: The name of the file to analyze.\n\n Raises:\n IOError: If ``filename`` does not exist or can't be read.\n\n Returns: The number of lines in the file.\n \"\"\"\n    with open(filename, 'r') as f:\n        return sum(1 for _ in f)\n\n```", "```py\n% python text_analyzer.py\n..\n----------------------------------------------------------------------\nRan 2 tests in 0.003s\n\nOK\n\n```", "```py\n# text_analyzer.py\n\nclass TextAnalysisTests(unittest.TestCase):\n    . . .\n    def test_character_count(self):\n        \"Check that the character count is correct.\"\n        self.assertEqual(analyze_text(self.filename)[1], 131)\n\n```", "```py\n% python text_analyzer.py\nE..\n======================================================================\nERROR: test_character_count (__main__.TextAnalysisTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"text_analyzer.py\", line 32, in test_character_count\n    self.assertEqual(analyze_text(self.filename)[1], 131)\nTypeError: 'int' object has no attribute '__getitem__'\n\n----------------------------------------------------------------------\nRan 3 tests in 0.004s\n\nFAILED (errors=1)\n\n```", "```py\n# text_analyzer.py\n\ndef analyze_text(filename):\n    \"\"\"Calculate the number of lines and characters in a file.\n\n Args:\n filename: The name of the file to analyze.\n\n Raises:\n IOError: If ``filename`` does not exist or can't be read.\n\n Returns: A tuple where the first element is the number of lines in\n the files and the second element is the number of characters.\n\n \"\"\"\n    lines = 0\n    chars = 0\n    with open(filename, 'r') as f:\n        for line in f:\n            lines += 1\n            chars += len(line)\n    return (lines, chars)\n\n```", "```py\n% python text_analyzer.py\n..F\n======================================================================\nFAIL: test_line_count (__main__.TextAnalysisTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"text_analyzer.py\", line 34, in test_line_count\n    self.assertEqual(analyze_text(self.filename), 4)\nAssertionError: (4, 131) != 4\n\n----------------------------------------------------------------------\nRan 3 tests in 0.004s\n\nFAILED (failures=1)\n\n```", "```py\n# text_analyzer.py\n\nclass TextAnalysisTests(unittest.TestCase):\n    . . .\n    def test_line_count(self):\n        \"Check that the line count is correct.\"\n        self.assertEqual(analyze_text(self.filename)[0], 4)\n\n```", "```py\n% python text_analyzer.py\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.004s\n\nOK\n\n```", "```py\n# text_analyzer.py\n\nclass TextAnalysisTests(unittest.TestCase):\n    . . .\n    def test_no_such_file(self):\n        \"Check the proper exception is thrown for a missing file.\"\n        with self.assertRaises(IOError):\n            analyze_text('foobar')\n\n```", "```py\n% python text_analyzer.py\n....\n----------------------------------------------------------------------\nRan 4 tests in 0.004s\n\nOK\n\n```", "```py\n# text_analyzer.py\n\nclass TextAnalysisTests(unittest.TestCase):\n    . . .\n    def test_no_deletion(self):\n        \"Check that the function doesn't delete the input file.\"\n        analyze_text(self.filename)\n        self.assertTrue(os.path.exists(self.filename))\n\n```", "```py\n% python text_analyzer.py\n.....\n----------------------------------------------------------------------\nRan 5 tests in 0.002s\n\nOK\n\n```"]