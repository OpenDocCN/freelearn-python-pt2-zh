["```py\n    status = os.system(\"python other_program.py <params>\")\n    if status != 0:\n        print(\"The other_program failed!\")\n    ```", "```py\n**ImportError: No module named 'hash_utils'**\n\n```", "```py\nimport hash_utils\nfrom my_program.lib import hash_utils\nfrom hash_utils import *\n```", "```py\nfrom . import hash_utils\n```", "```py\n**ImportError: No module named 'numpy'**\n\n```", "```py\n    FEATURE_ID|FEATURE_NAME|FEATURE_CLASS|...\n    1397658|Ester|Populated Place|...\n    1397926|Afognak|Populated Place|...\n    ```", "```py\n    1 customer\n    8 customers\n    ```", "```py\n    def pluralize(n, singular_name, plural_name=None):\n    ```", "```py\nshapefile = ogr.Open(\"...\")\nlayer = shapefile.GetLayer(0)\nfor i in range(layer.GetFeatureCount()):\n  feature = layer.GetFeature(i)\n  shape = shapely.loads(feature.GetGeometryRef().ExportToWkt())\n  if shape.contains(target_zone):\n    ...\n```", "```py\nshapely.loads(...)\nshape.contains(...)\n```", "```py\nogr.Open(...)\nlayer.GetFeatureCount()\n```", "```py\n\"\"\" my_module.py\n\n    This is the documentation for the my_module module.\n\"\"\"\ndef my_function():\n    \"\"\" This is the documentation for the my_function() function.\n\n        As you can see, the documentation can span more than\n        one line.\n    \"\"\"\n    ...\n```", "```py\nimport requests\n\nresponse = requests.post(\"http://server.com/api/login\",\n                         {'username' : username,\n                          'password' : password})\nif response.status_code == 200: # OK\n    user = response.json()\n    if user['logged_in']:\n        ...\n```", "```py\nfrom dateutil.easter import easter\neaster_friday = easter(today.year) - datetime.timedelta(days=2)\n```", "```py\nfrom lxml import etree\n\nmovies = etree.Element(\"movie\")\nmovie = etree.SubElement(movies, \"movie\")\nmovie.text = \"The Wizard of Oz\"\nmovie.set(\"year\", \"1939\")\n\nmovie = etree.SubElement(movies, \"movie\")\nmovie.text = \"Mary Poppins\"\nmovie.set(\"year\", \"1964\")\n\nmovie = etree.SubElement(movies, \"movie\")\nmovie.text = \"Chinatown\"\nmovie.set(\"year\", \"1974\")\n\nprint(etree.tostring(movies, pretty_print=True))\n```", "```py\n**<movie>**\n **<movie year=\"1939\">The Wizard of Oz</movie>**\n **<movie year=\"1964\">Mary Poppins</movie>**\n **<movie year=\"1974\">Chinatown</movie>**\n**</movie>**\n\n```", "```py\nq = quantities.new(5, \"kilograms\")\n```", "```py\nq = quantities.parse(\"3 tbsp\")\n```", "```py\nprint(q)\n```", "```py\n**>>> print(quantities.kind(q))**\n**weight**\n\n```", "```py\n**>>> print(quantities.value(q))**\n**3**\n**>>> print(quantities.units(q))**\n**tablespoon**\n\n```", "```py\n**>>> q = quantities.new(2.5, \"cups\")**\n**>>> print(quantities.convert(q, \"liter\"))**\n**0.59147059125 liters**\n\n```", "```py\n**>>> for kind in quantities.supported_kinds():**\n**>>>     for unit in quantities.supported_units(kind):**\n**>>>         print(kind, unit)**\n**weight gram**\n**weight kilogram**\n**weight ounce**\n**weight pound**\n**length millimeter**\n**...**\n\n```", "```py\nquantities.init(\"international\")\n```", "```py\nclass Quantity(object):\n    def __init__(self, value, units):\n        self.value = value\n        self.units = units\n```", "```py\nq = Quantity(1, \"inch\")\nprint(q.value, q.units)\n```", "```py\n    def __str__(self):\n        return \"{} {}\".format(self.value, self.units)\n```", "```py\n**>>> q = Quantity(1, \"inch\")**\n**>>> print(q)**\n**1 inch**\n\n```", "```py\nUNITS = {}\n```", "```py\n{'name' : {'us'            : \"liter\",\n           'international' : \"litre\"},\n 'plural' : {'us'            : \"liters\",\n             'international' : \"litres\"},\n 'abbreviation' : \"l\",\n 'num_units' : 1000}\n```", "```py\ndef by_locale(value_for_us, value_for_international):\n    return {\"us\"            : value_for_us,\n            \"international\" : value_for_international}\n```", "```py\ndef unit(*args):\n    if len(args) == 3:\n        abbreviation = args[0]\n        name         = args[1]\n\n        if isinstance(name, dict):\n            plural = {}\n            for key,value in name.items():\n                plural[key] = value + \"s\"\n        else:\n            plural = name + \"s\"\n\n        num_units = args[2]\n    elif len(args) == 4:\n        abbreviation = args[0]\n        name         = args[1]\n        plural       = args[2]\n        num_units    = args[3]\n    else:\n        raise RuntimeError(\"Bad arguments to unit(): {}\".format(args))\n\n    return {'abbreviation' : abbreviation,\n            'name'         : name,\n            'plural'       : plural,\n            'num_units'    : num_units}\n```", "```py\ndef units(kind, *units_to_add):\n    if kind not in UNITS:\n        UNITS[kind] = []\n\n    for unit in units_to_add:\n        UNITS[kind].append(unit)\n```", "```py\nunits(\"weight\",\n      unit(\"g\",  \"gram\",     1),\n      unit(\"kg\", \"kilogram\", 1000))\n      unit(\"oz\", \"ounce\",    28.349523125),\n      unit(\"lb\", \"pound\",    453.59237))\n```", "```py\nunits(\"length\",\n      unit(\"cm\", by_locale(\"centimeter\", \"centimetre\"), 1),\n      unit(\"m\",  by_locale(\"meter\",      \"metre\",       100),\n      unit(\"in\", \"inch\", \"inches\", 2.54)\n      unit(\"ft\", \"foot\", \"feet\", 30.48))\n```", "```py\nunits(\"area\",\n      unit(\"sq m\", by_locale(\"square meter\", \"square metre\"), 1),\n      unit(\"ha\",   \"hectare\", 10000),\n      unit(\"a\",    \"acre\",    4046.8564224))\n```", "```py\nunits(\"volume\",\n      unit(\"l\",  by_locale(\"liter\", \"litre\"), 1000),\n      unit(\"ml\", by_locale(\"milliliter\", \"millilitre\"), 1),\n      unit(\"c\",  \"cup\", localize(236.5882365, 250)))\n```", "```py\ndef localize(value, locale):\n    if isinstance(value, dict):\n        return value.get(locale)\n    else:\n        return value\n```", "```py\ndef find_unit(s, locale):\n    s = s.lower()\n    for kind in UNITS.keys():\n        for unit in UNITS[kind]:\n            if (s == localize(unit['abbreviation'],\n                              locale).lower() or\n                s == localize(unit['name'],\n                              locale).lower() or\n                s == localize(unit['plural'],\n                              locale).lower()):\n                # Success!\n                return (kind, unit)\n\n    return (None, None) # Not found.\n```", "```py\nfrom .units import UNITS, localize, find_unit\nfrom .quantity import Quantity\n```", "```py\ndef init(locale):\n    global _locale\n    _locale = locale\n```", "```py\ndef new(value, units):\n    global _locale\n    kind,unit = find_unit(units, _locale)\n    if kind == None:\n        raise ValueError(\"Unknown unit: {}\".format(units))\n\n    return Quantity(value, localize(unit['name'], _locale))\n```", "```py\ndef parse(s):\n    global _locale\n\n    sValue,sUnits = s.split(\" \", maxsplit=1)\n    value = float(sValue)\n\n    kind,unit = find_unit(sUnits, _locale)\n    if kind == None:\n        raise ValueError(\"Unknown unit: {}\".format(sUnits))\n\n    return Quantity(value, localize(unit['name'], _locale))\n```", "```py\ndef kind(q):\n    global _locale\n    kind,unit = find_unit(q.units, _locale)\n    return kind\n\ndef value(q):\n    return q.value\n\ndef units(q):\n    return q.units\n```", "```py\ndef convert(q, units):\n    global _locale\n\n    src_kind,src_units = find_unit(q.units, _locale)\n    dst_kind,dst_units = find_unit(units, _locale)\n\n    if src_kind == None:\n        raise ValueError(\"Unknown units: {}\".format(q.units))\n    if dst_kind == None:\n        raise ValueError(\"Unknown units: {}\".format(units))\n\n    if src_kind != dst_kind:\n        raise ValueError(\n                \"It's impossible to convert {} into {}!\".format(\n                      localize(src_units['plural'], _locale),\n                      localize(dst_units['plural'], _locale)))\n\n    num_units = (q.value * src_units['num_units'] /\n                 dst_units['num_units'])\n    return Quantity(num_units, localize(dst_units['name'],\n                                        _locale))\n```", "```py\ndef supported_kinds():\n    return list(UNITS.keys())\n\ndef supported_units(kind):\n    global _locale\n\n    units = []\n    for unit in UNITS.get(kind, []):\n        units.append(localize(unit['name'], _locale))\n    return units\n```", "```py\nfrom .interface import *\n```", "```py\n**>>> import quantities**\n\n```", "```py\n**>>> quantities.init(\"international\")**\n\n```", "```py\n**>>> q = quantities.new(24, \"km\")**\n**>>>> print(q)**\n**24 kilometre**\n\n```", "```py\n**>>> print(quantities.convert(q, \"inch\"))**\n**944881.8897637795 inch**\n\n```"]