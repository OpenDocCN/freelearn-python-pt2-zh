["```py\n**import nonexistent_module**\n\n```", "```py\n**ImportError: No module named 'nonexistent_module'**\n\n```", "```py\ntry:\n    import numpy\n    has_numpy = True\nexcept ImportError:\n    has_numpy = False\n```", "```py\nif has_numpy:\n    array = numpy.zeros((num_rows, num_cols), dtype=numpy.int32)\nelse:\n    array = []\n    for row in num_rows:\n        array.append([])\n```", "```py\nimport random\nimport string\n\ndef set_length(length):\n    global _length\n    _length = length\n\ndef make_name():\n    global _length\n\n    letters = []\n    for i in range(length):\n        letters.append(random.choice(string.letters))\n    return \"\".join(letters)\n```", "```py\ndef delete_backups(dir):\n    import os\n    import os.path\n    for filename in os.listdir(dir):\n        if filename.endswith(\".bak\"):\n            remove(os.path.join(dir, filename))\n```", "```py\n**>>> import sys**\n**>>> print(sys.path)**\n**['', '/usr/local/lib/python3.3/site-packages', '/Library/Frameworks/SQLite3.framework/Versions/B/Python/3.3', '/Library/Python/3.3/site-packages/numpy-override', '/Library/Python/3.3/site-packages/pip-1.5.6-py3.3.egg', '/usr/local/lib/python3.3.zip', '/usr/local/lib/python3.3', '/usr/local/lib/python3.3/plat-darwin', '/usr/local/lib/python3.3/lib-dynload', '/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3', '/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/plat-darwin']**\n\n```", "```py\nimport sys\nprint(sys.builtin_module_names)\n```", "```py\nimport sys\nsys.path.append(\"/usr/local/shared-python-libs\")\nimport utils, approxnums\n```", "```py\nsys.path.insert(1, \"/usr/local/shared-python-libs\")\n```", "```py\nimport random\nprint(random.choice([\"yes\", \"no\"]))\n```", "```py\n**Traceback (most recent call last):**\n **File \"main.py\", line 5, in <module>**\n **import random**\n **File \"/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/random.py\", line 41, in <module>**\n **from math import log as _log, exp as _exp, pi as _pi, e as _e, ceil as _ceil**\n**ImportError: cannot import name log**\n\n```", "```py\nimport re\n\npattern = input(\"Regular Expression: \")\ns = input(\"String: \")\n\nresults = re.search(pattern, s)\n\nprint(results.group(), results.span())\n```", "```py\n**$ python re.py**\n**Regular Expression: [0-9]+**\n**String: test123abc**\n**Traceback (most recent call last):**\n**...**\n**File \"./re.py\", line 9, in <module>**\n **results = re.search(pattern, s)**\n**AttributeError: 'module' object has no attribute 'search'**\n\n```", "```py\nprint(\"### Initializing module.py ###\")\n```", "```py\nprint(\"Calling import package.module...\")\nimport package.module\nprint(\"Calling import package.module as module...\")\nimport package.module as module\nprint(\"Calling from package import module...\")\nfrom package import module\n```", "```py\n**$ python good_imports.py**\n**Calling import package.module...**\n**### Initializing module.py ###**\n**Calling import package.module as module...**\n**Calling from package import module...**\n\n```", "```py\nimport os.path\nimport sys\n\ncur_dir = os.path.abspath(os.path.dirname(__file__))\npackage_dir = os.path.join(cur_dir, \"package\")\n\nsys.path.insert(1, package_dir)\n\nprint(\"Calling import package.module as module...\")\nimport package.module as module\nprint(\"Calling import module...\")\nimport module\n```", "```py\n**$ python bad_imports.py**\n**Calling import package.module as module...**\n**### Initializing module.py ###**\n**Calling import module...**\n**### Initializing module.py ###**\n\n```", "```py\nimport helpers\n\ndef do_something(n):\n    return n * 2\n\nif __name__ == \"__main__\":\n    helpers.run_test()\n```", "```py\nimport test\n\ndef run_test():\n    print(test.do_something(10))\n```", "```py\n**$ python test.py**\n**20**\n\n```", "```py\nprint(\"Initializing test.py\")\n```", "```py\n**$ python test.py**\n**Initializing test.py**\n**Initializing test.py**\n**20**\n\n```", "```py\nimport re\n\ndef extract_numbers(s):\n    pattern = r'[+-]?\\d+(?:\\.\\d+)?'\n    numbers = []\n    for match in re.finditer(pattern, s):\n        number = s[match.start:match.end+1]\n        numbers.append(number)\n    return numbers\n```", "```py\n**>>> import stringutils**\n**>>> print(stringutils.extract_numbers(\"Tes1t 123.543 -10.6 5\"))**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n **File \"./stringutils.py\", line 7, in extract_numbers**\n **number = s[match.start:match.end+1]**\n**TypeError: unsupported operand type(s) for +: 'builtin_function_or_method' and 'int'**\n\n```", "```py\n        number = s[match.start:match.end+1]\n```", "```py\n        number = s[match.start():match.end()+1]\n```", "```py\n**>>> print(stringutils.extract_numbers(\"Tes1t 123.543 -10.6 5\"))**\n\n```", "```py\n**import importlib**\n**importlib.reload(stringutils)**\n\n```", "```py\n**>>> stringutils.extract_numbers(\"Hell1o 123.543 -10.6 5 there\")**\n**['1o', '123.543 ', '-10.6 ', '5 ']**\n\n```", "```py\n        number = s[match.start():match.end()]\n```", "```py\n**['1', '123.543', '-10.6', '5']**\n\n```", "```py\n    customers = []\n    customers.append(\"Mike Wallis\")\n    cusotmers.append(\"John Smith\")\n    ```", "```py\nlanguage = None\ncurrency = None\n```", "```py\nfrom . import globals\n\ndef test():\n    globals.language = \"EN\"\n    globals.currency = \"USD\"\n    print(globals.language, globals.currency)\n```", "```py\n**>>>** **from globtest import test**\n**>>> test.test()**\n**EN USD**\n\n```", "```py\nfrom .test import language\n```", "```py\nquantities.init(\"us\")\n```", "```py\nmypackage.init({'log_errors'  : True,\n                'db_password' : \"test123\",\n                ...})\n```", "```py\ndef init(settings):\n    global config\n\n    config = {}\n    config['log_errors']  = settings.get(\"log_errors\",  False)\n    config['db_password'] = settings.get(\"db_password\", \"\")\n    ...\n```", "```py\ncur_dir = os.path.abspath(os.path.dirname(__file__))\n```", "```py\nphone_numbers = []\ncur_dir = os.path.abspath(os.path.dirname(__file__))\nfile = open(os.path.join(cur_dir, \"data\", \"phone_numbers.txt\"))\nfor line in file:\n    phone_numbers.append(line.strip())\nfile.close()\n```"]