["```py\nimport charter\nchart = charter.new_chart()\n```", "```py\ncharter.set_title(chart, \"Wild Parrot Deaths per Year\")\n```", "```py\ncharter.set_x_axis(chart,\n                   [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\",\n                    \"2014\", \"2015\"])\n```", "```py\ncharter.set_y_axis(chart, minimum=0, maximum=700,\n                   labels=[0, 100, 200, 300, 400, 500, 600, 700])\n```", "```py\ncharter.set_series_type(chart, \"bar\")\n```", "```py\ncharter.set_series(chart, [250, 270, 510, 420, 680, 580, 450])\n```", "```py\ncharter.generate_chart(chart, \"chart.png\")\n```", "```py\nimport charter\nchart = charter.new_chart()\ncharter.set_title(chart, \"Wild Parrot Deaths per Year\")\ncharter.set_x_axis(chart,\n                   [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\",\n                    \"2014\", \"2015\"])\ncharter.set_y_axis(chart, minimum=0, maximum=700,\n                   labels=[0, 100, 200, 300, 400, 500, 600, 700])\ncharter.set_series(chart, [250, 270, 510, 420, 680, 580, 450])\ncharter.set_series_type(chart, \"bar\")\ncharter.generate_chart(chart, \"chart.png\")\n```", "```py\ndef new_chart():\n    pass\n\ndef set_title(chart, title):\n    pass\n\ndef set_x_axis(chart, x_axis):\n    pass\n\ndef set_y_axis(chart, minimum, maximum, labels):\n    pass\n\ndef set_series_type(chart, series_type):\n    pass\n\ndef set_series(chart, series):\n    pass\n```", "```py\ndef generate_chart(chart, filename):\n    pass\n```", "```py\nfrom .chart     import *\nfrom .generator import *\n```", "```py\ndef new_chart():\n    return {}\n```", "```py\ndef set_title(chart, title):\n    chart['title'] = title\n```", "```py\ndef set_x_axis(chart, x_axis):\n    chart['x_axis'] = x_axis\n\ndef set_y_axis(chart, minimum, maximum, labels):\n    chart['y_min']    = minimum\n    chart['y_max']    = maximum\n    chart['y_labels'] = labels\n\ndef set_series_type(chart, series_type):\n    chart['series_type'] = series_type\n\ndef set_series(chart, series):\n    chart['series'] = series\n```", "```py\nfrom PIL import Image\nimage = Image.new(\"RGB\", (CHART_WIDTH, CHART_HEIGHT), \"#7f00ff\")\n```", "```py\nfrom PIL import ImageDraw\ndrawer = ImageDraw.Draw(image)\ndrawer.line(50, 50, 150, 200, fill=\"#ff8010\", width=2)\n```", "```py\nimage.save(\"image.png\", format=\"png\")\n```", "```py\nif chart['series_type'] == \"bar\":\n    ...draw the data series using bars\nelif chart['series_type'] == \"line\":\n    ...draw the data series using lines\n```", "```py\nfrom renderers import bar_series, line_series\n\nif chart['series_type'] == \"bar\":\n    bar_series.draw(chart, drawer)\nelif chart['series_type'] == \"line\":\n    line_series.draw(chart, drawer)\n```", "```py\ndef draw(chart, drawer):\n    pass\n```", "```py\ndef generate_chart(chart, filename):\n    image  = Image.new(\"RGB\", (CHART_WIDTH, CHART_HEIGHT),\n                       \"#ffffff\")\n    drawer = ImageDraw.Draw(image)\n\n    title.draw(chart, drawer)\n    x_axis.draw(chart, drawer)\n    y_axis.draw(chart, drawer)\n    if chart['series_type'] == \"bar\":\n        bar_series.draw(chart, drawer)\n    elif chart['series_type'] == \"line\":\n        line_series.draw(chart, drawer)\n\n    image.save(filename, format=\"png\")\n```", "```py\nfrom PIL import Image, ImageDraw\nfrom .renderers import (title, x_axis, y_axis,\n                        bar_series, line_series)\n```", "```py\n    image = Image.new(\"RGB\", (**CHART_WIDTH, CHART_HEIGHT**),\n                       \"#ffffff\")\n```", "```py\nCHART_WIDTH  = 600\nCHART_HEIGHT = 400\n```", "```py\nfrom .constants import *\n```", "```py\nimport charter\nchart = charter.new_chart()\ncharter.set_title(chart, \"Wild Parrot Deaths per Year\")\ncharter.set_x_axis(chart,\n                   [\"2009\", \"2010\", \"2011\", \"2012\", \"2013\",\n                    \"2014\", \"2015\"])\ncharter.set_y_axis(chart, minimum=0, maximum=700,\n                   labels=[0, 100, 200, 300, 400, 500, 600, 700])\ncharter.set_series(chart, [250, 270, 510, 420, 680, 580, 450])\ncharter.set_series_type(chart, \"bar\")\ncharter.generate_chart(chart, \"chart.png\")\n```", "```py\n**python test_charter.py**\n\n```", "```py\ndef draw(chart, drawer):\n    font = ImageFont.truetype(\"Helvetica\", 24)\n    text_width,text_height = font.getsize(chart['title'])\n\n    left = CHART_WIDTH/2 - text_width/2\n    top  = TITLE_HEIGHT/2 - text_height/2\n\n    drawer.text((left, top), chart['title'], \"#4040a0\", font)\n```", "```py\nfrom PIL import ImageFont\nfrom ..constants import *\n```", "```py\nTITLE_HEIGHT = 50\n```", "```py\ndef draw(chart, drawer):\n    font = ImageFont.truetype(\"Helvetica\", 12)\n    label_height = font.getsize(\"Test\")[1]\n\n    avail_width = CHART_WIDTH - Y_AXIS_WIDTH - MARGIN\n    bucket_width = avail_width / len(chart['x_axis'])\n\n    axis_top = CHART_HEIGHT - X_AXIS_HEIGHT\n    drawer.line([(Y_AXIS_WIDTH, axis_top),\n                 (CHART_WIDTH - MARGIN, axis_top)],\n                \"#4040a0\", 2) # Draw main axis line.\n\n    left = Y_AXIS_WIDTH\n    for bucket_num in range(len(chart['x_axis'])):\n        drawer.line([(left, axis_top),\n                     (left, axis_top + TICKMARK_HEIGHT)],\n                    \"#4040a0\", 1) # Draw tickmark.\n\n        label_width = font.getsize(chart['x_axis'][bucket_num])[0]\n        label_left = max(left,\n                         left + bucket_width/2 - label_width/2)\n        label_top  = axis_top + TICKMARK_HEIGHT + 4\n\n        drawer.text((label_left, label_top),\n                    chart['x_axis'][bucket_num], \"#000000\", font)\n\n        left = left + bucket_width\n\n    drawer.line([(left, axis_top),\n                 (left, axis_top + TICKMARK_HEIGHT)],\n                \"#4040a0\", 1) # Draw final tickmark.\n```", "```py\nfrom PIL import ImageFont\nfrom ..constants import *\n```", "```py\nX_AXIS_HEIGHT   = 50\nY_AXIS_WIDTH    = 50\nMARGIN          = 20\nTICKMARK_HEIGHT = 8\n```", "```py\nfrom PIL import ImageFont\n\nfrom ..constants import *\n\ndef draw(chart, drawer):\n    font = ImageFont.truetype(\"Helvetica\", 12)\n    label_height = font.getsize(\"Test\")[1]\n\n    axis_top    = TITLE_HEIGHT\n    axis_bottom = CHART_HEIGHT - X_AXIS_HEIGHT\n    axis_height = axis_bottom - axis_top\n\n    drawer.line([(Y_AXIS_WIDTH, axis_top),\n                 (Y_AXIS_WIDTH, axis_bottom)],\n                \"#4040a0\", 2) # Draw main axis line.\n\n    for y_value in chart['y_labels']:\n        y = ((y_value - chart['y_min']) /\n             (chart['y_max']-chart['y_min']))\n\n        y_pos = axis_top + (axis_height - int(y * axis_height))\n\n        drawer.line([(Y_AXIS_WIDTH - TICKMARK_HEIGHT, y_pos),\n                     (Y_AXIS_WIDTH, y_pos)],\n                    \"#4040a0\", 1) # Draw tickmark.\n\n        label_width,label_height = font.getsize(str(y_value))\n        label_left = Y_AXIS_WIDTH-TICKMARK_HEIGHT-label_width-4\n        label_top = y_pos - label_height / 2\n\n        drawer.text((label_left, label_top), str(y_value),\n                    \"#000000\", font)\n```", "```py\nfrom PIL import ImageFont\nfrom ..constants import *\n\ndef draw(chart, drawer):\n    avail_width  = CHART_WIDTH - Y_AXIS_WIDTH - MARGIN\n    bucket_width = avail_width / len(chart['x_axis'])\n\n    max_top      = TITLE_HEIGHT\n    bottom       = CHART_HEIGHT - X_AXIS_HEIGHT\n    avail_height = bottom - max_top\n\n    left = Y_AXIS_WIDTH\n    for y_value in chart['series']:\n\n        bar_left = left + MARGIN / 2\n        bar_right = left + bucket_width - MARGIN / 2\n\n        y = ((y_value - chart['y_min']) /\n             (chart['y_max'] - chart['y_min']))\n\n        bar_top = max_top + (avail_height - int(y * avail_height))\n\n        drawer.rectangle([(bar_left, bar_top),\n                          (bar_right + 1,\n                           bottom)],\n                         fill=\"#e8e8f4\", outline=\"#4040a0\")\n\n        left = left + bucket_width\n```", "```py\nfrom PIL import ImageFont\nfrom ..constants import *\n\ndef draw(chart, drawer):\n    avail_width  = CHART_WIDTH - Y_AXIS_WIDTH - MARGIN\n    bucket_width = avail_width / len(chart['x_axis'])\n\n    max_top      = TITLE_HEIGHT\n    bottom       = CHART_HEIGHT - X_AXIS_HEIGHT\n    avail_height = bottom - max_top\n\n    left   = Y_AXIS_WIDTH\n    prev_y = None\n    for y_value in chart['series']:\n        y = ((y_value - chart['y_min']) /\n             (chart['y_max'] - chart['y_min']))\n\n        cur_y = max_top + (avail_height - int(y * avail_height))\n\n        if prev_y != None:\n            drawer.line([(left - bucket_width / 2, prev_y),\n                         (left + bucket_width / 2), cur_y],\n                        fill=\"#4040a0\", width=1)\n        prev_y = cur_y\n        left = left + bucket_width\n```", "```py\nfrom ..constants import *\n```", "```py\nfrom ...constants import *\n```", "```py\nfrom .png import title       as title_png\nfrom .png import x_axis      as x_axis_png\nfrom .png import y_axis      as y_axis_png\nfrom .png import bar_series  as bar_series_png\nfrom .png import line_series as line_series_png\n\nrenderers = {\n    'png' : {\n        'title'       : title_png,\n        'x_axis'      : x_axis_png,\n        'y_axis'      : y_axis_png,\n        'bar_series'  : bar_series_png,\n        'line_series' : line_series_png\n    },\n}\n\ndef draw(format, element, chart, output):\n    renderers[format][element].draw(chart, output)\n```", "```py\nfrom PIL import Image, ImageDraw\nfrom reportlab.pdfgen.canvas import Canvas\n\nfrom .constants import *\nfrom .renderers import renderer\n\ndef generate_chart(chart, filename):\n\n    # Select the output format.\n\n    if filename.lower().endswith(\".pdf\"):\n        format = \"pdf\"\n    elif filename.lower().endswith(\".png\"):\n        format = \"png\"\n    else:\n        print(\"Unsupported file format: \" + filename)\n        return\n\n    # Prepare the output file based on the file format.\n\n    if format == \"pdf\":\n        output = Canvas(filename)\n    elif format == \"png\":\n        image  = Image.new(\"RGB\", (CHART_WIDTH, CHART_HEIGHT),\n                           \"#ffffff\")\n        output = ImageDraw.Draw(image)\n\n    # Draw the various chart elements.\n\n    renderer.draw(format, \"title\",  chart, output)\n    renderer.draw(format, \"x_axis\", chart, output)\n    renderer.draw(format, \"y_axis\", chart, output)\n    if chart['series_type'] == \"bar\":\n        renderer.draw(format, \"bar_series\", chart, output)\n    elif chart['series_type'] == \"line\":\n        renderer.draw(format, \"line_series\", chart, output)\n\n    # Finally, save the output to disk.\n\n    if format == \"pdf\":\n        output.showPage()\n        output.save()\n    elif format == \"png\":\n        image.save(filename, format=\"png\")\n```", "```py\nfrom ...constants import *\n\ndef draw(chart, canvas):\n    text_width  = canvas.stringWidth(chart['title'],\n                                     \"Helvetica\", 24)\n    text_height = 24 * 1.2\n\n    left   = CHART_WIDTH/2 - text_width/2\n    bottom = CHART_HEIGHT - TITLE_HEIGHT/2 + text_height/2\n\n    canvas.setFont(\"Helvetica\", 24)\n    canvas.setFillColorRGB(0.25, 0.25, 0.625)\n    canvas.drawString(left, bottom, chart['title'])\n```", "```py\ndef draw(chart, canvas):\n    label_height = 12 * 1.2\n\n    avail_width  = CHART_WIDTH - Y_AXIS_WIDTH - MARGIN\n    bucket_width = avail_width / len(chart['x_axis'])\n\n    axis_top = X_AXIS_HEIGHT\n    canvas.setStrokeColorRGB(0.25, 0.25, 0.625)\n    canvas.setLineWidth(2)\n    canvas.line(Y_AXIS_WIDTH, axis_top,\n                CHART_WIDTH - MARGIN, axis_top)\n\n    left = Y_AXIS_WIDTH\n    for bucket_num in range(len(chart['x_axis'])):\n        canvas.setLineWidth(1)\n        canvas.line(left, axis_top,\n                    left, axis_top - TICKMARK_HEIGHT)\n\n        label_width  = canvas.stringWidth(\n                               chart['x_axis'][bucket_num],\n                               \"Helvetica\", 12)\n        label_left   = max(left,\n                           left + bucket_width/2 - label_width/2)\n        label_bottom = axis_top - TICKMARK_HEIGHT-4-label_height\n\n        canvas.setFont(\"Helvetica\", 12)\n        canvas.setFillColorRGB(0.0, 0.0, 0.0)\n        canvas.drawString(label_left, label_bottom,\n                          chart['x_axis'][bucket_num])\n\n        left = left + bucket_width\n\n    canvas.setStrokeColorRGB(0.25, 0.25, 0.625)\n    canvas.setLineWidth(1)\n    canvas.line(left, axis_top, left, axis_top - TICKMARK_HEIGHT)\n```", "```py\nfrom ...constants import *\n\ndef draw(chart, canvas):\n    label_height = 12 * 1.2\n\n    axis_top    = CHART_HEIGHT - TITLE_HEIGHT\n    axis_bottom = X_AXIS_HEIGHT\n    axis_height = axis_top - axis_bottom\n\n    canvas.setStrokeColorRGB(0.25, 0.25, 0.625)\n    canvas.setLineWidth(2)\n    canvas.line(Y_AXIS_WIDTH, axis_top, Y_AXIS_WIDTH, axis_bottom)\n\n    for y_value in chart['y_labels']:\n        y = ((y_value - chart['y_min']) /\n             (chart['y_max'] - chart['y_min']))\n\n        y_pos = axis_bottom + int(y * axis_height)\n\n        canvas.setLineWidth(1)\n        canvas.line(Y_AXIS_WIDTH - TICKMARK_HEIGHT, y_pos,\n                    Y_AXIS_WIDTH, y_pos)\n\n        label_width = canvas.stringWidth(str(y_value),\n                                         \"Helvetica\", 12)\n        label_left  = Y_AXIS_WIDTH - TICKMARK_HEIGHT-label_width-4\n        label_bottom = y_pos - label_height/4\n\n        canvas.setFont(\"Helvetica\", 12)\n        canvas.setFillColorRGB(0.0, 0.0, 0.0)\n        canvas.drawString(label_left, label_bottom, str(y_value))\n```", "```py\nfrom ...constants import *\n\ndef draw(chart, canvas):\n    avail_width  = CHART_WIDTH - Y_AXIS_WIDTH - MARGIN\n    bucket_width = avail_width / len(chart['x_axis'])\n\n    bottom       = X_AXIS_HEIGHT\n    max_top      = CHART_HEIGHT - TITLE_HEIGHT\n    avail_height = max_top - bottom\n\n    left = Y_AXIS_WIDTH\n    for y_value in chart['series']:\n        bar_left  = left + MARGIN / 2\n        bar_width = bucket_width - MARGIN\n\n        y = ((y_value - chart['y_min']) /\n             (chart['y_max'] - chart['y_min']))\n\n        bar_height = int(y * avail_height)\n\n        canvas.setStrokeColorRGB(0.25, 0.25, 0.625)\n        canvas.setFillColorRGB(0.906, 0.906, 0.953)\n        canvas.rect(bar_left, bottom, bar_width, bar_height,\n                    stroke=True, fill=True)\n\n        left = left + bucket_width\n```", "```py\nfrom ...constants import *\n\ndef draw(chart, canvas):\n    avail_width  = CHART_WIDTH - Y_AXIS_WIDTH - MARGIN\n    bucket_width = avail_width / len(chart['x_axis'])\n\n    bottom       = X_AXIS_HEIGHT\n    max_top      = CHART_HEIGHT - TITLE_HEIGHT\n    avail_height = max_top - bottom\n\n    left   = Y_AXIS_WIDTH\n    prev_y = None\n    for y_value in chart['series']:\n        y = ((y_value - chart['y_min']) /\n             (chart['y_max'] - chart['y_min']))\n\n        cur_y = bottom + int(y * avail_height)\n\n        if prev_y != None:\n            canvas.setStrokeColorRGB(0.25, 0.25, 0.625)\n            canvas.setLineWidth(1)\n            canvas.line(left - bucket_width / 2, prev_y,\n                        left + bucket_width / 2, cur_y)\n\n        prev_y = cur_y\n        left = left + bucket_width\n```", "```py\nfrom .pdf import title       as title_pdf\nfrom .pdf import x_axis      as x_axis_pdf\nfrom .pdf import y_axis      as y_axis_pdf\nfrom .pdf import bar_series  as bar_series_pdf\nfrom .pdf import line_series as line_series_pdf\n```", "```py\nrenderers = {\n    ...\n    **'pdf' : {**\n **'title'       : title_pdf,**\n **'x_axis'      : x_axis_pdf,**\n **'y_axis'      : y_axis_pdf,**\n **'bar_series'  : bar_series_pdf,**\n **'line_series' : line_series_pdf**\n **}**\n}\n```"]