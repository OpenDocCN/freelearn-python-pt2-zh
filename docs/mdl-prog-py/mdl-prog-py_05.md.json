["```py\nvalues_1 = [...]\nvalues_2 = [...]\n\ntotal_1 = 0\nfor value in values_1:\n    total = total + value\naverage_1 = total / len(values_1)\n\ntotal_2 = 0\nfor value in values_2:\n    total = total + value\naverage_2 = total / len(values_2)\n\ndifference = abs(total_1 - total-2)\nprint(difference)\n```", "```py\nvalues_1 = [...]\nvalues_2 = [...]\n\ndef average(values):\n    total = 0\n    for value in values:\n        total = total + value\n    return = total / len(values)\n\naverage_1 = average(values_1)\naverage_2 = average(values_2)\ndifference = abs(total_1 - total-2)\nprint(difference)\n```", "```py\npurple = colors.new_color(1.0, 0.0, 1.0)\nyellow = colors.new_color(1.0, 1.0, 0.0)\ndark_purple = colors.darken(purple, 0.3)\ncolor_range = colors.blend(yellow, dark_purple, num_steps=20)\ndimmed_yellow = colors.desaturate(yellow, 0.8)\n```", "```py\ndef is_happy_hour():\n    if datetime.datetime.now().hour == 17: # 5pm.\n        return True\n    else:\n        return False\n```", "```py\nif is_happy_hour():\n    price = price * 0.5\n```", "```py\ndef is_happy_hour():\n    if datetime.date.today().weekday() == 6: # Sunday.\n        return False\n    elif datetime.datetime.now().hour == 17: # 5pm.\n        return True\n    else:\n        return False\n```", "```py\ndef new_chart():\n    return {}\n\ndef set_title(chart, title):\n    chart['title'] = title\n\ndef set_x_axis(chart, x_axis):\n    chart['x_axis'] = x_axis\n\ndef set_y_axis(chart, minimum, maximum, labels):\n    chart['y_min']    = minimum\n    chart['y_max']    = maximum\n    chart['y_labels'] = labels\n\ndef set_series_type(chart, series_type):\n    chart['series_type'] = series_type\n\ndef set_series(chart, series):\n    chart['series'] = series\n```", "```py\ndef get_title(chart):\n    return chart['title']\n\ndef get_x_axis(chart):\n    return chart['x_axis']\n\ndef get_y_axis(chart):\n    return (chart['y_min'], chart['y_max'], chart['y_labels'])\n\ndef get_series_type(chart):\n    return chart['series_type']\n\ndef get_series(chart):\n    return chart['series']\n```", "```py\ndef new():\n    return {'name'         : None,\n            'num_servings' : 1,\n            'instructions' : [],\n            'ingredients'  : []}\n\ndef set_name(recipe, name):\n    recipe['name'] = name\n\ndef get_name(recipe):\n    return recipe['name']\n\ndef set_num_servings(recipe, num_servings):\n    recipe['num_servings'] = num_servings\n\ndef get_num_servings(recipe):\n    return recipe['num_servings']\n\ndef set_ingredients(recipe, ingredients):\n    recipe['ingredients'] = ingredients\n\ndef get_ingredients(recipe):\n    return recipe['ingredients']\n\ndef set_instructions(recipe, instructions):\n    recipe['instructions'] = instructions\n\ndef get_instructions(recipe):\n    return recipe['instructions']\n\ndef add_instruction(recipe, instruction):\n    recipe['instructions'].append(instruction)\n\ndef add_ingredient(recipe, ingredient, amount, units):\n    recipe['ingredients'].append({'ingredient' : ingredient,\n                                  'amount'     : amount,\n                                  'units'      : units})\n```", "```py\nrecipes.add_ingredient(recipe, \"Milk\", 1, \"cup\")\n```", "```py\ndef to_string(recipe, num_servings):\n    multiplier = num_servings / recipe['num_servings']\n    s = []\n    s.append(\"Recipe for {}, {} servings:\".format(recipe['name'],\n                                                  num_servings))\n    s.append(\"\")\n    s.append(\"Ingredients:\")\n    s.append(\"\")\n    for ingredient in recipe['ingredients']:\n        s.append(\"    {} - {} {}\".format(\n                     ingredient['ingredient'],\n                     ingredient['amount'] * multiplier,\n                     ingredient['units']))\n    s.append(\"\")\n    s.append(\"Instructions:\")\n    s.append(\"\")\n    for i,instruction in enumerate(recipe['instructions']):\n        s.append(\"{}. {}\".format(i+1, instruction))\n\n    return s\n```", "```py\n**import recipes**\n**recipe = recipes.new(\"Pizza Dough\", num_servings=1)**\n**recipes.add_ingredient(recipe, \"Greek Yogurt\", 1, \"cup\")**\n**recipes.add_ingredient(recipe, \"Self-Raising Flour\", 1.5, \"cups\")**\n**recipes.add_instruction(recipe, \"Combine yogurt and 2/3 of the flour in a bowl and mix with a beater until combined\")**\n**recipes.add_instruction(recipe, \"Slowly add additional flour until it forms a stiff dough\")**\n**recipes.add_instruction(recipe, \"Turn out onto a floured surface and knead until dough is tacky\")**\n**recipes.add_instruction(recipe, \"Roll out into a circle of the desired thickness and place on a greased and lined baking tray\")**\n\n```", "```py\n**for s in recipes.to_string(recipe, num_servings=2):**\n **print s**\n\n```", "```py\n**Recipe for Pizza Dough, 2 servings:**\n\n**Ingredients:**\n\n **Greek Yogurt - 2 cup**\n **Self-rising Flour - 3.0 cups**\n\n**Instructions:**\n\n**1\\. Combine yogurt and 2/3 of the flour in a bowl and mix with a beater until combined**\n**2\\. Slowly add additional flour until it forms a stiff dough**\n**3\\. Turn out onto a floured surface and knead until dough is tacky**\n**4\\. Roll out into a circle of the desired thickness and place on a greased and lined baking tray**\n\n```", "```py\ntotals = [[0, 307512, 1612, 0, 43902, 5602918],\n          [79400, 3416710, 75, 23508, 60912, 5806],\n          ...\n         ]\n```", "```py\nbranch_ids = [125000249, 125000252, 125000371, ...]\nbank_codes = [\"AMERUS33\", \"CERYUS33\", \"EQTYUS44\", ...]\n```", "```py\ntotals = []\nfor branch in branch_ids:\n    branch_totals = []\n    for bank in bank_codes:\n        branch_totals.append(0)\n    totals.append(branch_totals)\n\nfor transfer in transfers_for_day:\n    branch_index = branch_ids.index(transfer['branch'])\n    bank_index   = bank_codes.index(transfer['dest_bank'])\n    totals[branch_index][bank_index] += transfer['amount']\n```", "```py\ndaily_totals = []\nfor totals in totals_to_average:\n    daily_totals.append(totals)\naverage = numpy.mean(numpy.array(daily_totals), axis=0)\n```", "```py\nimport numpy\na = numpy.array([[1, 2], [3, 4]])\nprint(a)\n```", "```py\n**[[1 2]**\n **[3 4]]**\n\n```", "```py\n**import numpy**\n\n```", "```py\nimport random\nimport numpy_wrapper as npw\n\nBANK_CODES = [\"AMERUS33\", \"CERYUS33\", \"EQTYUS44\",\n              \"LOYDUS33\", \"SYNEUS44\", \"WFBIUS6S\"]\n\nBRANCH_IDS = [\"125000249\", \"125000252\", \"125000371\",\n              \"125000402\", \"125000596\", \"125001067\"]\n```", "```py\ndays = [1, 2, 3, 4, 5, 6, 7, 8]\ntransfers = []\n\nfor i in range(10000):\n    day       = random.choice(days)\n    bank_code = random.choice(BANK_CODES)\n    branch_id = random.choice(BRANCH_IDS)\n    amount    = random.randint(1000, 1000000)\n\n    transfers.append((day, bank_code, branch_id, amount))\n```", "```py\narray = numpy.zeros((num_rows, num_cols), dtype=numpy.int32)\n```", "```py\ndef new(num_rows, num_cols):\n    return numpy.zeros((num_rows, num_cols), dtype=numpy.int32)\n```", "```py\ntransfers_by_day = {}\nfor day in days:\n    transfers_by_day[day] = npw.new(num_rows=len(BANK_CODES),\n                                    num_cols=len(BRANCH_IDS))\n```", "```py\narray[row][col] = array[row][col] + amount\n```", "```py\nfor day,bank_code,branch_id,amount in transfers:\n    array = transfers_by_day[day]\n    row = BRANCH_IDS.index(branch_id)\n    col = BANK_CODES.index(bank_code)\n    array[row][col] = array[row][col] + amount\n```", "```py\nlatest_day = max(days)\n\ntransfers_to_average = []\nfor day in days:\n    if day != latest_day:\n        transfers_to_average.append(transfers_by_day[day])\n\ncurrent = transfers_by_day[latest_day]\n```", "```py\naverage = numpy.mean(numpy.array(arrays_to_average), axis=0)\n```", "```py\ndef average(arrays_to_average):\n    return numpy.mean(numpy.array(arrays_to_average), axis=0)\n```", "```py\naverage = npw.average(transfers_to_average)\n```", "```py\nunusual_transfers = current > average * 1.5\n```", "```py\nindices = numpy.transpose(array.nonzero())\n```", "```py\ndef get_indices(array):\n    return numpy.transpose(array.nonzero())\n```", "```py\n    for row,col in npw.get_indices(unusual_transfers):\n        branch_id   = BRANCH_IDS[row]\n        bank_code   = BANK_CODES[col]\n        average_amt = int(average[row][col])\n        current_amt = current[row][col]\n\n        print(\"Branch {} transferred ${:,d}\".format(branch_id,\n                                                    current_amt) +\n              \" to bank {}, average = ${:,d}\".format(bank_code,\n                                                     average_amt))\n```", "```py\n**Branch 125000371 transferred $24,729,847 to bank WFBIUS6S, average = $14,954,617**\n**Branch 125000402 transferred $26,818,710 to bank CERYUS33, average = $16,338,043**\n**Branch 125001067 transferred $27,081,511 to bank EQTYUS44, average = $17,763,644**\n\n```", "```py\nfrom .png import title  as title_png\nfrom .png import x_axis as x_axis_png\n\nfrom .pdf import title  as title_pdf\nfrom .pdf import x_axis as x_axis_pdf\n\nrenderers = {\n    'png' : {\n        'title'  : title_png,\n        'x_axis' : x_axis_png,\n    },\n    'pdf' : {\n        'title'  : title_pdf,\n        'x_axis' : x_axis_pdf,\n    }\n}\n\ndef draw(format, element, chart, output):\n    renderers[format][element].draw(chart, output)\n```", "```py\ndef say_hello():\n    print(\"Hello from module_a\")\n```", "```py\nimport importlib\n\nmodule_name = input(\"Load module: \")\nif module_name != \"\":\n    module = importlib.import_module(module_name)\n    module.say_hello()\n```", "```py\n**Hello from module_a**\n\n```", "```py\n**module = importlib.import_module(\"package.sub_package.module\")**\n\n```", "```py\nfrom importlib import import_module\n\ndef draw(format, element, chart, output):\n    renderer = import_module(\"{}.{}.{}\".format(__package__,\n                                               format,\n                                               element))\n    renderer.draw(chart, output)\n```", "```py\ncur_user = None\n\ndef login(username, password):\n    if is_password_correct(username, password):\n        cur_user = username\n        return True\n    else:\n        return False\n\ndef logout():\n    cur_user = None\n```", "```py\ncur_user = None\n**login_hook = None**\n\n**def set_login_hook(hook):**\n **login_hook = hook**\n\ndef login(username, password):\n    if is_password_correct(username, password):\n        cur_user = username\n **if login_hook != None:**\n **login_hook(username)**\n        return True\n    else:\n        return False\n\ndef logout():\n    cur_user = None\n```", "```py\ndef my_login_hook(username):\n    if user_has_messages(username):\n        show_messages(username)\n\nlogin_module.set_login_hook(my_login_hook)\n```"]