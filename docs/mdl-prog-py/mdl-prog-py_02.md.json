["```py\ndef set_products(products):\n    ...\n```", "```py\n[(\"CODE01\", \"Product 1\", 10),\n (\"CODE02\", \"Product 2\", 200), ...\n]\n```", "```py\ndef products():\n    ...\n```", "```py\nfor code,description,desired_number in products():\n    ...\n```", "```py\ndef set_locations(locations):\n    ...\n```", "```py\ndef locations():\n    ...\n```", "```py\ndef items():\n    ...\n```", "```py\ndef add_item(product_code, location_code):\n    ...\n\ndef remove_item(product_code, location_code):\n    ...\n```", "```py\ndef init():\n    ...\n```", "```py\n    def prompt_for_product():\n        ...\n    ```", "```py\n    def prompt_for_location():\n        ...\n    ```", "```py\n    def show_report(report):\n        ...\n    ```", "```py\ndef generate_inventory_report():\n    ...\n\ndef generate_reorder_report():\n    ...\n```", "```py\ndef main():\n    ...\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\ndef init():\n    pass\n\ndef items():\n    pass\n\ndef products():\n    pass\n\ndef locations():\n    pass\n\ndef add_item(product_code, location_code):\n    pass\n\ndef remove_item(product_code, location_code):\n    pass\n\ndef set_products(products):\n    pass\n\ndef set_locations(locations):\n    pass\n```", "```py\ndef init():\n    _load_items()\n```", "```py\ndef _load_items():\n    global _items\n    if os.path.exists(\"items.json\"):\n        f = open(\"items.json\", \"r\")\n        _items = json.loads(f.read())\n        f.close()\n    else:\n        _items = []\n```", "```py\nimport json\nimport os.path\n```", "```py\ndef _save_items():\n    global _items\n    f = open(\"items.json\", \"w\")\n    f.write(json.dumps(_items))\n    f.close()\n```", "```py\ndef items():\n    global _items\n    return _items\n```", "```py\ndef add_item(product_code, location_code):\n    global _items\n    _items.append((product_code, location_code))\n    _save_items()\n\ndef remove_item(product_code, location_code):\n    global _items\n    for i in range(len(_items)):\n        prod_code,loc_code = _items[i]\n        if prod_code == product_code and loc_code == location_code:\n            del _items[i]\n            _save_items()\n            return True\n    return False\n```", "```py\ndef set_products(products):\n    global _products\n    _products = products\n```", "```py\ndef products():\n    global _products\n    return _products\n```", "```py\ndef set_locations(locations):\n    global _locations\n    _locations = locations\n```", "```py\ndef locations():\n    global _locations\n    return _locations\n```", "```py\ndef prompt_for_action():\n    while True:\n        print()\n        print(\"What would you like to do?\")\n        print()\n        print(\"  A = add an item to the inventory.\")\n        print(\"  R = remove an item from the inventory.\")\n        print(\"  C = generate a report of the current inventory levels.\")\n        print(\"  O = generate a report of the inventory items to re-order.\")\n        print(\"  Q = quit.\")\n        print()\n        action = input(\"> \").strip().upper()\n        if   action == \"A\": return \"ADD\"\n        elif action == \"R\": return \"REMOVE\"\n        elif action == \"C\": return \"INVENTORY_REPORT\"\n        elif action == \"O\": return \"REORDER_REPORT\"\n        elif action == \"Q\": return \"QUIT\"\n        else:\n            print(\"Unknown action!\")\n```", "```py\ndef prompt_for_product():\n    while True:\n        print()\n        print(\"Select a product:\")\n        print()\n        n = 1\n        for code,description,desired_number in datastorage.products():\n            print(\"  {}. {} - {}\".format(n, code, description))\n            n = n + 1\n\n        s = input(\"> \").strip()\n        if s == \"\": return None\n\n        try:\n            n = int(s)\n        except ValueError:\n            n = -1\n\n        if n < 1 or n > len(datastorage.products()):\n            print(\"Invalid option: {}\".format(s))\n            continue\n\n        product_code = datastorage.products()[n-1][0]\n        return product_code\n```", "```py\ndef prompt_for_location():\n    while True:\n        print()\n        print(\"Select a location:\")\n        print()\n        n = 1\n        for code,description in datastorage.locations():\n            print(\"  {}. {} - {}\".format(n, code, description))\n            n = n + 1\n\n        s = input(\"> \").strip()\n        if s == \"\": return None\n\n        try:\n            n = int(s)\n        except ValueError:\n            n = -1\n\n        if n < 1 or n > len(datastorage.locations()):\n            print(\"Invalid option: {}\".format(s))\n            continue\n\n        location_code = datastorage.locations()[n-1][0]\n        return location_code\n```", "```py\nimport datastorage\n```", "```py\ndef show_report(report):\n    print()\n    for line in report:\n        print(line)\n    print()\n```", "```py\nimport datastorage\n\ndef generate_inventory_report():\n    product_names = {}\n    for product_code,name,desired_number in datastorage.products():\n        product_names[product_code] = name\n\n    location_names = {}\n    for location_code,name in datastorage.locations():\n        location_names[location_code] = name\n\n    grouped_items = {}\n    for product_code,location_code in datastorage.items():\n        if product_code not in grouped_items:\n            grouped_items[product_code] = {}\n\n        if location_code not in grouped_items[product_code]:\n            grouped_items[product_code][location_code] = 1\n        else:\n            grouped_items[product_code][location_code] += 1\n\n    report = []\n    report.append(\"INVENTORY REPORT\")\n    report.append(\"\")\n\n    for product_code in sorted(grouped_items.keys()):\n        product_name = product_names[product_code]\n        report.append(\"Inventory for product: {} - {}\"\n                      .format(product_code, product_name))\n        report.append(\"\")\n\n        for location_code in sorted(grouped_items[product_code].keys()):\n            location_name = location_names[location_code]\n            num_items = grouped_items[product_code][location_code]\n            report.append(\"  {} at {} - {}\"\n                          .format(num_items,\n                                  location_code,\n                                  location_name))\n        report.append(\"\")\n\n    return report\n\ndef generate_reorder_report():\n    product_names   = {}\n    desired_numbers = {}\n\n    for product_code,name,desired_number in datastorage.products():\n        product_names[product_code] = name\n        desired_numbers[product_code] = desired_number\n\n    num_in_inventory = {}\n    for product_code,location_code in datastorage.items():\n        if product_code in num_in_inventory:\n            num_in_inventory[product_code] += 1\n        else:\n            num_in_inventory[product_code] = 1\n\n    report = []\n    report.append(\"RE-ORDER REPORT\")\n    report.append(\"\")\n\n    for product_code in sorted(product_names.keys()):\n        desired_number = desired_numbers[product_code]\n        current_number = num_in_inventory.get(product_code, 0)\n        if current_number < desired_number:\n            product_name = product_names[product_code]\n            num_to_reorder = desired_number - current_number\n            report.append(\"  Re-order {} of {} - {}\"\n                          .format(num_to_reorder,\n                                  product_code,\n                                  product_name))\n    report.append(\"\")\n\n    return report\n```", "```py\nimport datastorage\nimport userinterface\nimport reportgenerator\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\ndef main():\n    datastorage.init()\n\n    datastorage.set_products([\n        (\"SKU123\", \"4 mm flat-head wood screw\",        50),\n        (\"SKU145\", \"6 mm flat-head wood screw\",        50),\n        (\"SKU167\", \"4 mm countersunk head wood screw\", 10),\n        (\"SKU169\", \"6 mm countersunk head wood screw\", 10),\n        (\"SKU172\", \"4 mm metal self-tapping screw\",    20),\n        (\"SKU185\", \"8 mm metal self-tapping screw\",    20),\n    ])\n\n    datastorage.set_locations([\n        (\"S1A1\", \"Shelf 1, Aisle 1\"),\n        (\"S2A1\", \"Shelf 2, Aisle 1\"),\n        (\"S3A1\", \"Shelf 3, Aisle 1\"),\n        (\"S1A2\", \"Shelf 1, Aisle 2\"),\n        (\"S2A2\", \"Shelf 2, Aisle 2\"),\n        (\"S3A2\", \"Shelf 3, Aisle 2\"),\n        (\"BIN1\", \"Storage Bin 1\"),\n        (\"BIN2\", \"Storage Bin 2\"),\n    ])\n```", "```py\n    while True:\n        action = userinterface.prompt_for_action()\n```", "```py\n        if action == \"QUIT\":\n            break\n        elif action == \"ADD\":\n            product = userinterface.prompt_for_product()\n            if product != None:\n                location = userinterface.prompt_for_location()\n                if location != None:\n                    datastorage.add_item(product, location)\n```", "```py\n        elif action == \"REMOVE\":\n            product = userinterface.prompt_for_product()\n            if product != None:\n                location = userinterface.prompt_for_location()\n                if location != None:\n                    if not datastorage.remove_item(product,\n                                                   location):\n                        pass # What to do?\n```", "```py\ndef show_error(err_msg):\n    print()\n    print(err_msg)\n    print()\n```", "```py\n                    ...\n                    if not datastorage.remove_item(product,\n                                                   location):\n **userinterface.show_error(**\n **\"There is no product with \" +**\n **\"that code at that location!\")**\n\n```", "```py\n        elif action == \"INVENTORY_REPORT\":\n            report = reportgenerator.generate_inventory_report()\n            userinterface.show_report(report)\n        elif action == \"REORDER_REPORT\":\n            report = reportgenerator.generate_reorder_report()\n            userinterface.show_report(report)\n```"]