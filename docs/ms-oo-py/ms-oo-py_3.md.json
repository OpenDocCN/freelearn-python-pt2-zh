["```py\nimport datetime\nclass Post:\n    def __init__( self, date, title, rst_text, tags ):\n        self.date= date\n        self.title= title\n        self.rst_text= rst_text\n        self.tags= tags\n    def as_dict( self ):\n        return dict(\n            date= str(self.date),\n            title= self.title,\n            underline= \"-\"*len(self.title),\n            rst_text= self.rst_text,\n            tag_text= \" \".join(self.tags),\n        )\n```", "```py\nfrom collections import defaultdict\nclass Blog:\n    def __init__( self, title, posts=None ):\n        self.title= title\n        self.entries= posts if posts is not None else []\n    def append( self, post ):\n        self.entries.append(post)\n    def by_tag(self):\n        tag_index= defaultdict(list)\n        for post in self.entries:\n            for tag in post.tags:\n                tag_index[tag].append( post.as_dict() )\n        return tag_index\n    def as_dict( self ):\n        return dict(\n            title= self.title,\n            underline= \"=\"*len(self.title),\n            entries= [p.as_dict() for p in self.entries],\n        )\n```", "```py\ntravel = Blog( \"Travel\" )\ntravel.append(\n    Post( date=datetime.datetime(2013,11,14,17,25),\n        title=\"Hard Aground\",\n        rst_text=\"\"\"Some embarrassing revelation. Including \u2639 and \u2395\"\"\",\n        tags=(\"#RedRanger\", \"#Whitby42\", \"#ICW\"),\n        )\n)\ntravel.append(\n    Post( date=datetime.datetime(2013,11,18,15,30),\n        title=\"Anchor Follies\",\n        rst_text=\"\"\"Some witty epigram. Including < & > characters.\"\"\",,\n        tags=(\"#RedRanger\", \"#Whitby42\", \"#Mistakes\"),\n        )\n)\n```", "```py\nfrom jinja2 import Template\nblog_template= Template( \"\"\"\n{{title}}\n{{underline}}\n\n{% for e in entries %}\n{{e.title}}\n{{e.underline}}\n\n{{e.rst_text}}\n\n:date: {{e.date}}\n\n:tags: {{e.tag_text}}\n{% endfor %}\n\nTag Index\n=========\n{% for t in tags %}\n\n*   {{t}}\n    {% for post in tags[t] %}\n\n    -   `{{post.title}}`_\n    {% endfor %}\n{% endfor %}\n\"\"\")\nprint( blog_template.render( tags=travel.by_tag(), **travel.as_dict() ) )\n```", "```py\nimport json\nprint( json.dumps(travel.as_dict(), indent=4) )\n```", "```py\n{\n    \"entries\": [\n        {\n            \"title\": \"Hard Aground\",\n            \"underline\": \"------------\",\n            \"tag_text\": \"#RedRanger #Whitby42 #ICW\",\n            \"rst_text\": \"Some embarrassing revelation. Including \\u2639 and \\u2693\",\n            \"date\": \"2013-11-14 17:25:00\"\n        },\n        {\n            \"title\": \"Anchor Follies\",\n            \"underline\": \"--------------\",\n            \"tag_text\": \"#RedRanger #Whitby42 #Mistakes\",\n            \"rst_text\": \"Some witty epigram. Including < & > characters.\",\n            \"date\": \"2013-11-18 15:30:00\"\n        }\n    ],\n    \"title\": \"Travel\"\n}\n```", "```py\n{\"__jsonclass__\": [\"class name\", [param1,...]] }\n```", "```py\ndef blog_encode( object ):\n    if isinstance(object, datetime.datetime):\n        return dict(\n            __class__= \"datetime.datetime\",\n            __args__= [],\n            __kw__= dict(\n                year= object.year,\n                month= object.month,\n                day= object.day,\n                hour= object.hour,\n                minute= object.minute,\n                second= object.second,\n            )\n        )\n    elif isinstance(object, Post):\n        return dict(\n            __class__= \"Post\",\n            __args__= [],\n            __kw__= dict(\n                date= object.date,\n                title= object.title,\n                rst_text= object.rst_text,\n                tags= object.tags,\n            )\n        )\n    elif isinstance(object, Blog):\n        return dict(\n            __class__= \"Blog\",\n            __args__= [\n                object.title,\n                object.entries,\n            ],\n            __kw__= {}\n        )\n    else:\n        return json.JSONEncoder.default(o)\n```", "```py\ntext= json.dumps(travel, indent=4, default=blog_encode)\n```", "```py\n{\n    \"__args__\": [\n        \"Travel\",\n        [\n            {\n                \"__args__\": [],\n                \"__kw__\": {\n                    \"tags\": [\n                        \"#RedRanger\",\n                        \"#Whitby42\",\n                        \"#ICW\"\n                    ],\n                    \"rst_text\": \"Some embarrassing revelation. Including \\u2639 and \\u2693\",\n                    \"date\": {\n                        \"__args__\": [],\n                        \"__kw__\": {\n                            \"minute\": 25,\n                            \"hour\": 17,\n                            \"day\": 14,\n                            \"month\": 11,\n                            \"year\": 2013,\n                            \"second\": 0\n                        },\n                        \"__class__\": \"datetime.datetime\"\n                    },\n                    \"title\": \"Hard Aground\"\n                },\n                \"__class__\": \"Post\"\n            },\n.\n.\n.\n    \"__kw__\": {},\n    \"__class__\": \"Blog\"\n}\n```", "```py\ndef blog_decode( some_dict ):\n    if set(some_dict.keys()) == set( [\"__class__\", \"__args__\", \"__kw__\"] ):\n        class_= eval(some_dict['__class__'])\n        return class_( *some_dict['__args__'], **some_dict['__kw__'] )\n    else:\n        return some_dict\n```", "```py\nblog_data= json.loads(text, object_hook= blog_decode)\n```", "```py\n}[some_dict['__class__']]\n\n```", "```py\n    @property\n    def _json( self ):\n        return dict( __class__= self.__class__.__name__,\n            __kw__= {},\n            __args__= [ self.title, self.entries ]\n        )\n```", "```py\n    @property\n    def _json( self ):\n        return dict(\n            __class__= self.__class__.__name__,\n            __kw__= dict(\n                date= self.date,\n                title= self.title,\n                rst_text= self.rst_text,\n                tags= self.tags,\n            ),\n            __args__= []\n        )\n```", "```py\ndef blog_encode_2( object ):\n    if isinstance(object, datetime.datetime):\n        return dict(\n            __class__= \"datetime.datetime\",\n            __args__= [],\n            __kw__= dict(\n                year= object.year,\n                month= object.month,\n                day= object.day,\n                hour= object.hour,\n                minute= object.minute,\n                second= object.second,\n            )\n        )\n    else:\n        try:\n            encoding= object._json()\n        except AttributeError:\n            encoding= json.JSONEncoder.default(o)\n        return encoding\n```", "```py\n    if isinstance(object, datetime.datetime):\n        fmt= \"%Y-%m-%dT%H:%M:%S\"\n        return dict(\n            __class__= \"datetime.datetime.strptime\",\n            __args__= [ object.strftime(fmt), fmt ],\n            __kw__= {}\n        )\n```", "```py\n            {\n                \"__args__\": [],\n                \"__class__\": \"Post_J\",\n                \"__kw__\": {\n                    \"title\": \"Anchor Follies\",\n                    \"tags\": [\n                        \"#RedRanger\",\n                        \"#Whitby42\",\n                        \"#Mistakes\"\n                    ],\n                    \"rst_text\": \"Some witty epigram.\",\n                    \"date\": {\n                        \"__args__\": [\n                            \"2013-11-18T15:30:00\",\n                            \"%Y-%m-%dT%H:%M:%S\"\n                        ],\n                        \"__class__\": \"datetime.datetime.strptime\",\n                        \"__kw__\": {}\n                    }\n                }\n            }\n```", "```py\nwith open(\"temp.json\", \"w\", encoding=\"UTF-8\") as target:\n    json.dump( travel3, target, separators=(',', ':'), default=blog_j2_encode )\n```", "```py\nwith open(\"some_source.json\", \"r\", encoding=\"UTF-8\") as source:objects= json.load( source, object_hook= blog_decode)\n```", "```py\n{\"__class__\":\"Blog_J\",\"__args__\":[\"Travel\",[{\"__class__\":\"Post_J\",\"__args__\":[],\"__kw__\":{\"rst_text\":\"Some embarrassing revelation.\",\"tags\":[\"#RedRanger\",\"#Whitby42\",\"#ICW\"],\"title\":\"Hard Aground\",\"date\":{\"__class__\":\"datetime.datetime.strptime\",\"__args__\":[\"2013-11-14T17:25:00\",\"%Y-%m-%dT%H:%M:%S\"],\"__kw__\":{}}}},{\"__class__\":\"Post_J\",\"__args__\":[],\"__kw__\":{\"rst_text\":\"Some witty epigram.\",\"tags\":[\"#RedRanger\",\"#Whitby42\",\"#Mistakes\"],\"title\":\"Anchor Follies\",\"date\":{\"__class__\":\"datetime.datetime.strptime\",\"__args__\":[\"2013-11-18T15:30:00\",\"%Y-%m-%dT%H:%M:%S\"],\"__kw__\":{}}}}]],\"__kw__\":{}}\n```", "```py\nimport yaml\ntext= yaml.dump(travel2)\nprint( text )\n```", "```py\n!!python/object:__main__.Blog\nentries:\n- !!python/object:__main__.Post\n  date: 2013-11-14 17:25:00\n  rst_text: Some embarrassing revelation. Including \u2639 and \u2395\n  tags: !!python/tuple ['#RedRanger', '#Whitby42', '#ICW']\n  title: Hard Aground\n- !!python/object:__main__.Post\n  date: 2013-11-18 15:30:00\n  rst_text: Some witty epigram. Including < & > characters.\n  tags: !!python/tuple ['#RedRanger', '#Whitby42', '#Mistakes']\n  title: Anchor Follies\n```", "```py\ncopy= yaml.load(text)\n```", "```py\nwith open(\"some_destination.yaml\", \"w\", encoding=\"UTF-8\") as target:\n    yaml.dump( some_collection, target )\n```", "```py\nwith open(\"some_source.yaml\", \"r\", encoding=\"UTF-8\") as source:objects= yaml.load( source )\n```", "```py\nclass Card:\n    def __init__( self, rank, suit, hard=None, soft=None ):\n        self.rank= rank\n        self.suit= suit\n        self.hard= hard or int(rank)\n        self.soft= soft or int(rank)\n    def __str__( self ):\n        return \"{0.rank!s}{0.suit!s}\".format(self)\n\nclass AceCard( Card ):\n    def __init__( self, rank, suit ):\n        super().__init__( rank, suit, 1, 11 )\n\nclass FaceCard( Card ):\n    def __init__( self, rank, suit ):\n        super().__init__( rank, suit, 10, 10 )\n```", "```py\n- !!python/object:__main__.AceCard {hard: 1, rank: A, soft: 11, suit: \u2663}\n- !!python/object:__main__.Card {hard: 2, rank: '2', soft: 2, suit: \u2665}\n- !!python/object:__main__.FaceCard {hard: 10, rank: K, soft: 10, suit: \u2666}\n```", "```py\ndef card_representer(dumper, card):\n    return dumper.represent_scalar('!Card',\n    \"{0.rank!s}{0.suit!s}\".format(card) )\ndef acecard_representer(dumper, card):\n    return dumper.represent_scalar('!AceCard',\n    \"{0.rank!s}{0.suit!s}\".format(card) )\ndef facecard_representer(dumper, card):\n    return dumper.represent_scalar('!FaceCard',\n    \"{0.rank!s}{0.suit!s}\".format(card) )\n\nyaml.add_representer(Card, card_representer)\nyaml.add_representer(AceCard, acecard_representer)\nyaml.add_representer(FaceCard, facecard_representer)\n```", "```py\ndef card_constructor(loader, node):\n    value = loader.construct_scalar(node)\n    rank, suit= value[:-1], value[-1]\n    return Card( rank, suit )\n\ndef acecard_constructor(loader, node):\n    value = loader.construct_scalar(node)\n    rank, suit= value[:-1], value[-1]\n    return AceCard( rank, suit )\n\ndef facecard_constructor(loader, node):\n    value = loader.construct_scalar(node)\n    rank, suit= value[:-1], value[-1]\n    return FaceCard( rank, suit )\n\nyaml.add_constructor('!Card', card_constructor)\nyaml.add_constructor('!AceCard', acecard_constructor)\nyaml.add_constructor('!FaceCard', facecard_constructor)\n```", "```py\ndeck = [ AceCard('A','\u2663',1,11), Card('2','\u2665',2,2), FaceCard('K','\u2666',10,10) ]\ntext= yaml.dump( deck, allow_unicode=True )\n```", "```py\n[!AceCard 'A\u2663', !Card '2\u2665', !FaceCard 'K\u2666']\n```", "```py\ncards= yaml.load( text )\n```", "```py\nclass Card2( yaml.YAMLObject ):\n    yaml_tag = '!Card2'\n    yaml_loader= yaml.SafeLoader\n```", "```py\nclass AceCard2( Card2 ):\n    yaml_tag = '!AceCard2'\n```", "```py\nimport pickle\nwith open(\"travel_blog.p\",\"wb\") as target:\n    pickle.dump( travel, target )\n```", "```py\nwith open(\"travel_blog.p\",\"rb\") as source:\n    copy= pickle.load( source )\n```", "```py\nclass Hand_x:\n    def __init__( self, dealer_card, *cards ):\n        self.dealer_card= dealer_card\n        self.cards= list(cards)\n        **for c in self.cards:**\n **audit_log.info( \"Initial %s\", c )**\n    def append( self, card ):\n        self.cards.append( card )\n        **audit_log.info( \"Hit %s\", card )**\n    def __str__( self ):\n        cards= \", \".join( map(str,self.cards) )\n        return \"{self.dealer_card} | {cards}\".format( self=self, cards=cards )\n```", "```py\nimport logging,sys\naudit_log= logging.getLogger( \"audit\" )\nlogging.basicConfig(stream=sys.stderr, level=logging.INFO)\n```", "```py\nh = Hand_x( FaceCard('K','\u2666'), AceCard('A','\u2663'), Card('9','\u2665') )\ndata = pickle.dumps( h )\nh2 = pickle.loads( data )\n```", "```py\nclass Hand2:\n    def __init__( self, dealer_card, *cards ):\n        self.dealer_card= dealer_card\n        self.cards= list(cards)\n        for c in self.cards:\n            audit_log.info( \"Initial %s\", c )\n    def append( self, card ):\n        self.cards.append( card )\n        audit_log.info( \"Hit %s\", card )\n    def __str__( self ):\n        cards= \", \".join( map(str,self.cards) )\n        return \"{self.dealer_card} | {cards}\".format( self=self, cards=cards )\n    def __getstate__( self ):\n        return self.__dict__\n    def __setstate__( self, state ):\n        self.__dict__.update(state)\n        for c in self.cards:\n            audit_log.info( \"Initial (unpickle) %s\", c )\n```", "```py\nimport builtins\nclass RestrictedUnpickler(pickle.Unpickler):\n    def find_class(self, module, name):\n        if module == \"builtins\":\n            if name not in (\"exec\", \"eval\"):\n                 return getattr(builtins, name)\n        elif module == \"__main__\":\n            return globals()[name]\n        # elif module in any of our application modules...\n        raise pickle.UnpicklingError(\n        \"global '{module}.{name}' is forbidden\".format(module=module, name=name))\n```", "```py\nfrom collections import namedtuple\nGameStat = namedtuple( \"GameStat\", \"player,bet,rounds,final\" )\n```", "```py\ndef gamestat_iter( player, betting, limit=100 ):\n    for sample in range(30):\n        b = Blackjack( player(), betting() )\n        b.until_broke_or_rounds(limit)\n        yield GameStat( player.__name__, betting.__name__, b.rounds, b.betting.stake )\n```", "```py\nimport csv\nwith open(\"blackjack.stats\",\"w\",newline=\"\") as target:\n    writer= csv.DictWriter( target, GameStat._fields )\n    writer.writeheader()\n    for gamestat in gamestat_iter( Player_Strategy_1, Martingale_Bet ):\n        writer.writerow( gamestat._asdict() )\n```", "```py\ndata = gamestat_iter( Player_Strategy_1, Martingale_Bet )\nwith open(\"blackjack.stats\",\"w\",newline=\"\") as target:\n    writer= csv.DictWriter( target, GameStat._fields )\n    writer.writeheader()\n    writer.writerows( g._asdict() for g in data )\n```", "```py\nwith open(\"blackjack.stats\",\"r\",newline=\"\") as source:\n    reader= csv.DictReader( source )\n    for gs in **( GameStat(**r) for r in reader )**:\n        print( gs )\n```", "```py\nassert set(reader.fieldnames) == set(GameStat._fields)\n```", "```py\ndef gamestat_iter(iterator):\n    for row in iterator:\n        yield GameStat( row['player'], row['bet'], int(row['rounds']), int(row['final']) )\n```", "```py\nwith open(\"blackjack.stats\",\"r\",newline=\"\") as source:\n    reader= csv.DictReader( source )\n    assert set(reader.fieldnames) == set(GameStat._fields)\n    for gs in gamestat_iter(reader):\n        print( gs )\n```", "```py\nwith open(\"blog.csv\",\"w\",newline=\"\") as target:\n    wtr.writerow(['__class__','title','date','title','rst_text','tags'])\n    wtr= csv.writer( target )\n    for b in blogs:\n        wtr.writerow(['Blog',b.title,None,None,None,None])\n        for p in b.entries:\n            wtr.writerow(['Post',None,p.date,p.title,p.rst_text,p.tags])\n```", "```py\nwith open(\"blog.csv\",\"r\",newline=\"\") as source:\n    rdr= csv.reader( source )\n    header= next(rdr)\n    assert header == ['__class__','title','date','title','rst_text','tags']\n    blogs = []\n    for r in rdr:\n        if r[0] == 'Blog':\n **blog= Blog( *r[1:2] )**\n            blogs.append( blog )\n        if r[0] == 'Post':\n **post= post_builder( r )**\n            blogs[-1].append( post )\n```", "```py\nimport ast\ndef builder( row ):\n    return Post(\n        date=datetime.datetime.strptime(row[2], \"%Y-%m-%d %H:%M:%S\"),\n        title=row[3],\n        rst_text=row[4],\n        tags=ast.literal_eval(row[5]) )\n```", "```py\ndef blog_iter(source):\n    rdr= csv.reader( source )\n    header= next(rdr)\n    assert header == ['__class__','title','date','title','rst_text','tags']\n    blog= None\n    for r in rdr:\n        if r[0] == 'Blog':\n            if blog:\n                **yield blog**\n            blog= Blog( *r[1:2] )\n        if r[0] == 'Post':\n            post= post_builder( r )\n            blog.append( post )\n    if blog:\n        **yield blog**\n\n```", "```py\nwith open(\"blog.csv\",\"r\",newline=\"\") as source:\n    blogs= list( blog_iter(source) )\n```", "```py\nwith open(\"blog.csv\",\"r\",newline=\"\") as source:\n    for b in blog_iter(source):\n        with open(blog.title+'.rst','w') as rst_file:\n            render( blog, rst_file )\n```", "```py\nwith open(\"blog.csv\",\"w\",newline=\"\") as target:\n    wtr= csv.writer( target )\n    wtr.writerow(['Blog.title','Post.date','Post.title', 'Post.tags','Post.rst_text'])\n    for b in blogs:\n        for p in b.entries:\n            wtr.writerow([b.title,p.date,p.title,p.tags,p.rst_text])\n```", "```py\ndef blog_iter2( source ):\n    rdr= csv.DictReader( source )\n    assert set(rdr.fieldnames) == set(['Blog.title','Post.date','Post.title', 'Post.tags','Post.rst_text'])\n    row= next(rdr)\n    blog= Blog(row['Blog.title'])\n    post= post_builder5( row )\n    blog.append( post )\n    for row in rdr:\n        if row['Blog.title'] != blog.title:\n            yield blog\n            blog= Blog( row['Blog.title'] )\n        post= post_builder5( row )\n        blog.append( post )\n    yield blog\n```", "```py\nimport ast\ndef post_builder5( row ):\n    return Post(\n        date=datetime.datetime.strptime(\n            row['Post.date'], \"%Y-%m-%d %H:%M:%S\"),\n        title=row['Post.title'],\n        rst_text=row['Post.rst_text'],\n        tags=ast.literal_eval(row['Post.tags']) )\n```", "```py\n    def make_obj( row, class_=Post, prefix=\"Post\" ):\n        column_split = ( (k,)+tuple(k.split('.')) for k in row )\n        kw_args = dict( (attr,row[key])\n            for key,classname,attr in column_split if classname==prefix )\n        return class( **kw_args )\n```", "```py\nclass Blog_X( Blog ):\n    def xml( self ):\n        children= \"\\n\".join( c.xml() for c in self.entries )\n        return \"\"\"\\\n<blog><title>{0.title}</title>\n<entries>\n{1}\n<entries></blog>\"\"\".format(self,children)\n\nclass Post_X( Post ):\n    def xml( self ):\n        tags= \"\".join( \"<tag>{0}</tag>\".format(t) for t in self.tags )\n        return \"\"\"\\\n<entry>\n    <title>{0.title}</title>\n    <date>{0.date}</date>\n    <tags>{1}</tags>\n    <text>{0.rst_text}</text>\n</entry>\"\"\".format(self,tags)\n```", "```py\n<blog><title>Travel</title>\n<entries>\n<entry>\n    <title>Hard Aground</title>\n    <date>2013-11-14 17:25:00</date>\n    <tags><tag>#RedRanger</tag><tag>#Whitby42</tag><tag>#ICW</tag></tags>\n    <text>Some embarrassing revelation. Including \u2639 and \u2693</text>\n</entry>\n<entry>\n    <title>Anchor Follies</title>\n    <date>2013-11-18 15:30:00</date>\n    <tags><tag>#RedRanger</tag><tag>#Whitby42</tag><tag>#Mistakes</tag></tags>\n    <text>Some witty epigram.</text>\n</entry>\n<entries></blog>\n```", "```py\nimport xml.etree.ElementTree as XML\n```", "```py\n    def xml( self ):\n        blog= XML.Element( \"blog\" )\n        title= XML.SubElement( blog, \"title\" )\n        title.text= self.title\n        title.tail= \"\\n\"\n        entities= XML.SubElement( blog, \"entities\" )\n        entities.extend( c.xml() for c in self.entries )\n        blog.tail= \"\\n\"\n        return blog\n```", "```py\n    def xml( self ):\n        post= XML.Element( \"entry\" )\n        title= XML.SubElement( post, \"title\" )\n        title.text= self.title\n        date= XML.SubElement( post, \"date\" )\n        date.text= str(self.date)\n        tags= XML.SubElement( post, \"tags\" )\n        for t in self.tags:\n            tag= XML.SubElement( tags, \"tag\" )\n            tag.text= t\n        text= XML.SubElement( post, \"rst_text\" )\n        text.text= self.rst_text\n        post.tail= \"\\n\"\n        return post\n```", "```py\n    import ast\n    doc= XML.parse( io.StringIO(text.decode('utf-8')) )\n    xml_blog= doc.getroot()\n    blog= Blog( xml_blog.findtext('title') )\n    for xml_post in xml_blog.findall('entries/entry'):\n        tags= [t.text for t in xml_post.findall( 'tags/tag' )]\n        post= Post(\n            date= datetime.datetime.strptime(\n                xml_post.findtext('date'), \"%Y-%m-%d %H:%M:%S\"),\n            title=xml_post.findtext('title'),\n            tags=tags,\n            rst_text= xml_post.findtext('rst_text')\n         )\n        blog.append( post )\n    render( blog )\n```", "```py\nimport shelve\nfrom contextlib import closing\nwith closing( shelve.open('some_file') ) as shelf:\n    process( shelf )\n```", "```py\nclass Blog:\n    def __init__( self, title, *posts ):\n        self.title= title\n    def as_dict( self ):\n        return dict(\n            title= self.title,\n            underline= \"=\"*len(self.title),\n        )\n```", "```py\n>>> b1= Blog( title=\"Travel Blog\" )\n```", "```py\n>>> import shelve\n>>> shelf= shelve.open(\"blog\")\n>>> b1._id= 'Blog:1'\n>>> shelf[b1._id]= b1\n```", "```py\n>>> shelf['Blog:1']\n<__main__.Blog object at 0x1007bccd0>\n>>> shelf['Blog:1'].title\n'Travel Blog'\n>>> shelf['Blog:1']._id\n'Blog:1'\n>>> list(shelf.keys())\n['Blog:1']\n>>> shelf.close()\n```", "```py\n>>> shelf= shelve.open('blog')\n>>> results = ( shelf[k] for k in shelf.keys() if k.startswith('Blog:') and shelf[k].title == 'Travel Blog' )\n>>> list(results)                                                               [<__main__.Blog object at 0x1007bcc50>]\n>>> r0= _[0]\n>>> r0.title\n'Travel Blog'\n>>> r0._id\n'Blog:1'\n```", "```py\nimport datetime\nclass Post:\n    def __init__( self, date, title, rst_text, tags ):\n        self.date= date\n        self.title= title\n        self.rst_text= rst_text\n        self.tags= tags\n    def as_dict( self ):\n        return dict(\n            date= str(self.date),\n            title= self.title,\n            underline= \"-\"*len(self.title),\n            rst_text= self.rst_text,\n            tag_text= \" \".join(self.tags),\n        )\n```", "```py\np2= Post( date=datetime.datetime(2013,11,14,17,25),\n        title=\"Hard Aground\",\n        rst_text=\"\"\"Some embarrassing revelation. Including \u2639 and \u2395\"\"\",\n        tags=(\"#RedRanger\", \"#Whitby42\", \"#ICW\"),\n        )\n\np3= Post( date=datetime.datetime(2013,11,18,15,30),\n        title=\"Anchor Follies\",\n        rst_text=\"\"\"Some witty epigram. Including < & > characters.\"\"\",\n        tags=(\"#RedRanger\", \"#Whitby42\", \"#Mistakes\"),\n        )\n```", "```py\n    >>> import shelve\n    >>> shelf= shelve.open(\"blog\")\n    >>> owner= shelf['Blog:1']\n    ```", "```py\n    >>> p2._parent= owner._id\n    >>> p2._id= p2._parent + ':Post:2'\n    >>> shelf[p2._id]= p2\n\n    >>> p3._parent= owner._id\n    >>> p3._id= p3._parent + ':Post:3'\n    >>> shelf[p3._id]= p3\n    ```", "```py\n    >>> list(shelf.keys())\n    ['Blog:1:Post:3', 'Blog:1', 'Blog:1:Post:2']\n    ```", "```py\n    >>> p2._parent\n    'Blog:1'\n    >>> p2._id\n    'Blog:1:Post:2'\n    ```", "```py\nchildren = ( shelf[k] for k in shelf.keys() if key.startswith(\"Child:\") )\n```", "```py\nchildren_by_title = ( c for c in children if c.title == \"some title\" )\n```", "```py\nchildren_of = ( shelf[k] for k in shelf.keys() if key.startswith(parent+\":Child:\") )\n```", "```py\nfor obj in (shelf[k] for k in shelf.keys() if key.startswith(parent)):\n    del obj\n```", "```py\nimport shelve\nclass Access:\n    def new( self, filename ):\n        self.database= shelve.open(filename,'n')\n        self.max= { 'Post': 0, 'Blog': 0 }\n        self.sync()\n    def open( self, filename ):\n        self.database= shelve.open(filename,'w')\n        self.max= self.database['_DB:max']\n    def close( self ):\n        if self.database:\n            self.database['_DB:max']= self.max\n            self.database.close()\n        self.database= None\n    def sync( self ):\n        self.database['_DB:max']= self.max\n        self.database.sync()\n    def quit( self ):\n        self.close()\n```", "```py\ndef add_blog( self, blog ):\n        self.max['Blog'] += 1\n        key= \"Blog:{id}\".format(id=self.max['Blog'])\n        blog._id= key\n        **self.database[blog._id]= blog**\nreturn blog\n    def get_blog( self, id ):\n        return self.database[id]\n    def add_post( self, blog, post ):\n        self.max['Post'] += 1\n        try:\n            key= \"{blog}:Post:{id}\".format(blog=blog._id,id=self.max['Post'])\n        except AttributeError:\n            raise OperationError( \"Blog not added\" )\n        post._id= key\n        post._blog= blog._id\n        **self.database[post._id]= post**\nreturn post\n    def get_post( self, id ):\n        return self.database[id]\n    def replace_post( self, post ):\n        **self.database[post._id]= post**\nreturn post\n    def delete_post( self, post ):\n        del self.database[post._id]\n```", "```py\n    def __iter__( self ):\n        for k in self.database:\n            if k[0] == \"_\": continue\n            yield self.database[k]\n    def blog_iter( self ):\n        for k in self.database:\n            if not k.startswith(\"Blog:\"): continue\n            if \":Post:\" in k: continue # Skip children\n            yield self.database[k]\n    def post_iter( self, blog ):\n        key= \"{blog}:Post:\".format(blog=blog._id)\n        for k in self.database:\n            if not k.startswith(key): continue\n            yield self.database[k]\n    def title_iter( self, blog, title ):\n        return ( p for p in self.post_iter(blog) if p.title == title )\n```", "```py\nfrom contextlib import closing\nwith closing( Access() ) as access:\n    access.new( 'blog' )\n    access.add_blog( b1 )\n    # b1._id is set.\n    for post in p2, p3:\n        access.add_post( b1, post )\n        # post._id is set\n    b = access.get_blog( b1._id )\n    print( b._id, b )\n    for p in access.post_iter( b ):\n        print( p._id, p )\n    access.quit()\n```", "```py\nclass Access2( Access ):\n    def add_blog( self, blog ):\n        self.max['Blog'] += 1\n        key= \"Blog:{id}\".format(id=self.max['Blog'])\n        blog._id= key\n        **blog._post_list= []**\n        self.database[blog._id]= blog\n        return blog\n\n    def add_post( self, blog, post ):\n        self.max['Post'] += 1\n        try:\n            key= \"{blog}:Post:{id}\".format(blog=blog._id,id=self.max['Post'])\n        except AttributeError:\n            raise OperationError( \"Blog not added\" )\n        post._id= key\n        post._blog= blog._id\n        self.database[post._id]= post\n        **blog._post_list.append( post._id )**\n        **self.database[blog._id]= blog**\n        return post\n    def delete_post( self, post ):\n        del self.database[post._id]\n        blog= self.database[blog._id]\n        **blog._post_list.remove( post._id )**\n **self.database[blog._id]= blog**\n\n```", "```py\n    def __iter__( self ):\n        for k in self.database:\n            if k[0] == \"_\": continue\n            yield self.database[k]\n    def blog_iter( self ):\n        for k in self.database:\n            if not k.startswith(\"Blog:\"): continue\n            if \":Post:\" in k: continue # Skip children\n            yield self.database[k]\n    **def post_iter( self, blog ):**\n **for k in blog._post_list:**\n **yield self.database[k]**\n    def title_iter( self, blog, title ):\n        return ( p for p in self.post_iter(blog) if p.title == title )\n```", "```py\nreturn (self.database[k] for k in blog._post_list)\n```", "```py\nAccess2: 14.9\nAccess: 19.3\n```", "```py\nclass Access3( Access2 ):\n    def new( self, *args, **kw ):\n        super().new( *args, **kw )\n        **self.database['_DB:Blog']= list()**\n\n    def add_blog( self, blog ):\n        self.max['Blog'] += 1\n        key= \"Blog:{id}\".format(id=self.max['Blog'])\n        blog._id= key\n        blog._post_list= []\n        self.database[blog._id]= blog\n        **self.database['_DB:Blog'].append( blog._id )**\n        return blog\n\n    **def blog_iter( self ):**\n **return ( self.database[k] for k in self.database['_DB:Blog']** )\n```", "```py\nAccess3: 4.0\nAccess2: 15.1\nAccess: 19.4\n```", "```py\nclass Access4( Access2 ):\n    def new( self, *args, **kw ):\n        super().new( *args, **kw )\n        self.database['_DB:Blog']= list()\n        self.database['_DB:Blog_Title']= defaultdict(list)\n\n    def add_blog( self, blog ):\n        self.max['Blog'] += 1\n        key= \"Blog:{id}\".format(id=self.max['Blog'])\n        blog._id= key\n        blog._post_list= []\n        self.database[blog._id]= blog\n        self.database['_DB:Blog'].append( blog._id )\n        **blog_title= self.database['_DB:Blog_Title']**\n **blog_title[blog.title].append( blog._id )**\n **self.database['_DB:Blog_Title']= blog_title**\n        return blog\n```", "```py\n    def update_blog( self, blog ):\n        \"\"\"Replace this Blog; update index.\"\"\"\n        self.database[blog._id]= blog\n        blog_title= self.database['_DB:Blog_Title']\n        # Remove key from index in old spot.\n        empties= []\n        for k in blog_title:\n            if blog._id in blog_title[k]:\n                blog_title[k].remove( blog._id )\n                if len(blog_title[k]) == 0: empties.append( k )\n        # Cleanup zero-length lists from defaultdict.\n        for k in empties:\n            del blog_title[k]\n        # Put key into index in new spot.\n        **blog_title[blog.title].append( blog._id )**\n **self.database['_DB:Blog_Title']= blog_title**\n\n```", "```py\n    def blog_iter( self ):\n        return ( self.database[k] for k in self.database['_DB:Blog'] )\n\n    def blog_title_iter( self, title ):\n        blog_title= self.database['_DB:Blog_Title']\n        return ( self.database[k] for k in blog_title[title] )\n```", "```py\ndef make_blog( *args, **kw ):\n    version= kw.pop('_version',1)\n    if version == 1: return Blog( *args, **kw )\n    elif version == 2: return Blog2( *args, **kw )\n    else: raise Exception( \"Unknown Version {0}\".format(version) )\n```", "```py\nclass Blog:\n    @staticmethod\n    def version( self, version ):\n        self.version= version\n    @staticmethod\n    def blog( self, *args, **kw ):\n        if self.version == 1: return Blog1( *args, **kw )\n        elif self.version == 2: return Blog2( *args, **kw )\n        else: raise Exception( \"Unknown Version {0}\".format(self.version) )\n```", "```py\nblog= Blog.version(2).blog( title=this, other_attribute=that )\n```", "```py\nCREATE TABLE BLOG(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    TITLE TEXT );\nCREATE TABLE POST(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    DATE TIMESTAMP,\n    TITLE TEXT,\n    RST_TEXT TEXT,\n    BLOG_ID INTEGER REFERENCES BLOG(ID)  );\nCREATE TABLE TAG(\n    ID INTEGER PRIMARY KEY AUTOINCREMENT,\n    PHRASE TEXT UNIQUE ON CONFLICT FAIL );\nCREATE TABLE ASSOC_POST_TAG(\n  POST_ID INTEGER REFERENCES POST(ID),\n  TAG_ID INTEGER REFERENCES TAG(ID) );\n```", "```py\nimport sqlite3\ndatabase = sqlite3.connect('p2_c11_blog.db')\ndatabase.executescript( sql_ddl )\n```", "```py\ncrsr = database.cursor()\nfor stmt in sql_ddl.split(\";\"):\n    crsr.execute(stmt)\n```", "```py\ncreate_blog= \"\"\"\nINSERT INTO BLOG(TITLE) VALUES(?)\n\"\"\"\ndatabase.execute(create_blog, (\"Travel Blog\",))\n```", "```py\nupdate_blog=\"\"\"\nUPDATE BLOG SET TITLE=:new_title WHERE TITLE=:old_title\n\"\"\"\ndatabase.execute( \"BEGIN\" )\ndatabase.execute( update_blog,\n    dict(new_title=\"2013-2014 Travel\", old_title=\"Travel Blog\") )\ndatabase.commit()\n```", "```py\ndelete_post_tag_by_blog_title= \"\"\"\nDELETE FROM ASSOC_POST_TAG\nWHERE POST_ID IN (\n    SELECT DISTINCT POST_ID\n    FROM BLOG JOIN POST ON BLOG.ID = POST.BLOG_ID\n    WHERE BLOG.TITLE=:old_title)\n\"\"\"\ndelete_post_by_blog_title= \"\"\"\nDELETE FROM POST WHERE BLOG_ID IN (\n    SELECT ID FROM BLOG WHERE TITLE=:old_title)\n\"\"\"\ndelete_blog_by_title=\"\"\"\nDELETE FROM BLOG WHERE TITLE=:old_title\n\"\"\"\ntry:\n    with database:\n        title= dict(old_title=\"2013-2014 Travel\")\n        database.execute( delete_post_tag_by_blog_title, title )\n        database.execute( delete_post_by_blog_title, title )\n        database.execute( delete_blog_by_title, title )\n    print( \"Delete finished normally.\" )\nexcept Exception as e:\n    print( \"Rolled Back due to {0}\".format(e) )\n```", "```py\n\"SELECT * FROM BLOG WHERE TITLE=?\"\n```", "```py\nquery_blog_by_title= \"\"\"\nSELECT * FROM BLOG WHERE TITLE=?\n\"\"\"\nfor blog in database.execute( query_blog_by_title, (\"2013-2014 Travel\",) ):\n    print( blog[0], blog[1] )\n```", "```py\ncrsr= database.cursor()\ncrsr.execute( query_blog_by_title, (\"2013-2014 Travel\",) )\nfor blog in crsr.fetchall():\n    print( blog[0], blog[1] )\n```", "```py\ndatabase = sqlite3.connect('p2_c11_blog.db', isolation_level='DEFERRED')\ntry:\n    database.execute( 'BEGIN' )\n    database.execute( \"some statement\" )\n    database.execute( \"another statement\" )\n    database.commit()\nexcept Exception as e:\n    database.rollback()\n    raise e\n```", "```py\ndatabase = sqlite3.connect('p2_c11_blog.db', isolation_level='DEFERRED')\nwith database:\n    database.execute( \"some statement\" )\n    database.execute( \"another statement\" )\n```", "```py\nquery_blog_by_title= \"\"\"\nSELECT * FROM BLOG WHERE TITLE=?\n\"\"\"\nquery_post_by_blog_id= \"\"\"\nSELECT * FROM POST WHERE BLOG_ID=?\n\"\"\"\nquery_tag_by_post_id= \"\"\"\nSELECT TAG.*\nFROM TAG JOIN ASSOC_POST_TAG ON TAG.ID = ASSOC_POST_TAG.TAG_ID\nWHERE ASSOC_POST_TAG.POST_ID=?\n\"\"\"\nfor blog in database.execute( query_blog_by_title, (\"2013-2014 Travel\",) ):\n    print( \"Blog\", blog )\n    for post in database.execute( query_post_by_blog_id, (blog[0],) ):\n        print( \"Post\", post )\n        for tag in database.execute( query_tag_by_post_id, (post[0],) ):\n            print( \"Tag\", tag )\n```", "```py\nfrom collections import defaultdict\nclass Blog:\n    def __init__( self, title, *posts ):\n        self.title= title\n        self.entries= list(posts)\n    def append( self, post ):\n        self.entries.append(post)\n    **def by_tag(self):**\n **tag_index= defaultdict(list)**\n **for post in self.entries:**\n **for tag in post.tags:**\n **tag_index[tag].append( post )**\n **return tag_index**\n    def as_dict( self ):\n        return dict(\n            title= self.title,\n            underline= \"=\"*len(self.title),\n            entries= [p.as_dict() for p in self.entries],\n        )\n```", "```py\nquery_by_tag=\"\"\"\nSELECT TAG.PHRASE, POST.TITLE, POST.ID\nFROM TAG JOIN ASSOC_POST_TAG ON TAG.ID = ASSOC_POST_TAG.TAG_ID\nJOIN POST ON POST.ID = ASSOC_POST_TAG.POST_ID\nJOIN BLOG ON POST.BLOG_ID = BLOG.ID\nWHERE BLOG.TITLE=?\n\"\"\"\n```", "```py\ntag_index= defaultdict(list)\nfor tag, post_title, post_id in database.execute( query_by_tag, (\"2013-2014 Travel\",) ):\n    tag_index[tag].append( (post_title, post_id) )\nprint( tag_index )\n```", "```py\nimport decimal\n\ndef adapt_currency(value):\n    return str(value)\nsqlite3.register_adapter(decimal.Decimal, adapt_currency)\n\ndef convert_currency(bytes):\n    return decimal.Decimal(bytes.decode())\nsqlite3.register_converter(\"DECIMAL\", convert_currency)\n```", "```py\nCREATE TABLE BUDGET(\n    year INTEGER,\n    month INTEGER,\n    category TEXT,\n    amount DECIMAL\n)\n```", "```py\ndatabase= sqlite3.connect( 'p2_c11_blog.db', detect_types=sqlite3.PARSE_DECLTYPES )\ndatabase.execute( decimal_ddl )\n\ninsert_budget= \"\"\"\nINSERT INTO BUDGET(year, month, category, amount) VALUES(:year, :month, :category, :amount)\n\"\"\"\ndatabase.execute( insert_budget,\n    dict(year=2013, month=1, category=\"fuel\", amount=decimal.Decimal('256.78')) )\ndatabase.execute( insert_budget,\n    dict(year=2013, month=2, category=\"fuel\", amount=decimal.Decimal('287.65')) )\n\nquery_budget= \"\"\"\nSELECT * FROM BUDGET\n\"\"\"\nfor row in database.execute( query_budget ):\n    print( row )\n```", "```py\n(2013, 1, 'fuel', Decimal('256.78'))\n(2013, 2, 'fuel', Decimal('287.65'))\n```", "```py\nfrom collections import defaultdict\nclass Blog:\n    def __init__( self, **kw ):\n        \"\"\"Requires title\"\"\"\n        self.id= kw.pop('id', None)\n        self.title= kw.pop('title', None)\n        if kw: raise TooManyValues( kw )\n        **self.entries= list() # ???**\n    def append( self, post ):\n        self.entries.append(post)\n    def by_tag(self):\n        tag_index= defaultdict(list)\n        **for post in self.entries: # ???**\n            for tag in post.tags:\n                tag_index[tag].append( post )\n        return tag_index\n    def as_dict( self ):\n        return dict(\n            title= self.title,\n            underline= \"=\"*len(self.title),\n            entries= [p.as_dict() for p in self.entries],\n        )\n```", "```py\nimport datetime\nclass Post:\n    def __init__( self, **kw ):\n        \"\"\"Requires date, title, rst_text.\"\"\"\n        self.id= kw.pop('id', None)\n        self.date= kw.pop('date', None)\n        self.title= kw.pop('title', None)\n        self.rst_text= kw.pop('rst_text', None)\n        self.tags= list()\n        if kw: raise TooManyValues( kw )\n    def append( self, tag ):\n        self.tags.append( tag )\n    def as_dict( self ):\n        return dict(\n            date= str(self.date),\n            title= self.title,\n            underline= \"-\"*len(self.title),\n            rst_text= self.rst_text,\n            tag_text= \" \".join(self.tags),\n        )\n```", "```py\nclass TooManyValues( Exception ):\n    pass\n```", "```py\nclass Access:\n    get_last_id= \"\"\"\n    SELECT last_insert_rowid()\n    \"\"\"\n    def open( self, filename ):\n        self.database= sqlite3.connect( filename )\n        self.database.row_factory = sqlite3.Row\n    def get_blog( self, id ):\n        query_blog= \"\"\"\n        SELECT * FROM BLOG WHERE ID=?\n        \"\"\"\n        row= self.database.execute( query_blog, (id,) ).fetchone()\n        blog= Blog( id= row['ID'], title= row['TITLE'] )\n        return blog\n    def add_blog( self, blog ):\n        insert_blog= \"\"\"\n        INSERT INTO BLOG(TITLE) VALUES(:title)\n        \"\"\"\n        self.database.execute( insert_blog, dict(title=blog.title) )\n        row = self.database.execute( get_last_id ).fetchone()\n        blog.id= row[0]\n        return blog\n```", "```py\n    def get_post( self, id ):\n        query_post= \"\"\"\n        SELECT * FROM POST WHERE ID=?\n        \"\"\"\n        row= self.database.execute( query_post, (id,) ).fetchone()\n        post= Post( id= row['ID'], title= row['TITLE'],\n            date= row['DATE'], rst_text= row['RST_TEXT'] )\n        query_tags= \"\"\"\n        SELECT TAG.*\n        FROM TAG JOIN ASSOC_POST_TAG ON TAG.ID = ASSOC_POST_TAG.TAG_ID\n        WHERE ASSOC_POST_TAG.POST_ID=?\n        \"\"\"\n        results= self.database.execute( query_tags, (id,) )\n        for id, tag in results:\n            post.append( tag )\n        return post\n```", "```py\n    def add_post( self, blog, post ):\n        insert_post=\"\"\"\n        INSERT INTO POST(TITLE, DATE, RST_TEXT, BLOG_ID)\n            VALUES(:title, :date, :rst_text, :blog_id)\n        \"\"\"\n        query_tag=\"\"\"\n        SELECT * FROM TAG WHERE PHRASE=?\n        \"\"\"\n        insert_tag= \"\"\"\n        INSERT INTO TAG(PHRASE) VALUES(?)\n        \"\"\"\n        insert_association= \"\"\"\n        INSERT INTO ASSOC_POST_TAG(POST_ID, TAG_ID) VALUES(:post_id, :tag_id)\n        \"\"\"\n        with self.database:\n            self.database.execute( **insert_post**,\n                dict(title=post.title, date=post.date,\n                    rst_text=post.rst_text, blog_id=blog.id) )\n            row = self.database.execute( **get_last_id** ).fetchone()\n            post.id= row[0]\n            for tag in post.tags:\n                tag_row= self.database.execute( **query_tag**, (tag,) ).fetchone()\n                if tag_row is not None:\n                    tag_id= tag_row['ID']\n                else:\n                    self.database.execute(**insert_tag**, (tag,))\n                    row = self.database.execute( **get_last_id** ).fetchone()\n                    tag_id= row[0]\n                self.database.execute(**insert_association**,\n                    dict(tag_id=tag_id,post_id=post.id))\n        return post\n```", "```py\n    def blog_iter( self ):\n        query= \"\"\"\n        SELECT * FROM BLOG\n        \"\"\"\n        results= self.database.execute( query )\n        for row in results:\n            blog= Blog( id= row['ID'], title= row['TITLE'] )\n            yield blog\n    def post_iter( self, blog ):\n        query= \"\"\"\n        SELECT ID FROM POST WHERE BLOG_ID=?\n        \"\"\"\n        results= self.database.execute( query, (blog.id,) )\n        for row in results:\n            yield self.get_post( row['ID'] )\n```", "```py\n@property\ndef entries( self ):return self._access.post_iter( self )\n```", "```py\nCREATE INDEX IX_BLOG_TITLE ON BLOG( TITLE );\n```", "```py\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Table\nfrom sqlalchemy import BigInteger, Boolean, Date, DateTime, Enum, \\\n    Float, Integer, Interval, LargeBinary, Numeric, PickleType, \\\n    SmallInteger, String, Text, Time, Unicode, UnicodeText ForeignKey\nfrom sqlalchemy.orm import relationship, backref\n```", "```py\nBase = declarative_base()\n```", "```py\nclass Blog(Base):\n    __tablename__ = \"BLOG\"\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    def as_dict( self ):\n        return dict(\n            title= self.title,\n            underline= '='*len(self.title),\n            entries= [ e.as_dict() for e in self.entries ]\n        )\n```", "```py\nclass Post(Base):\n    __tablename__ = \"POST\"\n    id = Column(Integer, primary_key=True)\n    title = Column(String)\n    date = Column(DateTime)\n    rst_text = Column(UnicodeText)\n    blog_id = Column(Integer, ForeignKey('BLOG.id'))\n    blog = relationship( 'Blog', backref='entries' )\n    tags = relationship('Tag', secondary=assoc_post_tag, backref='posts')\n    def as_dict( self ):\n        return dict(\n            title= self.title,\n            underline= '-'*len(self.title),\n            date= self.date,\n            rst_text= self.rst_text,\n            tags= [ t.phrase for t in self.tags],\n        )\n```", "```py\nclass Tag(Base):\n    __tablename__ = \"TAG\"\n    id = Column(Integer, primary_key=True)\n    phrase = Column(String, unique=True)\n```", "```py\nassoc_post_tag = Table('ASSOC_POST_TAG', Base.metadata,\n    Column('POST_ID', Integer, ForeignKey('POST.id') ),\n    Column('TAG_ID', Integer, ForeignKey('TAG.id') )\n)\n```", "```py\nfrom sqlalchemy import create_engine\nengine = create_engine('sqlite:///./p2_c11_blog2.db', echo=True)\nBase.metadata.create_all(engine)\n```", "```py\nCREATE TABLE \"BLOG\" (\n  id INTEGER NOT NULL,\n  title VARCHAR,\n  PRIMARY KEY (id)\n)\nCREATE TABLE \"TAG\" (\n  id INTEGER NOT NULL,\n  phrase VARCHAR,\n  PRIMARY KEY (id),\n  UNIQUE (phrase)\n)\n\nCREATE TABLE \"POST\" (\n  id INTEGER NOT NULL,\n  title VARCHAR,\n  date DATETIME,\n  rst_text TEXT,\n  blog_id INTEGER,\n  PRIMARY KEY (id),\n  FOREIGN KEY(blog_id) REFERENCES \"BLOG\" (id)\n)\n\nCREATE TABLE \"ASSOC_POST_TAG\" (\n  \"POST_ID\" INTEGER,\n  \"TAG_ID\" INTEGER,\n  FOREIGN KEY(\"POST_ID\") REFERENCES \"POST\" (id),\n  FOREIGN KEY(\"TAG_ID\") REFERENCES \"TAG\" (id)\n)\n```", "```py\nfrom sqlalchemy.orm import sessionmaker\nSession= sessionmaker(bind=engine)\nsession= Session()\n```", "```py\nblog= Blog( title=\"Travel 2013\" )\nsession.add( blog )\n```", "```py\ntags = [ ]\nfor phrase in \"#RedRanger\", \"#Whitby42\", \"#ICW\":\n    try:\n        tag= session.query(Tag).filter(Tag.phrase == phrase).one()\n    except sqlalchemy.orm.exc.NoResultFound:\n        tag= Tag(phrase=phrase)\n        session.add(tag)\n    tags.append(tag)\n```", "```py\np2= Post( date=datetime.datetime(2013,11,14,17,25),\n    title=\"Hard Aground\",\n    rst_text=\"\"\"Some embarrassing revelation. Including \u2639 and \u2395\"\"\",\n    blog=blog,\n    tags=tags\n    )\nsession.add(p2)\nblog.posts= [ p2 ]\n```", "```py\nsession.commit()\n```", "```py\nsession= Session()\nfor blog in session.query(Blog):\n    print( \"{title}\\n{underline}\\n\".format(**blog.as_dict()) )\n    for p in blog.entries:\n        print( p.as_dict() )\n```", "```py\nfor post in session.query(Post).join(assoc_post_tag).join(Tag).filter(\n    Tag.phrase == \"#Whitby42\" ):\n    print( post.blog.title, post.date, post.title, [t.phrase for t in post.tags] )\n```", "```py\nSELECT \"POST\".id AS \"POST_id\", \"POST\".title AS \"POST_title\", \"POST\".date AS \"POST_date\", \"POST\".rst_text AS \"POST_rst_text\", \"POST\".blog_id AS \"POST_blog_id\"\nFROM \"POST\" JOIN \"ASSOC_POST_TAG\" ON \"POST\".id = \"ASSOC_POST_TAG\".\"POST_ID\"\nJOIN \"TAG\" ON \"TAG\".id = \"ASSOC_POST_TAG\".\"TAG_ID\"\nWHERE \"TAG\".phrase = ?\n```", "```py\nSELECT \"TAG\".id AS \"TAG_id\", \"TAG\".phrase AS \"TAG_phrase\"\nFROM \"TAG\", \"ASSOC_POST_TAG\"\nWHERE ? = \"ASSOC_POST_TAG\".\"POST_ID\"\nAND \"TAG\".id = \"ASSOC_POST_TAG\".\"TAG_ID\"\n```", "```py\nclass Post(Base):\n    __tablename__ = \"POST\"\n    id = Column(Integer, primary_key=True)\n    title = Column(String, index=True)\n    date = Column(DateTime, index=True)\n    blog_id = Column(Integer, ForeignKey('BLOG.id'), index=True)\n```", "```py\nresult = application(environ, start_response)\n```", "```py\nclass Wheel:\n    \"\"\"Abstract, zero bins omitted.\"\"\"\n    def __init__( self ):\n        self.rng= random.Random()\n        self.bins= [\n            {str(n): (35,1),\n            self.redblack(n): (1,1),\n            self.hilo(n): (1,1),\n            self.evenodd(n): (1,1),\n            } for n in range(1,37)\n        ]\n    @staticmethod\n    def redblack(n):\n        return \"Red\" if n in (1, 3, 5, 7, 9,  12, 14, 16, 18,\n            19, 21, 23, 25, 27,  30, 32, 34, 36) else \"Black\"\n    @staticmethod\n    def hilo(n):\n        return \"Hi\" if n >= 19 else \"Lo\"\n    @staticmethod\n    def evenodd(n):\n        return \"Even\" if n % 2 == 0 else \"Odd\"\n    def spin( self ):\n        return self.rng.choice( self.bins )\n```", "```py\nclass Zero:\n    def __init__( self ):\n        super().__init__()\n        self.bins += [ {'0': (35,1)} ]\n\nclass DoubleZero:\n    def __init__( self ):\n        super().__init__()\n        self.bins += [ {'00': (35,1)} ]\n```", "```py\nclass American( Zero, DoubleZero, Wheel ):\n    pass\n\nclass European( Zero, Wheel ):\n    pass\n```", "```py\namerican = American()\neuropean = European()\nprint( \"SPIN\", american.spin() )\n```", "```py\n{'Even': (1, 1), 'Lo': (1, 1), 'Red': (1,   1), '12': (35, 1)}\n```", "```py\nimport sys\nimport wsgiref.util\nimport json\ndef wheel(environ, start_response):\n    request= wsgiref.util.shift_path_info(environ) # 1\\. Parse.\n    print( \"wheel\", request, file=sys.stderr ) # 2\\. Logging.\n    if request.lower().startswith('eu'): # 3\\. Evaluate.\n        winner= european.spin()\n    else:\n        winner= american.spin()\n    status = '200 OK' # 4\\. Respond.\n    headers = [('Content-type', 'application/json; charset=utf-8')]\n    start_response(status, headers)\n    return [ json.dumps(winner).encode('UTF-8') ]\n```", "```py\nfrom wsgiref.simple_server import make_server\ndef roulette_server(count=1):\n    httpd = make_server('', 8080, wheel)\n    if count is None:\n        httpd.serve_forever()\n    else:\n        for c in range(count):\n            httpd.handle_request()\n```", "```py\nimport http.client\nimport json\ndef json_get(path=\"/\"):\n    rest= http.client.HTTPConnection('localhost', 8080)\n    rest.request(\"GET\", path)\n    response= rest.getresponse()\n    print( response.status, response.reason )\n    print( response.getheaders() )\n    raw= response.read().decode(\"utf-8\")\n    if response.status == 200:\n        document= json.loads(raw)\n        print( document )\n    else:\n        print( raw )\n```", "```py\n    import concurrent.futures\n    import time\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        executor.submit( roulette_server, 4 )\n        time.sleep(2) # Wait for the server to start\n        json_get()\n        json_get()\n        json_get(\"/european/\")\n        json_get(\"/european/\")\n```", "```py\nwheel 'european'\n127.0.0.1 - - [08/Dec/2013 09:32:08] \"GET /european/ HTTP/1.1\" 200 62\n200 OK\n[('Date', 'Sun, 08 Dec 2013 14:32:08 GMT'), ('Server', 'WSGIServer/0.2 CPython/3.3.3'), ('Content-type', 'application/json; charset=utf-8'), ('Content-Length', '62')]\n{'20': [35, 1], 'Even': [1, 1], 'Black': [1, 1], 'Hi': [1, 1]}\n```", "```py\nif __name__ == \"__main__\":\n    roulette_server()\n```", "```py\nfrom collections.abc import Callable\nclass Wheel2( Wheel, Callable ):\n    def __call__(self, environ, start_response):\n        winner= self.spin() # 3\\. Evaluate.\n        status = '200 OK' # 4\\. Respond.\n        headers = [('Content-type', 'application/json; charset=utf-8')]\n        start_response(status, headers)\n        return [ json.dumps(winner).encode('UTF-8') ]\n```", "```py\nclass American2( Zero, DoubleZero, Wheel2 ):\n    pass\n\nclass European2( Zero, Wheel2 ):\n    pass\n```", "```py\nclass Wheel3( Callable ):\n    def __init__( self ):\n        self.am = American2()\n        self.eu = European2()\n    def __call__(self, environ, start_response):\n        request= wsgiref.util.shift_path_info(environ) # 1\\. Parse\n        print( \"Wheel3\", request, file=sys.stderr ) # 2\\. Logging\n        if request.lower().startswith('eu'): # 3\\. Evaluate\n            response= self.eu(environ,start_response)\n        else:\n            response= self.am(environ,start_response)\n        return response # 4\\. Respond\n```", "```py\n/microblog/blog/bid/\n```", "```py\n/microblog/post/title_string/\n/microblog/post/bid/title_string/\n/microblog/blog/bid/post/title_string/\n```", "```py\nfrom collections import defaultdict\nclass Table:\n    def __init__( self, stake=100 ):\n        self.bets= defaultdict(int)\n        self.stake= stake\n    def place_bet( self, name, amount ):\n        self.bets[name] += amount\n    def clear_bets( self, name ):\n        self.bets= defaultdict(int)\n    def resolve( self, spin ):\n        \"\"\"spin is a dict with bet:(x:y).\"\"\"\n        details= []\n        while self.bets:\n            bet, amount= self.bets.popitem()\n            if bet in spin:\n                x, y = spin[bet]\n                self.stake += amount*x/y\n                details.append( (bet, amount, 'win') )\n            else:\n                self.stake -= amount\n                details.append( (bet, amount, 'lose') )\n        return details\n```", "```py\nclass WSGI( Callable ):\n    def __call__( self, environ, start_response ):\n        raise NotImplementedError\n\nclass RESTException( Exception ):\n    pass\n```", "```py\nclass Roulette( WSGI ):\n    def __init__( self, wheel ):\n        self.table= Table(100)\n        self.rounds= 0\n        self.wheel= wheel\n    def __call__( self, environ, start_response ):\n        #print( environ, file=sys.stderr )\n        app= wsgiref.util.shift_path_info(environ)\n        try:\n            if app.lower() == \"player\":\n                return self.player_app( environ, start_response )\n            elif app.lower() == \"bet\":\n                return self.bet_app( environ, start_response )\n            elif app.lower() == \"wheel\":\n                return self.wheel_app( environ, start_response )\n            else:\n                raise RESTException(\"404 NOT_FOUND\",\n                    \"Unknown app in {SCRIPT_NAME}/{PATH_INFO}\".format_map(environ))\n        except RESTException as e:\n            status= e.args[0]\n            headers = [('Content-type', 'text/plain; charset=utf-8')]\n            start_response( status, headers, sys.exc_info() )\n            return [ repr(e.args).encode(\"UTF-8\") ]\n```", "```py\n    def player_app( self, environ, start_response ):\n        if environ['REQUEST_METHOD'] == 'GET':\n            details= dict( stake= self.table.stake, rounds= self.rounds )\n            status = '200 OK'\n            headers = [('Content-type', 'application/json; charset=utf-8')]\n            start_response(status, headers)\n            return [ json.dumps( details ).encode('UTF-8') ]\n        else:\n            raise RESTException(\"405 METHOD_NOT_ALLOWED\",\n                \"Method '{REQUEST_METHOD}' not allowed\".format_map(environ))\n```", "```py\n    def bet_app( self, environ, start_response ):\n        if environ['REQUEST_METHOD'] == 'GET':\n            details = dict( self.table.bets )\n        elif environ['REQUEST_METHOD'] == 'POST':\n            size= int(environ['CONTENT_LENGTH'])\n            raw= environ['wsgi.input'].read(size).decode(\"UTF-8\")\n            try:\n                data = json.loads( raw )\n                if isinstance(data,dict): data= [data]\n                for detail in data:\n                    self.table.place_bet( detail['bet'], int(detail['amount']) )\n            except Exception as e:\n                raise RESTException(\"403 FORBIDDEN\",\n                 Bet {raw!r}\".format(raw=raw))\n            details = dict( self.table.bets )\n        else:\n            raise RESTException(\"405 METHOD_NOT_ALLOWED\",\n                \"Method '{REQUEST_METHOD}' not allowed\".format_map(environ))\n        status = '200 OK'\n        headers = [('Content-type', 'application/json; charset=utf-8')]\n        start_response(status, headers)\n        return [ json.dumps(details).encode('UTF-8') ]\n```", "```py\n    def wheel_app( self, environ, start_response ):\n        if environ['REQUEST_METHOD'] == 'POST':\n            size= environ['CONTENT_LENGTH']\n            if size != '':\n                raw= environ['wsgi.input'].read(int(size))\n                raise RESTException(\"403 FORBIDDEN\",\n                    \"Data '{raw!r}' not allowed\".format(raw=raw))\n            spin= self.wheel.spin()\n            payout = self.table.resolve( spin )\n            self.rounds += 1\n            details = dict( spin=spin, payout=payout,\n                stake= self.table.stake, rounds= self.rounds )\n            status = '200 OK'\n            headers = [('Content-type', 'application/json; charset=utf-8')]\n            start_response(status, headers)\n            return [ json.dumps( details ).encode('UTF-8') ]\n        else:\n            raise RESTException(\"405 METHOD_NOT_ALLOWED\",\n                \"Method '{REQUEST_METHOD}' not allowed\".format_map(environ))\n```", "```py\ndef roulette_server_3(count=1):\n    from wsgiref.simple_server import make_server\n    from wsgiref.validate import validator\n    wheel= American()\n    roulette= Roulette(wheel)\n    debug= validator(roulette)\n    httpd = make_server('', 8080, debug)\n    if count is None:\n        httpd.serve_forever()\n    else:\n        for c in range(count):\n            httpd.handle_request()\n```", "```py\ndef roulette_client(method=\"GET\", path=\"/\", data=None):\n    rest= http.client.HTTPConnection('localhost', 8080)\n    if data:\n        header= {\"Content-type\": \"application/json; charset=utf-8'\"}\n        params= json.dumps( data ).encode('UTF-8')\n        rest.request(method, path, params, header)\n    else:\n        rest.request(method, path)\n    response= rest.getresponse()\n    raw= response.read().decode(\"utf-8\")\n    if 200 <= response.status < 300:\n        document= json.loads(raw)\n        return document\n    else:\n        print( response.status, response.reason )\n        print( response.getheaders() )\n        print( raw )\n```", "```py\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        executor.submit( roulette_server_3, 4 )\n        time.sleep(3) # Wait for the server to start\n        print( roulette_client(\"GET\", \"/player/\" ) )\n        print( roulette_client(\"POST\", \"/bet/\", {'bet':'Black', 'amount':2}) )\n        print( roulette_client(\"GET\", \"/bet/\" ) )\n        print( roulette_client(\"POST\", \"/wheel/\" ) )\n```", "```py\n127.0.0.1 - - [09/Dec/2013 08:21:34] \"GET /player/ HTTP/1.1\" 200 27\n{'stake': 100, 'rounds': 0}\n127.0.0.1 - - [09/Dec/2013 08:21:34] \"POST /bet/ HTTP/1.1\" 200 12\n{'Black': 2}\n127.0.0.1 - - [09/Dec/2013 08:21:34] \"GET /bet/ HTTP/1.1\" 200 12\n{'Black': 2}\n127.0.0.1 - - [09/Dec/2013 08:21:34] \"POST /wheel/ HTTP/1.1\" 200 129\n{'stake': 98, 'payout': [['Black', 2, 'lose']], 'rounds': 1, 'spin': {'27': [35, 1], 'Odd': [1, 1], 'Red': [1, 1], 'Hi': [1, 1]}}\n```", "```py\nfrom hashlib import sha256\nimport os\nclass Authentication:\n    iterations= 1000\n    def __init__( self, username, password ):\n        \"\"\"Works with bytes. Not Unicode strings.\"\"\"\n        self.username= username\n        self.salt= os.urandom(24)\n        self.hash= self._iter_hash( self.iterations, self.salt, username, password )\n    @staticmethod\n    def _iter_hash( iterations, salt, username, password ):\n        seed= salt+b\":\"+username+b\":\"+password\n        for i in range(iterations):\n            seed= sha256( seed ).digest()\n        return seed\n    def __eq__( self, other ):\n        return self.username == other.username and self.hash == other.hash\n    def __hash__( self, other ):\n        return hash(self.hash)\n    def __repr__( self ):\n        salt_x= \"\".join( \"{0:x}\".format(b) for b in self.salt )\n        hash_x= \"\".join( \"{0:x}\".format(b) for b in self.hash )\n        return \"{username} {iterations:d}:{salt}:{hash}\".format(\n            username=self.username, iterations=self.iterations,\n            salt=salt_x, hash=hash_x)\n    def match( self, password ):\n        test= self._iter_hash( self.iterations, self.salt, self.username, password )\n        return self.hash == test # **Constant Time is Best**\n\n```", "```py\nclass Users( dict ):\n    def __init__( self, *args, **kw ):\n        super().__init__( *args, **kw )\n        # Can never match -- keys are the same.\n        self[\"\"]= Authentication( b\"__dummy__\", b\"Doesn't Matter\" )\n    def add( self, authentication ):\n        if authentication.username == \"\":\n            raise KeyError( \"Invalid Authentication\" )\n        self[authentication.username]= authentication\n    def match( self, username, password ):\n        if username in self and username != \"\":\n            return self[username].match(password)\n        else:\n            return self[\"\"].match(b\"Something which doesn't match\")\n```", "```py\nusers = Users()\nusers.add( Authentication(b\"Aladdin\", b\"open sesame\") )\n```", "```py\n>>> al= Authentication(b\"Aladdin\", b\"open sesame\")\n>>> al\nb'Aladdin' 1000:16f56285edd9326282da8c6aff8d602a682bbf83619c7f:9b86a2ad1ae0345029ae11de402ba661ade577df876d89b8a3e182d887a9f7\n```", "```py\nimport base64\nclass Authenticate( WSGI ):\n    def __init__( self, users, target_app ):\n        self.users= users\n        self.target_app= target_app\n    def __call__( self, environ, start_response ):\n        if 'HTTP_AUTHORIZATION' in environ:\n            scheme, credentials = environ['HTTP_AUTHORIZATION'].split()\n            if scheme == \"Basic\":\n                username, password= base64.b64decode( credentials ).split(b\":\")\n                if self.users.match(username, password):\n                    environ['Authenticate.username']= username\n                    return self.target_app(environ, start_response)\n        status = '401 UNAUTHORIZED'\n        headers = [('Content-type', 'text/plain; charset=utf-8'),\n            ('WWW-Authenticate', 'Basic realm=\"roulette@localhost\"')]\n        start_response(status, headers)\n        return [ \"Not authorized\".encode('utf-8') ]\n```", "```py\nimport multiprocessing\nclass Simulation( multiprocessing.Process ):\n    def __init__( self, setup_queue, result_queue ):\n        self.setup_queue= setup_queue\n        self.result_queue= result_queue\n        super().__init__()\n    def run( self ):\n        \"\"\"Waits for a termination\"\"\"\n        print( self.__class__.__name__, \"start\" )\n        item= self.setup_queue.get()\n        while item != (None,None):\n            table, player = item\n            self.sim= Simulate( table, player, samples=1 )\n            results= list( self.sim )\n            self.result_queue.put( (table, player, results[0]) )\n            item= self.setup_queue.get()\n        print( self.__class__.__name__, \"finish\" )\n```", "```py\nclass Simulate:\n    def __init__( self, table, player, samples ):\n    def __iter__( self ): yields summaries\n```", "```py\nclass Summarize( multiprocessing.Process ):\n    def __init__( self, queue ):\n        self.queue= queue\n        super().__init__()\n    def run( self ):\n        \"\"\"Waits for a termination\"\"\"\n        print( self.__class__.__name__, \"start\" )\n        count= 0\n        item= self.queue.get()\n        while item != (None, None, None):\n            print( item )\n            count += 1\n            item= self.queue.get()\n        print( self.__class__.__name__, \"finish\", count )\n```", "```py\nsetup_q= multiprocessing.SimpleQueue()\nresults_q= multiprocessing.SimpleQueue()\n```", "```py\nresult= Summarize( results_q )\nresult.start()\n```", "```py\n    simulators= []\n    for i in range(4):\n        sim= Simulation( setup_q, results_q )\n        sim.start()\n        simulators.append( sim )\n```", "```py\ntable= Table( decks= 6, limit= 50, dealer=Hit17(),\n    split= ReSplit(), payout=(3,2) )\nfor bet in Flat, Martingale, OneThreeTwoSix:\n    player= Player( SomeStrategy, bet(), 100, 25 )\n    for sample in range(5):\n        setup_q.put( (table, player) )\n```", "```py\n    for sim in simulators:\n        setup_q.put( (None,None) )\n\n    for sim in simulators:\n        sim.join()\n```", "```py\nresults_q.put( (None,None,None) )\nresult.join()\n```", "```py\nclass Configuration:\n    some_attribute= \"default_value\"\n```", "```py\nConfiguration.some_attribute= \"user-supplied value\"\n```", "```py\nsettings= dict()\n```", "```py\nshoe= Deck( configuration.settings['decks'] )\n```", "```py\nIf bet > configuration.settings['limit']: raise InvalidBet()\n```", "```py\nimport csv\ndef simulate_blackjack():\n    dealer_rule= Hit17()\n    split_rule= NoReSplitAces()\n    table= Table( decks=6, limit=50, dealer=dealer_rule,\n        split=split_rule, payout=(3,2) )\n    player_rule= SomeStrategy()\n    betting_rule= Flat()\n    player= Player( play=player_rule, betting=betting_rule, rounds=100, stake=50 )\n\n    simulator= Simulate( table, player, 100 )\n    with open(\"p2_c13_simulation.dat\",\"w\",newline=\"\") as results:\n        wtr= csv.writer( results )\n        for gamestats in simulator:\n            wtr.writerow( gamestats )\n```", "```py\nclass Simulate:\n    def __init__( self, table, player, samples ):\n        \"\"\"Define table, player and number of samples.\"\"\"\n        self.table= table\n        self.player= player\n        self.samples= samples\n    def __iter__( self ):\n        \"\"\"Yield statistical samples.\"\"\"\n```", "```py\n        \t>>> import this\n        \t>>> this.__file__\n        \t'/Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/this.py'\n        ```", "```py\nimport os\nconfig_name= \"someapp.config\"\nconfig_locations = (\n  os.path.expanduser(\"~thisapp/\"), # or thisapp.__file__,\n  \"/etc\",\n  os.path.expanduser(\"~/\"),\n  os.path.curdir,\n)\ncandidates = ( os.path.join(dir,config_name)\n    for dir in config_locations )\nconfig_names = [ name for name in candidates if os.path.exists(name) ]\n```", "```py\nconfig_names.append(command_line_option)\n```", "```py\n; Default casino rules\n[table]\n    dealer= Hit17\n    split= NoResplitAces\n    decks= 6\n    limit= 50\n    payout= (3,2)\n\n; Player with SomeStrategy\n; Need to compare with OtherStrategy\n[player]\n    play= SomeStrategy\n    betting= Flat\n    rounds= 100\n    stake= 50\n\n[simulator]\n    samples= 100\n    outputfile= p2_c13_simulation.dat\n```", "```py\nimport configparser\nconfig = configparser.ConfigParser()\nconfig.read('blackjack.ini')\n```", "```py\ndef main_ini( config ):\n    dealer_nm= config.get('table','dealer', fallback='Hit17')\n    dealer_rule= {'Hit17': Hit17(),\n        'Stand17': Stand17()}.get(dealer_nm, Hit17())\n    split_nm= config.get('table','split', fallback='ReSplit')\n    split_rule= {'ReSplit': ReSplit(),\n        'NoReSplit': NoReSplit(),\n        'NoReSplitAces': NoReSplitAces()}.get(split_nm, ReSplit())\n    decks= config.getint('table','decks', fallback=6)\n    limit= config.getint('table','limit', fallback=100)\n    payout= eval( config.get('table','payout', fallback='(3,2)') )\n    table= Table( decks=decks, limit=limit, dealer=dealer_rule,\n        split=split_rule, payout=payout )\n```", "```py\n    player_nm= config.get('player','play', fallback='SomeStrategy')\n    player_rule= {'SomeStrategy': SomeStrategy(),\n        'AnotherStrategy': AnotherStrategy()}.get(player_nm,SomeStrategy())\n    bet_nm= config.get('player','betting', fallback='Flat')\n    betting_rule= {'Flat': Flat(),\n        'Martingale': Martingale(),\n        'OneThreeTwoSix': OneThreeTwoSix()}.get(bet_nm,Flat())\n    rounds= config.getint('player','rounds', fallback=100)\n    stake= config.getint('player','stake', fallback=50)\n    player= Player( play=player_rule, betting=betting_rule,\n        rounds=rounds, stake=stake )\n```", "```py\n    outputfile= config.get('simulator', 'outputfile', fallback='blackjack.csv')\n    samples= config.getint('simulator', 'samples', fallback=100)\n    simulator= Simulate( table, player, samples )\n    with open(outputfile,\"w\",newline=\"\") as results:\n        wtr= csv.writer( results )\n        for gamestats in simulator:\n            wtr.writerow( gamestats )\n```", "```py\n>>> import ast\n>>> ast.literal_eval('(3,2)')\n(3, 2)\n```", "```py\nfrom simulator import *\ndef simulate_SomeStrategy_Flat():\n    dealer_rule= Hit17()\n    split_rule= NoReSplitAces()\n    table= Table( decks=6, limit=50, dealer=dealer_rule,\n        split=split_rule, payout=(3,2) )\n    player_rule= SomeStrategy()\n    betting_rule= Flat()\n    player= Player( play=player_rule, betting=betting_rule, rounds=100, stake=50 )\n    simulate( table, player, \"p2_c13_simulation3.dat\", 100 )\n\nif __name__ == \"__main__\":\n    simulate_SomeStrategy_Flat()\n```", "```py\nimport csv\ndef simulate( table, player, outputfile, samples ):\n    simulator= Simulate( table, player, samples )\n    with open(outputfile,\"w\",newline=\"\") as results:\n        wtr= csv.writer( results )\n        for gamestats in simulator:\n            wtr.writerow( gamestats )\n```", "```py\nimport simulation\nclass Example4( simulation.Default_App ):\n    dealer_rule= Hit17()\n    split_rule= NoReSplitAces()\n    table= Table( decks=6, limit=50, dealer=dealer_rule,\n        split=split_rule, payout=(3,2) )\n    player_rule= SomeStrategy()\n    betting_rule= Flat()\n    player= Player( play=player_rule, betting=betting_rule, rounds=100, stake=50 )\n    outputfile= \"p2_c13_simulation4.dat\"\n    samples= 100\n```", "```py\ndef simulate_c( config ):\n    simulator= Simulate( config.table, config.player, config.samples )\n    with open(config.outputfile,\"w\",newline=\"\") as results:\n        wtr= csv.writer( results )\n        for gamestats in simulator:\n            wtr.writerow( gamestats )\n```", "```py\nif __name__ == \"__main__\":\n    simulation.simulate_c(Example4())\n```", "```py\n>>> import types\n>>> config= types.SimpleNamespace( \n...     param1= \"some value\",\n...     param2= 3.14,\n... )\n>>> config\nnamespace(param1='some value', param2=3.14)\n```", "```py\nimport types\nconfig5a= types.SimpleNamespace(\n  dealer_rule= Hit17(),\n  split_rule= NoReSplitAces(),\n  player_rule= SomeStrategy(),\n  betting_rule= Flat(),\n  outputfile= \"p2_c13_simulation5a.dat\",\n  samples= 100,\n  )\n\nconfig5a.table= Table( decks=6, limit=50, dealer=config5a.dealer_rule,\n        split=config5a.split_rule, payout=(3,2) )\nconfig5a.player= Player( play=config5a.player_rule, betting=config5a.betting_rule,\n        rounds=100, stake=50 )\n```", "```py\nimport types\nconfig5= types.SimpleNamespace()\nconfig5.dealer_rule= Hit17()\nconfig5.split_rule= NoReSplitAces()\nconfig5.table= Table( decks=6, limit=50, dealer=config5.dealer_rule,\n        split=config5.split_rule, payout=(3,2) )\nconfig5.player_rule= SomeStrategy()\nconfig5.betting_rule= Flat()\nconfig5.player= Player( play=config5.player_rule, betting=config5.betting_rule,\n        rounds=100, stake=50 )\nconfig5.outputfile= \"p2_c13_simulation5.dat\"\nconfig5.samples= 100\n```", "```py\nFrom simulation import  make_config\nconfig5= make_config()\n```", "```py\ndef make_config( ):\n    config= types.SimpleNamespace()\n    # set the default values\n    config.some_option = default_value\n    return config\n```", "```py\nconfig= make_config()\nconfig.some_option = another_value\nsimulate_c( config )\n```", "```py\n def make_config( **kw ):\n    config= types.SimpleNamespace()\n    # set the default values\n    config.some_option = kw.get(\"some_option\", default_value)\n    return config\n```", "```py\nconfig= make_config( some_option= another_value )\nsimulate_c( config )\n```", "```py\n# SomeStrategy setup\n\n# Table\ndealer_rule= Hit17()\nsplit_rule= NoReSplitAces()\ntable= Table( decks=6, limit=50, dealer=dealer_rule,\n        split=split_rule, payout=(3,2) )\n\n# Player\nplayer_rule= SomeStrategy()\nbetting_rule= Flat()\nplayer= Player( play=player_rule, betting=betting_rule,\n        rounds=100, stake=50 )\n\n# Simulation\noutputfile= \"p2_c13_simulation6.dat\"\nsamples= 100\n```", "```py\nwith open(\"config.py\") as py_file:\n    code= compile(py_file.read(), 'config.py', 'exec')\nconfig= {}\nexec( code, globals(), config  )\nsimulate( config['table'], config['player'],\n    config['outputfile'], config['samples'])\n```", "```py\n{'betting_rule': <__main__.Flat object at 0x101828510>,\n 'dealer_rule': <__main__.Hit17 object at 0x101828410>,\n 'outputfile': 'p2_c13_simulation6.dat',\n 'player': <__main__.Player object at 0x101828550>,\n 'player_rule': <__main__.SomeStrategy object at 0x1018284d0>,\n 'samples': 100,\n 'split_rule': <__main__.NoReSplitAces object at 0x101828450>,\n 'table': <__main__.Table object at 0x101828490>}\n```", "```py\nclass AttrDict( dict ):\n    def __getattr__( self, name ):\n        return self.get(name,None)\n    def __setattr__( self, name, value ):\n        self[name]= value\n    def __dir__( self ):\n        return list(self.keys())\n```", "```py\nconfig= AttrDict()\n```", "```py\nclass Configuration:\n    def __init__( self, **kw ):\n        self.__dict__.update(kw)\n```", "```py\nconfig= Configuration( **config )\n```", "```py\nfrom collections import ChainMap\nimport os\nconfig_name= \"config.py\"\nconfig_locations = (\n  os.path.expanduser(\"~thisapp/\"), # or thisapp.__file__,\n  \"/etc\",\n  os.path.expanduser(\"~/\"),\n  os.path.curdir,\n)\ncandidates = ( os.path.join(dir,config_name)\n    for dir in config_locations )\nconfig_names = ( name for name in candidates if os.path.exists(name) )\n```", "```py\nconfig = ChainMap()\nfor name in config_names:\n    config= config.new_child()\n    exec(name, globals(), config)\nsimulate( config.table, config.player, config.outputfile, config.samples)\n```", "```py\nChainMap(\n    {'player': <__main__.Player object at 0x10101a710>, 'outputfile': 'p2_c13_simulation7a.dat', 'player_rule': <__main__.AnotherStrategy object at 0x10101aa90>},\n    {'dealer_rule': <__main__.Hit17 object at 0x10102a9d0>, 'betting_rule': <__main__.Flat object at 0x10101a090>, 'split_rule': <__main__.NoReSplitAces object at 0x10102a910>, 'samples': 100, 'player_rule': <__main__.SomeStrategy object at 0x10102a8d0>, 'table': <__main__.Table object at 0x10102a890>, 'outputfile': 'p2_c13_simulation7.dat', 'player': <__main__.Player object at 0x10101a210>},\n    {})\n```", "```py\nclass AttrChainMap( ChainMap ):\n    def __getattr__( self, name ):\n        if name == \"maps\":\n            return self.__dict__['maps']\n        return super().get(name,None)\n    def __setattr__( self, name, value ):\n        if name == \"maps\":\n            self.__dict__['maps']= value\n            return\n        self[name]= value\n```", "```py\n{\n    \"table\":{\n        \"dealer\":\"Hit17\",\n        \"split\":\"NoResplitAces\",\n        \"decks\":6,\n        \"limit\":50,\n        \"payout\":[3,2]\n    },\n    \"player\":{\n        \"play\":\"SomeStrategy\",\n        \"betting\":\"Flat\",\n        \"rounds\":100,\n        \"stake\":50\n    },\n    \"simulator\":{\n        \"samples\":100,\n        \"outputfile\":\"p2_c13_simulation.dat\"\n    }\n}\n```", "```py\nimport json\nconfig= json.load( \"config.json\" )\n```", "```py\ndef main_nested_dict( config ):\n    dealer_nm= config.get('table',{}).get('dealer', 'Hit17')\n    dealer_rule= {'Hit17':Hit17(),\n        'Stand17':Stand17()}.get(dealer_nm, Hit17())\n    split_nm= config.get('table',{}).get('split', 'ReSplit')\n    split_rule= {'ReSplit':ReSplit(),\n        'NoReSplit':NoReSplit(),\n        'NoReSplitAces':NoReSplitAces()}.get(split_nm, ReSplit())\n    decks= config.get('table',{}).get('decks', 6)\n    limit= config.get('table',{}).get('limit', 100)\n **payout= config.get('table',{}).get('payout', (3,2))**\n    table= Table( decks=decks, limit=limit, dealer=dealer_rule,\n        split=split_rule, payout=payout )\n```", "```py\n{\n\"player.betting\": \"Flat\",\n\"player.play\": \"SomeStrategy\",\n\"player.rounds\": 100,\n\"player.stake\": 50,\n\"table.dealer\": \"Hit17\",\n\"table.decks\": 6,\n\"table.limit\": 50,\n\"table.payout\": [3, 2],\n\"table.split\": \"NoResplitAces\",\n\"simulator.outputfile\": \"p2_c13_simulation.dat\",\n\"simulator.samples\": 100\n}\n```", "```py\nconfig = ChainMap( *[json.load(file) for file in reversed(config_names)] )\n```", "```py\ndef main_cm( config ):\n    dealer_nm= config.get('table.dealer', 'Hit17')\n    dealer_rule= {'Hit17':Hit17(),\n        'Stand17':Stand17()}.get(dealer_nm, Hit17())\n    split_nm= config.get('table.split', 'ReSplit')\n    split_rule= {'ReSplit':ReSplit(),\n        'NoReSplit':NoReSplit(),\n        'NoReSplitAces':NoReSplitAces()}.get(split_nm, ReSplit())\n    decks= int(config.get('table.decks', 6))\n    limit= int(config.get('table.limit', 100))\n    **payout= config.get('table.payout', (3,2))**\n    table= Table( decks=decks, limit=limit, dealer=dealer_rule,\n        split=split_rule, payout=payout )\n```", "```py\nplayer:\n  betting: Flat\n  play: SomeStrategy\n  rounds: 100\n  stake: 50\ntable:\n  dealer: Hit17\n  decks: 6\n  limit: 50\n  payout: [3, 2]\n  split: NoResplitAces\nsimulator: {outputfile: p2_c13_simulation.dat, samples: 100}\n```", "```py\nimport yaml\nconfig= yaml.load( \"config.yaml\" )\n```", "```py\n# Complete Simulation Settings\ntable: !!python/object:__main__.Table\n  dealer: !!python/object:__main__.Hit17 {}\n  decks: 6\n  limit: 50\n  payout: !!python/tuple [3, 2]\n  split: !!python/object:__main__.NoReSplitAces {}\nplayer: !!python/object:__main__.Player\n  betting:  !!python/object:__main__.Flat {}\n  init_stake: 50\n  max_rounds: 100\n  play: !!python/object:__main__.SomeStrategy {}\n  rounds: 0\n  stake: 63.0\nsamples: 100\noutputfile: p2_c13_simulation9.dat\n```", "```py\nimport yaml\nif __name__ == \"__main__\":\n    config= yaml.load( yaml1_file )\n    simulate( config['table'], config['player'],\n        config['outputfile'], config['samples'] )\n```", "```py\n# Example Simulation Setup\n\nplayer.betting: Flat\nplayer.play: SomeStrategy\nplayer.rounds: 100\nplayer.stake: 50\n\ntable.dealer: Hit17\ntable.decks: 6\ntable.limit: 50\ntable.payout: (3,2)\ntable.split: NoResplitAces\n\nsimulator.outputfile = p2_c13_simulation8.dat\nsimulator.samples = 100\n```", "```py\nimport re\nclass PropertyParser:\n    def read_string( self, data ):\n        return self._parse(data)\n    def read_file( self, file ):\n        data= file.read()\n        return self.read_string( data )\n    def read( self, filename ):\n        with open(filename) as file:\n            return self.read_file( file )\n```", "```py\n    def load( self, file_or_name ):\n        if isinstance(file_or_name, io.TextIOBase):\n            self.loads(file_or_name.read())\n        else:\n            with open(filename) as file:\n                self.loads(file.read())\n    def loads( self, string ):\n        return self._parse(data)\n```", "```py\n    key_element_pat= re.compile(r\"(.*?)\\s*(?<!\\\\)[:=\\s]\\s*(.*)\")\n    def _parse( self, data ):\n        logical_lines = (line.strip()\n            for line in re.sub(r\"\\\\\\n\\s*\", \"\", data).splitlines())\n        non_empty= (line for line in logical_lines\n            if len(line) != 0)\n        non_comment= (line for line in non_empty\n            if not( line.startswith(\"#\") or line.startswith(\"!\") ) )\n        for line in non_comment:\n            ke_match= self.key_element_pat.match(line)\n            if ke_match:\n                key, element = ke_match.group(1), ke_match.group(2)\n            else:\n                key, element = line, \"\"\n            key= self._escape(key)\n            element= self._escape(element)\n            yield key, element\n```", "```py\n    def _escape( self, data ):\n        d1= re.sub( r\"\\\\([:#!=\\s])\", lambda x:x.group(1), data )\n        d2= re.sub( r\"\\\\u([0-9A-Fa-f]+)\", lambda x:chr(int(x.group(1),16)), d1 )\n        return d2\n```", "```py\n        d2= re.sub( r\"\\\\([:#!=\\s])|\\\\u([0-9A-Fa-f]+)\",\n            lambda x:x.group(1) if x.group(1) else chr(int(x.group(2),16)), data )\n```", "```py\nconfig= ChainMap(\n    *[dict( pp.read(file) )\n        for file in reversed(candidate_list)] )\n```", "```py\nimport ast\ndef main_cm_str( config ):\n    dealer_nm= config.get('table.dealer', 'Hit17')\n    dealer_rule= {'Hit17':Hit17(),\n        'Stand17':Stand17()}.get(dealer_nm, Hit17())\n    split_nm= config.get('table.split', 'ReSplit')\n    split_rule= {'ReSplit':ReSplit(),\n        'NoReSplit':NoReSplit(),\n        'NoReSplitAces':NoReSplitAces()}.get(split_nm, ReSplit())\n    decks= int(config.get('table.decks', 6))\n    limit= int(config.get('table.limit', 100))\n    **payout= ast.literal_eval(config.get('table.payout', '(3,2)'))**\n    table= Table( decks=decks, limit=limit, dealer=dealer_rule,\n        split=split_rule, payout=payout )\n```", "```py\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>player</key>\n  <dict>\n    <key>betting</key>\n    <string>Flat</string>\n    <key>play</key>\n    <string>SomeStrategy</string>\n    <key>rounds</key>\n    <integer>100</integer>\n    <key>stake</key>\n    <integer>50</integer>\n  </dict>\n  <key>simulator</key>\n  <dict>\n    <key>outputfile</key>\n    <string>p2_c13_simulation8.dat</string>\n    <key>samples</key>\n    <integer>100</integer>\n  </dict>\n  <key>table</key>\n  <dict>\n    <key>dealer</key>\n    <string>Hit17</string>\n    <key>decks</key>\n    <integer>6</integer>\n    <key>limit</key>\n    <integer>50</integer>\n    <key>payout</key>\n    <array>\n      <integer>3</integer>\n      <integer>2</integer>\n    </array>\n    <key>split</key>\n    <string>NoResplitAces</string>\n  </dict>\n</dict>\n</plist>\n```", "```py\nimport plistlib\nprint( plistlib.readPlist(plist_file) )\n```", "```py\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<simulation>\n    <table>\n        <dealer>Hit17</dealer>\n        <split>NoResplitAces</split>\n        <decks>6</decks>\n        <limit>50</limit>\n        <payout>(3,2)</payout>\n    </table>\n    <player>\n        <betting>Flat</betting>\n        <play>SomeStrategy</play>\n        <rounds>100</rounds>\n        <stake>50</stake>\n    </player>\n    <simulator>\n        <outputfile>p2_c13_simulation11.dat</outputfile>\n        <samples>100</samples>\n    </simulator>\n</simulation>\n```", "```py\nimport xml.etree.ElementTree as XML\nclass Configuration:\n    def read_file( self, file ):\n        self.config= XML.parse( file )\n    def read( self, filename ):\n        self.config= XML.parse( filename )\n    def read_string( self, text ):\n        self.config= XML.fromstring( text )\n    def get( self, qual_name, default ):\n        section, _, item = qual_name.partition(\".\")\n        query= \"./{0}/{1}\".format( section, item )\n        node= self.config.find(query)\n        if node is None: return default\n        return node.text\n    def __getitem__( self, section ):\n        query= \"./{0}\".format(section)\n        parent= self.config.find(query)\n        return dict( (item.tag, item.text) for item in parent )\n```"]