["```py\n>>> timeit.timeit( \"obj.method()\", \"\"\"\n... class SomeClass:\n...     def method(self):\n...        pass\n... obj= SomeClass()\n\"\"\")\n0.1980541350058047\n```", "```py\n>>> timeit.timeit( \"f()\",\"\"\"\n... def f():\n...     pass\n... \"\"\" )\n0.13721893899491988\n```", "```py\nimport types\nimport unittest\n\nclass TestAccess( unittest.TestCase ):\n    def test_should_add_and_get_attribute( self ):\n        self.object.new_attribute= True\n        self.assertTrue( self.object.new_attribute )\n    def test_should_fail_on_missing( self ):\n        self.assertRaises( AttributeError, lambda: self.object.undefined )\n```", "```py\nclass SomeClass:\n    pass\nclass Test_EmptyClass( TestAccess ):\n    def setUp( self ):\n       self.object= SomeClass()\nclass Test_Namespace( TestAccess ):\n    def setUp( self ):\n       self.object= types.SimpleNamespace()\nclass Test_Object( TestAccess ):\n    def setUp( self ):\n       self.object= object()\n```", "```py\ndef suite():\n    s= unittest.TestSuite()\n    s.addTests( unittest.defaultTestLoader.loadTestsFromTestCase(Test_EmptyClass) )\n    s.addTests( unittest.defaultTestLoader.loadTestsFromTestCase(Test_Namespace) )\n    s.addTests( unittest.defaultTestLoader.loadTestsFromTestCase(Test_Object) )\n    return s\n\nif __name__ == \"__main__\":\n    t= unittest.TextTestRunner()\n    t.run( suite() )\n```", "```py\ndef factorial( n ):\n    \"\"\"Compute n! recursively.\n\n    :param n: an integer >= 0\n    :returns: n!\n\n    Because of Python's stack limitation, this won't\n    compute a value larger than about 1000!.\n\n    >>> factorial(5)\n    120\n    \"\"\"\n    if n == 0: return 1\n    return n*factorial(n-1)\n```"]