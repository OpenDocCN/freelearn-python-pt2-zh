["```py\nclass DistinctError(ValueError):\n    \"\"\"Raised when duplicate value is added to a distinctdict.\"\"\"\n\nclass distinctdict(dict):\n    \"\"\"Dictionary that does not accept duplicate values.\"\"\"\n    def __setitem__(self, key, value):\n        if value in self.values():\n            if (\n                (key in self and self[key] != value) or\n                key not in self\n            ):\n                raise DistinctError(\n                    \"This value already exists for different key\"\n                )\n\n        super().__setitem__(key, value)\n```", "```py\n**>>> my = distinctdict()**\n**>>> my['key'] = 'value'**\n**>>> my['other_key'] = 'value'**\n**Traceback (most recent call last):**\n **File \"<input>\", line 1, in <module>**\n **File \"<input>\", line 10, in __setitem__**\n**DistinctError: This value already exists for different key**\n**>>> my['other_key'] = 'value2'**\n**>>> my**\n**{'key': 'value', 'other_key': 'value2'}**\n\n```", "```py\nclass Folder(list):\n    def __init__(self, name):\n        self.name = name\n\n    def dir(self, nesting=0):\n        offset = \"  \" * nesting\n        print('%s%s/' % (offset, self.name))\n\n        for element in self:\n            if hasattr(element, 'dir'):\n                element.dir(nesting + 1)\n            else:\n                print(\"%s  %s\" % (offset, element))\n```", "```py\n**>>> tree = Folder('project')**\n**>>> tree.append('README.md')**\n**>>> tree.dir()**\n**project/**\n **README.md**\n**>>> src = Folder('src')**\n**>>> src.append('script.py')**\n**>>> tree.append(src)**\n**>>> tree.dir()**\n**project/**\n **README.md**\n **src/**\n **script.py**\n\n```", "```py\n**>>> super**\n**<class 'super'>**\n\n```", "```py\nclass Mama:  # this is the old way\n    def says(self):\n        print('do your homework')\n\nclass Sister(Mama):\n    def says(self):\n        Mama.says(self)\n        print('and clean your bedroom')\n```", "```py\n**>>> Sister().says()**\n**do your homework**\n**and clean your bedroom**\n\n```", "```py\nclass Sister(Mama):def says(self):\n **super(Sister, self).says()**\n        print('and clean your bedroom')\n```", "```py\nclass Sister(Mama):def says(self):\n **super().says()**\n        print('and clean your bedroom')\n```", "```py\n**>>> anita = Sister()**\n**>>> super(anita.__class__, anita).says()**\n**do your homework**\n\n```", "```py\nclass Pizza:\n    def __init__(self, toppings):\n        self.toppings = toppings\n\n    def __repr__(self):\n        return \"Pizza with \" + \" and \".join(self.toppings)\n\n    @classmethod\n    def recommend(cls):\n        \"\"\"Recommend some pizza with arbitrary toppings,\"\"\"\n        return cls(['spam', 'ham', 'eggs'])\n\nclass VikingPizza(Pizza):\n    @classmethod\n    def recommend(cls):\n        \"\"\"Use same recommendation as super but add extra spam\"\"\"\n        recommended = super(VikingPizza).recommend()\n        recommended.toppings += ['spam'] * 5\n        return recommended\n```", "```py\nclass OldStyle1:\n    pass\n\nclass OldStyle2():\n    pass\n```", "```py\nclass NewStyleClass(object):\n    pass\n\nclass NewStyleClassToo(NewStyleClass):\n    pass\n```", "```py\nclass Base1:\n    pass\n\nclass Base2:\n    def method(self):\n        print('Base2')\n\nclass MyClass(Base1, Base2):\n    pass\n```", "```py\n**>>> MyClass().method()**\n**Base2**\n\n```", "```py\nclass CommonBase:\n    def method(self):\n        print('CommonBase')\n\nclass Base1(CommonBase):\n    pass\n\nclass Base2(CommonBase):\n    def method(self):\n        print('Base2')\n\nclass MyClass(Base1, Base2):\n    pass\n```", "```py\n**>>> MyClass().method()**\n**CommonBase**\n\n```", "```py\nclass CommonBase:\n    def method(self):\n        print('CommonBase')\n\nclass Base1(CommonBase):\n    pass\n\nclass Base2(CommonBase):\n    def method(self):\n        print('Base2')\n\nclass MyClass(Base1, Base2):\n    pass\n```", "```py\n**>>> MyClass().method()**\n**Base2**\n\n```", "```py\nL[MyClass(Base1, Base2)] =\n        MyClass + merge(L[Base1], L[Base2], Base1, Base2)\n```", "```py\ndef L(klass):\n    return [k.__name__ for k in klass.__mro__]\n\n>>> L(MyClass)\n['MyClass', 'Base1', 'Base2', 'CommonBase', 'object']\n```", "```py\nclass A:\n    def __init__(self):\n        print(\"A\", end=\" \")\n        super().__init__()\n\nclass B:\n    def __init__(self):\n        print(\"B\", end=\" \")\n        super().__init__()\n\nclass C(A, B):\n    def __init__(self):\n        print(\"C\", end=\" \")\n        A.__init__(self)\n        B.__init__(self)\n```", "```py\n**>>> print(\"MRO:\", [x.__name__ for x in C.__mro__])**\n**MRO: ['C', 'A', 'B', 'object']**\n**>>> C()**\n**C A B B <__main__.C object at 0x0000000001217C50>**\n\n```", "```py\nclass CommonBase:\n    def __init__(self):\n        print('CommonBase')\n        super().__init__()\n\nclass Base1(CommonBase):\n    def __init__(self):\n        print('Base1')\n        super().__init__()\n\nclass Base2(CommonBase):\n    def __init__(self, arg):\n        print('base2')\n        super().__init__()\n\nclass MyClass(Base1 , Base2):\n    def __init__(self, arg):\n        print('my base')\n        super().__init__(arg)\n```", "```py\n**>>> MyClass(10)**\n**my base**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n **File \"<stdin>\", line 4, in __init__**\n**TypeError: __init__() takes 1 positional argument but 2 were given**\n\n```", "```py\nclass CommonBase:\n    def __init__(self, *args, **kwargs):\n        print('CommonBase')\n        super().__init__()\n\nclass Base1(CommonBase):\n    def __init__(self, *args, **kwargs):\n        print('Base1')\n        super().__init__(*args, **kwargs)\n\nclass Base2(CommonBase):\n    def __init__(self, *args, **kwargs):\n        print('base2')\n        super().__init__(*args, **kwargs)\n\nclass MyClass(Base1 , Base2):\n    def __init__(self, arg):\n        print('my base')\n        super().__init__(arg)\n```", "```py\n**>>> _ = MyClass(10)**\n**my base**\n**Base1**\n**base2**\n**CommonBase**\n\n```", "```py\nclass MyClass:\n    __secret_value = 1\n```", "```py\n**>>> instance_of = MyClass()**\n**>>> instance_of.__secret_value**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**AttributeError: 'MyClass' object has no attribute '__secret_value'**\n**>>> dir(MyClass)**\n**['_MyClass__secret_value', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']**\n**>>> instance_of._MyClass__secret_value**\n**1**\n\n```", "```py\nclass RevealAccess(object):\n    \"\"\"A data descriptor that sets and returns values\n       normally and prints a message logging their access.\n    \"\"\"\n\n    def __init__(self, initval=None, name='var'):\n        self.val = initval\n        self.name = name\n\n    def __get__(self, obj, objtype):\n        print('Retrieving', self.name)\n        return self.val\n\n    def __set__(self, obj, val):\n        print('Updating', self.name)\n        self.val = val\n\nclass MyClass(object):\n    x = RevealAccess(10, 'var \"x\"')\n    y = 5\n```", "```py\n**>>> m = MyClass()**\n**>>> m.x**\n**Retrieving var \"x\"**\n**10**\n**>>> m.x = 20**\n**Updating var \"x\"**\n**>>> m.x**\n**Retrieving var \"x\"**\n**20**\n**>>> m.y**\n**5**\n\n```", "```py\n**>>> def function(): pass**\n**>>> hasattr(function, '__get__')**\n**True**\n**>>> hasattr(function, '__set__')**\n**False**\n\n```", "```py\n**>>> hasattr(lambda: None, '__get__')**\n**True**\n**>>> hasattr(lambda: None, '__set__')**\n**False**\n\n```", "```py\nclass InitOnAccess:\n    def __init__(self, klass, *args, **kwargs):\n        self.klass = klass\n        self.args = args\n        self.kwargs = kwargs\n        self._initialized = None\n\n    def __get__(self, instance, owner):\n        if self._initialized is None:\n            print('initialized!')\n            self._initialized = self.klass(*self.args, **self.kwargs)\n        else:\n            print('cached!')\n        return self._initialized\n```", "```py\n**>>> class MyClass:**\n**...     lazily_initialized = InitOnAccess(list, \"argument\")**\n**...**\n**>>> m = MyClass()**\n**>>> m.lazily_initialized**\n**initialized!**\n**['a', 'r', 'g', 'u', 'm', 'e', 'n', 't']**\n**>>> m.lazily_initialized**\n**cached!**\n**['a', 'r', 'g', 'u', 'm', 'e', 'n', 't']**\n\n```", "```py\nclass lazy_property(object):\n    def __init__(self, function):\n        self.fget = function\n\n    def __get__(self, obj, cls):\n        value = self.fget(obj)\n        setattr(obj, self.fget.__name__, value)\n        return value\n```", "```py\nimport OpenGL.GL as gl\nfrom OpenGL.GL import shaders\n\nclass lazy_class_attribute(object):\n    def __init__(self, function):\n        self.fget = function\n **def __get__(self, obj, cls):**\n **value = self.fget(obj or cls)**\n **# note: storing in class object not its instance**\n **#       no matter if its a class-level or**\n **#       instance-level access**\n **setattr(cls, self.fget.__name__, value)**\n **return value**\n\nclass ObjectUsingShaderProgram(object):\n    # trivial pass-through vertex shader implementation\n    VERTEX_CODE = \"\"\"\n        #version 330 core\n        layout(location = 0) in vec4 vertexPosition;\n        void main(){\n            gl_Position =  vertexPosition;\n        }\n    \"\"\"\n    # trivial fragment shader that results in everything\n    # drawn with white color\n    FRAGMENT_CODE = \"\"\"\n        #version 330 core\n        out lowp vec4 out_color;\n        void main(){\n            out_color = vec4(1, 1, 1, 1);\n        }\n    \"\"\"\n\n    @lazy_class_attribute\n    def shader_program(self):\n        print(\"compiling!\")\n        return shaders.compileProgram(\n            shaders.compileShader(\n                self.VERTEX_CODE, gl.GL_VERTEX_SHADER\n            ),\n            shaders.compileShader(\n                self.FRAGMENT_CODE, gl.GL_FRAGMENT_SHADER\n            )\n        )\n```", "```py\nclass Rectangle:\n    def __init__(self, x1, y1, x2, y2):\n        self.x1, self.y1 = x1, y1\n        self.x2, self.y2 = x2, y2\n\n    def _width_get(self):\n        return self.x2 - self.x1\n\n    def _width_set(self, value):\n        self.x2 = self.x1 + value\n\n    def _height_get(self):\n        return self.y2 - self.y1\n\n    def _height_set(self, value):\n        self.y2 = self.y1 + value\n\n    width = property(\n        _width_get, _width_set,\n        doc=\"rectangle width measured from left\"\n    )\n    height = property(\n        _height_get, _height_set,\n        doc=\"rectangle height measured from top\"\n    )\n\n    def __repr__(self):\n        return \"{}({}, {}, {}, {})\".format(\n            self.__class__.__name__,\n            self.x1, self.y1, self.x2, self.y2\n        )\n```", "```py\n**>>> rectangle = Rectangle(10, 10, 25, 34)**\n**>>> rectangle.width, rectangle.height**\n**(15, 24)**\n**>>> rectangle.width = 100**\n**>>> rectangle**\n**Rectangle(10, 10, 110, 34)**\n**>>> rectangle.height = 100**\n**>>> rectangle**\n**Rectangle(10, 10, 110, 110)**\n**help(Rectangle)**\n**Help on class Rectangle in module chapter3:**\n\n**class Rectangle(builtins.object)**\n **|  Methods defined here:**\n **|** \n **|  __init__(self, x1, y1, x2, y2)**\n **|      Initialize self.  See help(type(self)) for accurate signature.**\n **|** \n **|  __repr__(self)**\n **|      Return repr(self).**\n **|** \n **|  --------------------------------------------------------**\n **|  Data descriptors defined here:**\n **|  (...)**\n **|** \n **|  height**\n **|      rectangle height measured from top**\n **|** \n **|  width**\n **|      rectangle width measured from left**\n\n```", "```py\n**>>> class MetricRectangle(Rectangle):**\n**...     def _width_get(self):**\n**...         return \"{} meters\".format(self.x2 - self.x1)**\n**...** \n**>>> Rectangle(0, 0, 100, 100).width**\n**100**\n\n```", "```py\n**>>> class MetricRectangle(Rectangle):**\n**...     def _width_get(self):**\n**...         return \"{} meters\".format(self.x2 - self.x1)**\n**...     width = property(_width_get, Rectangle.width.fset)**\n**...** \n**>>> MetricRectangle(0, 0, 100, 100).width**\n**'100 meters'**\n\n```", "```py\nclass Rectangle:\n    def __init__(self, x1, y1, x2, y2):\n        self.x1, self.y1 = x1, y1\n        self.x2, self.y2 = x2, y2\n    @property\n    def width(self):\n        \"\"\"rectangle height measured from top\"\"\"\n        return self.x2 - self.x1\n\n    @width.setter\n    def width(self, value):\n        self.x2 = self.x1 + value\n\n    @property\n    def height(self):\n        \"\"\"rectangle height measured from top\"\"\"\n        return self.y2 - self.y1\n\n    @height.setter\n    def height(self, value):\n        self.y2 = self.y1 + value\n```", "```py\n**>>> class Frozen:**\n**...     __slots__ = ['ice', 'cream']**\n**...** \n**>>> '__dict__' in dir(Frozen)**\n**False**\n**>>> 'ice' in dir(Frozen)**\n**True**\n**>>> frozen = Frozen()**\n**>>> frozen.ice = True**\n**>>> frozen.cream = None**\n**>>> frozen.icy = True**\n**Traceback (most recent call last):**\n **File \"<input>\", line 1, in <module>**\n**AttributeError: 'Frozen' object has no attribute 'icy'**\n\n```", "```py\n**>>> class Unfrozen(Frozen):**\n**...     pass**\n**...** \n**>>> unfrozen = Unfrozen()**\n**>>> unfrozen.icy = False**\n**>>> unfrozen.icy**\n**False**\n\n```", "```py\ndef decorated_function():\n    pass\ndecorated_function = some_decorator(decorated_function)\n```", "```py\ndef short_repr(cls):\n    cls.__repr__ = lambda self: super(cls, self).__repr__()[:8]\n    return cls\n\n@short_repr\nclass ClassWithRelativelyLongName:\n    pass\n```", "```py\n**>>> ClassWithRelativelyLongName()**\n**<ClassWi**\n\n```", "```py\ndef parametrized_short_repr(max_width=8):\n    \"\"\"Parametrized decorator that shortens representation\"\"\"\n    def parametrized(cls):\n        \"\"\"Inner wrapper function that is actual decorator\"\"\"\n        class ShortlyRepresented(cls):\n            \"\"\"Subclass that provides decorated behavior\"\"\"\n            def __repr__(self):\n                return super().__repr__()[:max_width]\n\n        return ShortlyRepresented\n\n    return parametrized\n```", "```py\n@parametrized_short_repr(10)\nclass ClassWithLittleBitLongerLongName:\n    pass\n```", "```py\n**>>> ClassWithLittleBitLongerLongName().__class__**\n**<class 'ShortlyRepresented'>**\n**>>> ClassWithLittleBitLongerLongName().__doc__**\n**'Subclass that provides decorated behavior'**\n\n```", "```py\nclass SomeConcreteClass(MixinClass, SomeBaseClass):\n    pass\n```", "```py\nclass InstanceCountingClass:\n    instances_created = 0\n    def __new__(cls, *args, **kwargs):\n        print('__new__() called with:', cls, args, kwargs)\n        instance = super().__new__(cls)\n        instance.number = cls.instances_created\n        cls.instances_created += 1\n\n        return instance\n\n    def __init__(self, attribute):\n        print('__init__() called with:', self, attribute)\n        self.attribute = attribute\n```", "```py\n**>>> instance1 = InstanceCountingClass('abc')**\n**__new__() called with: <class '__main__.InstanceCountingClass'> ('abc',) {}**\n**__init__() called with: <__main__.InstanceCountingClass object at 0x101259e10> abc**\n**>>> instance2 = InstanceCountingClass('xyz')**\n**__new__() called with: <class '__main__.InstanceCountingClass'> ('xyz',) {}**\n**__init__() called with: <__main__.InstanceCountingClass object at 0x101259dd8> xyz**\n**>>> instance1.number, instance1.instances_created**\n**(0, 2)**\n**>>> instance2.number, instance2.instances_created**\n**(1, 2)**\n\n```", "```py\nclass NonZero(int):\n    def __new__(cls, value):\n        return super().__new__(cls, value) if value != 0 else None\n\n    def __init__(self, skipped_value):\n        # implementation of __init__ could be skipped in this case\n        # but it is left to present how it may be not called\n        print(\"__init__() called\")\n        super().__init__()\n```", "```py\n**>>> type(NonZero(-12))**\n**__init__() called**\n**<class '__main__.NonZero'>**\n**>>> type(NonZero(0))**\n**<class 'NoneType'>**\n**>>> NonZero(-3.123)**\n**__init__() called**\n**-3**\n\n```", "```py\ndef method(self):\n    return 1\n\nklass = type('MyClass', (object,), {'method': method})\n```", "```py\n**>>> instance = klass()**\n**>>> instance.method()**\n**1**\n\n```", "```py\nclass MyClass:\n    def method(self):\n        return 1\n```", "```py\n**>>> instance = MyClass()**\n**>>> instance.method()**\n**1**\n\n```", "```py\nclass ClassWithAMetaclass(metaclass=type):\n    pass\n```", "```py\nclass Metaclass(type):\n    def __new__(mcs, name, bases, namespace):\n        return super().__new__(mcs, name, bases, namespace)\n\n    @classmethod\n    def __prepare__(mcs, name, bases, **kwargs):\n        return super().__prepare__(name, bases, **kwargs)\n\n    def __init__(cls, name, bases, namespace, **kwargs):\n        super().__init__(name, bases, namespace)\n\n    def __call__(cls, *args, **kwargs):\n        return super().__call__(*args, **kwargs)\n```", "```py\nclass Klass(metaclass=Metaclass, extra=\"value\"):\n    pass\n```", "```py\nclass RevealingMeta(type):\n    def __new__(mcs, name, bases, namespace, **kwargs):\n        print(mcs, \"__new__ called\")\n        return super().__new__(mcs, name, bases, namespace)\n\n    @classmethod\n    def __prepare__(mcs, name, bases, **kwargs):\n        print(mcs, \"__prepare__ called\")\n        return super().__prepare__(name, bases, **kwargs)\n\n    def __init__(cls, name, bases, namespace, **kwargs):\n        print(cls, \"__init__ called\")\n        super().__init__(name, bases, namespace)\n\n    def __call__(cls, *args, **kwargs):\n        print(cls, \"__call__ called\")\n        return super().__call__(*args, **kwargs)\n```", "```py\n**>>> class RevealingClass(metaclass=RevealingMeta):**\n**...     def __new__(cls):**\n**...         print(cls, \"__new__ called\")**\n**...         return super().__new__(cls)**\n**...     def __init__(self):**\n**...         print(self, \"__init__ called\")**\n**...         super().__init__()**\n**...** \n**<class 'RevealingMeta'> __prepare__ called**\n**<class 'RevealingMeta'> __new__ called**\n**<class 'RevealingClass'> __init__ called**\n**>>> instance = RevealingClass()**\n**<class 'RevealingClass'> __call__ called**\n**<class 'RevealingClass'> __new__ called**\n**<RevealingClass object at 0x1032b9fd0> __init__ called**\n\n```", "```py\nclass ClassWithAMetaclass(metaclass=type):\n    pass\n```", "```py\nclass ClassWithAMetaclass(object):\n    __metaclass__ = type\n```", "```py\nfrom six import with_metaclass\n\nclass Meta(type):\n    pass\n\nclass Base(object):\n    pass\n\nclass MyClass(with_metaclass(Meta, Base)):\n    pass\n```", "```py\nclass SerializerMetaclass(type):\n    @classmethod\n    def _get_declared_fields(cls, bases, attrs):\n        fields = [(field_name, attrs.pop(field_name))\n                  for field_name, obj in list(attrs.items())\n                  if isinstance(obj, Field)]\n        fields.sort(key=lambda x: x[1]._creation_counter)\n\n        # If this class is subclassing another Serializer, add \n        # that Serializer's fields. \n        # Note that we loop over the bases in *reverse*. \n        # This is necessary in order to maintain the \n        # correct order of fields.\n        for base in reversed(bases):\n            if hasattr(base, '_declared_fields'):\n                fields = list(base._declared_fields.items()) + fields\n\n        return OrderedDict(fields)\n\n    def __new__(cls, name, bases, attrs):\n        attrs['_declared_fields'] = cls._get_declared_fields(\n            bases, attrs\n        )\n        return super(SerializerMetaclass, cls).__new__(\n            cls, name, bases, attrs\n        )\n```", "```py\nfrom collections import OrderedDict\n\nclass OrderedMeta(type):\n    @classmethod\n    def __prepare__(cls, name, bases, **kwargs):\n        return OrderedDict()\n\n    def __new__(mcs, name, bases, namespace):\n        namespace['order_of_attributes'] = list(namespace.keys())\n        return super().__new__(mcs, name, bases, namespace)\n\nclass ClassWithOrder(metaclass=OrderedMeta):\n    first = 8\n    second = 2\n```", "```py\n**>>> ClassWithOrderedAttributes.order_of_attributes**\n**['__module__', '__qualname__', 'first', 'second']**\n**>>> ClassWithOrderedAttributes.__dict__.keys()**\n**dict_keys(['__dict__', 'first', '__weakref__', 'second', 'order_of_attributes', '__module__', '__doc__'])**\n\n```", "```py\n**>>> from unittest.mock import Mock**\n**>>> class Nonsense(metaclass=Mock):  # pointless, but illustrative**\n**...     pass**\n**...** \n**>>> Nonsense**\n**<Mock spec='str' id='4327214664'>**\n\n```", "```py\n**>>> Nonsense()**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n **File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/mock.py\", line 917, in __call__**\n **return _mock_self._mock_call(*args, **kwargs)**\n **File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/unittest/mock.py\", line 976, in _mock_call**\n **result = next(effect)**\n**StopIteration**\n\n```", "```py\n**>>> tree = ast.parse('def hello_world(): print(\"hello world!\")')**\n**>>> tree**\n**<_ast.Module object at 0x00000000038E9588>**\n**>>> ast.dump(tree)**\n**\"Module(**\n **body=[**\n **FunctionDef(**\n **name='hello_world',** \n **args=arguments(**\n **args=[],** \n **vararg=None,** \n **kwonlyargs=[],** \n **kw_defaults=[],** \n **kwarg=None,** \n **defaults=[]**\n **),** \n **body=[**\n **Expr(**\n **value=Call(**\n **func=Name(id='print', ctx=Load()),** \n **args=[Str(s='hello world!')],** \n **keywords=[]**\n **)**\n **)**\n **],** \n **decorator_list=[],** \n **returns=None**\n **)**\n **]**\n**)\"**\n\n```", "```py\n# sample.py\nimport falcon\nimport json\n\nclass QuoteResource:\n    def on_get(self, req, resp):\n        \"\"\"Handles GET requests\"\"\"\n        quote = {\n            'quote': 'I\\'ve always been more interested in '\n                     'the future than in the past.',\n            'author': 'Grace Hopper'\n        }\n\n        resp.body = json.dumps(quote)\n\napi = falcon.API()\n**api.add_route('/quote', QuoteResource())**\n\n```", "```py\n**>>> api._router._find.__code__**\n**<code object find at 0x00000000033C29C0, file \"<string>\", line 1>**\n**>>> api.add_route('/none', None)**\n**>>> api._router._find.__code__**\n**<code object find at 0x00000000033C2810, file \"<string>\", line 1>**\n\n```", "```py\n;; hyllo.hy\n(defn hello [] (print \"hello world!\"))\n```", "```py\n**>>> import hy**\n**>>> import hyllo**\n**>>> hyllo.hello()**\n**hello world!**\n\n```", "```py\n**>>> import dis**\n**>>> dis.dis(hyllo.hello)**\n **2           0 LOAD_GLOBAL        0 (print)**\n **3 LOAD_CONST         1 ('hello world!')**\n **6 CALL_FUNCTION      1 (1 positional, 0 keyword pair)**\n **9 RETURN_VALUE**\n**>>> def hello(): print(\"hello world!\")**\n**>>> dis.dis(hello)**\n **1           0 LOAD_GLOBAL        0 (print)**\n **3 LOAD_CONST         1 ('hello world!')**\n **6 CALL_FUNCTION      1 (1 positional, 0 keyword pair)**\n **9 POP_TOP**\n **10 LOAD_CONST         0 (None)**\n **13 RETURN_VALUE**\n\n```"]