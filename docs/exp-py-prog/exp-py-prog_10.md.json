["```py\nassert is_prime(5)\nassert is_prime(7)\nassert not is_prime(8)\n```", "```py\ndef is_prime(number):\n    for element in range(2, number):\n        if number % element == 0:\n            return False\n    return True\n```", "```py\n**>>> assert not is_prime(1)**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**AssertionError**\n\n```", "```py\ndef is_prime(number):\n    if number in (0, 1):\n        return False\n\n    for element in range(2, number):\n        if number % element == 0:\n            return False\n\n    return True\n```", "```py\n**>>> assert not is_prime(-3)** \n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**AssertionError**\n\n```", "```py\ndef is_prime(number):\n    if number < 0 or number in (0, 1):\n        return False\n\n    for element in range(2, number):\n        if number % element == 0:\n            return False\n\n    return True\n```", "```py\ndef test_is_prime():\n    assert is_prime(5)\n    assert is_prime(7)\n\n    assert not is_prime(8)\n    assert not is_prime(0)\n    assert not is_prime(1)\n\n    assert not is_prime(-1)\n    assert not is_prime(-3)\n    assert not is_prime(-6)\n```", "```py\nimport unittest\n\nfrom primes import is_prime\n\nclass MyTests(unittest.TestCase):\n    def test_is_prime(self):\n        self.assertTrue(is_prime(5))\n        self.assertTrue(is_prime(7))\n\n        self.assertFalse(is_prime(8))\n        self.assertFalse(is_prime(0))\n        self.assertFalse(is_prime(1))\n\n        self.assertFalse(is_prime(-1))\n        self.assertFalse(is_prime(-3))\n        self.assertFalse(is_prime(-6))\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\n**$ python test_is_prime.py -v**\n**test_is_prime (__main__.MyTests) ... ok**\n\n**----------------------------------------------------------------------**\n**Ran 1 test in 0.000s**\n\n**OK**\n\n```", "```py\nimport unittest\n\nfrom primes import is_prime\n\nclass PrimesTests(unittest.TestCase):\n    def test_is_prime(self):\n        self.assertTrue(is_prime(5))\n        self.assertTrue(is_prime(7))\n\n        self.assertFalse(is_prime(8))\n        self.assertFalse(is_prime(0))\n        self.assertFalse(is_prime(1))\n\n        self.assertFalse(is_prime(-1))\n        self.assertFalse(is_prime(-3))\n        self.assertFalse(is_prime(-6))\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\nimport unittest\n\nfrom primes import is_prime\n\nclass PrimesTests(unittest.TestCase):\n    def test_is_prime(self):\n        self.assertTrue(is_prime(5))\n\n        self.assertTrue(is_prime(7))\n\n        self.assertFalse(is_prime(8))\n        self.assertFalse(is_prime(0))\n        self.assertFalse(is_prime(1))\n\n        self.assertFalse(is_prime(-1))\n        self.assertFalse(is_prime(-3))\n        self.assertFalse(is_prime(-6))\n\nclass OtherTests(unittest.TestCase):\n    def test_true(self):\n        self.assertTrue(True)\n\ndef test_suite():\n    \"\"\"builds the test suite.\"\"\"\n    suite = unittest.TestSuite()\n    suite.addTests(unittest.makeSuite(PrimesTests))\n    suite.addTests(unittest.makeSuite(OtherTests))\n\n    return suite\n\nif __name__ == '__main__':\n    unittest.main(defaultTest='test_suite')\n```", "```py\n**$ python test_primes.py -v**\n**test_is_prime (__main__.PrimesTests) ... ok**\n**test_true (__main__.OtherTests) ... ok**\n\n**----------------------------------------------------------------------**\n**Ran 2 tests in 0.001s**\n\n**OK**\n\n```", "```py\n**$ python -m unittest -v**\n**test_is_prime (test_primes.PrimesTests) ... ok**\n**test_true (test_primes.OtherTests) ... ok**\n\n**----------------------------------------------------------------------**\n**Ran 2 tests in 0.001s**\n\n**OK**\n\n```", "```py\nCheck addition of integers works as expected::\n\n>>> 1 + 1\n2\n```", "```py\n**>>> import doctest**\n**>>> doctest.testfile('test.rst', verbose=True)**\n**Trying:**\n **1 + 1**\n**Expecting:**\n **2**\n**ok**\n**1 items passed all tests:**\n **1 tests in test.rst**\n**1 tests in 1 items.**\n**1 passed and 0 failed.**\n**Test passed.**\n**TestResults(failed=0, attempted=1)**\n\n```", "```py\n**pip install nose**\n\n```", "```py\n**nosetests -v**\n**test_true (test_primes.OtherTests) ... ok**\n**test_is_prime (test_primes.PrimesTests) ... ok**\n**builds the test suite. ... ok**\n\n**----------------------------------------------------------------------**\n**Ran 3 tests in 0.009s**\n\n**OK**\n\n```", "```py\n**$ more test_ok.py**\n**def test_ok():**\n **print('my test')**\n**$ nosetests -v**\n**test_ok.test_ok ... ok**\n\n**-----------------------------------------------------------------**\n**Ran 1 test in 0.071s**\n\n**OK**\n\n```", "```py\ndef setup():\n    # setup code, launched for the whole module\n    ...\n\ndef teardown():\n    # teardown code, launched for the whole module\n    ... \n\ndef set_ok():\n    # setup code launched only for test_ok\n    ...\n\n@with_setup(set_ok)\ndef test_ok():\n    print('my test')\n```", "```py\nsetup(\n    #...\n    test_suite='nose.collector',\n)\n```", "```py\n**[nosetests]**\n**with-doctest=1**\n**doctest-extension=.txt**\n\n```", "```py\n**$ pip install pytest**\n\n```", "```py\ndef setup_module(module): \n    \"\"\" Setup up any state specific to the execution \n        of the given module.\n    \"\"\"\n\ndef teardown_module(module):    \n    \"\"\" Teardown any state that was previously setup\n        with a setup_module method.\n    \"\"\"\n\ndef setup_class(cls):    \n    \"\"\" Setup up any state specific to the execution\n        of the given class (which usually contains tests).\n    \"\"\"\n\ndef teardown_class(cls):    \n    \"\"\" Teardown any state that was previously setup\n        with a call to setup_class.\n    \"\"\"\n\ndef setup_method(self, method):\n    \"\"\" Setup up any state tied to the execution of the given\n        method in a class. setup_method is invoked for every\n        test method of a class.\n    \"\"\"\n\ndef teardown_method(self, method):\n    \"\"\" Teardown any state that was previously setup\n        with a setup_method call.\n    \"\"\"\n```", "```py\nimport pytest\n\nfrom primes import is_prime\n\n@pytest.fixture()\ndef prime_numbers():\n    return [3, 5, 7]\n\n@pytest.fixture()\ndef non_prime_numbers():\n    return [8, 0, 1]\n\n@pytest.fixture()\ndef negative_numbers():\n    return [-1, -3, -6]\n\ndef test_is_prime_true(prime_numbers):\n    for number in prime_numbers:\n        assert is_prime(number)\n\ndef test_is_prime_false(non_prime_numbers, negative_numbers):\n    for number in non_prime_numbers:\n        assert not is_prime(number)\n\n    for number in non_prime_numbers:\n        assert not is_prime(number)\n```", "```py\nimport pytest\n\n@pytest.mark.skipif(\n    sys.platform == 'win32',\n    reason=\"does not run on windows\"\n)\nclass TestPosixCalls:\n\n    def test_function(self):\n        \"\"\"will not be setup or run under 'win32' platform\"\"\"\n```", "```py\nimport pytest\n\nskipwindows = pytest.mark.skipif(\n    sys.platform == 'win32',\n    reason=\"does not run on windows\"\n)\n\n@skip_windows\nclass TestPosixCalls:\n\n    def test_function(self):\n        \"\"\"will not be setup or run under 'win32' platform\"\"\"\n```", "```py\nimport pytest\n\n@pytest.mark.xfail(\nsys.platform == 'win32',\n    reason=\"does not run on windows\"\n)\nclass TestPosixCalls:\n\n    def test_function(self):\n        \"\"\"it must fail under windows\"\"\"\n```", "```py\n**$ coverage run --source . `which py.test` -v**\n**===================== test session starts ======================**\n**platformdarwin -- Python 3.5.1, pytest-2.8.7, py-1.4.31, pluggy-0.3.1 -- /Users/swistakm/.envs/book/bin/python3**\n**cachedir: .cache**\n**rootdir: /Users/swistakm/dev/book/chapter10/pytest, inifile:** \n**plugins: capturelog-0.7, codecheckers-0.2, cov-2.2.1, timeout-1.0.0**\n**collected 6 items** \n\n**primes.py::pyflakes PASSED**\n**primes.py::pep8 PASSED**\n**test_primes.py::pyflakes PASSED**\n**test_primes.py::pep8 PASSED**\n**test_primes.py::test_is_prime_true PASSED**\n**test_primes.py::test_is_prime_false PASSED**\n\n**========= 6 passed, 1 pytest-warnings in 0.10 seconds ==========**\n\n```", "```py\n**$ coverage run -m unittest**\n**$ coverage run -m nose**\n**$ coverage run -m pytest**\n\n```", "```py\n**$ coverage report**\n**Name             StmtsMiss  Cover**\n**------------------------------------**\n**primes.py            7      0   100%**\n**test_primes.py      16      0   100%**\n**------------------------------------**\n**TOTAL               23      0   100%**\n\n```", "```py\n**$ coverage html**\n\n```", "```py\nimport smtplib\nimport email.message\n\ndef send(\n    sender, to,\n    subject='None',\n    body='None',\n    server='localhost'\n):\n    \"\"\"sends a message.\"\"\"\n    message = email.message.Message()\n    message['To'] = to\n    message['From'] = sender\n    message['Subject'] = subject\n    message.set_payload(body)\n\n    server = smtplib.SMTP(server)\n    try:\n        return server.sendmail(sender, to, message.as_string())\n    finally:\n        server.quit()\n```", "```py\nfrom mailer import send\n\ndef test_send():\n    res = send(\n        'john.doe@example.com', \n        'john.doe@example.com', \n        'topic',\n        'body'\n    )\n    assert res == {}\n```", "```py\n**$ py.test --tb=short**\n**========================= test session starts =========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.7, py-1.4.31, pluggy-0.3.1**\n**rootdir: /Users/swistakm/dev/book/chapter10/mailer, inifile:** \n**plugins: capturelog-0.7, codecheckers-0.2, cov-2.2.1, timeout-1.0.0**\n**collected 5 items** \n\n**mailer.py ..**\n**test_mailer.py ..F**\n\n**============================== FAILURES ===============================**\n**______________________________ test_send ______________________________**\n**test_mailer.py:10: in test_send**\n **'body'**\n**mailer.py:19: in send**\n **server = smtplib.SMTP(server)**\n**.../smtplib.py:251: in __init__**\n **(code, msg) = self.connect(host, port)**\n**.../smtplib.py:335: in connect**\n **self.sock = self._get_socket(host, port, self.timeout)**\n**.../smtplib.py:306: in _get_socket**\n **self.source_address)**\n**.../socket.py:711: in create_connection**\n **raise err**\n**.../socket.py:702: in create_connection**\n **sock.connect(sa)**\n**E   ConnectionRefusedError: [Errno 61] Connection refused**\n**======== 1 failed, 4 passed, 1 pytest-warnings in 0.17 seconds ========**\n\n```", "```py\nimport smtplib\nimport pytest\nfrom mailer import send\n\nclass FakeSMTP(object):\n    pass\n\n@pytest.yield_fixture()\ndef patch_smtplib():\n    # setup step: monkey patch smtplib\n    old_smtp = smtplib.SMTP\n    smtplib.SMTP = FakeSMTP\n\n    yield\n\n    # teardown step: bring back smtplib to \n    # its former state\n    smtplib.SMTP = old_smtp\n\ndef test_send(patch_smtplib):\n    res = send(\n        'john.doe@example.com',\n        'john.doe@example.com',\n        'topic',\n        'body'\n    )\n    assert res == {}\n```", "```py\n**$ py.test --tb=short -v**\n**======================== test session starts ========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.7, py-1.4.31, pluggy-0.3.1 -- /Users/swistakm/.envs/book/bin/python3**\n**cachedir: .cache**\n**rootdir: /Users/swistakm/dev/book/chapter10/mailer, inifile:** \n**plugins: capturelog-0.7, codecheckers-0.2, cov-2.2.1, timeout-1.0.0**\n**collected 5 items** \n\n**mailer.py::pyflakes PASSED**\n**mailer.py::pep8 PASSED**\n**test_mailer.py::pyflakes PASSED**\n**test_mailer.py::pep8 PASSED**\n**test_mailer.py::test_send FAILED**\n\n**============================= FAILURES ==============================**\n**_____________________________ test_send _____________________________**\n**test_mailer.py:29: in test_send**\n **'body'**\n**mailer.py:19: in send**\n **server = smtplib.SMTP(server)**\n**E   TypeError: object() takes no parameters**\n**======= 1 failed, 4 passed, 1 pytest-warnings in 0.09 seconds =======**\n\n```", "```py\nclass FakeSMTP(object):\n    def __init__(self, *args, **kw):\n        # arguments are not important in our example\n        pass\n\n    def quit(self):\n        pass\n\n    def sendmail(self, *args, **kw):\n        return {}\n```", "```py\nimport smtplib\nfrom mailer import send\n\nclass FakeSMTP(object):\n    def __init__(self, *args, **kw):\n        # arguments are not important in our example\n        pass\n\n    def quit(self):\n        pass\n\n    def sendmail(self, *args, **kw):\n        return {}\n\ndef test_send(monkeypatch):\n    monkeypatch.setattr(smtplib, 'SMTP', FakeSMTP)\n\n    res = send(\n        'john.doe@example.com',\n        'john.doe@example.com',\n        'topic',\n        'body'\n    )\n    assert res == {}\n```", "```py\n**pip install Mock**\n\n```", "```py\nimport smtplib\nfrom unittest.mock import MagicMock\nfrom mailer import send\n\ndef test_send(monkeypatch):\n    smtp_mock = MagicMock()\n    smtp_mock.sendmail.return_value = {}\n\n    monkeypatch.setattr(\n        smtplib, 'SMTP', MagicMock(return_value=smtp_mock)\n    )\n\n    res = send(\n        'john.doe@example.com',\n        'john.doe@example.com',\n        'topic',\n        'body'\n    )\n    assert res == {}\n```", "```py\nfrom unittest.mock import patch\nfrom mailer import send\n\ndef test_send():\n    with patch('smtplib.SMTP') as mock:\n        instance = mock.return_value\n        instance.sendmail.return_value = {}\n        res = send(\n            'john.doe@example.com',\n            'john.doe@example.com',\n            'topic',\n            'body'\n        )\n        assert res == {}\n```", "```py\n[tox]\ndownloadcache = {toxworkdir}/cache/\n\nenvlist =\n    ; py26 support was dropped in django1.7\n    py26-django{15,16},\n    ; py27 still has the widest django support\n    py27-django{15,16,17,18,19},\n    ; py32, py33 support was officially introduced in django1.5\n    ; py32, py33 support was dropped in django1.9\n    py32-django{15,16,17,18},\n    py33-django{15,16,17,18},\n    ; py34 support was officially introduced in django1.7\n    py34-django{17,18,19}\n    ; py35 support was officially introduced in django1.8\n    py35-django{18,19}\n\n[testenv]\nusedevelop = True\ndeps =\n    django{15,16}: south\n    django{15,16}: django-guardian<1.4.0\n    django15: django==1.5.12\n    django16: django==1.6.11\n    django17: django==1.7.11\n    django18: django==1.8.7\n    django19: django==1.9\n    coverage: django==1.9\n    coverage: coverage==4.0.3\n    coverage: coveralls==1.1\n\nbasepython =\n    py35: python3.5\n    py34: python3.4\n    py33: python3.3\n    py32: python3.2\n    py27: python2.7\n    py26: python2.6\n\ncommands={envpython} userena/runtests/runtests.py userenaumessages {posargs}\n\n[testenv:coverage]\nbasepython = python2.7\npassenv = TRAVIS TRAVIS_JOB_ID TRAVIS_BRANCH\ncommands=\n    coverage run --source=userena userena/runtests/runtests.py userenaumessages {posargs}\n    coveralls\n```", "```py\nlanguage: python\n\ninstall: pip install tox --use-mirrors\nenv:\n  matrix:\n    # consul 0.4.1\n    - TOX_ENV=py27     CONSUL_VERSION=0.4.1\n    - TOX_ENV=py33     CONSUL_VERSION=0.4.1\n    - TOX_ENV=py34     CONSUL_VERSION=0.4.1\n    - TOX_ENV=py35     CONSUL_VERSION=0.4.1\n\n    # consul 0.5.2\n    - TOX_ENV=py27     CONSUL_VERSION=0.5.2\n    - TOX_ENV=py33     CONSUL_VERSION=0.5.2\n    - TOX_ENV=py34     CONSUL_VERSION=0.5.2\n    - TOX_ENV=py35     CONSUL_VERSION=0.5.2\n\n    # consul 0.6.4\n    - TOX_ENV=py27     CONSUL_VERSION=0.6.4\n    - TOX_ENV=py33     CONSUL_VERSION=0.6.4\n    - TOX_ENV=py34     CONSUL_VERSION=0.6.4\n    - TOX_ENV=py35     CONSUL_VERSION=0.6.4\n\n    # coverage and style checks\n    - TOX_ENV=pep8     CONSUL_VERSION=0.4.1\n    - TOX_ENV=coverage CONSUL_VERSION=0.4.1\n\nbefore_script:\n  - wget https://releases.hashicorp.com/consul/${CONSUL_VERSION}/consul_${CONSUL_VERSION}_linux_amd64.zip\n  - unzip consul_${CONSUL_VERSION}_linux_amd64.zip\n  - start-stop-daemon --start --background --exec `pwd`/consul -- agent -server -data-dir /tmp/consul -bootstrap-expect=1\n\nscript:\n  - tox -e $TOX_ENV\n```", "```py\n=================\natomisator.parser\n=================\n\nThe parser knows how to return a feed content, with\nthe `parse` function, available as a top-level function::\n\n>>> from atomisator.parser import Parser\n\nThis function takes the feed url and returns an iterator\nover its content. A second parameter can specify a maximum\nnumber of entries to return. If not given, it is fixed to 10::\n\n>>> import os\n>>> res = Parser()(os.path.join(test_dir, 'sample.xml'))\n>>> res\n<itertools.imap ...>\n\nEach item is a dictionary that contain the entry::\n\n>>> entry = res.next()\n>>> entry['title']\nu'CSSEdit 2.0 Released'\n\nThe keys available are:\n\n>>> keys = sorted(entry.keys())\n>>> list(keys)\n    ['id', 'link', 'links', 'summary', 'summary_detail', 'tags', \n     'title', 'title_detail']\n\nDates are changed into datetime::\n\n>>> type(entry['date'])\n>>>\n```"]