["```py\n# -*- coding: utf-8 -*-\nimport os\n\nfrom fabric.api import *  # noqa\nfrom fabric.contrib.files import exists\n\n# Let's assume we have private package repository created\n# using 'devpi' project\nPYPI_URL = 'http://devpi.webxample.example.com'\n\n# This is arbitrary location for storing installed releases.\n# Each release is a separate virtual environment directory\n# which is named after project version. There is also a\n# symbolic link 'current' that points to recently deployed\n# version. This symlink is an actual path that will be used\n# for configuring the process supervision tool e.g.:\n# .\n# \u251c\u2500\u2500 0.0.1\n# \u251c\u2500\u2500 0.0.2\n# \u251c\u2500\u2500 0.0.3\n# \u251c\u2500\u2500 0.1.0\n# \u2514\u2500\u2500 current -> 0.1.0/\n\nREMOTE_PROJECT_LOCATION = \"/var/projects/webxample\"\n\nenv.project_location = REMOTE_PROJECT_LOCATION\n\n# roledefs map out environment types (staging/production)\nenv.roledefs = {\n    'staging': [\n        'staging.webxample.example.com',\n    ],\n    'production': [\n        'prod1.webxample.example.com',\n        'prod2.webxample.example.com',\n    ],\n}\n\ndef prepare_release():\n    \"\"\" Prepare a new release by creating source distribution and uploading to out private package repository\n    \"\"\"\n    local('python setup.py build sdist upload -r {}'.format(\n        PYPI_URL\n    ))\n\ndef get_version():\n    \"\"\" Get current project version from setuptools \"\"\"\n    return local(\n        'python setup.py --version', capture=True\n    ).stdout.strip()\n\ndef switch_versions(version):\n    \"\"\" Switch versions by replacing symlinks atomically \"\"\"\n    new_version_path = os.path.join(REMOTE_PROJECT_LOCATION, version)\n    temporary = os.path.join(REMOTE_PROJECT_LOCATION, 'next')\n    desired = os.path.join(REMOTE_PROJECT_LOCATION, 'current')\n\n    # force symlink (-f) since probably there is a one already\n    run(\n        \"ln -fsT {target} {symlink}\"\n        \"\".format(target=new_version_path, symlink=temporary)\n    )\n    # mv -T ensures atomicity of this operation\n    run(\"mv -Tf {source} {destination}\"\n        \"\".format(source=temporary, destination=desired))\n\n@task\ndef uptime():\n    \"\"\"\n    Run uptime command on remote host - for testing connection.\n    \"\"\"\n    run(\"uptime\")\n\n@task\ndef deploy():\n    \"\"\" Deploy application with packaging in mind \"\"\"\n    version = get_version()\n    pip_path = os.path.join(\n        REMOTE_PROJECT_LOCATION, version, 'bin', 'pip'\n    )\n\n    prepare_release()\n\n    if not exists(REMOTE_PROJECT_LOCATION):\n        # it may not exist for initial deployment on fresh host\n        run(\"mkdir -p {}\".format(REMOTE_PROJECT_LOCATION))\n\n    with cd(REMOTE_PROJECT_LOCATION):\n        # create new virtual environment using venv\n        run('python3 -m venv {}'.format(version))\n\n        run(\"{} install webxample=={} --index-url {}\".format(\n            pip_path, version, PYPI_URL\n        ))\n\n    switch_versions(version)\n    # let's assume that Circus is our process supervision tool\n    # of choice.\n    run('circusctl restart webxample')\n```", "```py\n**$ fab --list**\n**Available commands:**\n\n **deploy  Deploy application with packaging in mind**\n **uptime  Run uptime command on remote host - for testing connection.**\n\n```", "```py\n**$ fab \u2013R production deploy**\n\n```", "```py\n**$ tree . -I __pycache__ --dirsfirst**\n**.**\n**\u251c\u2500\u2500 webxample**\n**\u2502   \u251c\u2500\u2500 conf**\n**\u2502   \u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u2502   \u251c\u2500\u2500 settings.py**\n**\u2502   \u2502   \u251c\u2500\u2500 urls.py**\n**\u2502   \u2502   \u2514\u2500\u2500 wsgi.py**\n**\u2502   \u251c\u2500\u2500 locale**\n**\u2502   \u2502   \u251c\u2500\u2500 de**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 LC_MESSAGES**\n**\u2502   \u2502   \u2502       \u2514\u2500\u2500 django.po**\n**\u2502   \u2502   \u251c\u2500\u2500 en**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 LC_MESSAGES**\n**\u2502   \u2502   \u2502       \u2514\u2500\u2500 django.po**\n**\u2502   \u2502   \u2514\u2500\u2500 pl**\n**\u2502   \u2502       \u2514\u2500\u2500 LC_MESSAGES**\n**\u2502   \u2502           \u2514\u2500\u2500 django.po**\n**\u2502   \u251c\u2500\u2500 myapp**\n**\u2502   \u2502   \u251c\u2500\u2500 migrations**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 __init__.py**\n**\u2502   \u2502   \u251c\u2500\u2500 static**\n**\u2502   \u2502   \u2502   \u251c\u2500\u2500 js**\n**\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 myapp.js**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 sass**\n**\u2502   \u2502   \u2502       \u2514\u2500\u2500 myapp.scss**\n**\u2502   \u2502   \u251c\u2500\u2500 templates**\n**\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.html**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 some_view.html**\n**\u2502   \u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u2502   \u251c\u2500\u2500 admin.py**\n**\u2502   \u2502   \u251c\u2500\u2500 apps.py**\n**\u2502   \u2502   \u251c\u2500\u2500 models.py**\n**\u2502   \u2502   \u251c\u2500\u2500 tests.py**\n**\u2502   \u2502   \u2514\u2500\u2500 views.py**\n**\u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u2514\u2500\u2500 manage.py**\n**\u251c\u2500\u2500 MANIFEST.in**\n**\u251c\u2500\u2500 README.md**\n**\u2514\u2500\u2500 setup.py**\n\n**15 directories, 23 files**\n\n```", "```py\nfrom setuptools import setup\n\nsetup(\n    name='webxample',\n    setup_requires=['libsass >= 0.6.0'],\n    sass_manifests={\n        'webxample.myapp': ('static/sass', 'static/css')\n    },\n)\n```", "```py\nimport os\n\nfrom setuptools import setup\nfrom setuptools import find_packages\nfrom distutils.cmd import Command\nfrom distutils.command.build import build as _build\n\ntry:\n    from django.core.management.commands.compilemessages \\\n        import Command as CompileCommand\nexcept ImportError:\n    # note: during installation django may not be available\n    CompileCommand = None\n\n# this environment is requires\nos.environ.setdefault(\n    \"DJANGO_SETTINGS_MODULE\", \"webxample.conf.settings\"\n)\n\nclass build_messages(Command):\n    \"\"\" Custom command for building gettext messages in Django\n    \"\"\"\n    description = \"\"\"compile gettext messages\"\"\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n\n        pass\n\n    def run(self):\n        if CompileCommand:\n            CompileCommand().handle(\n                verbosity=2, locales=[], exclude=[]\n            )\n        else:\n            raise RuntimeError(\"could not build translations\")\n\nclass build(_build):\n    \"\"\" Overriden build command that adds additional build steps\n    \"\"\"\n    sub_commands = [\n        ('build_messages', None),\n        ('build_sass', None),\n    ] + _build.sub_commands\n\nsetup(\n    name='webxample',\n    setup_requires=[\n        'libsass >= 0.6.0',\n        'django >= 1.9.2',\n    ],\n    install_requires=[\n        'django >= 1.9.2',\n        'gunicorn == 19.4.5',\n        'djangorestframework == 3.3.2',\n        'django-allauth == 0.24.1',\n    ],\n    packages=find_packages('.'),\n    sass_manifests={\n        'webxample.myapp': ('static/sass', 'static/css')\n    },\n    cmdclass={\n        'build_messages': build_messages,\n        'build': build,\n    },\n    entry_points={\n        'console_scripts': {\n            'webxample = webxample.manage:main',\n        }\n    }\n)\n```", "```py\n**$ python setup.py build sdist**\n\n```", "```py\n**$ tar -xvzf dist/webxample-0.0.0.tar.gz 2> /dev/null**\n**$ tree webxample-0.0.0/ -I __pycache__ --dirsfirst**\n**webxample-0.0.0/**\n**\u251c\u2500\u2500 webxample**\n**\u2502   \u251c\u2500\u2500 conf**\n**\u2502   \u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u2502   \u251c\u2500\u2500 settings.py**\n**\u2502   \u2502   \u251c\u2500\u2500 urls.py**\n**\u2502   \u2502   \u2514\u2500\u2500 wsgi.py**\n**\u2502   \u251c\u2500\u2500 locale**\n**\u2502   \u2502   \u251c\u2500\u2500 de**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 LC_MESSAGES**\n**\u2502   \u2502   \u2502       \u251c\u2500\u2500 django.mo**\n**\u2502   \u2502   \u2502       \u2514\u2500\u2500 django.po**\n**\u2502   \u2502   \u251c\u2500\u2500 en**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 LC_MESSAGES**\n**\u2502   \u2502   \u2502       \u251c\u2500\u2500 django.mo**\n**\u2502   \u2502   \u2502       \u2514\u2500\u2500 django.po**\n**\u2502   \u2502   \u2514\u2500\u2500 pl**\n**\u2502   \u2502       \u2514\u2500\u2500 LC_MESSAGES**\n**\u2502   \u2502           \u251c\u2500\u2500 django.mo**\n**\u2502   \u2502           \u2514\u2500\u2500 django.po**\n**\u2502   \u251c\u2500\u2500 myapp**\n**\u2502   \u2502   \u251c\u2500\u2500 migrations**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 __init__.py**\n**\u2502   \u2502   \u251c\u2500\u2500 static**\n**\u2502   \u2502   \u2502   \u251c\u2500\u2500 css**\n**\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 myapp.scss.css**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 js**\n**\u2502   \u2502   \u2502       \u2514\u2500\u2500 myapp.js**\n**\u2502   \u2502   \u251c\u2500\u2500 templates**\n**\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.html**\n**\u2502   \u2502   \u2502   \u2514\u2500\u2500 some_view.html**\n**\u2502   \u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u2502   \u251c\u2500\u2500 admin.py**\n**\u2502   \u2502   \u251c\u2500\u2500 apps.py**\n**\u2502   \u2502   \u251c\u2500\u2500 models.py**\n**\u2502   \u2502   \u251c\u2500\u2500 tests.py**\n**\u2502   \u2502   \u2514\u2500\u2500 views.py**\n**\u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u2514\u2500\u2500 manage.py**\n**\u251c\u2500\u2500 webxample.egg-info**\n**\u2502   \u251c\u2500\u2500 PKG-INFO**\n**\u2502   \u251c\u2500\u2500 SOURCES.txt**\n**\u2502   \u251c\u2500\u2500 dependency_links.txt**\n**\u2502   \u251c\u2500\u2500 requires.txt**\n**\u2502   \u2514\u2500\u2500 top_level.txt**\n**\u251c\u2500\u2500 MANIFEST.in**\n**\u251c\u2500\u2500 PKG-INFO**\n**\u251c\u2500\u2500 README.md**\n**\u251c\u2500\u2500 setup.cfg**\n**\u2514\u2500\u2500 setup.py**\n\n**16 directories, 33 files**\n\n```", "```py\n**$ webxample migrate**\n**$ webxample collectstatic**\n**$ webxample runserver**\n\n```", "```py\n#!/usr/bin/env python3\nimport os\nimport sys\n\ndef main():\n    os.environ.setdefault(\n        \"DJANGO_SETTINGS_MODULE\", \"webxample.conf.settings\"\n    )\n\n    from django.core.management import execute_from_command_line\n\n    execute_from_command_line(sys.argv)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n[watcher:webxample]\ncmd = /path/to/venv/dir/bin/gunicorn webxample.conf.wsgi:application\nnumprocesses = 1\n```", "```py\n**$ circusd circus.ini**\n**2016-02-15 08:34:34 circus[1776] [INFO] Starting master on pid 1776**\n**2016-02-15 08:34:34 circus[1776] [INFO] Arbiter now waiting for commands**\n**2016-02-15 08:34:34 circus[1776] [INFO] webxample started**\n**[2016-02-15 08:34:34 +0100] [1778] [INFO] Starting gunicorn 19.4.5**\n**[2016-02-15 08:34:34 +0100] [1778] [INFO] Listening at: http://127.0.0.1:8000 (1778)**\n**[2016-02-15 08:34:34 +0100] [1778] [INFO] Using worker: sync**\n**[2016-02-15 08:34:34 +0100] [1781] [INFO] Booting worker with pid: 1781**\n\n```", "```py\n**$ circusctl**\n**circusctl 0.13.0**\n**webxample: active**\n**(circusctl) stop webxample**\n**ok**\n**(circusctl) status**\n**webxample: stopped**\n**(circusctl) start webxample**\n**ok**\n**(circusctl) status**\n**webxample: active**\n\n```", "```py\n**kill -HUP <gunicorn-master-process-pid>**\n\n```", "```py\n'{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}{PROJECT_ID}'\n```", "```py\nfrom raven import Client\n\nclient = Client('https://<key>:<secret>@app.getsentry.com/<project>')\n\ntry:\n    1 / 0\nexcept ZeroDivisionError:\n    client.captureException()\n```", "```py\nfrom raven import Client\nfrom raven.middleware import Sentry\n\n# note: application is some WSGI application object defined earlier\napplication = Sentry(\n    application,\n    Client('https://<key>:<secret>@app.getsentry.com/<project>')\n)\n```", "```py\nfrom raven.handlers.logging import SentryHandler\nfrom raven.conf import setup_logging\n\nclient = Client('https://<key>:<secret>@app.getsentry.com/<project>')\nhandler = SentryHandler(client)\nsetup_logging(handler)\n```", "```py\n**>>> import statsd**\n**>>> c = statsd.StatsClient('localhost', 8125)**\n**>>> c.incr('foo')  # Increment the 'foo' counter.**\n**>>> c.timing('stats.timed', 320)  # Record a 320ms 'stats.timed'.**\n\n```"]