["```py\ndef optimize():\n    \"\"\"Recommended optimization\"\"\"\n    assert got_architecture_right(), \"fix architecture\"\n    assert made_code_work(bugs=None), \"fix bugs\"\n    while code_is_too_slow():\n        wbn = find_worst_bottleneck(just_guess=False,\n                                    profile=True)\n        is_faster = try_to_optimize(wbn,\n                                    run_unit_tests=True,\n                                    new_bugs=None)\n        if not is_faster:\n            undo_last_code_change()\n\n# By Stefan Schwarzer, Europython 2006\n```", "```py\n**>>> def function(n):**\n**...     for i in range(n):**\n**...         print(i)**\n**...**\n\n```", "```py\n**>>> def function(n):**\n**...     if some_test:**\n**...         print('something')**\n**...     else:**\n**...         for i in range(n):**\n**...             print(i)**\n**...** \n\n```", "```py\ndef index(a, x):\n    'Locate the leftmost value exactly equal to x'\n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    raise ValueError\n```", "```py\n**>>> sequence = ['a', 'a', 'b', 'c', 'c', 'd']**\n**>>> result = []**\n**>>> for element in sequence:**\n**...     if element not in result:**\n**...         result.append(element)**\n**...** \n**>>> result**\n**['a', 'b', 'c', 'd']**\n\n```", "```py\n**>>> sequence = ['a', 'a', 'b', 'c', 'c', 'd']**\n**>>> result = set(sequence)**\n**>>> result**\n**set(['a', 'c', 'b', 'd'])**\n\n```", "```py\n**$ python3 -m timeit \\**\n**> -s 'sequence=list(range(10))' \\**\n**> 'sequence.append(0); sequence.pop();'**\n**1000000 loops, best of 3: 0.168 usec per loop**\n\n```", "```py\n**$ python3 -m timeit \\** \n**> -s 'from collections import deque; sequence=deque(range(10))' \\**\n**> 'sequence.append(0); sequence.pop();'**\n**1000000 loops, best of 3: 0.168 usec per loop**\n\n```", "```py\n**$ python3 -m timeit \\**\n**> -s 'sequence=list(range(10))' \\**\n**> 'sequence.insert(0, 0); sequence.pop(0)'**\n\n**1000000 loops, best of 3: 0.392 usec per loop**\n**$ python3 -m timeit \\**\n**> -s 'from collections import deque; sequence=deque(range(10))' \\**\n**> 'sequence.appendleft(0); sequence.popleft()'**\n**10000000 loops, best of 3: 0.172 usec per loop**\n\n```", "```py\n**$ python3 -m timeit \\**\n**> -s 'sequence=list(range(10000))' \\**\n**> 'sequence.insert(0, 0); sequence.pop(0)'**\n**100000 loops, best of 3: 14 usec per loop**\n**$ python3 -m timeit \\**\n**> -s 'from collections import deque; sequence=deque(range(10000))' \\** \n**> 'sequence.appendleft(0); sequence.popleft()'**\n**10000000 loops, best of 3: 0.168 usec per loop**\n\n```", "```py\n**$ python3 -m timeit \\**\n**> -s 'd = {}'** \n**> 'd.setdefault(\"x\", None)'**\n**10000000 loops, best of 3: 0.153 usec per loop**\n**$ python3 -m timeit \\** \n**> -s 'from collections import defaultdict; d=defaultdict(lambda: None)' \\**\n**> 'd[\"x\"]'**\n**10000000 loops, best of 3: 0.0447 usec per loop**\n\n```", "```py\n**>>> s = 'mississippi'**\n**>>> d = defaultdict(int)**\n**>>> for k in s:**\n**...     d[k] += 1**\n**...**\n**>>> list(d.items())**\n**[('i', 4), ('p', 2), ('s', 4), ('m', 1)]**\n\n```", "```py\n**>>> from collections import namedtuple** \n**>>> Customer = namedtuple(**\n**...     'Customer',**\n**...     'firstname lastname'**\n**... )**\n**>>> c = Customer('Tarek', 'Ziad\u00e9')**\n**>>> c.firstname**\n**'Tarek'**\n\n```", "```py\ndef fibonacci(n):\n    \"\"\" Return nth Fibonacci sequence number computed recursively\n    \"\"\"\n    if n < 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n```", "```py\nreturn fibonacci(n - 1) + fibonacci(n - 2)\n```", "```py\ndef memoize(function):\n    \"\"\" Memoize the call to single-argument function\n    \"\"\"\n    call_cache = {}\n\n    def memoized(argument):\n        try:\n            return call_cache[argument]\n        except KeyError:\n            return call_cache.setdefault(argument, function(argument))\n\n    return memoized\n\n@memoize\ndef fibonacci(n):\n    \"\"\" Return nth Fibonacci sequence number computed recursively\n    \"\"\"\n    if n < 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n```", "```py\n@lru_cache(None)\ndef fibonacci(n):\n    \"\"\" Return nth Fibonacci sequence number computed recursively\n    \"\"\"\n    if n < 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n```", "```py\nfrom pymemcache.client.base import Client\n\n# setup Memcached client running under 11211 port on localhost\nclient = Client(('localhost', 11211))\n\n# cache some value under some key and expire it after 10 seconds\nclient.set('some_key', 'some_value', expire=10)\n\n# retrieve value for the same key\nresult = client.get('some_key')\n```", "```py\nimport json\nfrom pymemcache.client.base import Client\n\ndef json_serializer(key, value):\n     if type(value) == str:\n         return value, 1\n     return json.dumps(value), 2\n\ndef json_deserializer(key, value, flags):\n    if flags == 1:\n        return value\n    if flags == 2:\n        return json.loads(value)\n    raise Exception(\"Unknown serialization format\")\n\nclient = Client(('localhost', 11211), serializer=json_serializer,\n                deserializer=json_deserializer)\nclient.set('key', {'a':'b', 'c':'d'})\nresult = client.get('key')\n```"]