["```py\nprint(\"hello world\")\nprint \"goodbye python2\"\n```", "```py\n**$ python3 script.py**\n **File \"script.py\", line 2**\n **print \"goodbye python2\"**\n **^**\n**SyntaxError: Missing parentheses in call to 'print'**\n\n```", "```py\nfrom __future__ import <feature>\n```", "```py\n**Python 2.7.10 (default, May 23 2015, 09:40:32) [MSC v.1500 32 bit (Intel)] on win32**\n**Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.**\n**>>> type(\"foo\")  # old literals**\n**<type 'str'>**\n**>>> from __future__ import unicode_literals**\n**>>> type(\"foo\")  # now is unicode**\n**<type 'unicode'>**\n\n```", "```py\n# -*- coding: utf-8 -*-\nimport sys\n\nif sys.version_info < (3, 0, 0):\n    import urlparse  # noqa\n\n    def is_string(s):\n        return isinstance(s, basestring)\n\nelse:\n    from urllib import parse as urlparse  # noqa\n\n    def is_string(s):\n        return isinstance(s, str)\n```", "```py\n**pip install <package-name>**\n\n```", "```py\n**$ pip show pip**\n**---**\n**Metadata-Version: 2.0**\n**Name: pip**\n**Version: 7.1.2**\n**Summary: The PyPA recommended tool for installing Python packages.**\n**Home-page: https://pip.pypa.io/**\n**Author: The pip developers**\n**Author-email: python-virtualenv@groups.google.com**\n**License: MIT**\n**Location: /usr/lib/python2.7/site-packages**\n**Requires:**\n\n**$ pip install 'pip<7.0.0'**\n**Collecting pip<7.0.0**\n **Downloading pip-6.1.1-py2.py3-none-any.whl (1.1MB)**\n **100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.1MB 242kB/s**\n**Installing collected packages: pip**\n **Found existing installation: pip 7.1.2**\n **Uninstalling pip-7.1.2:**\n **Successfully uninstalled pip-7.1.2**\n**Successfully installed pip-6.1.1**\n**You are using pip version 6.1.1, however version 7.1.2 is available.**\n**You should consider upgrading via the 'pip install --upgrade pip' command.**\n\n**$ pip install --upgrade pip**\n**You are using pip version 6.1.1, however version 7.1.2 is available.**\n**You should consider upgrading via the 'pip install --upgrade pip' command.**\n**Collecting pip**\n **Using cached pip-7.1.2-py2.py3-none-any.whl**\n**Installing collected packages: pip**\n **Found existing installation: pip 6.1.1**\n **Uninstalling pip-6.1.1:**\n **Successfully uninstalled pip-6.1.1**\n**Successfully installed pip-7.1.2**\n\n```", "```py\n**$ python -m ensurepip**\n**Ignoring indexes: https://pypi.python.org/simple**\n**Requirement already satisfied (use --upgrade to upgrade): setuptools in /usr/lib/python2.7/site-packages**\n**Collecting pip**\n**Installing collected packages: pip**\n**Successfully installed pip-6.1.1**\n\n```", "```py\n**sudo pip install <package-name>**\n\n```", "```py\n**virtualenv ENV**\n\n```", "```py\n**source ENV/bin/activate**\n\n```", "```py\n**$ virtualenv example**\n**New python executable in example/bin/python**\n**Installing setuptools, pip, wheel...done.**\n**$ source example/bin/activate**\n**(example)$ deactivate**\n**$** \n\n```", "```py\n# lines followed by hash (#) are treated as a comments\n\n# strict version names are best for reproducibility\neventlet==0.17.4\ngraceful==0.1.1\n\n# for projects that are well tested with different\n# dependency versions the relative version specifiers \n# are acceptable too\nfalcon>=0.3.0,<0.5.0\n\n# packages without versions should be avoided unless\n# latest release is always required/desired\npytz\n```", "```py\n**pip install -r requirements.txt**\n\n```", "```py\n**pyvenv ENV**\n\n```", "```py\n**vagrant init**\n\n```", "```py\n**vagrant up**\n\n```", "```py\n**vagrant ssh**\n\n```", "```py\n# python startup file\nimport readline\nimport rlcompleter\nimport atexit\nimport os\n\n# tab completion\nreadline.parse_and_bind('tab: complete')\n\n# history file\nhistfile = os.path.join(os.environ['HOME'], '.pythonhistory')\ntry:\n    readline.read_history_file(histfile)\n\nexcept IOError:\n    pass\n\natexit.register(readline.write_history_file, histfile)\ndel os, histfile, readline, rlcompleter\n```", "```py\n**export PYTHONSTARTUP=~/.pythonstartup**\n\n```", "```py\n**python -m pdb script.py**\n\n```", "```py\n**import pdb; pdb.set_trace()**\n\n```"]