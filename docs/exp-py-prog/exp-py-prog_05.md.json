["```py\nfrom setuptools import setup\n\nsetup(\n    name='mypackage',\n)\n```", "```py\n**$ python3 setup.py --help-commands**\n**Standard commands:**\n **build             build everything needed to install**\n **clean             clean up temporary files from 'build' command**\n **install           install everything from build directory**\n **sdist             create a source distribution (tarball, zip file)**\n **register          register the distribution with the PyP**\n **bdist             create a built (binary) distribution**\n **check             perform some checks on the package**\n **upload            upload binary package to PyPI**\n\n**Extra commands:**\n **develop           install package in 'development mode'**\n **alias             define a shortcut to invoke one or more commands**\n **test              run unit tests after in-place build**\n **bdist_wheel       create a wheel distribution**\n\n**usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]**\n **or: setup.py --help [cmd1 cmd2 ...]**\n **or: setup.py --help-commands**\n **or: setup.py cmd --help**\n\n```", "```py\n[global]\nquiet=1\n\n[sdist]\nformats=zip,tar\n\n[bdist_wheel]\nuniversal=1\n```", "```py\ninclude HISTORY.txt\ninclude README.txt\ninclude CHANGES.txt\ninclude CONTRIBUTORS.txt\ninclude LICENSE\nrecursive-include *.txt *.py\n```", "```py\nfrom setuptools import setup\n\nsetup(\n    name=\"solrq\",\n    # (...)\n\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Internet :: WWW/HTTP :: Indexing/Search',\n    ],\n)\n```", "```py\nfrom setuptools import setup\n\nsetup(\n    name=\"myproject\",\n    version=\"0.0.1\",\n    description=\"mypackage project short description\",\n    long_description=\"\"\"\n        Longer description of mypackage project\n        possibly with some documentation and/or\n        usage examples\n    \"\"\",\n    install_requires=[\n        'dependency1',\n        'dependency2',\n        'etc',\n    ]\n)\n```", "```py\n# version as tuple for simple comparisons\nVERSION = (0, 1, 1)\n# string created from tuple to avoid inconsistency\n__version__ = \".\".join([str(x) for x in VERSION])\n```", "```py\nfrom setuptools import setup\nimport os\n\ndef get_version(version_tuple):\n    # additional handling of a,b,rc tags, this can\n    # be simpler depending on your versioning scheme\n    if not isinstance(version_tuple[-1], int):\n        return '.'.join(\n            map(str, version_tuple[:-1])\n        ) + version_tuple[-1]\n\n    return '.'.join(map(str, version_tuple))\n\n# path to the packages __init__ module in project\n# source tree\ninit = os.path.join(\n    os.path.dirname(__file__), 'src', 'some_package', '__init__.py'\n)\n\nversion_line = list(\n    filter(lambda l: l.startswith('VERSION'), open(init))\n)[0]\n\n# VERSION is a tuple so we need to eval its line of code.\n# We could simply import it from the package but we\n# cannot be sure that this package is importable before\n# finishing its installation\nVERSION = get_version(eval(version_line.split('=')[-1]))\n\nsetup(\n    name='some-package',\n    version=VERSION,\n    # ...\n)\n```", "```py\ntry:\n    from pypandoc import convert\n\n    def read_md(f):\n        return convert(f, 'rst')\n\nexcept ImportError:\n    convert = None\n    print(\n        \"warning: pypandoc module not found, could not convert Markdown to RST\"\n    )\n\n    def read_md(f):\n        return open(f, 'r').read()  # noqa\n\nREADME = os.path.join(os.path.dirname(__file__), 'README.md')\n\nsetup(\n    name='some-package',\n    long_description=read_md(README),\n    # ...\n)\n```", "```py\nfrom setuptools import setup\nsetup(\n    name='some-package',\n    install_requires=['falcon', 'requests', 'delorean']\n    # ...\n)\n```", "```py\nfrom setuptools import setup\nimport os\n\ndef strip_comments(l):\n    return l.split('#', 1)[0].strip()\n\ndef reqs(*f):\n    return list(filter(None, [strip_comments(l) for l in open(\n        os.path.join(os.getcwd(), *f)).readlines()]))\n\nsetup(\n    name='some-package',\n    install_requires=reqs('requirements.txt')\n    # ...\n)\n```", "```py\nsetup(\n    name=\"my.command\",\n    entry_points=\"\"\"\n        [distutils.commands]\n        my_command  = my.command.module.Class\n    \"\"\"\n)\n```", "```py\n**pip install <project-path>**\n\n```", "```py\n**pip uninstall <package-name>**\n\n```", "```py\n**pip install -e <project-path>**\n\n```", "```py\n**$ tree acme/**\n**acme/**\n**\u251c\u2500\u2500 acme**\n**\u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u2514\u2500\u2500 sql**\n**\u2502       \u2514\u2500\u2500 __init__.py**\n**\u2514\u2500\u2500 setup.py**\n\n**2 directories, 3 files**\n\n```", "```py\n**$ tree acme/**\n**acme/**\n**\u251c\u2500\u2500 acme**\n**\u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u251c\u2500\u2500 sql**\n**\u2502   \u2502   \u2514\u2500\u2500 __init__.py**\n**\u2502   \u2514\u2500\u2500 templating**\n**\u2502       \u2514\u2500\u2500 __init__.py**\n**\u2514\u2500\u2500 setup.py**\n\n**3 directories, 4 files**\n\n```", "```py\n**$ tree acme.sql/**\n**acme.sql/**\n**\u251c\u2500\u2500 acme**\n**\u2502   \u2514\u2500\u2500 sql**\n**\u2502       \u2514\u2500\u2500 __init__.py**\n**\u2514\u2500\u2500 setup.py**\n\n**2 directories, 2 files**\n\n**$ tree acme.templating/**\n**acme.templating/**\n**\u251c\u2500\u2500 acme**\n**\u2502   \u2514\u2500\u2500 templating**\n**\u2502       \u2514\u2500\u2500 __init__.py**\n**\u2514\u2500\u2500 setup.py**\n\n**2 directories, 2 files**\n\n```", "```py\n**$ pip install acme.sql acme.templating**\n\n```", "```py\n**$ tree acme.sql/**\n**acme.sql/**\n**\u251c\u2500\u2500 acme**\n**\u2502   \u2514\u2500\u2500 sql**\n**\u2502       \u2514\u2500\u2500 __init__.py**\n**\u2514\u2500\u2500 setup.py**\n\n**2 directories, 2 files**\n\n**$ tree acme.templating/**\n**acme.templating/**\n**\u251c\u2500\u2500 acme**\n**\u2502   \u2514\u2500\u2500 templating**\n**\u2502       \u2514\u2500\u2500 __init__.py**\n**\u2514\u2500\u2500 setup.py**\n\n**2 directories, 2 files**\n\n```", "```py\n**from setuptools import setup**\n\n**setup(**\n **name='acme.templating',**\n **packages=['acme.templating'],**\n**)**\n\n```", "```py\n**$ tree acme.sql/**\n**acme.sql/**\n**\u251c\u2500\u2500 acme**\n**\u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u2514\u2500\u2500 sql**\n**\u2502       \u2514\u2500\u2500 __init__.py**\n**\u2514\u2500\u2500 setup.py**\n\n**2 directories, 3 files**\n\n**$ tree acme.templating/**\n**acme.templating/**\n**\u251c\u2500\u2500 acme**\n**\u2502   \u251c\u2500\u2500 __init__.py**\n**\u2502   \u2514\u2500\u2500 templating**\n**\u2502       \u2514\u2500\u2500 __init__.py**\n**\u2514\u2500\u2500 setup.py**\n\n**2 directories, 3 files**\n\n```", "```py\nfrom setuptools import setup\n\nsetup(\n    name='acme.templating',\n    packages=['acme.templating'],\n    namespace_packages=['acme'],\n)\n```", "```py\n__import__('pkg_resources').declare_namespace(__name__)\n```", "```py\n**$ python setup.py <dist-commands> upload**\n\n```", "```py\n**$ python setup.py sdist bdist bdist_wheel upload**\n\n```", "```py\n**$ python setup.py sdist bdist_wheel**\n**$ twine upload dist/***\n\n```", "```py\n**$ twine register dist/***\n\n```", "```py\n[distutils]\nindex-servers =\n    pypi\n    other\n\n[pypi]\nrepository: <repository-url>\nusername: <username>\npassword: <password>\n\n[other]\nrepository: https://example.com/pypi\nusername: <username>\npassword: <password>\n```", "```py\nfrom setuptools import setup\n\nsetup(name='acme.sql', version='0.1.1')\n```", "```py\n**$ python setup.py sdist**\n**running sdist**\n**...**\n**creating dist**\n**tar -cf dist/acme.sql-0.1.1.tar acme.sql-0.1.1**\n**gzip -f9 dist/acme.sql-0.1.1.tar**\n**removing 'acme.sql-0.1.1' (and everything under it)**\n**$ ls dist/**\n**acme.sql-0.1.1.tar.gz**\n\n```", "```py\n**$ python setup.py bdist**\n**running bdist**\n**running bdist_dumb**\n**running build**\n**...**\n**running install_scripts**\n**tar -cf dist/acme.sql-0.1.1.macosx-10.3-fat.tar .**\n**gzip -f9 acme.sql-0.1.1.macosx-10.3-fat.tar**\n**removing 'build/bdist.macosx-10.3-fat/dumb' (and everything under it)**\n**$ ls dist/**\n**acme.sql-0.1.1.macosx-10.3-fat.tar.gz    acme.sql-0.1.1.tar.gz**\n\n```", "```py\n**C:\\acme.sql> python.exe setup.py bdist**\n**...**\n**C:\\acme.sql> dir dist**\n**25/02/2008  08:18    <DIR>          .**\n**25/02/2008  08:18    <DIR>          ..**\n**25/02/2008  08:24            16\u202f055 acme.sql-0.1.win32.zip**\n **1 File(s)         16\u202f055 bytes**\n **2 Dir(s)  22\u202f239\u202f752\u202f192 bytes free**\n\n```", "```py\n#!/usr/bin/env python\n```", "```py\n**$ pyinstaller myscript.py**\n\n**2121 INFO: PyInstaller: 3.1**\n**2121 INFO: Python: 2.7.10**\n**2121 INFO: Platform: Windows-7-6.1.7601-SP1**\n**2121 INFO: wrote D:\\dev\\app\\myscript.spec**\n**2137 INFO: UPX is not available.**\n**2138 INFO: Extending PYTHONPATH with paths**\n**['D:\\\\dev\\\\app', 'D:\\\\dev\\\\app']**\n**2138 INFO: checking Analysis**\n**2138 INFO: Building Analysis because out00-Analysis.toc is non existent**\n**2138 INFO: Initializing module dependency graph...**\n**2154 INFO: Initializing module graph hooks...**\n**2325 INFO: running Analysis out00-Analysis.toc**\n**(...)**\n**25884 INFO: Updating resource type 24 name 2 language 1033**\n\n```", "```py\n**$ tree /0066**\n**\u2502   myscript.py**\n**\u2502   myscript.spec**\n**\u2502**\n**\u251c\u2500\u2500\u2500build**\n**\u2502   \u2514\u2500\u2500\u2500myscript**\n**\u2502           myscript.exe**\n**\u2502           myscript.exe.manifest**\n**\u2502           out00-Analysis.toc**\n**\u2502           out00-COLLECT.toc**\n**\u2502           out00-EXE.toc**\n**\u2502           out00-PKG.pkg**\n**\u2502           out00-PKG.toc**\n**\u2502           out00-PYZ.pyz**\n**\u2502           out00-PYZ.toc**\n**\u2502           warnmyscript.txt**\n**\u2502**\n**\u2514\u2500\u2500\u2500dist**\n **\u2514\u2500\u2500\u2500myscript**\n **bz2.pyd**\n **Microsoft.VC90.CRT.manifest**\n **msvcm90.dll**\n **msvcp90.dll**\n **msvcr90.dll**\n **myscript.exe**\n **myscript.exe.manifest**\n **python27.dll**\n **select.pyd**\n **unicodedata.pyd**\n **_hashlib.pyd**\n\n```", "```py\n**$ pyinstaller --onefile myscript.py**\n**(...)**\n**$ tree /f**\n**\u251c\u2500\u2500\u2500build**\n**\u2502   \u2514\u2500\u2500\u2500myscript**\n**\u2502           myscript.exe.manifest**\n**\u2502           out00-Analysis.toc**\n**\u2502           out00-EXE.toc**\n**\u2502           out00-PKG.pkg**\n**\u2502           out00-PKG.toc**\n**\u2502           out00-PYZ.pyz**\n**\u2502           out00-PYZ.toc**\n**\u2502           warnmyscript.txt**\n**\u2502**\n**\u2514\u2500\u2500\u2500dist**\n **myscript.exe**\n\n```", "```py\n# -*- mode: python -*-\n\nblock_cipher = None\n\na = Analysis(['myscript.py'],\n             pathex=['D:\\\\dev\\\\app'],\n             binaries=None,\n             datas=None,\n             hiddenimports=[],\n             hookspath=[],\n             runtime_hooks=[],\n             excludes=[],\n             win_no_prefer_redirects=False,\n             win_private_assemblies=False,\n             cipher=block_cipher)\npyz = PYZ(a.pure, a.zipped_data,\n             cipher=block_cipher)\nexe = EXE(pyz,\n          a.scripts,\n          a.binaries,\n          a.zipfiles,\n          a.datas,\n          name='myscript',\n          debug=False,\n          strip=False,\n          upx=True,\n          console=True )\n```", "```py\n**$ pyinstaller.exe myscript.spec**\n\n```", "```py\n**$ cxfreeze myscript.py**\n\n**copying C:\\Python27\\lib\\site-packages\\cx_Freeze\\bases\\Console.exe -> D:\\dev\\app\\dist\\myscript.exe**\n**copying C:\\Windows\\system32\\python27.dll -> D:\\dev\\app\\dist\\python27.dll**\n**writing zip file D:\\dev\\app\\dist\\myscript.exe**\n**(...)**\n**copying C:\\Python27\\DLLs\\bz2.pyd -> D:\\dev\\app\\dist\\bz2.pyd**\n**copying C:\\Python27\\DLLs\\unicodedata.pyd -> D:\\dev\\app\\dist\\unicodedata.pyd**\n\n```", "```py\n**$ tree /f**\n**\u2502   myscript.py**\n**\u2502**\n**\u2514\u2500\u2500\u2500dist**\n **bz2.pyd**\n **myscript.exe**\n **python27.dll**\n **unicodedata.pyd**\n\n```", "```py\nimport sys\nfrom cx_Freeze import setup, Executable\n\n# Dependencies are automatically detected, but it might need fine tuning.\nbuild_exe_options = {\"packages\": [\"os\"], \"excludes\": [\"tkinter\"]}\n\nsetup(\n    name=\"myscript\",\n    version=\"0.0.1\",\n    description=\"My Hello World application!\",\n    options={\n        \"build_exe\": build_exe_options\n    },\n    executables=[Executable(\"myscript.py\")]\n)\n```", "```py\n**$ python setup.py build_exe**\n\n```", "```py\nimport sys\nfrom setuptools import setup\n\nmainscript = 'MyApplication.py'\n\nif sys.platform == 'darwin':\n    extra_options = dict(\n        setup_requires=['py2app'],\n        app=[mainscript],\n        # Cross-platform applications generally expect sys.argv to\n        # be used for opening files.\n        options=dict(py2app=dict(argv_emulation=True)),\n    )\nelif sys.platform == 'win32':\n    extra_options = dict(\n        setup_requires=['py2exe'],\n        app=[mainscript],\n    )\nelse:\n    extra_options = dict(\n        # Normally unix-like platforms will use \"setup.py install\"\n        # and install the main script as such\n        scripts=[mainscript],\n    )\n\nsetup(\n    name=\"MyApplication\",\n    **extra_options\n)\n```"]