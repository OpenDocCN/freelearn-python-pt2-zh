["```py\nimport nltk \nnltk.download()\n```", "```py\n    import nltk\n    from nltk.tokenize import sent_tokenize, word_tokenize\n    ```", "```py\n    text = 'Fellow-Countrymen: At this second appearing to take the oath of the Presidential office there is less occasion for an extended address than there was at the first. Then a statement somewhat in detail of a course to be pursued seemed fitting and proper. Now, at the expiration of four years, during which public declarations have been constantly called forth on every point and phase of the great contest which still absorbs the attention and engrosses the energies of the nation, little that is new could be presented. The progress of our arms, upon which all else chiefly depends, is as well known to the public as to myself, and it is, I trust, reasonably satisfactory and encouraging to all. With high hope for the future, no prediction in regard to it is ventured. On the occasion corresponding to this four years ago all thoughts were anxiously directed to an impending civil war. All dreaded it, all sought to avert it. While the inaugural address was being delivered from this place, devoted altogether to saving the Union without war, urgent agents were in the city seeking to destroy it without war\u2014seeking to dissolve the Union and divide effects by negotiation. Both parties deprecated war, but one of them would make war rather than let the nation survive, and the other would accept war rather than let it perish, and the war came. One-eighth of the whole population were colored slaves, not distributed generally over the Union, but localized in the southern part of it. These slaves constituted a peculiar and powerful interest. All knew that this interest was somehow the cause of the war. To strengthen, perpetuate, and extend this interest was the object for which the insurgents would rend the Union even by war, while the Government claimed no right to do more than to restrict the territorial enlargement of it. Neither party expected for the war the magnitude or the duration which it has already attained. [\u2026]'\n    ```", "```py\n    tokenized_word = word_tokenize(text)\n    print(tokenized_word)\n    ```", "```py\n    from nltk.probability import FreqDist\n    fdist = FreqDist(tokenized_word)\n    print(fdist)\n    fdist.most_common(2)\n    ```", "```py\n    import matplotlib.pyplot as plt\n    fdist.plot(30, cumulative = False)\n    plt.show()\n    ```", "```py\n    ['Fellow-Countrymen', ':', 'At', 'this', 'second', 'appearing', 'to', 'take', 'the', 'oath', 'of', 'the', 'Presidential', 'office', 'there', 'is', 'less', 'occasion', 'for', 'an', 'extended', 'address', 'than', 'there', 'was', 'at', 'the', 'first', '.', 'Then', 'a', 'statement', 'somewhat', 'in', 'detail', 'of', 'a', 'course', 'to', 'be', 'pursued', 'seemed', 'fitting', 'and', 'proper', '.', 'Now', ',', 'at', 'the', 'expiration', 'of', 'four', 'years', ',', 'during', 'which', 'public', 'declarations', 'have', 'been', 'constantly', 'called', 'forth', 'on', 'every', 'point', 'and', 'phase', 'of', 'the', 'great', 'contest', 'which', 'still', 'absorbs', 'the', 'attention', 'and', 'engrosses', 'the', 'energies', 'of', 'the', 'nation', ',', 'little', 'that', 'is', 'new', 'could', 'be', 'presented', '.', 'The', 'progress', 'of', 'our', 'arms', ',', 'upon', 'which', 'all', 'else', 'chiefly', 'depends', ',', 'is', 'as', 'well', 'known', 'to', 'the', 'public', 'as', 'to', 'myself', ',', 'and', 'it', 'is', ',', 'I', 'trust', ',', 'reasonably', 'satisfactory', 'and', 'encouraging', 'to', 'all', '.', 'With', 'high', 'hope', 'for', 'the', 'future', ',', 'no', 'prediction', 'in', 'regard', 'to', 'it', 'is', 'ventured', '.', 'On', 'the', 'occasion', 'corresponding', 'to', 'this', 'four', 'years', 'ago', 'all', 'thoughts', 'were', 'anxiously', 'directed', 'to', 'an', 'impending', 'civil', 'war', '.', 'All', 'dreaded', 'it', ',', 'all', 'sought', 'to', 'avert', 'it', '.', 'While', 'the', 'inaugural', 'address', 'was', 'being', 'delivered', 'from', 'this', 'place', ',', 'devoted', 'altogether', 'to', 'saving', 'the', 'Union', 'without', 'war', ',', 'urgent', 'agents', 'were', 'in', 'the', 'city', 'seeking', 'to', 'destroy', 'it', 'without', 'war\u2014seeking', 'to', 'dissolve', 'the', 'Union', 'and', 'divide', 'effects', 'by', 'negotiation', '.', 'Both', 'parties', 'deprecated', 'war', ',', 'but', 'one', 'of', 'them', 'would', 'make', 'war', 'rather', 'than', 'let', 'the', 'nation', 'survive', ',', 'and', 'the', 'other', 'would', 'accept', 'war', 'rather', 'than', 'let', 'it', 'perish', ',', 'and', 'the', 'war', 'came', '.', 'One-eighth', 'of', 'the', 'whole', 'population', 'were', 'colored', 'slaves', ',', 'not', 'distributed', 'generally', 'over', 'the', 'Union', ',', 'but', 'localized', 'in', 'the', 'southern', 'part', 'of', 'it', '.', 'These', 'slaves', 'constituted', 'a', 'peculiar', 'and', 'powerful', 'interest', '.', 'All', 'knew', 'that', 'this', 'interest', 'was', 'somehow', 'the', 'cause', 'of', 'the', 'war', '.', 'To', 'strengthen', ',', 'perpetuate', ',', 'and', 'extend', 'this', 'interest', 'was', 'the', 'object', 'for', 'which', 'the', 'insurgents', 'would', 'rend', 'the', 'Union', 'even', 'by', 'war', ',', 'while', 'the', 'Government', 'claimed', 'no', 'right', 'to', 'do', 'more', 'than', 'to', 'restrict', 'the', 'territorial', 'enlargement', 'of', 'it', '.', 'Neither', 'party', 'expected', 'for', 'the', 'war', 'the', 'magnitude', 'or', 'the', 'duration', 'which', 'it', 'has', 'already', 'attained', '.']\n    ```", "```py\n    <FreqDist with 365 samples and 782 outcomes>\n    ```", "```py\nThere once was a citizen in the town of Narnia, whose name was Malena. Malena loved to hang with their trusty dog, King Kong.\nYou could always see them strolling through the market in the morning, wearing their favorite blue attire.\n```", "```py\n    print('Help me write a story by answering some questions. ')\n    name = input('What name would you like to be known by? ')\n    location = input('What is your favorite city, real or imaginary? ')\n    time = input('Is this happening in the morning or afternoon? ')\n    color = input('What is your favorite color? ')\n    town_spot = input('Are you going to the market, the library, or the park? ')\n    pet = input('What kind of pet would you like as your companion? ')\n    pet_name = input('What is your pet\\'s name? ')\n    ```", "```py\n    print('There once was a citizen in the town of %s, whose name was %s. %s loved to hang \\\n    with their trusty %s, %s.' % (location, name, name, pet, pet_name))\n    print('You could always see them strolling through the %s \\\n    in the %s, wearing their favorite %s attire.' % (town_spot, time, color))\n    ```", "```py\n    Help me write a story by answering some questions. \n    What name would you like to be known by? Azabache\n    What is your favorite city, real or imaginary? Rincon\n    Is this happening in the morning or afternoon? afternoon\n    What is your favorite color? magenta\n    Are you going to the market, the library, or the park? library\n    What kind of pet would you like as your companion? dog\n    What is your pet's name? Luna\n    There once was a citizen in the town of Rincon, whose name was Azabache. Azabache loved to hang with their trusty dog, Luna.\n    You could always see them strolling through the library in the afternoon, wearing their favorite magenta attire.\n    ```", "```py\n    from readability import Readability\n    text = open('C:\\\\...\\\\ch15_MLK-IHaveADream.txt')\n    text_up = text.read()\n    r = Readability(text_up)\n    flesch_kincaidR = r.flesch_kincaid()\n    ```", "```py\n    print('The text has a grade '+ flesch_kincaidR.grade_level + ' readability level.')\n    ```", "```py\n    The text has a grade 9 readability level.\n    ```", "```py\n[0, 95, 192, 789, 462]\n```", "```py\n[95, 0, 105, 759, 431]\n```", "```py\n[192, 105, 0, 701, 374]\n```", "```py\n[789, 759, 701, 0, 344]\n```", "```py\n[462, 431, 374, 344, 0]\n```", "```py\n    from ortools.constraint_solver import routing_enums_pb2\n    from ortools.constraint_solver import pywrapcp\n    ```", "```py\n    #Create data model.\n    def create_data_model():\n    \u00a0\u00a0\u00a0\u00a0data = {}\n    \u00a0\u00a0\u00a0\u00a0data['distance_matrix'] = [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[0, 95, 192, 789, 462],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[95, 0, 105, 759, 431],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[192, 105, 0, 701, 374],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[789, 759, 701, 0, 344],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[462, 431, 374, 344, 0],\n    \u00a0\u00a0\u00a0\u00a0]\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0data['num_vehicles'] = 1\n    \u00a0\u00a0\u00a0\u00a0data['depot'] = 0\n    \u00a0\u00a0\u00a0\u00a0return data\n    ```", "```py\n    #Provide solution as output - print to console\n    def print_solution(manager, routing, solution):\n    \u00a0\u00a0\u00a0\u00a0print('Objective: {} miles'.format(solution.ObjectiveValue()))\n    \u00a0\u00a0\u00a0\u00a0index = routing.Start(0)\n    \u00a0\u00a0\u00a0\u00a0plan_output = 'Route for vehicle 0:\\n'\n    \u00a0\u00a0\u00a0\u00a0route_distance = 0\n    \u00a0\u00a0\u00a0\u00a0while not routing.IsEnd(index):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0plan_output += ' {} ->'.format(manager.IndexToNode(index))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0previous_index = index\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index = solution.Value(routing.NextVar(index))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)\n    \u00a0\u00a0\u00a0\u00a0plan_output += ' {}\\n'.format(manager.IndexToNode(index))\n    \u00a0\u00a0\u00a0\u00a0print(plan_output)\n    \u00a0\u00a0\u00a0\u00a0plan_output += 'Route distance: {}miles\\n'.format(route_distance)\n    ```", "```py\n    def main():\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0data = create_data_model()\n    \u00a0\u00a0\u00a0\u00a0manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data['num_vehicles'], data['depot'])\n    \u00a0\u00a0\u00a0\u00a0# Create Routing Model.\n    \u00a0\u00a0\u00a0\u00a0routing = pywrapcp.RoutingModel(manager)\n    \u00a0\u00a0\u00a0\u00a0def distance_callback(from_index, to_index):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"Returns the distance between the two nodes.\"\"\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0# Convert from routing variable Index to distance matrix NodeIndex.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from_node = manager.IndexToNode(from_index)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to_node = manager.IndexToNode(to_index)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return data['distance_matrix'][from_node][to_node]\n    \u00a0\u00a0\u00a0\u00a0transit_callback_index = routing.RegisterTransitCallback(distance_callback)\n    \u00a0\u00a0\u00a0\u00a0routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)\n    \u00a0\u00a0\u00a0\u00a0search_parameters = pywrapcp.DefaultRoutingSearchParameters()\n    \u00a0\u00a0\u00a0\u00a0search_parameters.first_solution_strategy = (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)\n    \u00a0\u00a0\u00a0\u00a0solution = routing.SolveWithParameters(search_parameters)\n    \u00a0\u00a0\u00a0\u00a0if solution:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print_solution(manager, routing, solution)\n    if __name__ == '__main__':\n    \u00a0\u00a0\u00a0\u00a0main()\n    ```", "```py\n    Objective: 1707 miles\n    Route for vehicle 0:\n     0 -> 1 -> 2 -> 4 -> 3 -> 0\n    ```", "```py\n    LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    LETTERS = LETTERS.lower()\n    ```", "```py\n    def encrypt(message, key):\n    \u00a0\u00a0\u00a0\u00a0encryptedM = ''\n    \u00a0\u00a0\u00a0\u00a0for letts in message:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if letts in LETTERS:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num = LETTERS.find(letts)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num += key\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0encryptedM +=\u00a0\u00a0LETTERS[num]\n    \u00a0\u00a0\u00a0\u00a0return encryptedM\n    ```", "```py\n    def decode(message, key):\n    \u00a0\u00a0\u00a0\u00a0decodedM = ''\n    \u00a0\u00a0\u00a0\u00a0for chars in message:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if chars in LETTERS:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num = LETTERS.find(chars)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0num -= key\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0decodedM +=\u00a0\u00a0LETTERS[num]\n    \u00a0\u00a0\u00a0\u00a0return decodedM\n    ```", "```py\n    def main():\n    \u00a0\u00a0\u00a0\u00a0message = input('What message do you need to encrypt or decrypt? ')\n    \u00a0\u00a0\u00a0\u00a0key = int(input('Enter the key, numbered 1-26: '))\n    \u00a0\u00a0\u00a0\u00a0choice = input('Do you want to encrypt or decode? Type E for encrypt or D for decode: ')\n    \u00a0\u00a0\u00a0\u00a0if choice.lower().startswith('e'):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(encrypt(message, key))\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print(decode(message, key))\n    if __name__ == '__main__':\n    \u00a0\u00a0\u00a0\u00a0main()\n    ```", "```py\nWhat message do you need to encrypt or decrypt? the name of the dog is King Kong\nEnter the key, numbered 1-26: 9\nDo you want to encrypt or decode? Type E for encrypt or D for decode: E\ncqnwjvnxocqnmxprbrwpxwp\n```", "```py\n27438d623d9e09d7b0f8083b9178b5bb8ff8bc321fee518af 4466f6aadb68a8f:100133bfdbff492cbc8f5d17af46adab\n```", "```py\n    import uuid\n    import hashlib\n    ```", "```py\n    def hash_pwd(password):\n    \u00a0\u00a0\u00a0\u00a0salt = uuid.uuid4().hex \n    \u00a0\u00a0\u00a0\u00a0return hashlib.sha1(salt.encode() + password.encode()).hexdigest() + ':' + salt\n    ```", "```py\n    def check_pwd(hashed_pwd, user_pwd):\n    \u00a0\u00a0\u00a0\u00a0password, salt = hashed_pwd.split(':')\n    \u00a0\u00a0\u00a0\u00a0return password == hashlib.sha1(salt.encode() + user_pwd.encode()).hexdigest()\n    ```", "```py\n    new_pwd = input('Enter new password: ')\n    hashed_pwd = hash_pwd(new_pwd)\n    print('Hashed password: ' + hashed_pwd)\n    confirm_pwd = input('Confirm password: ')\n    if check_pwd(hashed_pwd, confirm_pwd):\n    \u00a0\u00a0\u00a0\u00a0print('Confirmed!')\n    else:\n    \u00a0\u00a0\u00a0\u00a0print('Please try again')\n    ```", "```py\n    \u00a0\u00a0\u00a0\u00a0new_pwd = input('Enter new password: ')\n    \u00a0\u00a0\u00a0\u00a0hashed_pwd = hash_pwd(new_pwd)\n    \u00a0\u00a0\u00a0\u00a0print('Hashed password: ' + hashed_pwd)\n    \u00a0\u00a0\u00a0\u00a0confirm_pwd = input('Confirm password: ')\n    \u00a0\u00a0\u00a0\u00a0if check_pwd(hashed_pwd, confirm_pwd):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Confirmed!')\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0print('Please try again later')\n    ```", "```py\n{\"intents\": [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"tag\": \"greeting\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"patterns\": [\"Hi\", \"How are you\", \"Hello?\", \"Welcome!\", \"Hello\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"responses\": [\"Hello! Thank you for visiting our site! \", \"Welcome back!\", \"Hello, how can I help you?\", \"What can I do for you? \"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"context_set\": \"\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\"tag\": \"goodbye\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"patterns\": [\"Bye\", \"See you later\", \"Goodbye\"],\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"responses\": [\"See you later, thanks for visiting\", \"Thank you and have a wonderful day!\", \"Bye! See you soon!\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0]\n} \n```", "```py\n    import nltk\n    import json\n    import pickle\n    import numpy as np\n    nltk.download('punkt')\n    nltk.download('wordnet')\n    from nltk.stem import WordNetLemmatizer\n    lemmatizer = WordNetLemmatizer()\n    ```", "```py\n    from keras.models import Sequential\n    from keras.optimizers import SGD\n    from keras.layers import Activation, Dense, Dropout\n    import random\n    ```", "```py\n    #Upload intents file and create our lists\n    words=[]\n    classes = []\n    doc = []\n    ignore_words = ['?', '!', ',', '.']\n    data_words = open(r'C:\\...\\intents.json').read()\n    intents = json.loads(data_words)\n    ```", "```py\n    for intent in intents['intents']:\n    \u00a0\u00a0\u00a0\u00a0for pattern in intent['patterns']:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#Tokenize all the words (separate them)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w = nltk.word_tokenize(pattern)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0words.extend(w)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#Add all the words into doc \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0doc.append((w, intent['tag']))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0#Add the classes\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if intent['tag'] not in classes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0classes.append(intent['tag'])\n    print(doc)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    ```", "```py\n    #lemmatization\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in ignore_words]\n    words = sorted(list(set(words)))\n    classes = sorted(list(set(classes)))\n    pickle.dump(words,open('words.pkl','wb'))\n    pickle.dump(classes,open('classes.pkl','wb'))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    ```", "```py\n    #Define chatbot functions\n    def clean_up_sentence(sentence):\n    \u00a0\u00a0\u00a0\u00a0sentence_words = nltk.word_tokenize(sentence)\n    \u00a0\u00a0\u00a0\u00a0sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]\n    \u00a0\u00a0\u00a0\u00a0return sentence_words\n    def bow(sentence, words, show_details=True):\n    \u00a0\u00a0\u00a0\u00a0sentence_words = clean_up_sentence(sentence)\n    \u00a0\u00a0\u00a0\u00a0bag = [0]*len(words)\n    \u00a0\u00a0\u00a0\u00a0for s in sentence_words:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for i,w in enumerate(words):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if w == s:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bag[i] = 1\n    \u00a0\u00a0\u00a0\u00a0return(np.array(bag))\n    def predict_class(sentence, model):\n    \u00a0\u00a0\u00a0\u00a0p = bow(sentence, words,show_details=False)\n    \u00a0\u00a0\u00a0\u00a0res = model.predict(np.array([p]))[0]\n    \u00a0\u00a0\u00a0\u00a0ERROR_THRESHOLD = 0.25\n    \u00a0\u00a0\u00a0\u00a0results = [[i,r] for i,r in enumerate(res) if r>ERROR_THRESHOLD]\n    \u00a0\u00a0\u00a0\u00a0results.sort(key=lambda x: x[1], reverse=True)\n    \u00a0\u00a0\u00a0\u00a0return_list = []\n    \u00a0\u00a0\u00a0\u00a0for r in results:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return_list.append({\"intent\": classes[r[0]], \"probability\": str(r[1])})\n    \u00a0\u00a0\u00a0\u00a0return return_list\n    ```", "```py\n    def getResponse(ints, intents_json):\n    \u00a0\u00a0\u00a0\u00a0tag = ints[0]['intent']\n    \u00a0\u00a0\u00a0\u00a0list_of_intents = intents_json['intents']\n    \u00a0\u00a0\u00a0\u00a0for i in list_of_intents:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(i['tag']== tag):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = random.choice(i['responses'])\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n    \u00a0\u00a0\u00a0\u00a0return result\n    def chatbot_response(msg):\n    \u00a0\u00a0\u00a0\u00a0ints = predict_class(msg, model)\n    \u00a0\u00a0\u00a0\u00a0res = getResponse(ints, intents)\n    \u00a0\u00a0\u00a0\u00a0return res\n    ```", "```py\n    base = Tk()\n    base.title(\"Chat with Customer Service\")\n    base.geometry(\"400x500\")\n    base.resizable(width=FALSE, height=FALSE)\n    ```", "```py\n    #Create chatbot window\n    ChatLog = Text(base, bd=6, bg=\"white\", height=\"8\", width=\"70\", font=\"Calibri\")\n    ChatLog.config(state=DISABLED)\n    #Scrollbar\n    scrollbar = Scrollbar(base, command=ChatLog.yview, cursor=\"arrow\")\n    #Create Send button\n    SendButton = Button(base, font=(\"Calibri\",12,'bold'), text=\"Send\", width=\"15\", height=5,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bd=0, bg=\"pink\", activebackground=\"light green\",fg='black',\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command= send )\n    EntryBox = Text(base, bd=0, bg=\"white\",width=\"29\", height=\"5\", font=\"Arial\")\n    scrollbar.place(x=376,y=6, height=386)\n    ChatLog.place(x=6,y=6, height=386, width=370)\n    EntryBox.place(x=128, y=401, height=90, width=265)\n    SendButton.place(x=6, y=401, height=90)\n    base.mainloop()\n    ```"]