["```py\nimport pandas as pd\ndemo_series = pd.Series()\nprint(demo_series)\n```", "```py\nch14_seriesDemo.py\nimport pandas as pd\nimport numpy as np\ndataset = np.array(['yellow', 'green', 'blue', 'violet', 'red'])\ndata_series = pd.Series(dataset)\nprint(data_series)\n```", "```py\n0\u00a0\u00a0\u00a0\u00a0yellow\n1\u00a0\u00a0\u00a0\u00a0\u00a0green\n2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0blue\n3\u00a0\u00a0\u00a0\u00a0violet\n4\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0red\ndtype: object\n```", "```py\nimport pandas as pd\nimport numpy as np\nmyList = ['yellow', 'green', 'blue', 'violet', 'red']\ndata_series = pd.Series(myList)\nprint(data_series)\n```", "```py\nimport pandas as pd\nmyDictionary = {\n\u00a0\u00a0\u00a0\u00a0'Name' : 'Miguel',\n\u00a0\u00a0\u00a0\u00a0'Number' : 42,\n\u00a0\u00a0\u00a0\u00a0'Age' : 'unknown'\n\u00a0\u00a0\u00a0\u00a0}\nmySeries = pd.Series(myDictionary)\nprint(mySeries)\n```", "```py\nName\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Miguel\nNumber\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a042\nAge\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0unknown\ndtype: object\n```", "```py\nimport pandas as pd\nmyDictionary = {\n\u00a0\u00a0\u00a0\u00a0'Name' : 'Miguel',\n\u00a0\u00a0\u00a0\u00a0'Number' : 42,\n\u00a0\u00a0\u00a0\u00a0'Age' : 'unknown'\n\u00a0\u00a0\u00a0\u00a0}\nmySeries = pd.Series(myDictionary)\nprint(mySeries[0])\n```", "```py\nName\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Miguel\nNumber\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a042\ndtype: object\n```", "```py\nimport pandas as pd\ndata_set = pd.read_csv('C:\\\\...\\\\demo.csv')\ndata_set.head()\n```", "```py\nimport pandas as pd\nmyData = pd.read_csv('C:\\\\...\\\\demo_missing.csv')\nprint(myData)\ncleanData = myData.dropna(axis = 0, how = 'any')\nprint(cleanData)\u00a0\u00a0\n```", "```py\nimport pandas as pd\nmyData = pd.read_csv('C:\\\\...\\\\demo_missing.csv')\nprint(pd.isna(myData['Countries']))\n```", "```py\n0\u00a0\u00a0\u00a0\u00a0False\n1\u00a0\u00a0\u00a0\u00a0\u00a0True\n2\u00a0\u00a0\u00a0\u00a0False\n3\u00a0\u00a0\u00a0\u00a0False\n4\u00a0\u00a0\u00a0\u00a0False\n5\u00a0\u00a0\u00a0\u00a0False\n6\u00a0\u00a0\u00a0\u00a0False\n7\u00a0\u00a0\u00a0\u00a0False\n8\u00a0\u00a0\u00a0\u00a0False\n9\u00a0\u00a0\u00a0\u00a0False\nName: Countries, dtype: bool\n```", "```py\nimport pandas as pd\nmyData = pd.read_csv('C:\\\\...\\\\demo_missing.csv')\nprint(myData.fillna(0))\n```", "```py\n#Binning with equal frequency\ndef equal_frequency(array1, m): \n\tl = len(array1) \n\tn = int(l / m) \n\tfor i in range(0, m): \n\t\tarray = [] \n\t\tfor j in range(i * n, (i + 1) * n): \n\t\t\tif j >= l: \n\t\t\t\tbreak\n\t\t\tarray = array + [array1[j]] \n\t\tprint(array) \n#Input dataset \ndataset = [3, 6, 7, 9, 11, 14, 10, 15, 19, 35, 38, 45, 48, 49, 76] \n#Input number of bins\nm = 5\nprint(\"Equal Frequency Binning: \") \nequal_frequency(dataset, m) \n```", "```py\nEqual Frequency Binning: \n[3, 6, 7]\n[9, 11, 14]\n[10, 15, 19]\n[35, 38, 45]\n[48, 49, 76]\n```", "```py\n#Binning with equal width \ndef equal_width(array1, m): \n\tw = int((max(array1) - min(array1)) / m) \n\tmin1 = min(array1) \n\tarray = [] \n\tfor i in range(0, m + 1): \n\t\tarray = array + [min1 + w * i] \n\tarrayi=[] \n\tfor i in range(0, m): \n\t\tresult = [] \n\t\tfor j in array1: \n\t\t\tif j >= array[i] and j <= array[i+1]: \n\t\t\t\tresult += [j] \n\t\tarrayi += [result] \n\tprint(arrayi) \n#Input dataset \ndataset = [3, 6, 7, 9, 11, 14, 10, 15, 19, 35, 38, 45, 48, 49, 76, 81, 208, 221] \n#Input number of bins\nm = 3\nprint(\"\\nEqual Width Binning:\") \nequal_width(dataset, m)\n```", "```py\nEqual Width Binning:\n[[3, 6, 7, 9, 11, 14, 10, 15, 19, 35, 38, 45, 48, 49], [76, 81], [208]]\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n```", "```py\nhousing_data= pd.read_csv(\"kc_house_data.csv\")\n```", "```py\nhousing_data.head()\n```", "```py\nhousing_data.shape\n```", "```py\n(21613, 21)\n```", "```py\nhousing_data.describe()\n```", "```py\nhousing_data.isnull().sum()\n```", "```py\nnames=['price','bedrooms','bathrooms','sqft_living','sqft_lot','floors','waterfront','view','condition','grade','sqft_above','sqft_basement','zipcode','lat','long']\ndf=housing_data[names]\n```", "```py\ncorrelations= df.corr()\n```", "```py\nfig=plt.figure()\nax=fig.add_subplot(111)\ncax=ax.matshow(correlations,vmin=-1,vmax=1)\nfig.colorbar(cax)\n```", "```py\nticks=np.arange(0,15,1)\nax.set_xticks(ticks)\nax.set_yticks(ticks)\nax.set_xticklabels(names, rotation =' 90')\nax.set_yticklabels(names)\n```", "```py\nplt.tight_layout()\nplt.savefig('Correlation_graph.png',dpi = 300)\nplt.show()\n```", "```py\ncoln = ['price','sqft_living','sqft_lot']\nsns.pairplot(housing_data[coln], height = 3);\nplt.savefig('pairplotting.png',dpi =300)\nplt.show()\n```"]