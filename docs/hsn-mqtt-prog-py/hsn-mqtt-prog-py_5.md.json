["```py\n{\"CMD\": \"LOCK_DOORS\"} \n{\"CMD\": \"TURN_OFF_PARKING_LIGHTS\"} \n{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 10} \n{\"CMD\": \"SET_MIN_SPEED\", \"MPH\": 1} \n{\"CMD\": \"TURN_ON_ENGINE\"} \n{\"CMD\": \"TURN_ON_HEADLIGHTS\"} \n{\"CMD\": \"ACCELERATE\"} \n{\"CMD\": \"ROTATE_RIGHT\", \"DEGREES\": 45} \n{\"CMD\": \"ACCELERATE\"} \n{\"CMD\": \"TURN_ON_PARKING_LIGHTS\"} \n{\"CMD\": \"BRAKE\"} \n{\"CMD\": \"TURN_OFF_ENGINE\"} \n```", "```py\n    python3 subscribe_with_paho.py \n```", "```py\n    python subscribe_with_paho.py\n```", "```py\n    Result from connect: Connection Accepted.\n    Received message payload: b'{\"CMD\": \"LOCK_DOORS\"}'\n    vehiclepi01: Locking doors\n```", "```py\n{\"CMD\": \"TURN_OFF_PARKING_LIGHTS\"} \n\n{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 10} \n\n{\"CMD\": \"SET_MIN_SPEED\", \"MPH\": 1} \n\n{\"CMD\": \"TURN_ON_ENGINE\"} \n\n{\"CMD\": \"TURN_ON_HEADLIGHTS\"} \n\n{\"CMD\": \"ACCELERATE\"} \n\n{\"CMD\": \"ROTATE_RIGHT\", \"DEGREES\": 45} \n\n{\"CMD\": \"ACCELERATE\"} \n\n{\"CMD\": \"TURN_ON_PARKING_LIGHTS\"} \n\n{\"CMD\": \"BRAKE\"} \n\n{\"CMD\": \"TURN_OFF_ENGINE\"} \n\n```", "```py\n    Result from connect: Connection Accepted.\n    Received message payload: b'{\"CMD\": \"LOCK_DOORS\"}'\n    vehiclepi01: Locking doors\n    Received message payload: b'{\"CMD\": \"TURN_OFF_PARKING_LIGHTS\"}'\n    vehiclepi01: Turning off parking lights\n    Received message payload: b'{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 10}'\n    vehiclepi01: Setting maximum speed to 10 MPH\n    Received message payload: b'{\"CMD\": \"SET_MIN_SPEED\", \"MPH\": 1}'\n    vehiclepi01: Setting minimum speed to 1 MPH\n    Received message payload: b'{\"CMD\": \"TURN_ON_ENGINE\"}'\n    vehiclepi01: Turning on the engine\n    Received message payload: b'{\"CMD\": \"TURN_ON_HEADLIGHTS\"}'\n    vehiclepi01: Turning on headlights\n    Received message payload: b'{\"CMD\": \"ACCELERATE\"}'\n    vehiclepi01: Accelerating\n    Received message payload: b'{\"CMD\": \"ROTATE_RIGHT\", \"DEGREES\": 45}'\n    vehiclepi01: Rotating right 45 degrees\n    Received message payload: b'{\"CMD\": \"ACCELERATE\"}'\n    vehiclepi01: Accelerating\n    Received message payload: b'{\"CMD\": \"TURN_ON_PARKING_LIGHTS\"}'\n    vehiclepi01: Turning on parking lights\n    Received message payload: b'{\"CMD\": \"BRAKE\"}'\n    vehiclepi01: Braking\n    Received message payload: b'{\"CMD\": \"TURN_OFF_ENGINE\"}'\n    vehiclepi01: Turning off the engine\n```", "```py\n{\"CMD\": \"UNLOCK_DOORS\"} \n{\"CMD\": \"LOCK_DOORS\"} \n{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 20} \n{\"CMD\": \"SET_MIN_SPEED\", \"MPH\": 5} \n{\"CMD\": \"TURN_ON_ENGINE\"} \n{\"CMD\": \"ACCELERATE\"} \n{\"CMD\": \"ROTATE_LEFT\", \"DEGREES\": 15} \n{\"CMD\": \"ROTATE_LEFT\", \"DEGREES\": 20} \n{\"CMD\": \"BRAKE\"} \n{\"CMD\": \"TURN_OFF_ENGINE\"} \n```", "```py\n    mosquitto_sub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --\n    cert device001.crt --key device001.key -t \n    vehicles/vehiclepi01/executedcommands --tls-version tlsv1.2\n\n```", "```py\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --\ncert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"UNLOCK_DOORS\"}' -q 2 --tls-version tlsv1.2\n\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"LOCK_DOORS\"}' -q 2 --tls-version tlsv1.2\n\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 20}' -q 2 --tls-version tlsv1.2\n\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"SET_MIN_SPEED\", \"MPH\": 5}' -q 2 --tls-version tlsv1.2\n\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"TURN_ON_ENGINE\"}' -q 2 --tls-version tlsv1.2\n\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"ACCELERATE\"}' -q 2 --tls-version tlsv1.2\n\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"ROTATE_LEFT\", \"DEGREES\": 15}' -q 2 --tls-version tlsv1.2\n\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"ROTATE_LEFT\", \"DEGREES\": 20}' -q 2 --tls-version tlsv1.2\n\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"BRAKE\"}' -q 2 --tls-version tlsv1.2\n\n    mosquitto_pub -h 192.168.1.1 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/commands -m '{\"CMD\": \"TURN_OFF_ENGINE\"}' -q 2 --tls-version tlsv1.2\n\n```", "```py\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"UNLOCK_DOORS\"}\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"LOCK_DOORS\"}\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"SET_MAX_SPEED\"}\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"SET_MIN_SPEED\"}\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"TURN_ON_ENGINE\"}\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ACCELERATE\"}\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ROTATE_LEFT\"}\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ROTATE_LEFT\"}\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"BRAKE\"}\n    {\"SUCCESSFULLY_PROCESSED_COMMAND\": \"TURN_OFF_ENGINE\"}\n\n```", "```py\n    Result from connect: Connection Accepted.\n    Received message payload: b'{\"CMD\": \"UNLOCK_DOORS\"}'\n    vehiclepi01: Unlocking doors\n    Received message payload: b'{\"CMD\": \"LOCK_DOORS\"}'\n    vehiclepi01: Locking doors\n    Received message payload: b'{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 20}'\n    vehiclepi01: Setting maximum speed to 20 MPH\n    Received message payload: b'{\"CMD\": \"SET_MIN_SPEED\", \"MPH\": 5}'\n    vehiclepi01: Setting minimum speed to 5 MPH\n    Received message payload: b'{\"CMD\": \"TURN_ON_ENGINE\"}'\n    vehiclepi01: Turning on the engine\n    Received message payload: b'{\"CMD\": \"ACCELERATE\"}'\n    vehiclepi01: Accelerating\n    Received message payload: b'{\"CMD\": \"ROTATE_LEFT\", \"DEGREES\": 15}'\n    vehiclepi01: Rotating left 15 degrees\n    Received message payload: b'{\"CMD\": \"ROTATE_LEFT\", \"DEGREES\": 20}'\n    vehiclepi01: Rotating left 20 degrees\n    Received message payload: b'{\"CMD\": \"BRAKE\"}'\n    vehiclepi01: Braking\n    Received message payload: b'{\"CMD\": \"TURN_OFF_ENGINE\"}'\n    vehiclepi01: Turning off the engine\n\n```", "```py\nfrom config import * \nfrom vehicle_commands import * \nimport paho.mqtt.client as mqtt \nimport time \nimport json \n\nvehicle_name = \"vehiclepi01\" \ncommands_topic = \"vehicles/{}/commands\".format(vehicle_name) \nprocessed_commands_topic = \"vehicles/{}/executedcommands\".format(vehicle_name) \n\nclass LoopControl: \n    is_last_command_processed = False \n\ndef on_connect(client, userdata, flags, rc): \n    print(\"Result from connect: {}\".format( \n        mqtt.connack_string(rc))) \n    # Check whether the result form connect is the CONNACK_ACCEPTED \n      connack code \n    if rc == mqtt.CONNACK_ACCEPTED: \n        # Subscribe to the commands topic filter \n        client.subscribe( \n            processed_commands_topic,  \n            qos=2) \n\ndef on_message(client, userdata, msg): \n    if msg.topic == processed_commands_topic: \n        print(str(msg.payload)) \n        if str(msg.payload).count(CMD_TURN_OFF_ENGINE) > 0: \n            LoopControl.is_last_command_processed = True \n\ndef on_subscribe(client, userdata, mid, granted_qos): \n    print(\"Subscribed with QoS: {}\".format(granted_qos[0])) \n\ndef build_command_message(command_name, key=\"\", value=\"\"): \n    if key: \n        # The command requires a key \n        command_message = json.dumps({ \n            COMMAND_KEY: command_name, \n            key: value}) \n    else: \n        # The command doesn't require a key \n        command_message = json.dumps({ \n            COMMAND_KEY: command_name}) \n    return command_message \n\ndef publish_command(client, command_name, key=\"\", value=\"\"):\n    command_message = build_command_message(\n        command_name, key, value)\n    result = client.publish(topic=commands_topic, payload=command_message, qos=2)\nclient.loop()\ntime.sleep(1)\nreturn result\n```", "```py\nif __name__ == \"__main__\": \n    client = mqtt.Client(protocol=mqtt.MQTTv311) \n    client.on_connect = on_connect \n    client.on_subscribe = on_subscribe \n    client.on_message = on_message \n    client.tls_set(ca_certs = ca_certificate, \n        certfile=client_certificate, \n        keyfile=client_key) \n    client.connect(host=mqtt_server_host, \n        port=mqtt_server_port, \n        keepalive=mqtt_keepalive) \n    publish_command(client, CMD_SET_MAX_SPEED, KEY_MPH, 30) \n    publish_command(client, CMD_SET_MIN_SPEED, KEY_MPH, 8) \n    publish_command(client, CMD_LOCK_DOORS) \n    publish_command(client, CMD_TURN_ON_ENGINE) \n    publish_command(client, CMD_ROTATE_RIGHT, KEY_DEGREES, 15) \n    publish_command(client, CMD_ACCELERATE) \n    publish_command(client, CMD_ROTATE_RIGHT, KEY_DEGREES, 25) \n    publish_command(client, CMD_ACCELERATE) \n    publish_command(client, CMD_ROTATE_LEFT, KEY_DEGREES, 15) \n    publish_command(client, CMD_ACCELERATE) \n    publish_command(client, CMD_TURN_OFF_ENGINE) \n    while LoopControl.is_last_command_processed == False: \n        # Process messages and the commands every 500 milliseconds \n        client.loop() \n        time.sleep(0.5) \n    client.disconnect() \n    client.loop() \n```", "```py\n    python3 vehicle_mqtt_remote_control.py\n```", "```py\n    python vehicle_mqtt_remote_control.py\n```", "```py\n    Result from connect: Connection Accepted.\n    Subscribed with QoS: 2\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"SET_MAX_SPEED\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"SET_MIN_SPEED\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"LOCK_DOORS\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"TURN_ON_ENGINE\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ROTATE_RIGHT\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ACCELERATE\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ROTATE_RIGHT\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ACCELERATE\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ROTATE_LEFT\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ACCELERATE\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"TURN_OFF_ENGINE\"}'\n\n```", "```py\n    Received message payload: b'{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 30}'\n    vehiclepi01: Setting maximum speed to 30 MPH\n    Received message payload: b'{\"CMD\": \"SET_MIN_SPEED\", \"MPH\": 8}'\n    vehiclepi01: Setting minimum speed to 8 MPH\n    Received message payload: b'{\"CMD\": \"LOCK_DOORS\"}'\n    vehiclepi01: Locking doors\n    Received message payload: b'{\"CMD\": \"TURN_ON_ENGINE\"}'\n    vehiclepi01: Turning on the engine\n    Received message payload: b'{\"CMD\": \"ROTATE_RIGHT\", \"DEGREES\": 15}'\n    vehiclepi01: Rotating right 15 degrees\n    Received message payload: b'{\"CMD\": \"ACCELERATE\"}'\n    vehiclepi01: Accelerating\n    Received message payload: b'{\"CMD\": \"ROTATE_RIGHT\", \"DEGREES\": 25}'\n    vehiclepi01: Rotating right 25 degrees\n    Received message payload: b'{\"CMD\": \"ACCELERATE\"}'\n    vehiclepi01: Accelerating\n    Received message payload: b'{\"CMD\": \"ROTATE_LEFT\", \"DEGREES\": 15}'\n    vehiclepi01: Rotating left 15 degrees\n    Received message payload: b'{\"CMD\": \"ACCELERATE\"}'\n    vehiclepi01: Accelerating\n    Received message payload: b'{\"CMD\": \"TURN_OFF_ENGINE\"}'\n    vehiclepi01: Turning off the engine\n```", "```py\n    python3 vehicle_mqtt_remote_control.py\n```", "```py\n    python vehicle_mqtt_remote_control.py\n```", "```py\n    Result from connect: Connection Accepted.\n    Subscribed with QoS: 2\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"SET_MAX_SPEED\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"SET_MIN_SPEED\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"LOCK_DOORS\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"TURN_ON_ENGINE\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"ROTATE_RIGHT\"}'\n\n```", "```py\n    ^CTraceback (most recent call last):\n      File \"vehicle_mqtt_remote_control.py\", line 86, in <module>\n        publish_command(client, CMD_ACCELERATE)\n      File \"vehicle_mqtt_remote_control.py\", line 57, in \n        publish_command\n        time.sleep(1)\n      KeyboardInterrupt\n\n```", "```py\nif __name__ == \"__main__\": \n    client = mqtt.Client(protocol=mqtt.MQTTv311) \n    client.on_connect = on_connect \n    client.on_subscribe = on_subscribe \n    client.on_message = on_message \n    client.tls_set(ca_certs = ca_certificate, \n        certfile=client_certificate, \n        keyfile=client_key) \n    # Set a will to be sent to the MQTT server in case the client \n    # disconnects unexpectedly \n    last_will_payload = build_command_message(CMD_PARK_IN_SAFE_PLACE) \n    client.will_set(topic=commands_topic,  \n        payload=last_will_payload,  \n        qos=2) \n    client.connect(host=mqtt_server_host, \n        port=mqtt_server_port, \n        keepalive=mqtt_keepalive) \n    publish_command(client, CMD_SET_MAX_SPEED, KEY_MPH, 30) \n    publish_command(client, CMD_SET_MIN_SPEED, KEY_MPH, 8) \n    publish_command(client, CMD_LOCK_DOORS) \n    publish_command(client, CMD_TURN_ON_ENGINE) \n    publish_command(client, CMD_ROTATE_RIGHT, KEY_DEGREES, 15) \n    publish_command(client, CMD_ACCELERATE) \n    publish_command(client, CMD_ROTATE_RIGHT, KEY_DEGREES, 25) \n    publish_command(client, CMD_ACCELERATE) \n    publish_command(client, CMD_ROTATE_LEFT, KEY_DEGREES, 15) \n    publish_command(client, CMD_ACCELERATE) \n    publish_command(client, CMD_TURN_OFF_ENGINE) \n    while LoopControl.is_last_command_processed == False: \n        # Process messages and the commands every 500 milliseconds \n        client.loop() \n        time.sleep(0.5) \n    client.disconnect() \n    client.loop() \n```", "```py\n    python3 vehicle_mqtt_remote_control.py\n```", "```py\n    python vehicle_mqtt_remote_control.py\n```", "```py\n    Result from connect: Connection Accepted.\n    Subscribed with QoS: 2\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"SET_MAX_SPEED\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"SET_MIN_SPEED\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"LOCK_DOORS\"}'\n    b'{\"SUCCESSFULLY_PROCESSED_COMMAND\": \"TURN_ON_ENGINE\"}'\n\n```", "```py\n^CTraceback (most recent call last):\n File \"vehicle_mqtt_remote_control.py\", line 87, in <module>\n publish_command(client, CMD_ROTATE_LEFT, KEY_DEGREES, 15)\n File \"vehicle_mqtt_remote_control.py\", line 57, in publish_command\n time.sleep(1)\n KeyboardInterrupt\n```", "```py\nReceived message payload: b'{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 30}'\nvehiclepi01: Setting maximum speed to 30 MPH\nReceived message payload: b'{\"CMD\": \"SET_MIN_SPEED\", \"MPH\": 8}'\nvehiclepi01: Setting minimum speed to 8 MPH\nReceived message payload: b'{\"CMD\": \"LOCK_DOORS\"}'\nvehiclepi01: Locking doors\nReceived message payload: b'{\"CMD\": \"TURN_ON_ENGINE\"}'\nvehiclepi01: Turning on the engine\nReceived message payload: b'{\"CMD\": \"ROTATE_RIGHT\", \"DEGREES\": 15}'\nvehiclepi01: Rotating right 15 degrees\nReceived message payload: b'{\"CMD\": \"ACCELERATE\"}'\nvehiclepi01: Accelerating\nReceived message payload: b'{\"CMD\": \"ROTATE_RIGHT\", \"DEGREES\": 25}'\nvehiclepi01: Rotating right 25 degrees\nReceived message payload: b'{\"CMD\": \"ACCELERATE\"}'\nvehiclepi01: Accelerating\nReceived message payload: b'{\"CMD\": \"PARK_IN_SAFE_PLACE\"}'\nvehiclepi01: Parking in safe place\n```", "```py\n    python3 vehicle_mqtt_remote_control.py\n\n```", "```py\n    python vehicle_mqtt_remote_control.py\n\n```", "```py\n    Received message payload: b'{\"CMD\": \"ROTATE_LEFT\", \"DEGREES\": 15}'\n    vehiclepi01: Rotating left 15 degrees\n    Received message payload: b'{\"CMD\": \"ACCELERATE\"}'\n    vehiclepi01: Accelerating\n    Received message payload: b'{\"CMD\": \"TURN_OFF_ENGINE\"}'\n    vehiclepi01: Turning off the engine\n```", "```py\n    python3 vehicle_mqtt_remote_control.py\n\n```", "```py\n    python vehicle_mqtt_remote_control.py\n\n```", "```py\n    Received message payload: b'{\"CMD\": \"PARK_IN_SAFE_PLACE\"}'\n    vehiclepi01: Parking in safe place\n    Received message payload: b'{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 30}'\n    vehiclepi01: Setting maximum speed to 30 MPH\n```", "```py\n    ^CTraceback (most recent call last):\n      File \"vehicle_mqtt_client.py\", line 198, in <module>\n        time.sleep(1)\n        KeyboardInterrupt\n```", "```py\n    ^CTraceback (most recent call last):\n      File \"vehicle_mqtt_remote_control.py\", line 93, in <module>\n        client.loop()\n      File \"/Users/gaston/HillarMQTT/01/lib/python3.6/site-\n        packages/paho/mqtt/client.py\", line 988, in loop\n        socklist = select.select(rlist, wlist, [], timeout)\n        KeyboardInterrupt\n\n```", "```py\n    python3 vehicle_mqtt_client.py \n```", "```py\n    python vehicle_mqtt_client.py \n```", "```py\nResult from connect: Connection Accepted.\n```", "```py\n    client.will_set(topic=commands_topic,  \n        payload=last_will_payload,  \n        qos=2, \n        retain=True) \n```", "```py\n    python3 vehicle_mqtt_remote_control.py\n```", "```py\n    python vehicle_mqtt_remote_control.py\n```", "```py\n    Received message payload: b'{\"CMD\": \"PARK_IN_SAFE_PLACE\"}'\n    vehiclepi01: Parking in safe place  \n```", "```py\n^CTraceback (most recent call last):\n File \"vehicle_mqtt_client.py\", line 198, in <module>\n time.sleep(1)\n KeyboardInterrupt\n```", "```py\n    ^CTraceback (most recent call last):\n      File \"vehicle_mqtt_remote_control.py\", line 93, in <module>\n        client.loop()\n      File \"/Users/gaston/HillarMQTT/01/lib/python3.6/site-   \n      packages/paho/mqtt/client.py\", line 988, in loop\n        socklist = select.select(rlist, wlist, [], timeout)\n         KeyboardInterrupt\n```", "```py\n    python3 vehicle_mqtt_client.py\n```", "```py\n    python vehicle_mqtt_client.py \n```", "```py\nResult from connect: Connection Accepted.\nReceived message payload: b'{\"CMD\": \"PARK_IN_SAFE_PLACE\"}'\nvehiclepi01: Parking in safe place\n```", "```py\ndef publish_command(client, command_name, key=\"\", value=\"\"): \n    command_message = build_command_message( \n        command_name, key, value) \n    result = client.publish(topic=commands_topic, \n    payload=command_message, qos=2) \n    time.sleep(1) \n    return result \n```", "```py\n    client.loop() \n```", "```py\nif __name__ == \"__main__\": \n    client = mqtt.Client(protocol=mqtt.MQTTv311) \n    client.on_connect = on_connect \n    client.on_subscribe = on_subscribe \n    client.on_message = on_message \n    client.tls_set(ca_certs = ca_certificate, \n         certfile=client_certificate, \n         keyfile=client_key) \n    # Set a will to be sent to the MQTT server in case the client \n    # disconnects unexpectedly \n    last_will_payload = build_command_message(CMD_PARK_IN_SAFE_PLACE) \n    client.will_set(topic=commands_topic,  \n        payload=last_will_payload,  \n        qos=2, \n        retain=True) \n    client.connect(host=mqtt_server_host, \n        port=mqtt_server_port, \n        keepalive=mqtt_keepalive) \n    client.loop_start() \n    publish_command(client, CMD_SET_MAX_SPEED, KEY_MPH, 30) \n    publish_command(client, CMD_SET_MIN_SPEED, KEY_MPH, 8) \n    publish_command(client, CMD_LOCK_DOORS) \n    publish_command(client, CMD_TURN_ON_ENGINE) \n    publish_command(client, CMD_ROTATE_RIGHT, KEY_DEGREES, 15) \n    publish_command(client, CMD_ACCELERATE) \n    publish_command(client, CMD_ROTATE_RIGHT, KEY_DEGREES, 25) \n    publish_command(client, CMD_ACCELERATE) \n    publish_command(client, CMD_ROTATE_LEFT, KEY_DEGREES, 15) \n    publish_command(client, CMD_ACCELERATE) \n    publish_command(client, CMD_TURN_OFF_ENGINE) \n    while LoopControl.is_last_command_processed == False: \n        # Check whether the last command has been processed or not  \n        # every 500 milliseconds \n        time.sleep(0.5) \n       client.disconnect() \n       client.loop_stop() \n```", "```py\n    python3 vehicle_mqtt_remote_control.py\n```", "```py\n    python vehicle_mqtt_remote_control.py \n```"]