["```py\n{ \n    \"Status\": \"Riding\",  \n    \"Speed MPH\": 15.0,  \n    \"Altitude Feet\": 3.0,  \n    \"Water Temperature F\": 56.0 \n}\n```", "```py\n0, 1, 2, 58 \n0, 1.1, 2, 58 \n1, 2, 3, 57 \n1, 3, 3, 57 \n1, 3, 3, 57 \n1, 3, 3, 57 \n1, 4, 4, 57 \n1, 5, 5, 57 \n2, 8, 5, 57 \n2, 10, 4, 57 \n2, 12, 4, 56 \n2, 15, 3, 56 \n2, 15, 3, 56 \n2, 15, 3, 56 \n2, 15, 3, 56 \n2, 15, 3, 56 \n2, 12, 3, 56 \n3, 3, 3, 55 \n3, 2, 3, 55 \n3, 1, 3, 55 \n3, 0, 3, 55 \n```", "```py\nsurfboard_name = \"surfboard01\" \ntopic_format = \"surfboards/{}/{}\" \nstatus_topic = topic_format.format( \n    surfboard_name,  \n    \"status\") \nspeed_mph_topic = topic_format.format( \n    surfboard_name,  \n    \"speedmph\") \naltitude_feet_topic = topic_format.format( \n    surfboard_name,  \n    \"altitudefeet\") \nwater_temperature_f_topic = topic_format.format( \n    surfboard_name,  \n    \"temperaturef\")\n```", "```py\nfrom config import * \nfrom surfboard_config import * \nimport paho.mqtt.client as mqtt \nimport time \nimport csv \n\ndef on_connect(client, userdata, flags, rc): \n    print(\"Result from connect: {}\".format( \n        mqtt.connack_string(rc))) \n    # Check whether the result form connect is the CONNACK_ACCEPTED connack code \n    if rc != mqtt.CONNACK_ACCEPTED: \n        raise IOError(\"I couldn't establish a connection with the MQTT server\") \n\ndef publish_value(client, topic, value): \n    result = client.publish(topic=topic, \n        payload=value, \n        qos=0) \n    return result \n\nif __name__ == \"__main__\": \n    client = mqtt.Client(protocol=mqtt.MQTTv311) \n    client.on_connect = on_connect \n    client.tls_set(ca_certs = ca_certificate, \n        certfile=client_certificate, \n        keyfile=client_key) \n    client.connect(host=mqtt_server_host, \n        port=mqtt_server_port, \n        keepalive=mqtt_keepalive) \n    client.loop_start() \n    publish_debug_message = \"{}: {}\" \n    try: \n        while True: \n            with open('surfboard_sensors_data.csv') as csvfile: \n                reader=csv.reader(csvfile) \n                for row in reader: \n                    status_value = int(row[0]) \n                    speed_mph_value = float(row[1]) \n                    altitude_feet_value = float(row[2]) \n                    water_temperature_f_value = float(row[3]) \n                    print(publish_debug_message.format( \n                        status_topic, \n                        status_value)) \n                    print(publish_debug_message.format( \n                        speed_mph_topic,  \n                        speed_mph_value)) \n                    print(publish_debug_message.format( \n                        altitude_feet_topic,  \n                        altitude_feet_value)) \n                    print(publish_debug_message.format( \n                        water_temperature_f_topic,  \n                        water_temperature_f_value)) \n                    publish_value(client,  \n                        status_topic,  \n                        status_value) \n                    publish_value(client,  \n                        speed_mph_topic,  \n                        speed_mph_value) \n                    publish_value(client,  \n                        altitude_feet_topic,  \n                        altitude_feet_value) \n                    publish_value(client, \n                        water_temperature_f_topic,  \n                        water_temperature_f_value)                    time.sleep(1) \n    except KeyboardInterrupt: \n        print(\"I'll disconnect from the MQTT server\") \n        client.disconnect() \n        client.loop_stop() \n```", "```py\nSURFBOARD_STATUS_IDLE = 0 \nSURFBOARD_STATUS_PADDLING = 1 \nSURFBOARD_STATUS_RIDING = 2 \nSURFBOARD_STATUS_RIDE_FINISHED = 3 \nSURFBOARD_STATUS_WIPED_OUT = 4 \n\nSURFBOARD_STATUS_DICTIONARY = { \n    SURFBOARD_STATUS_IDLE: 'Idle', \n    SURFBOARD_STATUS_PADDLING: 'Paddling', \n    SURFBOARD_STATUS_RIDING: 'Riding', \n    SURFBOARD_STATUS_RIDE_FINISHED: 'Ride finished', \n    SURFBOARD_STATUS_WIPED_OUT: 'Wiped out', \n    } \n```", "```py\nfrom config import * \nfrom surfboard_status import * \nfrom surfboard_config import * \nimport paho.mqtt.client as mqtt \nimport time \nimport json \n\n# Publish key is the one that usually starts with the \"pub-c-\" prefix \n# Do not forget to replace the string with your publish key \npubnub_publish_key = \"pub-c-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" \n# Subscribe key is the one that usually starts with the \"sub-c\" prefix \n# Do not forget to replace the string with your subscribe key \npubnub_subscribe_key = \"sub-c-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" \npubnub_mqtt_server_host = \"mqtt.pndsn.com\" \npubnub_mqtt_server_port = 1883 \npubnub_mqtt_keepalive = 60 \ndevice_id = surfboard_name \npubnub_topic = surfboard_name \n```", "```py\nclass Surfboard: \n    active_instance = None \n    def __init__(self, device_id, status,  \n        speed_mph, altitude_feet, water_temperature_f): \n        self.device_id = device_id \n        self.status = status \n        self.speed_mph = speed_mph \n        self.altitude_feet = altitude_feet \n        self.water_temperature_f = water_temperature_f \n        self.is_pubnub_connected = False \n        Surfboard.active_instance = self \n\n    def build_json_message(self): \n        # Build a message with the status for the surfboard \n        message = { \n            \"Status\": SURFBOARD_STATUS_DICTIONARY[self.status], \n            \"Speed MPH\": self.speed_mph, \n            \"Altitude Feet\": self.altitude_feet, \n            \"Water Temperature F\": self.water_temperature_f,  \n        } \n        json_message = json.dumps(message) \n        return json_message\n```", "```py\ndef on_connect_mosquitto(client, userdata, flags, rc): \n    print(\"Result from Mosquitto connect: {}\".format( \n        mqtt.connack_string(rc))) \n    # Check whether the result form connect is the CONNACK_ACCEPTED connack code \n    if rc == mqtt.CONNACK_ACCEPTED: \n        # Subscribe to a topic filter that provides all the sensors \n        sensors_topic_filter = topic_format.format( \n            surfboard_name, \n            \"+\") \n        client.subscribe(sensors_topic_filter, qos=0) \n\ndef on_subscribe_mosquitto(client, userdata, mid, granted_qos): \n    print(\"I've subscribed with QoS: {}\".format( \n        granted_qos[0])) \n\ndef print_received_message_mosquitto(msg): \n    print(\"Message received. Topic: {}. Payload: {}\".format( \n        msg.topic,  \n        str(msg.payload))) \n\ndef on_status_message_mosquitto(client, userdata, msg): \n    print_received_message_mosquitto(msg) \n    Surfboard.active_instance.status = int(msg.payload) \n\ndef on_speed_mph_message_mosquitto(client, userdata, msg): \n    print_received_message_mosquitto(msg) \n    Surfboard.active_instance.speed_mph = float(msg.payload) \n\ndef on_altitude_feet_message_mosquitto(client, userdata, msg): \n    print_received_message_mosquitto(msg) \n    Surfboard.active_instance.altitude_feet = float(msg.payload) \n\ndef on_water_temperature_f_message_mosquitto(client, userdata, msg): \n    print_received_message_mosquitto(msg) \n    Surfboard.active_instance.water_temperature_f = float(msg.payload) \n\ndef on_connect_pubnub(client, userdata, flags, rc): \n    print(\"Result from PubNub connect: {}\".format( \n        mqtt.connack_string(rc))) \n    # Check whether the result form connect is the CONNACK_ACCEPTED connack code \n    if rc == mqtt.CONNACK_ACCEPTED: \n        Surfboard.active_instance.is_pubnub_connected = True \n\ndef on_disconnect_pubnub(client, userdata, rc): \n    Surfboard.active_instance.is_pubnub_connected = False \n    print(\"Disconnected from PubNub\")\n```", "```py\nif __name__ == \"__main__\": \n    surfboard = Surfboard(device_id=device_id, \n        status=SURFBOARD_STATUS_IDLE, \n        speed_mph=0,  \n        altitude_feet=0,  \n        water_temperature_f=0) \n    pubnub_client_id = \"{}/{}/{}\".format( \n        pubnub_publish_key, \n        pubnub_subscribe_key, \n        device_id) \n    pubnub_client = mqtt.Client(client_id=pubnub_client_id, \n        protocol=mqtt.MQTTv311) \n    pubnub_client.on_connect = on_connect_pubnub \n    pubnub_client.on_disconnect = on_disconnect_pubnub \n    pubnub_client.connect(host=pubnub_mqtt_server_host, \n        port=pubnub_mqtt_server_port, \n        keepalive=pubnub_mqtt_keepalive) \n    pubnub_client.loop_start() \n    mosquitto_client = mqtt.Client(protocol=mqtt.MQTTv311) \n    mosquitto_client.on_connect = on_connect_mosquitto \n    mosquitto_client.on_subscribe = on_subscribe_mosquitto \n    mosquitto_client.message_callback_add( \n        status_topic, \n        on_status_message_mosquitto) \n    mosquitto_client.message_callback_add( \n        speed_mph_topic, \n        on_speed_mph_message_mosquitto) \n    mosquitto_client.message_callback_add( \n        altitude_feet_topic, \n        on_altitude_feet_message_mosquitto) \n    mosquitto_client.message_callback_add( \n        water_temperature_f_topic, \n        on_water_temperature_f_message_mosquitto) \n    mosquitto_client.tls_set(ca_certs = ca_certificate, \n        certfile=client_certificate, \n        keyfile=client_key) \n    mosquitto_client.connect(host=mqtt_server_host, \n        port=mqtt_server_port, \n        keepalive=mqtt_keepalive) \n    mosquitto_client.loop_start() \n    try: \n        while True: \n            if Surfboard.active_instance.is_pubnub_connected: \n                payload = Surfboard.active_instance.build_json_message() \n                result = pubnub_client.publish(topic=pubnub_topic, \n                    payload=payload, \n                    qos=0) \n                print(\"Publishing: {}\".format(payload)) \n            else: \n                print(\"Not connected\") \n            time.sleep(1) \n    except KeyboardInterrupt: \n        print(\"I'll disconnect from both Mosquitto and PubNub\") \n        pubnub_client.disconnect() \n        pubnub_client.loop_stop() \n        mosquitto_client.disconnect() \n        mosquitto_client.loop_stop() \n```", "```py\npublish_key/subscribe_key/device_id \n```", "```py\n    python3 surfboard_sensors_emulator.py  \n```", "```py\n    python surfboard_sensors_emulator.py\n```", "```py\n Result from connect: Connection Accepted.\n    surfboards/surfboard01/status: 0\n    surfboards/surfboard01/speedmph: 1.0\n    surfboards/surfboard01/altitudefeet: 2.0\n    surfboards/surfboard01/temperaturef: 58.0\n    surfboards/surfboard01/status: 0\n    surfboards/surfboard01/speedmph: 1.1\n    surfboards/surfboard01/altitudefeet: 2.0\n    surfboards/surfboard01/temperaturef: 58.0\n    surfboards/surfboard01/status: 1\n    surfboards/surfboard01/speedmph: 2.0\n    surfboards/surfboard01/altitudefeet: 3.0\n    surfboards/surfboard01/temperaturef: 57.0\n```", "```py\n    python3 surfboard_monitor.py  \n```", "```py\n    python surfboard_monitor.py\n```", "```py\n    Not connected\n    Result from Mosquitto connect: Connection Accepted.\n    I've subscribed with QoS: 0\n    Result from PubNub connect: Connection Accepted.\n    Message received. Topic: surfboards/surfboard01/status. Payload: \n    b'3'\n    Message received. Topic: surfboards/surfboard01/speedmph. Payload: \n    b'0.0'\n    Message received. Topic: surfboards/surfboard01/altitudefeet. \n    Payload: b'3.0'\n    Message received. Topic: surfboards/surfboard01/temperaturef. \n    Payload: b'55.0'\n    Publishing: {\"Status\": \"Ride finished\", \"Speed MPH\": 0.0, \"Altitude \n    Feet\": 3.0, \"Water Temperature F\": 55.0}\n    Message received. Topic: surfboards/surfboard01/status. Payload: \n    b'0'\n    Message received. Topic: surfboards/surfboard01/speedmph. Payload: \n    b'1.0'\n    Message received. Topic: surfboards/surfboard01/altitudefeet. \n    Payload: b'2.0'\n    Message received. Topic: surfboards/surfboard01/temperaturef. \n    Payload: b'58.0'\n    Publishing: {\"Status\": \"Idle\", \"Speed MPH\": 1.0, \"Altitude Feet\": \n    2.0, \"Water Temperature F\": 58.0}\n    Message received. Topic: surfboards/surfboard01/status. Payload: \n    b'0'\n    Message received. Topic: surfboards/surfboard01/speedmph. Payload: \n    b'1.1'\n    Message received. Topic: surfboards/surfboard01/altitudefeet. \n    Payload: b'2.0'\n    Message received. Topic: surfboards/surfboard01/temperaturef. \n    Payload: b'58.0'\n    Publishing: {\"Status\": \"Idle\", \"Speed MPH\": 1.1, \"Altitude Feet\": \n    2.0, \"Water Temperature F\": 58.0}\n\n```"]