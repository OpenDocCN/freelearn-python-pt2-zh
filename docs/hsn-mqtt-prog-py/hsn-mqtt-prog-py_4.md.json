["```py\n{\"CMD\": \"TURN_ON_ENGINE\"}\n```", "```py\n{\"CMD\": \"SET_MAX_SPEED\", \"MPH\": 5}\n```", "```py\n~/HillarMQTT/01\n```", "```py\n%USERPROFILE%\\HillarMQTT\\01\n```", "```py\n$env:userprofile\\HillarMQTT\\01\n```", "```py\npython3 -m venv ~/HillarMQTT/01\n```", "```py\npython -m venv %USERPROFILE%\\HillarMQTT\\01\n```", "```py\npython -m venv $env:userprofile\\HillarMQTT\\01\n```", "```py\necho $SHELL\n```", "```py\nsource ~/HillarMQTT/01/bin/activate\n```", "```py\nsource ~/HillarMQTT/01/bin/activate.csh\n```", "```py\nsource ~/HillarMQTT/01/bin/activate.fish\n```", "```py\n%USERPROFILE%\\HillarMQTT\\01\\Scripts\\activate.bat\n```", "```py\ncd $env:USERPROFILE\n.\\HillarMQTT\\01\\Scripts\\Activate.ps1\n```", "```py\nC:\\Users\\gaston\\HillarMQTT\\01\\Scripts\\Activate.ps1 : File C:\\Users\\gaston\\HillarMQTT\\01\\Scripts\\Activate.ps1 cannot be loaded because running scripts is disabled on this system. For more information, see about_Execution_Policies at\nhttp://go.microsoft.com/fwlink/?LinkID=135170.\nAt line:1 char:1\n+ C:\\Users\\gaston\\HillarMQTT\\01\\Scripts\\Activate.ps1\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n + CategoryInfo : SecurityError: (:) [], PSSecurityException\n + FullyQualifiedErrorId : UnauthorizedAccess\n```", "```py\npip install paho-mqtt==1.3.1\n```", "```py\nCollecting paho-mqtt==1.3.1\n Downloading paho-mqtt-1.3.1.tar.gz (80kB)\n 100% |################################| 81kB 1.2MB/s \nInstalling collected packages: paho-mqtt\n Running setup.py install for paho-mqtt ... done\nSuccessfully installed paho-mqtt-1.3.1\n```", "```py\nimport os.path\n\n# Replace /Users/gaston/python_certificates with the path\n# in which you saved the certificate authority file,\n# the client certificate file and the client key\ncertificates_path = \"/Users/gaston/python_certificates\"\nca_certificate = os.path.join(certificates_path, \"ca.crt\")\nclient_certificate = os.path.join(certificates_path, \"board001.crt\")\nclient_key = os.path.join(certificates_path, \"board001.key\")\n# Replace 192.168.1.101 with the IP or hostname for the Mosquitto\n# or other MQTT server\n# Make sure the IP or hostname matches the value \n# you used for Common Name\nmqtt_server_host = \"192.168.1.101\"\nmqtt_server_port = 8883\nmqtt_keepalive = 60\n```", "```py\nfrom config import *\nimport paho.mqtt.client as mqtt\n\ndef on_connect(client, userdata, flags, rc):\n    print(\"Result from connect: {}\".format(\n        mqtt.connack_string(rc)))\n    # Subscribe to the vehicles/vehiclepi01/tests topic filter\n    client.subscribe(\"vehicles/vehiclepi01/tests\", qos=2)\n\ndef on_subscribe(client, userdata, mid, granted_qos):\n    print(\"I've subscribed with QoS: {}\".format(\n        granted_qos[0]))\n\ndef on_message(client, userdata, msg):\n    print(\"Message received. Topic: {}. Payload: {}\".format(\n        msg.topic, \n        str(msg.payload)))\n\nif __name__ == \"__main__\":\n    client = mqtt.Client(protocol=mqtt.MQTTv311)\n    client.on_connect = on_connect\n    client.on_subscribe = on_subscribe\n    client.on_message = on_message\n    client.tls_set(ca_certs = ca_certificate,\n        certfile=client_certificate,\n        keyfile=client_key)\n    client.connect(host=mqtt_server_host,\n        port=mqtt_server_port,\n        keepalive=mqtt_keepalive)\n    client.loop_forever()\n\n```", "```py\npython3 subscribe_with_paho.py\n```", "```py\npython subscribe_with_paho.py\n```", "```py\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"/Users/gaston/HillarMQTT/01/lib/python3.6/site-packages/paho/mqtt/client.py\", line 612, in connect\n return self.reconnect()\n File \"/Users/gaston/HillarMQTT/01/lib/python3.6/site-packages/paho/mqtt/client.py\", line 751, in reconnect\n self._tls_match_hostname()\n File \"/Users/gaston/HillarMQTT/01/lib/python3.6/site-packages/paho/mqtt/client.py\", line 2331, in _tls_match_hostname\n raise ssl.SSLError('Certificate subject does not match remote hostname.')\n```", "```py\nmosquitto_pub -h 192.168.1.101 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/tests -m '{\"CMD\": \"UNLOCK_DOORS\"}' -q 2 --tls-version tlsv1.2\n\nmosquitto_pub -h 192.168.1.101 -V mqttv311 -p 8883 --cafile ca.crt --cert board001.crt --key board001.key -t vehicles/vehiclepi01/tests -m '{\"CMD\": \"TURN_ON_HEADLIGHTS\"}' -q 2 --tls-version tlsv1.2\n```", "```py\nResult from connect: Connection Accepted.\nI've subscribed with QoS: 2\nMessage received. Topic: vehicles/vehiclepi01/tests. Payload: b'{\"CMD\": \"UNLOCK_DOORS\"}'\nMessage received. Topic: vehicles/vehiclepi01/tests. Payload: b'{\"CMD\": \"TURN_ON_HEADLIGHTS\"}'\n```", "```py\nTraceback (most recent call last):\n File \"subscribe_with_paho.py\", line 33, in <module>\n client.loop_forever()\n File \"/Users/gaston/HillarMQTT/01/lib/python3.6/site-packages/paho/mqtt/client.py\", line 1481, in loop_forever\n rc = self.loop(timeout, max_packets)\n File \"/Users/gaston/HillarMQTT/01/lib/python3.6/site-packages/paho/mqtt/client.py\", line 988, in loop\n socklist = select.select(rlist, wlist, [], timeout)\nKeyboardInterrupt\n```", "```py\n# Key strings\nCOMMAND_KEY = \"CMD\"\nSUCCESFULLY_PROCESSED_COMMAND_KEY = \"SUCCESSFULLY_PROCESSED_COMMAND\"\n# Command strings\n# Turn on the vehicle's engine.\nCMD_TURN_ON_ENGINE = \"TURN_ON_ENGINE\"\n# Turn off the vehicle's engine\nCMD_TURN_OFF_ENGINE = \"TURN_OFF_ENGINE\"\n# Close and lock the vehicle's doors\nCMD_LOCK_DOORS = \"LOCK_DOORS\"\n# Unlock and open the vehicle's doors\nCMD_UNLOCK_DOORS = \"UNLOCK_DOORS\"\n# Park the vehicle\nCMD_PARK = \"PARK\"\n# Park the vehicle in a safe place that is configured for the vehicle\nCMD_PARK_IN_SAFE_PLACE = \"PARK_IN_SAFE_PLACE\"\n# Turn on the vehicle's headlights\nCMD_TURN_ON_HEADLIGHTS = \"TURN_ON_HEADLIGHTS\"\n# Turn off the vehicle's headlights\nCMD_TURN_OFF_HEADLIGHTS = \"TURN_OFF_HEADLIGHTS\"\n# Turn on the vehicle's parking lights, also known as sidelights\nCMD_TURN_ON_PARKING_LIGHTS = \"TURN_ON_PARKING_LIGHTS\"\n# Turn off the vehicle's parking lights, also known as sidelights\nCMD_TURN_OFF_PARKING_LIGHTS = \"TURN_OFF_PARKING_LIGHTS\"\n# Accelerate the vehicle, that is, press the gas pedal\nCMD_ACCELERATE = \"ACCELERATE\"\n# Brake the vehicle, that is, press the brake pedal\nCMD_BRAKE = \"BRAKE\"\n# Make the vehicle rotate to the right. We must specify the degrees \n# we want the vehicle to rotate right in the value for the DEGREES key\nCMD_ROTATE_RIGHT = \"ROTATE_RIGHT\"\n# Make the vehicle rotate to the left. We must specify the degrees \n# we want the vehicle to rotate left in the value for the DEGREES key\nCMD_ROTATE_LEFT = \"ROTATE_LEFT\"\n# Set the maximum speed that we allow to the vehicle. We must specify \n# the desired maximum speed in miles per hour in the value for the MPH key\nCMD_SET_MAX_SPEED = \"SET_MAX_SPEED\"\n# Set the minimum speed that we allow to the vehicle. We must specify \n# the desired minimum speed in miles per hour in the value for the MPH key\nCMD_SET_MIN_SPEED = \"SET_MIN_SPEED\"\n# Degrees key\nKEY_DEGREES = \"DEGREES\"\n# Miles per hour key\nKEY_MPH = \"MPH\"\n```", "```py\nclass Vehicle:\n    def __init__(self, name):\n        self.name = name\n        self.min_speed_mph = 0\n        self.max_speed_mph = 10\n\n    def print_action_with_name_prefix(self, action):\n        print(\"{}: {}\".format(self.name, action))\n\n    def turn_on_engine(self):\n        self.print_action_with_name_prefix(\"Turning on the engine\")\n\n    def turn_off_engine(self):\n        self.print_action_with_name_prefix(\"Turning off the engine\")\n\n    def lock_doors(self):\n        self.print_action_with_name_prefix(\"Locking doors\")\n\n    def unlock_doors(self):\n        self.print_action_with_name_prefix(\"Unlocking doors\")\n\n    def park(self):\n        self.print_action_with_name_prefix(\"Parking\")\n\n    def park_in_safe_place(self):\n        self.print_action_with_name_prefix(\"Parking in safe place\")\n\n    def turn_on_headlights(self):\n        self.print_action_with_name_prefix(\"Turning on headlights\")\n\n    def turn_off_headlights(self):\n        self.print_action_with_name_prefix(\"Turning off headlights\")\n\n    def turn_on_parking_lights(self):\n        self.print_action_with_name_prefix(\"Turning on parking lights\")\n\n    def turn_off_parking_lights(self):\n        self.print_action_with_name_prefix(\"Turning off parking \n         lights\")\n\n    def accelerate(self):\n        self.print_action_with_name_prefix(\"Accelerating\")\n\n    def brake(self):\n        self.print_action_with_name_prefix(\"Braking\")\n\n    def rotate_right(self, degrees):\n        self.print_action_with_name_prefix(\"Rotating right {} \n          degrees\".format(degrees))\n\n    def rotate_left(self, degrees):\n        self.print_action_with_name_prefix(\"Rotating left {} \n           degrees\".format(degrees))\n\n    def set_max_speed(self, mph):\n        self.max_speed_mph = mph\n        self.print_action_with_name_prefix(\"Setting maximum speed to {} \n        MPH\".format(mph))\n\n    def set_min_speed(self, mph):\n        self.min_speed_mph = mph\n        self.print_action_with_name_prefix(\"Setting minimum speed to {} \n        MPH\".format(mph))\n```", "```py\nclass VehicleCommandProcessor:\n    commands_topic = \"\"\n    processed_commands_topic = \"\"\n    active_instance = None\n\n    def __init__(self, name, vehicle):\n        self.name = name\n        self.vehicle = vehicle\n        VehicleCommandProcessor.commands_topic = \\\n            \"vehicles/{}/commands\".format(self.name)\n        VehicleCommandProcessor.processed_commands_topic = \\\n            \"vehicles/{}/executedcommands\".format(self.name)\n        self.client = mqtt.Client(protocol=mqtt.MQTTv311)\n        VehicleCommandProcessor.active_instance = self\n        self.client.on_connect = VehicleCommandProcessor.on_connect\n        self.client.on_subscribe = VehicleCommandProcessor.on_subscribe\n        self.client.on_message = VehicleCommandProcessor.on_message\n        self.client.tls_set(ca_certs = ca_certificate,\n            certfile=client_certificate,\n            keyfile=client_key)\n        self.client.connect(host=mqtt_server_host,\n                            port=mqtt_server_port,\n                            keepalive=mqtt_keepalive)\n```", "```py\n    @staticmethod\n    def on_connect(client, userdata, flags, rc):\n        print(\"Result from connect: {}\".format(\n            mqtt.connack_string(rc)))\n        # Check whether the result form connect is the CONNACK_ACCEPTED  \n          connack code\n        if rc == mqtt.CONNACK_ACCEPTED:\n            # Subscribe to the commands topic filter\n            client.subscribe(\n                VehicleCommandProcessor.commands_topic, \n                qos=2)\n```", "```py\n    @staticmethod\n    def on_subscribe(client, userdata, mid, granted_qos):\n        print(\"I've subscribed with QoS: {}\".format(\n            granted_qos[0]))\n```", "```py\n    @staticmethod\n    def on_message(client, userdata, msg):\n        if msg.topic == VehicleCommandProcessor.commands_topic:\n            print(\"Received message payload: \n            {0}\".format(str(msg.payload)))\n            try:\n                message_dictionary = json.loads(msg.payload)\n                if COMMAND_KEY in message_dictionary:\n                    command = message_dictionary[COMMAND_KEY]\n                    vehicle = \n                    VehicleCommandProcessor.active_instance.vehicle\n                    is_command_executed = False\n                    if KEY_MPH in message_dictionary:\n                        mph = message_dictionary[KEY_MPH]\n                    else:\n                        mph = 0\n                    if KEY_DEGREES in message_dictionary:\n                        degrees = message_dictionary[KEY_DEGREES]\n                    else:\n                        degrees = 0\n                    command_methods_dictionary = {\n                        CMD_TURN_ON_ENGINE: lambda: \n                        vehicle.turn_on_engine(),\n                        CMD_TURN_OFF_ENGINE: lambda: \n                        vehicle.turn_off_engine(),\n                        CMD_LOCK_DOORS: lambda: vehicle.lock_doors(),\n                        CMD_UNLOCK_DOORS: lambda: \n                        vehicle.unlock_doors(),\n                        CMD_PARK: lambda: vehicle.park(),\n                        CMD_PARK_IN_SAFE_PLACE: lambda: \n                        vehicle.park_in_safe_place(),\n                        CMD_TURN_ON_HEADLIGHTS: lambda: \n                        vehicle.turn_on_headlights(),\n                        CMD_TURN_OFF_HEADLIGHTS: lambda: \n                        vehicle.turn_off_headlights(),\n                        CMD_TURN_ON_PARKING_LIGHTS: lambda: \n                        vehicle.turn_on_parking_lights(),\n                        CMD_TURN_OFF_PARKING_LIGHTS: lambda: \n                        vehicle.turn_off_parking_lights(),\n                        CMD_ACCELERATE: lambda: vehicle.accelerate(),\n                        CMD_BRAKE: lambda: vehicle.brake(),\n                        CMD_ROTATE_RIGHT: lambda: \n                        vehicle.rotate_right(degrees),\n                        CMD_ROTATE_LEFT: lambda: \n                        vehicle.rotate_left(degrees),\n                        CMD_SET_MIN_SPEED: lambda: \n                        vehicle.set_min_speed(mph),\n                        CMD_SET_MAX_SPEED: lambda: \n                        vehicle.set_max_speed(mph),\n                    }\n                    if command in command_methods_dictionary:\n                        method = command_methods_dictionary[command]\n                        # Call the method\n                        method()\n                        is_command_executed = True\n                    if is_command_executed:\n\n           VehicleCommandProcessor.active_instance.\n            publish_executed_command_message(message_dictionary)\n                    else:\n                        print(\"I've received a message with an   \n                          unsupported command.\")\n            except ValueError:\n                # msg is not a dictionary\n                # No JSON object could be decoded\n                print(\"I've received an invalid message.\")\n```", "```py\n    def publish_executed_command_message(self, message):\n        response_message = json.dumps({\n            SUCCESFULLY_PROCESSED_COMMAND_KEY:\n                message[COMMAND_KEY]})\n        result = self.client.publish(\n            topic=self.__class__.processed_commands_topic,\n            payload=response_message)\n        return result\n```", "```py\n    def process_incoming_commands(self):\n        self.client.loop()\n```", "```py\nif __name__ == \"__main__\":\n    vehicle = Vehicle(\"vehiclepi01\")\n    vehicle_command_processor = VehicleCommandProcessor(\"vehiclepi01\", \n      vehicle)\n    while True:\n        # Process messages and the commands every 1 second\n        vehicle_command_processor.process_incoming_commands()\n        time.sleep(1)\n```"]