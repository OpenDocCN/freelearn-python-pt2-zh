["```py\nfrom adafruit_circuitplayground.express import cpx\n```", "```py\nfrom adafruit_crickit import crickit\n```", "```py\n>>> from adafruit_circuitplayground.express import cpx\n>>> from adafruit_crickit import crickit\n>>> \n>>> MIN_PULSE=750 \n>>> MAX_PULSE=2250\n```", "```py\n>>> crickit.servo_1.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\n```", "```py\n>>> crickit.servo_1.angle = 0\n```", "```py\n>>> crickit.servo_1.angle = 90\n```", "```py\n>>> event.process()\nA1 True\n```", "```py\nimport time\nfrom adafruit_circuitplayground.express import cpx\nfrom adafruit_crickit import crickit\n\nMIN_PULSE = 750\nMAX_PULSE = 2250\n\ncrickit.servo_1.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\ncrickit.servo_1.angle = 0\ntime.sleep(3)\ncrickit.servo_1.angle = 90\ntime.sleep(60)\n```", "```py\n>>> from adafruit_circuitplayground.express import cpx\n>>> from adafruit_crickit import crickit\n>>> \n>>> MIN_PULSE = 750\n>>> MAX_PULSE = 2250\n>>> \n>>> crickit.servo_1.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\n```", "```py\n>>> crickit.servo_1.angle = 0\n```", "```py\n>>> crickit.servo_1.angle = 180\n```", "```py\n>>> crickit.servo_1.angle = 0\n>>> crickit.servo_1.actuation_range = 160\n```", "```py\n>>> crickit.servo_1.angle = 160\n```", "```py\nimport time\nfrom adafruit_circuitplayground.express import cpx\nfrom adafruit_crickit import crickit\n\nMIN_PULSE = 750\nMAX_PULSE = 2250\n\ncrickit.servo_1.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\ncrickit.servo_1.angle = 0\ntime.sleep(3)\ncrickit.servo_1.actuation_range = 160\ncrickit.servo_1.angle = 160\ntime.sleep(60)\n```", "```py\n>>> from adafruit_circuitplayground.express import cpx\n>>> from adafruit_crickit import crickit\n>>> \n>>> MIN_PULSE = 750\n>>> MAX_PULSE = 2250\n>>> \n>>> crickit.servo_1.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\n>>> crickit.servo_1.angle = 0\n```", "```py\n>>> crickit.servo_1.angle = 180\n```", "```py\n>>> crickit.servo_1.angle = 190\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"adafruit_motor/servo.py\", line 111, in angle\nValueError: Angle out of range\n```", "```py\n>>> crickit.servo_1.angle = 0\n>>> crickit.servo_1.actuation_range = 160\n```", "```py\n>>> crickit.servo_1.angle = 180\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"adafruit_motor/servo.py\", line 111, in angle\nValueError: Angle out of range\n```", "```py\n>>> crickit.servo_1.angle = 160\n```", "```py\nimport time\nfrom adafruit_circuitplayground.express import cpx\nfrom adafruit_crickit import crickit\n\nMIN_PULSE = 750\nMAX_PULSE = 2250\n\ncrickit.servo_1.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\ncrickit.servo_1.angle = 0\ncrickit.servo_1.actuation_range = 160\n\ncrickit.servo_1.angle = 0\ntime.sleep(3)\n\ncrickit.servo_1.angle = 45\ntime.sleep(3)\n\ncrickit.servo_1.angle = 90\ntime.sleep(3)\n\ncrickit.servo_1.angle = 160\ntime.sleep(3)\n```", "```py\n>>> import time\n>>> from adafruit_circuitplayground.express import cpx\n>>> from adafruit_crickit import crickit\n>>> \n>>> MIN_PULSE = 750\n>>> MAX_PULSE = 2250\n>>> MAX_ANGLE = 160\n>>> STEP = 10\n>>> DELAY = 0.1\n```", "```py\n>>> def init(servo):\n...     servo.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\n...     servo.angle = 0\n...     servo.actuation_range = MAX_ANGLE\n...     \n...     \n... \n>>> init(crickit.servo_1)\n```", "```py\n>>> def sweep(servo, direction):\n...     angle = int(servo.angle)\n...     while 0 <= angle <= MAX_ANGLE:\n...         print(angle)\n...         servo.angle = angle\n...         time.sleep(DELAY)\n...         angle += STEP * direction\n...         \n... \n>>> sweep(crickit.servo_1, 1)\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n110\n120\n130\n140\n150\n160\n```", "```py\n>>> sweep(crickit.servo_1, -1)\n160\n150\n140\n130\n120\n110\n100\n90\n80\n70\n60\n50\n40\n30\n20\n10\n0\n```", "```py\nimport time\nfrom adafruit_circuitplayground.express import cpx\nfrom adafruit_crickit import crickit\n\nMIN_PULSE = 750\nMAX_PULSE = 2250\nMAX_ANGLE = 160\nSTEP = 10\nDELAY = 0.1\n\ndef init(servo):\n    servo.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\n    servo.angle = 0\n    servo.actuation_range = MAX_ANGLE\n\ndef sweep(servo, direction):\n    angle = int(servo.angle)\n    while 0 <= angle <= MAX_ANGLE:\n        print(angle)\n        servo.angle = angle\n        time.sleep(DELAY)\n        angle += STEP * direction\n\ndef main():\n    init(crickit.servo_1)\n    while True:\n        sweep(crickit.servo_1, 1)\n        sweep(crickit.servo_1, -1)\n\nmain()\n```", "```py\n>>> import time\n>>> from adafruit_circuitplayground.express import cpx\n>>> from adafruit_crickit import crickit\n>>> \n>>> MIN_PULSE = 750\n>>> MAX_PULSE = 2250\n>>> MAX_ANGLE = 160\n>>> STEP = 10\n>>> DELAY = 0.1\n```", "```py\n>>> def init(servo):\n...     servo.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\n...     servo.angle = 0\n...     servo.actuation_range = MAX_ANGLE\n...     \n...     \n... \n>>> init(crickit.servo_1)\n```", "```py\n>>> def move(servo, angle, direction):\n...     new = angle + STEP * direction\n...     if 0 <= new <= MAX_ANGLE:\n...         angle = new\n...         print(angle)\n...         servo.angle = angle\n...     return angle\n...     \n... \n>>> angle = 0\n>>> angle = move(crickit.servo_1, angle, 1)\n10\n>>> angle\n10\n```", "```py\n>>> angle = move(crickit.servo_1, angle, 1)\n20\n```", "```py\n>>> angle = move(crickit.servo_1, angle, -1)\n10\n```", "```py\nimport time\nfrom adafruit_circuitplayground.express import cpx\nfrom adafruit_crickit import crickit\n\nMIN_PULSE = 750\nMAX_PULSE = 2250\nMAX_ANGLE = 160\nSTEP = 10\nDELAY = 0.1\n\ndef init(servo):\n    servo.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\n    servo.angle = 0\n    servo.actuation_range = MAX_ANGLE\n\ndef move(servo, angle, direction):\n    new = angle + STEP * direction\n    if 0 <= new <= MAX_ANGLE:\n        angle = new\n        print(angle)\n        servo.angle = angle\n    return angle\n\ndef main():\n    init(crickit.servo_1)\n    angle = 0\n    while True:\n        if cpx.button_a:\n            angle = move(crickit.servo_1, angle, 1)\n        if cpx.button_b:\n            angle = move(crickit.servo_1, angle, -1)\n        time.sleep(DELAY)\n\nmain()\n```", "```py\n>>> import time\n>>> from adafruit_circuitplayground.express import cpx\n>>> from adafruit_crickit import crickit\n>>> \n>>> MIN_PULSE = 750\n>>> MAX_PULSE = 2250\n>>> MAX_ANGLE = 160\n>>> STEP = 10\n>>> DELAY = 0.1\n>>> \n>>> def init(servo):\n...     servo.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\n...     servo.angle = 0\n...     servo.actuation_range = MAX_ANGLE\n...     \n...     \n... \n>>> \n```", "```py\n>>> servos = [crickit.servo_1, crickit.servo_4]\n>>> angles = [0, 0]\n```", "```py\n>>> init(servos[0])\n>>> init(servos[1])\n```", "```py\n>>> switch = int(cpx.switch)\n>>> switch\n0\n```", "```py\n>>> def move(servo, angle, direction):\n...     new = angle + STEP * direction\n...     if 0 <= new <= MAX_ANGLE:\n...         angle = new\n...         print(angle)\n...         servo.angle = angle\n...     return angle\n...     \n...     \n... \n>>> angles[switch] = move(servos[switch], angles[switch], 1)\n10\n```", "```py\n>>> angle = move(crickit.servo_1, angle, 1)\n>>> angles\n[10, 0]\n>>> angles[switch] = move(servos[switch], angles[switch], 1)\n20\n>>> angles\n[20, 0]\n```", "```py\n>>> switch = int(cpx.switch)\n>>> switch\n1\n```", "```py\n>>> angles[switch] = move(servos[switch], angles[switch], 1)\n10\n>>> angles\n[20, 10]\n```", "```py\nimport time\nfrom adafruit_circuitplayground.express import cpx\nfrom adafruit_crickit import crickit\n\nMIN_PULSE = 750\nMAX_PULSE = 2250\nMAX_ANGLE = 160\nSTEP = 10\nDELAY = 0.1\n\ndef init(servo):\n    servo.set_pulse_width_range(MIN_PULSE, MAX_PULSE)\n    servo.angle = 0\n    servo.actuation_range = MAX_ANGLE\n\ndef move(servo, angle, direction):\n    new = angle + STEP * direction\n    if 0 <= new <= MAX_ANGLE:\n        angle = new\n        print(angle)\n        servo.angle = angle\n    return angle\n\ndef main():\n    servos = [crickit.servo_1, crickit.servo_4]\n    angles = [0, 0]\n    init(servos[0])\n    init(servos[1])\n    while True:\n        switch = int(cpx.switch)\n        if cpx.button_a:\n            angles[switch] = move(servos[switch], angles[switch], 1)\n        if cpx.button_b:\n            angles[switch] = move(servos[switch], angles[switch], -1)\n        time.sleep(DELAY)\n\nmain()\n```", "```py\n>>> from adafruit_crickit import crickit\n>>> import time\n>>> \n>>> crickit.dc_motor_1.throttle = 1\n```", "```py\n>>> crickit.dc_motor_1.throttle = 0\n```", "```py\n>>> while True:\n...     crickit.dc_motor_1.throttle = 1\n...     time.sleep(1)\n...     crickit.dc_motor_1.throttle = 0\n...     time.sleep(1)\n...     \n...     \n... \n```", "```py\nfrom adafruit_crickit import crickit\nimport time\n\nwhile True:\n    crickit.dc_motor_1.throttle = 1\n    time.sleep(1)\n    crickit.dc_motor_1.throttle = 0\n    time.sleep(1)\n```", "```py\n>>> from adafruit_crickit import crickit\n>>> import time\n>>> DELAY = 0.1\n>>> \n>>> crickit.dc_motor_1.throttle = 0.5\n```", "```py\n>>> crickit.dc_motor_1.throttle = 0.25\n```", "```py\n>>> crickit.dc_motor_1.throttle = -1\n```", "```py\n>>> crickit.dc_motor_1.throttle = 0\n```", "```py\n>>> from adafruit_crickit import crickit\n>>> def change_throttle(motor, start, increment):\n...     throttle = start\n...     for i in range(21):\n...         print(throttle)\n...         motor.throttle = throttle\n...         throttle += increment\n...         throttle = round(throttle, 1)\n...         time.sleep(DELAY)\n...         \n... \n>>> change_throttle(crickit.dc_motor_1, -1.0, 0.1)\n-1.0\n-0.9\n-0.8\n-0.7\n-0.6\n-0.5\n-0.4\n-0.3\n-0.2\n-0.1\n0.0\n0.1\n0.2\n0.3\n0.4\n0.5\n0.6\n0.7\n0.8\n0.9\n1.0\n>>> \n```", "```py\nfrom adafruit_crickit import crickit\nimport time\n\nDELAY = 0.1\n\ndef change_throttle(motor, start, increment):\n    throttle = start\n    for i in range(21):\n        print(throttle)\n        motor.throttle = throttle\n        throttle += increment\n        throttle = round(throttle, 1)\n        time.sleep(DELAY)\n\ndef main():\n    while True:\n        change_throttle(crickit.dc_motor_1, -1.0, 0.1)\n        change_throttle(crickit.dc_motor_1, 1.0, -0.1)\n\nmain()\n```", "```py\n>>> from adafruit_crickit import crickit\n>>> from adafruit_circuitplayground.express import cpx\n>>> import time\n>>> \n>>> STEP = 0.1\n>>> DELAY = 0.1\n>>> MIN_THROTTLE = -1\n>>> MAX_THROTTLE = 1\n>>> \n>>> throttle = 0\n>>> crickit.dc_motor_1.throttle = throttle\n```", "```py\n>>> def move(motor, throttle, direction):\n...     new = throttle + STEP * direction\n...     if MIN_THROTTLE <= new <= MAX_THROTTLE:\n...         throttle = round(new, 1)\n...         print(throttle)\n...         motor.throttle = throttle\n...     return throttle\n...     \n...     \n... \n>>> throttle = move(crickit.dc_motor_1, throttle, 1)\n0.1\n>>> throttle = move(crickit.dc_motor_1, throttle, 1)\n0.2\n>>> throttle = move(crickit.dc_motor_1, throttle, 1)\n0.3\n```", "```py\n>>> throttle = move(crickit.dc_motor_1, throttle, -1)\n0.2\n>>> throttle = move(crickit.dc_motor_1, throttle, -1)\n0.1\n>>> throttle = move(crickit.dc_motor_1, throttle, -1)\n0.0\n```", "```py\n>>> throttle = move(crickit.dc_motor_1, throttle, -1)\n-0.1\n>>> throttle = move(crickit.dc_motor_1, throttle, -1)\n-0.2\n>>> throttle = move(crickit.dc_motor_1, throttle, -1)\n-0.3\n```", "```py\n>>> throttle = move(crickit.dc_motor_1, throttle, 1)\n-0.2\n>>> throttle = move(crickit.dc_motor_1, throttle, 1)\n-0.1\n>>> throttle = move(crickit.dc_motor_1, throttle, 1)\n0.0\n```", "```py\nfrom adafruit_crickit import crickit\nfrom adafruit_circuitplayground.express import cpx\nimport time\n\nSTEP = 0.1\nDELAY = 0.1\nMIN_THROTTLE = -1\nMAX_THROTTLE = 1\n\ndef move(motor, throttle, direction):\n    new = throttle + STEP * direction\n    if MIN_THROTTLE <= new <= MAX_THROTTLE:\n        throttle = round(new, 1)\n        print(throttle)\n        motor.throttle = throttle\n    return throttle\n\ndef main():\n    throttle = 0\n    while True:\n        if cpx.button_a:\n            throttle = move(crickit.dc_motor_1, throttle, 1)\n        if cpx.button_b:\n            throttle = move(crickit.dc_motor_1, throttle, -1)\n        time.sleep(DELAY)\n\nmain()\n```"]