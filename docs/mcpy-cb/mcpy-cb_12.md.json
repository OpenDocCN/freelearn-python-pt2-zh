["```py\n>>> import socket\n>>> \n>>> addr_info = socket.getaddrinfo('python.org', 80)\n>>> addr_info\n[(2, 1, 0, '', ('45.55.99.72', 80))]\n```", "```py\n>>> ip = addr_info[0][-1][0]\n>>> ip\n'45.55.99.72'\n```", "```py\n>>> def get_ip(host, port=80):\n...     addr_info = socket.getaddrinfo(host, port)\n...     return addr_info[0][-1][0]\n...     \n...     \n... \n>>> \n```", "```py\n>>> get_ip('python.org')\n'45.55.99.72'\n>>> get_ip('micropython.org')\n'176.58.119.26'\n>>> get_ip('pypi.org')\n'151.101.0.223'\n```", "```py\nimport socket\nimport time\n\nBOOTUP_WIFI_DELAY = 5\n\ndef get_ip(host, port=80):\n    addr_info = socket.getaddrinfo(host, port)\n    return addr_info[0][-1][0]\n\ndef main():\n    print('applying wifi delay...')\n    time.sleep(BOOTUP_WIFI_DELAY)\n    print('performing DNS lookup...')\n    hosts = ['python.org', 'micropython.org', 'pypi.org']\n```", "```py\n    for host in hosts:\n        print(host, get_ip(host))\n\nmain()\n```", "```py\n>>> import network\n>>> import time\n>>> \n>>> station = network.WLAN(network.STA_IF)\n>>> station.isconnected()\nFalse\n```", "```py\n>>> station.isconnected()\nTrue\n```", "```py\n>>> ip = station.ifconfig()[0]\n>>> ip\n'10.0.0.38'\n```", "```py\n>>> def wait_for_networking():\n...     station = network.WLAN(network.STA_IF)\n...     while not station.isconnected():\n...         print('waiting for network...')\n...         time.sleep(1)\n...     ip = station.ifconfig()[0]\n...     print('address on network:', ip)\n...     return ip\n...     \n...     \n... \n>>> \n>>> ip = wait_for_networking()\naddress on network: 10.0.0.38\n>>> ip\n'10.0.0.38'\n>>> \n```", "```py\nimport network\nimport time\n\ndef wait_for_networking():\n    station = network.WLAN(network.STA_IF)\n    while not station.isconnected():\n        print('waiting for network...')\n        time.sleep(1)\n    ip = station.ifconfig()[0]\n```", "```py\n    print('address on network:', ip)\n    return ip\n```", "```py\nfrom netcheck import wait_for_networking\n\ndef main():\n    ip = wait_for_networking()\n    print('main started')\n    print('device ip:', ip)\n\nmain()\n```", "```py\n>>> import socket\n>>> import time\n>>> \n>>> def parse_url(url):\n...     return url.replace('http://', '').split('/', 1)\n...     \n...     \n... \n>>> \n```", "```py\n>>> url = 'http://micropython.org/ks/test.html'\n>>> host, path = parse_url(url)\n>>> host\n'micropython.org'\n>>> path\n'ks/test.html'\n>>> \n```", "```py\n>>> HTTP_PORT = 80\n>>> def get_ip(host, port=HTTP_PORT):\n...     addr_info = socket.getaddrinfo(host, port)\n...     return addr_info[0][-1][0]\n...     \n...     \n... \n>>> ip = get_ip(host)\n>>> ip\n'176.58.119.26'\n>>> \n```", "```py\n>>> HTTP_REQUEST = 'GET /{path} HTTP/1.0\\r\\nHost: {host}\\r\\n\\r\\n'\n>>> BUFFER_SIZE = 1024\n>>> \n>>> def fetch(url):\n...     host, path = parse_url(url)\n...     ip = get_ip(host)\n...     sock = socket.socket()\n...     sock.connect((ip, 80))\n...     request = HTTP_REQUEST.format(host=host, path=path)\n...     sock.send(bytes(request, 'utf8'))\n...     response = b''\n...     while True:\n...         chunk = sock.recv(BUFFER_SIZE)\n...         if not chunk:\n...             break\n...         response += chunk\n...     sock.close()\n...     body = response.split(b'\\r\\n\\r\\n', 1)[1]\n...     return str(body, 'utf8')\n...     \n...     \n... \n>>> \n```", "```py\n>>> html = fetch('http://micropython.org/ks/test.html')\n>>> html\n'<!DOCTYPE html>\\n<html lang=\"en\">\\n    <head>\\n        <title>Test</title>\\n    </head>\\n    <body>\\n        <h1>Test</h1>\\n        It\\'s working if you can read this!\\n    </body>\\n</html>\\n'\n>>> print(html)\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Test</title>\n    </head>\n    <body>\n        <h1>Test</h1>\n        It's working if you can read this!\n    </body>\n</html>\n\n>>> \n```", "```py\nfrom netcheck import wait_for_networking\nimport socket\n\nHTTP_REQUEST = 'GET /{path} HTTP/1.0\\r\\nHost: {host}\\r\\n\\r\\n'\nHTTP_PORT = 80\nBUFFER_SIZE = 1024\n\ndef parse_url(url):\n    return url.replace('http://', '').split('/', 1)\n\ndef get_ip(host, port=HTTP_PORT):\n    addr_info = socket.getaddrinfo(host, port)\n    return addr_info[0][-1][0]\n\ndef fetch(url):\n    host, path = parse_url(url)\n    ip = get_ip(host)\n    sock = socket.socket()\n    sock.connect((ip, 80))\n    request = HTTP_REQUEST.format(host=host, path=path)\n    sock.send(bytes(request, 'utf8'))\n    response = b''\n    while True:\n        chunk = sock.recv(BUFFER_SIZE)\n        if not chunk:\n            break\n        response += chunk\n    sock.close()\n    body = response.split(b'\\r\\n\\r\\n', 1)[1]\n    return str(body, 'utf8')\n\ndef main():\n    wait_for_networking()\n    html = fetch('http://micropython.org/ks/test.html')\n    print(html)\n\nmain()\n```", "```py\n>>> import urequests\n>>> \n>>> url = 'http://micropython.org/ks/test.html'\n>>> req = urequests.get(url)\n```", "```py\n>>> req.text\n'<!DOCTYPE html>\\n<html lang=\"en\">\\n    <head>\\n        <title>Test</title>\\n    </head>\\n    <body>\\n        <h1>Test</h1>\\n        It\\'s working if you can read this!\\n    </body>\\n</html>\\n'\n>>> print(req.text)\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <title>Test</title>\n    </head>\n    <body>\n        <h1>Test</h1>\n        It's working if you can read this!\n    </body>\n</html>\n\n>>> \n```", "```py\n>>> req.content\nb'<!DOCTYPE html>\\n<html lang=\"en\">\\n    <head>\\n        <title>Test</title>\\n    </head>\\n    <body>\\n        <h1>Test</h1>\\n        It\\'s working if you can read this!\\n    </body>\\n</html>\\n'\n>>> \n```", "```py\n>>> req.status_code\n200\n```", "```py\n>>> url = 'http://micropython.org/no_such_page_exists'\n>>> req = urequests.get(url)\n```", "```py\n>>> req.status_code\n404\n>>> req.reason\nb'Not Found'\n>>> \n```", "```py\nfrom netcheck import wait_for_networking\nimport urequests\n\ndef main():\n    wait_for_networking()\n    url = 'http://micropython.org/ks/test.html'\n    html = urequests.get(url).text\n    print(html)\n\nmain()\n```", "```py\n>>> import urequests\n>>> import time\n>>> \n>>> ISS_API_URL = 'http://api.open-notify.org/iss-now.json'\n>>> req = urequests.get(ISS_API_URL)\n```", "```py\n>>> req.text\n'{\"timestamp\": 1555012195, \"iss_position\": {\"latitude\": \"-33.1779\", \"longitude\": \"45.0667\"}, \"message\": \"success\"}'\n>>> \n```", "```py\n>>> data = req.json()\n>>> data\n{'message': 'success', 'iss_position': {'longitude': '45.0667', 'latitude': '-33.1779'}, 'timestamp': 1555012195}\n```", "```py\n>>> data['iss_position']['latitude']\n'-33.1779'\n>>> data['iss_position']['longitude']\n'45.0667'\n```", "```py\n>>> req.status_code\n>>> def track_space_station():\n...     for i in range(10):\n...         data = urequests.get(ISS_API_URL).json()\n...         position = data['iss_position']\n...         print(i, 'lat: {latitude} long: {longitude}'.format(**position))\n...         time.sleep(1)\n...         \n...         \n... \n>>> track_space_station()\n0 lat: -38.5192 long: 52.4146\n1 lat: -38.5783 long: 52.5069\n2 lat: -38.6570 long: 52.6302\n3 lat: -38.7355 long: 52.7538\n4 lat: -38.7943 long: 52.8467\n5 lat: -38.8726 long: 52.9708\n6 lat: -38.9507 long: 53.0952\n7 lat: -39.0092 long: 53.1887\n8 lat: -39.0871 long: 53.3136\n9 lat: -39.1454 long: 53.4075\n>>> \n```", "```py\nfrom netcheck import wait_for_networking\nimport urequests\nimport time\n\nISS_API_URL = 'http://api.open-notify.org/iss-now.json'\n\ndef track_space_station():\n    for i in range(10):\n        data = urequests.get(ISS_API_URL).json()\n        position = data['iss_position']\n        print(i, 'lat: {latitude} long: {longitude}'.format(**position))\n        time.sleep(1)\n\ndef main():\n    wait_for_networking()\n    track_space_station()\n\nmain()\n```", "```py\n>>> from netcheck import wait_for_networking\n>>> import socket\n>>> import time\n>>> \n>>> HTTP_PORT = 80\n>>> TCP_BACKLOG = 0\n```", "```py\n>>> TEMPLATE = \"\"\"\\\n... <!DOCTYPE HTML>\n... <html lang=\"en\">\n... <head>\n...     <title>ESP8266</title>\n...     <meta charset=\"UTF-8\">\n...     <link rel=\"icon\" href=\"data:,\">\n...     <meta name=\"viewport\" content=\"width=device-width\">\n... </head>\n... <body>\n...     <h1>ESP8266</h1>\n...     uptime: {uptime}s\n...     </body>\n...     </html>\n... \"\"\"\n>>> \n```", "```py\n>>> def socket_listen():\n...     sock = socket.socket()\n...     sock.bind(('0.0.0.0', HTTP_PORT))\n...     sock.listen(TCP_BACKLOG)\n...     return sock\n...     \n...     \n... \n>>> ip = wait_for_networking()\naddress on network: 10.0.0.38\n>>> sock = socket_listen()\n```", "```py\n>>> def serve_requests(sock, ip):\n...     print('webserver started on http://%s/' % ip)\n...     start = time.monotonic()\n...     while True:\n...         conn, address = sock.accept()\n...         print('request:', address)\n...         request = conn.makefile('rwb')\n...         while True:\n...             line = request.readline()\n...             if not line or line == b'\\r\\n':\n...                 break\n...         uptime = time.monotonic() - start\n...         html = TEMPLATE.format(uptime=uptime)\n...         conn.send(html)\n...         conn.close()\n...         \n...         \n... \n>>> \n>>> serve_requests(sock, ip)\nwebserver started on http://10.0.0.38/\nrequest: ('10.0.0.151', 47290)\nrequest: ('10.0.0.151', 47292)\nrequest: ('10.0.0.151', 47294)\n```", "```py\nfrom netcheck import wait_for_networking\nimport socket\nimport time\n\nHTTP_PORT = 80\nTCP_BACKLOG = 0\nTEMPLATE = \"\"\"\\\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <title>ESP8266</title>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"data:,\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n</head>\n<body>\n    <h1>ESP8266</h1>\n    uptime: {uptime}s\n</body>\n</html>\n\"\"\"\n\ndef socket_listen():\n    sock = socket.socket()\n    sock.bind(('0.0.0.0', HTTP_PORT))\n    sock.listen(TCP_BACKLOG)\n    return sock\n\ndef serve_requests(sock, ip):\n    print('webserver started on http://%s/' % ip)\n    start = time.monotonic()\n    while True:\n        conn, address = sock.accept()\n        print('request:', address)\n        request = conn.makefile('rwb')\n        while True:\n            line = request.readline()\n            if not line or line == b'\\r\\n':\n                break\n        uptime = time.monotonic() - start\n        html = TEMPLATE.format(uptime=uptime)\n        conn.send(html)\n        conn.close()\n\ndef main():\n    ip = wait_for_networking()\n    sock = socket_listen()\n    serve_requests(sock, ip)\n\nmain()\n```", "```py\n>>> from netcheck import wait_for_networking\n>>> import socket\n>>> \n>>> HTTP_PORT = 80\n>>> TCP_BACKLOG = 0\n>>> BASE_TEMPLATE = \"\"\"\\\n... <!DOCTYPE HTML>\n... <html lang=\"en\">\n... <head>\n...     <title>MicroPython</title>\n...     <meta charset=\"UTF-8\">\n...     <link rel=\"icon\" href=\"data:,\">\n...     <meta name=\"viewport\" content=\"width=device-width\">\n... </head>\n... <body>\n... %s\n... </body>\n... </html>\n... \"\"\"\n>>> \n```", "```py\n>>> def socket_listen():\n...     sock = socket.socket()\n...     sock.bind(('0.0.0.0', HTTP_PORT))\n...     sock.listen(TCP_BACKLOG)\n...     return sock\n...     \n...     \n... \n```", "```py\n>>> def serve_requests(sock, ip, handler):\n...     print('webserver started on http://%s/' % ip)\n...     while True:\n...         conn, address = sock.accept()\n...         stream = conn.makefile('rwb')\n...         request = b''\n...         while True:\n...             line = stream.readline()\n...             request += line\n...             if not line or line == b'\\r\\n':\n...                 break\n...         request = str(request, 'utf8')\n...         method, path, _ = request.split(' ', 2)\n...         client_ip = address[0]\n...         print('request:', client_ip, method, path)\n...         html = handler(request, method, path)\n...         conn.send(html)\n...         conn.close()\n...         \n...         \n... \n>>> \n```", "```py\n>>> def run_server(handler):\n...     ip = wait_for_networking()\n...     sock = socket_listen()\n...     serve_requests(sock, ip, handler)\n...     \n...     \n... \n>>> \n```", "```py\n>>> import random\n>>> \n>>> def handler(request, method, path):\n...     body = 'random: %s' % random.random()\n...     return BASE_TEMPLATE % body\n...     \n...     \n... \n>>> run_server(handler)\naddress on network: 10.0.0.38\nwebserver started on http://10.0.0.38/\nrequest: 10.0.0.151 GET /hotneumm\nrequest: 10.0.0.151 GET /\nrequest: 10.0.0.151 GET /\nrequest: 10.0.0.151 GET /\n```", "```py\nfrom netcheck import wait_for_networking\nimport socket\n\nHTTP_PORT = 80\nTCP_BACKLOG = 0\nBASE_TEMPLATE = \"\"\"\\\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <title>MicroPython</title>\n    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"data:,\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n</head>\n<body>\n%s\n</body>\n</html>\n\"\"\"\ndef socket_listen():\n    sock = socket.socket()\n    sock.bind(('0.0.0.0', HTTP_PORT))\n    sock.listen(TCP_BACKLOG)\n    return sock\n\ndef serve_requests(sock, ip, handler):\n    print('webserver started on http://%s/' % ip)\n    while True:\n        conn, address = sock.accept()\n        stream = conn.makefile('rwb')\n        request = b''\n        while True:\n            line = stream.readline()\n            request += line\n            if not line or line == b'\\r\\n':\n                break\n        request = str(request, 'utf8')\n        method, path, _ = request.split(' ', 2)\n        client_ip = address[0]\n        print('request:', client_ip, method, path)\n        html = handler(request, method, path)\n        conn.send(html)\n        conn.close()\n\ndef run_server(handler):\n    ip = wait_for_networking()\n    sock = socket_listen()\n    serve_requests(sock, ip, handler)\n```", "```py\nfrom web import BASE_TEMPLATE, run_server\nimport random\n\ndef handler(request, method, path):\n    body = 'random: %s' % random.random()\n    return BASE_TEMPLATE % body\n\ndef main():\n    run_server(handler)\n\nmain()\n```", "```py\n>>> from web import BASE_TEMPLATE, run_server\n>>> from machine import Pin\n>>> \n>>> pins = dict(red=Pin(0, Pin.OUT), blue=Pin(2, Pin.OUT))\n>>> state = dict(red=True, blue=True)\n>>> \n>>> \n```", "```py\n>>> BODY = \"\"\"\n... Red: {red}<br/>\n... Blue: {blue}<br/><br/>\n... Toggle Colors:<br/><br/>\n... <form action=\"/red\" method=post><input type=submit value=Red></form><br/>\n... <form action=\"/blue\" method=post><input type=submit value=Blue></form><br/>\n... \"\"\"\n>>> \n```", "```py\n>>> def format(value):\n...     return 'On' if value else 'Off'\n...     \n...     \n... \n>>> \n>>> format(True)\n'On'\n>>> format(False)\n'Off'\n>>> \n```", "```py\n>>> def gen_body():\n...     data = {k: format(v) for k, v in state.items()}\n...     return BODY.format(**data)\n...     \n...     \n... \n>>> gen_body()\n'\\nRed: On<br/>\\nBlue: On<br/><br/>\\nToggle Colors:<br/><br/>\\n<form action=\"/red\" method=post><input type=submit value=Red></form><br/>\\n<form action=\"/blue\" method=post><input type=submit value=Blue></form><br/>\\n'\n>>> \n```", "```py\n>>> def toggle_color(color):\n...     state[color] = not state[color]\n...     pin_value = 0 if state[color] else 1\n...     pins[color].value(pin_value)\n...     \n...     \n... \n>>> toggle_color('red')\n>>> toggle_color('red')\n```", "```py\n>>> def handler(request, method, path):\n...     if method == 'POST':\n...         color = path.replace('/', '')\n...         toggle_color(color)\n...     return BASE_TEMPLATE % gen_body()\n...     \n...     \n... \n>>> \n```", "```py\nfrom web import BASE_TEMPLATE, run_server\nfrom machine import Pin\n\npins = dict(red=Pin(0, Pin.OUT), blue=Pin(2, Pin.OUT))\nstate = dict(red=True, blue=True)\n\nBODY = \"\"\"\nRed: {red}<br/>\nBlue: {blue}<br/><br/>\nToggle Colors:<br/><br/>\n<form action=\"/red\" method=post><input type=submit value=Red></form><br/>\n<form action=\"/blue\" method=post><input type=submit value=Blue></form><br/>\n\"\"\"\n\ndef format(value):\n    return 'On' if value else 'Off'\n\ndef gen_body():\n    data = {k: format(v) for k, v in state.items()}\n    return BODY.format(**data)\n\ndef toggle_color(color):\n    state[color] = not state[color]\n    pin_value = 0 if state[color] else 1\n    pins[color].value(pin_value)\n\ndef handler(request, method, path):\n    if method == 'POST':\n        color = path.replace('/', '')\n        toggle_color(color)\n    return BASE_TEMPLATE % gen_body()\n\ndef main():\n    pins['red'].value(0)\n    pins['blue'].value(0)\n    run_server(handler)\n\nmain()\n```", "```py\n>>> from web import BASE_TEMPLATE, run_server\n>>> from machine import Pin\n>>> import json\n>>> \n>>> pins = dict(red=Pin(0, Pin.OUT), blue=Pin(2, Pin.OUT))\n>>> state = dict(red=True, blue=True)\n```", "```py\n>>> JSON_HEADERS = '''\\\n... HTTP/1.1 200 OK\n... Content-Type: application/json\n... \n... '''\n>>> \n```", "```py\n>>> def toggle_color(color):\n...     state[color] = not state[color]\n...     pin_value = 0 if state[color] else 1\n...     pins[color].value(pin_value)\n...     \n...     \n... \n>>> \n```", "```py\n>>> def handler(request, method, path):\n...     if method == 'POST':\n...         color = path.replace('/', '')\n...         toggle_color(color)\n...     return JSON_HEADERS + json.dumps(state) + '\\n'\n...     \n...     \n... \n>>> \n```", "```py\nfrom web import BASE_TEMPLATE, run_server\nfrom machine import Pin\nimport json\n\npins = dict(red=Pin(0, Pin.OUT), blue=Pin(2, Pin.OUT))\nstate = dict(red=True, blue=True)\nJSON_HEADERS = '''\\\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n'''\n\ndef toggle_color(color):\n    state[color] = not state[color]\n    pin_value = 0 if state[color] else 1\n    pins[color].value(pin_value)\n\ndef handler(request, method, path):\n    if method == 'POST':\n        color = path.replace('/', '')\n        toggle_color(color)\n    return JSON_HEADERS + json.dumps(state) + '\\n'\n\ndef main():\n    pins['red'].value(0)\n    pins['blue'].value(0)\n    run_server(handler)\n\nmain()\n```", "```py\n$ curl http://10.0.0.38/\n{\"red\": true, \"blue\": true}\n```", "```py\n$ curl -X POST http://10.0.0.38/red\n{\"red\": false, \"blue\": true}\n```", "```py\n$ curl -X POST http://10.0.0.38/red\n{\"red\": true, \"blue\": true}\n```"]