["```py\n>>> f = open('main.py')\n```", "```py\n>>> f = open('hi.txt', 'w')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nOSError: 30\n>>>\n```", "```py\nimport storage\nstorage.remount('/', False)\n```", "```py\n>>> f = open('hi.txt', 'w')\n>>> f.write('hi there')\n8\n>>> f.close()\n```", "```py\n>>> import os\n>>> os.remove('boot.py')\n```", "```py\n>>> import os\n>>> os.listdir()\n['.fseventsd', '.metadata_never_index', '.Trashes', 'boot_out.txt', 'main.py', 'lib']\n```", "```py\n>>> sorted(os.listdir())\n['.Trashes', '.fseventsd', '.metadata_never_index', 'boot_out.txt', 'lib', 'main.py']\n```", "```py\n>>> os.listdir('.fseventsd')\n['no_log']\n```", "```py\n>>> FILE_CODE  = 0x8000\n>>> \n>>> os.stat('lib')[0] == FILE_CODE\nFalse\n```", "```py\n>>> os.stat('main.py')[0] == FILE_CODE\nTrue\n```", "```py\n>>> def isfile(path):\n...     return os.stat(path)[0] == FILE_CODE\n...     \n...     \n... \n>>> isfile('lib')\nFalse\n>>> isfile('main.py')\nTrue\n>>> \n```", "```py\n>>> files = [i for i in sorted(os.listdir()) if isfile(i)]\n>>> files\n['.Trashes', '.metadata_never_index', 'boot_out.txt', 'main.py']\n```", "```py\n>>> dirs = [i for i in sorted(os.listdir()) if not isfile(i)]\n>>> dirs\n['.fseventsd', 'lib']\n```", "```py\nimport os\n\nFILE_CODE = 0x8000\n\ndef isfile(path):\n    return os.stat(path)[0] == FILE_CODE\n\ndef main():\n    files = [i for i in sorted(os.listdir()) if isfile(i)]\n    print('files:', files)\n    dirs = [i for i in sorted(os.listdir()) if not isfile(i)]\n    print('dirs:', dirs)\n\nmain()\n```", "```py\n>>> import os\n>>> os.remove('hi.txt')\n```", "```py\n>>> os.remove('hi.txt')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nOSError: [Errno 2] No such file/directory\n>>> \n```", "```py\n>>> os.rmdir('mydir')\n```", "```py\n>>> FILE_CODE = 0x8000\n>>> \n>>> def isfile(path):\n...     return os.stat(path)[0] == FILE_CODE\n...     \n...     \n... \n>>>\n```", "```py\n>>> def any_remove(path):\n...     func = os.remove if isfile(path) else os.rmdir\n...     func(path)\n...     \n...     \n... \n>>> \n```", "```py\n>>> any_remove('hi.txt')\n>>> any_remove('mydir')\n>>> \n```", "```py\n>>> import os\n>>> os.mkdir('mydir')\n```", "```py\n>>> os.mkdir('mydir')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nOSError: [Errno 17] File exists\n>>> \n```", "```py\n>>> def exists(path):\n...     try:\n...         os.stat(path)\n...     except OSError:\n...         return False\n...     return True\n...     \n...     \n... \n>>> \n```", "```py\n>>> exists('main.py')\nTrue\n>>> exists('invalid_path')\nFalse\n```", "```py\n>>> def mkdir_safe(path):\n...     if not exists(path):\n...         os.mkdir(path)\n...         \n...         \n... \n>>> \n```", "```py\n>>> mkdir_safe('newdir')\n>>> mkdir_safe('newdir')\n```", "```py\n>>> def makedirs(path):\n...     items = path.strip('/').split('/')\n...     count = len(items)\n...     paths = ['/' + '/'.join(items[0:i + 1]) for i in \n...     range(count)]\n...     for path in paths:\n...         os.mkdir(path)\n...         \n...         \n... \n>>> \n```", "```py\n>>> makedirs('/top/middle/bottom')\n```", "```py\nhi there\n```", "```py\n>>> f = open('hi.txt')\n>>> data = f.read()\n>>> f.close()\n>>> data\n'hi there\\n'\n```", "```py\n>>> with open('hi.txt') as f:\n...     data = f.read()\n...     \n... \n>>> data\n'hi there\\n'\n```", "```py\n>>> data = open('hi.txt').read()\n>>> data\n'hi there\\n'\n```", "```py\n>>> data = open('hi.txt', 'rb').read()\n>>> data\nb'hi there\\n'\n>>> type(data)\n<class 'bytes'>\n```", "```py\n>>> with open('hi.txt', 'w') as f:\n...     count = f.write('hi there')\n...     \n...     \n... \n>>> count\n8\n```", "```py\n>>> with open('hi.txt', 'wb') as f:\n...     count = f.write(b'hi there')\n...     \n...     \n... \n>>> count\n8\n>>>\n```", "```py\n>>> class Path:\n...     def __init__(self, path):\n...         self._path = path\n...         \n...     def __repr__(self):\n...         return \"Path(%r)\" % self._path\n...         \n... \n>>> \n>>> path = Path('hi.txt')\n>>> path\nPath('hi.txt')\n>>> \n```", "```py\n>>> class Path:\n...     def __init__(self, path):\n...         self._path = path\n...         \n...     def __repr__(self):\n...         return \"Path(%r)\" % self._path\n...         \n...     def write_bytes(self, data):\n...         with open(self._path, 'wb') as f:\n...             return f.write(data)\n...             \n...     def write_text(self, data):\n...         with open(self._path, 'w') as f:\n...             return f.write(data)\n...             \n... \n>>> \n>>> path = Path('hi.txt')\n>>> path.write_text('hi there')\n8\n>>> path.write_bytes(b'hi there')\n8\n```", "```py\nclass Path:\n    def __init__(self, path):\n        self._path = path\n\n    def __repr__(self):\n        return \"Path(%r)\" % self._path\n\n    def write_bytes(self, data):\n        with open(self._path, 'wb') as f:\n            return f.write(data)\n\n    def write_text(self, data):\n        with open(self._path, 'w') as f:\n            return f.write(data)\n```", "```py\nfrom pathlib import Path\n\nPath('hi.txt').write_text('hi there')\n```", "```py\n>>> import os\n>>> stats = os.statvfs('/')\n>>> stats\n(1024, 1024, 2024, 1040, 1040, 0, 0, 0, 0, 255)\n```", "```py\n>>> block_size = stats[0]\n>>> total_blocks = stats[2]\n>>> free_blocks = stats[3]\n```", "```py\n>>> stats = dict()\n>>> stats['free'] = block_size * free_blocks\n>>> stats['total'] = block_size * total_blocks\n>>> stats['used'] = stats['total'] - stats['free']\n>>> stats\n{'free': 1064960, 'used': 1007616, 'total': 2072576}\n```", "```py\n>>> def get_disk_stats():\n...     stats = os.statvfs('/')\n...     block_size = stats[0]\n...     total_blocks = stats[2]\n...     free_blocks = stats[3]\n...     stats = dict()\n...     stats['free'] = block_size * free_blocks\n...     stats['total'] = block_size * total_blocks\n...     stats['used'] = stats['total'] - stats['free']\n...     return stats\n... \n>>> \n>>> get_disk_stats()\n{'free': 1064960, 'used': 1007616, 'total': 2072576}\n>>> \n```", "```py\n>>> def format_size(val):\n...     val = int(val / 1024)               # convert bytes to KiB\n...     val = '{:,}'.format(val)            # add thousand separator\n...     val = '{0: >6} KiB'.format(val)     # right align amounts\n...     return val\n...     \n...     \n... \n>>> print('total space:', format_size(stats['total']))\ntotal space:  2,024 KiB\n>>> \n```", "```py\n>>> def print_stats():\n...     stats = get_disk_stats()\n...     print('free space: ', format_size(stats['free']))\n...     print('used space: ', format_size(stats['used']))\n...     print('total space:', format_size(stats['total']))\n...     \n...     \n... \n>>> print_stats()\nfree space:   1,040 KiB\nused space:     984 KiB\ntotal space:  2,024 KiB\n>>>\n```", "```py\nimport os\n\ndef get_disk_stats():\n    stats = os.statvfs('/')\n    block_size = stats[0]\n    total_blocks = stats[2]\n    free_blocks = stats[3]\n    stats = dict()\n    stats['free'] = block_size * free_blocks\n    stats['total'] = block_size * total_blocks\n    stats['used'] = stats['total'] - stats['free']\n    return stats\n\ndef format_size(val):\n    val = int(val / 1024)               # convert bytes to KiB\n    val = '{:,}'.format(val)            # add thousand separator\n    val = '{0: >6} KiB'.format(val)     # right align amounts\n    return val\n\ndef print_stats():\n    stats = get_disk_stats()\n    print('free space: ', format_size(stats['free']))\n    print('used space: ', format_size(stats['used']))\n    print('total space:', format_size(stats['total']))\n\nprint_stats()\n```"]