["```py\n>>> from touchio import TouchIn\n>>> import board\n>>> \n>>> def handle(name, current):\n...     print(name, current)\n...     \n...     \n... \n>>> handle('A1', True)\nA1 True\n>>> handle('A1', False)\nA1 False\n>>> \n```", "```py\n>>> class TouchEvent:\n...     THRESHOLD_ADJUSTMENT = 400\n...     \n...     def __init__(self, name, onchange):\n...         self.name = name\n...         self.last = False\n...         self.onchange = onchange\n...         pin = getattr(board, name)\n...         self.touch = TouchIn(pin)\n...         self.touch.threshold += self.THRESHOLD_ADJUSTMENT\n...         \n...         \n... \n>>> event = TouchEvent('A1', handle)\n>>> event.touch.value\nFalse\n```", "```py\n>>> event.touch.value\nTrue\n```", "```py\n>>> class TouchEvent:\n...     THRESHOLD_ADJUSTMENT = 400\n...     \n...     def __init__(self, name, onchange):\n...         self.name = name\n...         self.last = False\n...         self.onchange = onchange\n...         pin = getattr(board, name)\n...         self.touch = TouchIn(pin)\n...         self.touch.threshold += self.THRESHOLD_ADJUSTMENT\n...         \n...     def process(self):\n...         current = self.touch.value\n...         if current != self.last:\n...             self.onchange(self.name, current)\n...             self.last = current\n...             \n...             \n... \n>>> event = TouchEvent('A1', handle)\n```", "```py\n>>> event.process()\nA1 True\n```", "```py\nfrom touchio import TouchIn\nimport board\n\nclass TouchEvent:\n    THRESHOLD_ADJUSTMENT = 400\n\n    def __init__(self, name, onchange):\n        self.name = name\n        self.last = False\n        self.onchange = onchange\n        pin = getattr(board, name)\n        self.touch = TouchIn(pin)\n        self.touch.threshold += self.THRESHOLD_ADJUSTMENT\n\n    def process(self):\n        current = self.touch.value\n        if current != self.last:\n            self.onchange(self.name, current)\n            self.last = current\n\ndef handle(name, current):\n    print(name, current)\n\nevent = TouchEvent('A1', handle)\nwhile True:\n    event.process()\n```", "```py\n>>> from digitalio import DigitalInOut\n>>> import board\n>>> \n>>> \n>>> speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n>>> speaker_control\n<DigitalInOut>\n```", "```py\n>>> speaker_control.switch_to_output(value=True)\n```", "```py\n>>> from digitalio import DigitalInOut\n>>> import board\n>>> \n>>> def enable_speakers():\n...     speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n...     speaker_control.switch_to_output(value=True)\n...     \n...     \n... \n>>> enable_speakers()\n```", "```py\n>>> from digitalio import DigitalInOut\n>>> from audioio import WaveFile, AudioOut\n>>> import board\n>>> import time\n>>> \n>>> def enable_speakers():\n...     speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n...     speaker_control.switch_to_output(value=True)\n...     \n...     \n... \n>>> enable_speakers()\n>>> speaker = AudioOut(board.SPEAKER)\n>>> speaker\n<AudioOut>\n>>> \n```", "```py\n>>> file = open('piano.wav', \"rb\")\n>>> audio = WaveFile(file)\n>>> speaker.play(audio)\n>>> \n```", "```py\n>>> def play_file(speaker, path):\n...     file = open(path, \"rb\")\n...     audio = WaveFile(file)\n...     speaker.play(audio)\n...     \n...     \n... \n>>> play_file(speaker, 'piano.wav')\n```", "```py\nfrom digitalio import DigitalInOut\nfrom audioio import WaveFile, AudioOut\nimport board\nimport time\n\ndef play_file(speaker, path):\n    file = open(path, \"rb\")\n    audio = WaveFile(file)\n    speaker.play(audio)\n\ndef enable_speakers():\n    speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n    speaker_control.switch_to_output(value=True)\n\nenable_speakers()\nspeaker = AudioOut(board.SPEAKER)\nplay_file(speaker, 'piano.wav')\ntime.sleep(100)\n```", "```py\n>>> from neopixel import NeoPixel\n>>> import board\n>>> \n>>> PIXEL_COUNT = 10\n>>> pixels = NeoPixel(board.NEOPIXEL, PIXEL_COUNT)\n>>> pixels.brightness = 0.05\n>>> pixels[0] = 0xFF0000\n```", "```py\n>>> RGB = dict(\n...     black=0x000000,\n...     white=0xFFFFFF,\n...     green=0x00FF00,\n...     red=0xFF0000,\n...     yellow=0xFFFF00,\n... )\n>>> pixels[1] = RGB['green']\n```", "```py\n>>> pixels[0] = RGB['black']\n```", "```py\nfrom neopixel import NeoPixel\nimport board\n\nPIXEL_COUNT = 10\nRGB = dict(\n    black=0x000000,\n    white=0xFFFFFF,\n    green=0x00FF00,\n    red=0xFF0000,\n    yellow=0xFFFF00,\n)\n\npixels = NeoPixel(board.NEOPIXEL, PIXEL_COUNT)\npixels.brightness = 0.05\npixels[0] = RGB['red']\npixels[1] = RGB['green']\n\nwhile True:\n    pass\n```", "```py\n>>> from touchio import TouchIn\n>>> from digitalio import DigitalInOut\n>>> from audioio import WaveFile, AudioOut\n>>> import board\n>>> def enable_speakers():\n...     speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n...     speaker_control.switch_to_output(value=True)\n...     \n...     \n... \n>>> def play_file(speaker, path):\n...     file = open(path, \"rb\")\n...     audio = WaveFile(file)\n...     speaker.play(audio)\n...     \n...     \n... \n>>> enable_speakers()\n>>> speaker = AudioOut(board.SPEAKER)\n```", "```py\n>>> class Handler:\n...     def __init__(self, speaker):\n...         self.speaker = speaker\n...         \n...     def handle(self, name, state):\n...         if state:\n...             play_file(self.speaker, 'piano.wav')\n... \n>>> handler = Handler(speaker)\n```", "```py\n>>> handler.handle('A1', True)\n```", "```py\nfrom touchio import TouchIn\nfrom digitalio import DigitalInOut\nfrom audioio import WaveFile, AudioOut\nimport board\n\ndef enable_speakers():\n    speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n    speaker_control.switch_to_output(value=True)\n\ndef play_file(speaker, path):\n    file = open(path, \"rb\")\n    audio = WaveFile(file)\n    speaker.play(audio)\n\nclass Handler:\n    def __init__(self, speaker):\n        self.speaker = speaker\n\n    def handle(self, name, state):\n        if state:\n            play_file(self.speaker, 'piano.wav')\n\nclass TouchEvent:\n    THRESHOLD_ADJUSTMENT = 400\n\n    def __init__(self, name, onchange):\n        self.name = name\n        self.last = False\n        self.onchange = onchange\n        pin = getattr(board, name)\n        self.touch = TouchIn(pin)\n        self.touch.threshold += self.THRESHOLD_ADJUSTMENT\n\n    def process(self):\n        current = self.touch.value\n        if current != self.last:\n            self.onchange(self.name, current)\n            self.last = current\n\nenable_speakers()\nspeaker = AudioOut(board.SPEAKER)\nhandler = Handler(speaker)\nevent = TouchEvent('A1', handler.handle)\nwhile True:\n    event.process()\n```", "```py\n>>> from touchio import TouchIn\n>>> from digitalio import DigitalInOut\n>>> from audioio import WaveFile, AudioOut\n>>> from neopixel import NeoPixel\n>>> import board\n>>> \n>>> PIXEL_COUNT = 10\n>>> \n>>> def enable_speakers():\n...     speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n...     speaker_control.switch_to_output(value=True)\n...     \n...     \n... \n>>> def play_file(speaker, path):\n...     file = open(path, \"rb\")\n...     audio = WaveFile(file)\n...     speaker.play(audio)\n... \n>>> \n>>> enable_speakers()\n>>> speaker = AudioOut(board.SPEAKER)\n>>> pixels = NeoPixel(board.NEOPIXEL, PIXEL_COUNT)\n>>> pixels.brightness = 0.05\n```", "```py\n>>> class Handler:\n...     def __init__(self, speaker, pixels):\n...         self.speaker = speaker\n...         self.pixels = pixels\n...         \n...     def handle(self, name, state):\n...         if state:\n...             play_file(self.speaker, 'piano.wav')\n...             self.pixels[0] = 0xFF0000\n...         else:\n...             self.pixels[0] = 0x000000\n...             \n... \n>>> handler = Handler(speaker, pixels)\n```", "```py\n>>> handler.handle('A1', True)\n```", "```py\n>>> handler.handle('A1', False)\n```", "```py\nfrom touchio import TouchIn\nfrom digitalio import DigitalInOut\nfrom audioio import WaveFile, AudioOut\nfrom neopixel import NeoPixel\nimport board\n\nPIXEL_COUNT = 10\n\ndef enable_speakers():\n    speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n    speaker_control.switch_to_output(value=True)\n\ndef play_file(speaker, path):\n    file = open(path, \"rb\")\n    audio = WaveFile(file)\n    speaker.play(audio)\n\nclass Handler:\n    def __init__(self, speaker, pixels):\n        self.speaker = speaker\n        self.pixels = pixels\n\n    def handle(self, name, state):\n        if state:\n            play_file(self.speaker, 'piano.wav')\n            self.pixels[0] = 0xFF0000\n        else:\n            self.pixels[0] = 0x000000\n\nclass TouchEvent:\n    THRESHOLD_ADJUSTMENT = 400\n\n    def __init__(self, name, onchange):\n        self.name = name\n        self.last = False\n        self.onchange = onchange\n        pin = getattr(board, name)\n        self.touch = TouchIn(pin)\n        self.touch.threshold += self.THRESHOLD_ADJUSTMENT\n\n    def process(self):\n        current = self.touch.value\n        if current != self.last:\n            self.onchange(self.name, current)\n            self.last = current\n\nenable_speakers()\nspeaker = AudioOut(board.SPEAKER)\npixels = NeoPixel(board.NEOPIXEL, PIXEL_COUNT)\npixels.brightness = 0.05\nhandler = Handler(speaker, pixels)\nevent = TouchEvent('A1', handler.handle)\nwhile True:\n    event.process()\n```", "```py\n>>> from touchio import TouchIn\n>>> from digitalio import DigitalInOut\n>>> from audioio import WaveFile, AudioOut\n>>> from neopixel import NeoPixel\n>>> import board\n>>> \n>>> PIXEL_COUNT = 10\n>>> TOUCH_PADS = ['A1', 'A2', 'A5', 'A6']\n>>> SOUND = dict(\n...     A1='hit.wav',\n...     A2='piano.wav',\n...     A5='tin.wav',\n...     A6='wood.wav',\n... )\n>>> RGB = dict(\n...     black=0x000000,\n...     white=0xFFFFFF,\n...     green=0x00FF00,\n...     red=0xFF0000,\n...     yellow=0xFFFF00,\n... )\n>>> PIXELS = dict(\n...     A1=(6, RGB['white']),\n...     A2=(8, RGB['red']),\n...     A5=(1, RGB['yellow']),\n...     A6=(3, RGB['green']),\n... )\n```", "```py\n>>> def play_file(speaker, path):\n...     file = open(path, \"rb\")\n...     audio = WaveFile(file)\n...     speaker.play(audio)\n...     \n... \n>>> def enable_speakers():\n...     speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n...     speaker_control.switch_to_output(value=True)\n...     \n... \n>>> enable_speakers()\n>>> speaker = AudioOut(board.SPEAKER)\n>>> play_file(speaker, SOUND['A2'])\n```", "```py\n>>> class Handler:\n...     def __init__(self, speaker, pixels):\n...         self.speaker = speaker\n...         self.pixels = pixels\n...         \n...     def handle(self, name, state):\n...         pos, color = PIXELS[name]\n...         if state:\n...             play_file(self.speaker, SOUND[name])\n...             self.pixels[pos] = color\n...         else:\n...             self.pixels[pos] = RGB['black']\n...             \n... \n>>> class TouchEvent:\n...     THRESHOLD_ADJUSTMENT = 400\n...     \n...     def __init__(self, name, onchange):\n...         self.name = name\n...         self.last = False\n...         self.onchange = onchange\n...         pin = getattr(board, name)\n...         self.touch = TouchIn(pin)\n...         self.touch.threshold += self.THRESHOLD_ADJUSTMENT\n...         \n...     def process(self):\n...         current = self.touch.value\n...         if current != self.last:\n...             self.onchange(self.name, current)\n...             self.last = current\n...             \n... \n>>> pixels = NeoPixel(board.NEOPIXEL, PIXEL_COUNT)\n>>> pixels.brightness = 0.05\n>>> handler = Handler(speaker, pixels)\n```", "```py\n>>> handler.handle('A2', True)\n```", "```py\nfrom touchio import TouchIn\nfrom digitalio import DigitalInOut\nfrom audioio import WaveFile, AudioOut\nfrom neopixel import NeoPixel\nimport board\n\nPIXEL_COUNT = 10\nTOUCH_PADS = ['A1', 'A2', 'A5', 'A6']\nSOUND = dict(\n    A1='hit.wav',\n    A2='piano.wav',\n    A5='tin.wav',\n    A6='wood.wav',\n)\nRGB = dict(\n    black=0x000000,\n    white=0xFFFFFF,\n    green=0x00FF00,\n    red=0xFF0000,\n    yellow=0xFFFF00,\n)\nPIXELS = dict(\n    A1=(6, RGB['white']),\n    A2=(8, RGB['red']),\n    A5=(1, RGB['yellow']),\n    A6=(3, RGB['green']),\n)\n\ndef play_file(speaker, path):\n    file = open(path, \"rb\")\n    audio = WaveFile(file)\n    speaker.play(audio)\n\ndef enable_speakers():\n    speaker_control = DigitalInOut(board.SPEAKER_ENABLE)\n    speaker_control.switch_to_output(value=True)\n\nclass Handler:\n    def __init__(self, speaker, pixels):\n        self.speaker = speaker\n        self.pixels = pixels\n\n    def handle(self, name, state):\n        pos, color = PIXELS[name]\n        if state:\n            play_file(self.speaker, SOUND[name])\n            self.pixels[pos] = color\n        else:\n            self.pixels[pos] = RGB['black']\n\nclass TouchEvent:\n    THRESHOLD_ADJUSTMENT = 400\n\n    def __init__(self, name, onchange):\n        self.name = name\n        self.last = False\n        self.onchange = onchange\n        pin = getattr(board, name)\n        self.touch = TouchIn(pin)\n        self.touch.threshold += self.THRESHOLD_ADJUSTMENT\n\n    def process(self):\n        current = self.touch.value\n        if current != self.last:\n            self.onchange(self.name, current)\n            self.last = current\n\ndef main():\n    enable_speakers()\n    speaker = AudioOut(board.SPEAKER)\n    pixels = NeoPixel(board.NEOPIXEL, PIXEL_COUNT)\n    pixels.brightness = 0.05\n    handler = Handler(speaker, pixels)\n    events = [TouchEvent(i, handler.handle) for i in TOUCH_PADS]\n    while True:\n        for event in events:\n            event.process()\n\nmain()\n```"]