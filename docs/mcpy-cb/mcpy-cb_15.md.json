["```py\n>>> import board\n>>> import busio\n```", "```py\n>>> i2c = busio.I2C(board.SCL, board.SDA)\n```", "```py\n>>> while not i2c.try_lock():\n...     print('getting lock...')\n...     \n...     \n... \n>>> \n```", "```py\n>>> i2c.scan()\n[24]\n```", "```py\n>>> [hex(x) for x in i2c.scan()]\n['0x18']\n```", "```py\nimport board\nimport busio\n\ndef main():\n    i2c = busio.I2C(board.SCL, board.SDA)\n    while not i2c.try_lock():\n        print('getting lock...')\n    devices = [hex(x) for x in i2c.scan()]\n    print('devices found:', devices)\n\nmain()\n```", "```py\n>>> from adafruit_lis3dh import LIS3DH_I2C\n>>> import board\n>>> import busio\n>>> import time\n>>> \n>>> ACCEL_ADDRESS = 0x18\n```", "```py\n>>> i2c = busio.I2C(board.SCL, board.SDA)\n>>> accel = LIS3DH_I2C(i2c, address=ACCEL_ADDRESS)\n```", "```py\n>>> accel.acceleration\nacceleration(x=0.143678, y=-0.0287355, z=-9.48272)\n```", "```py\n>>> accel.acceleration.x\n0.124521\n```", "```py\n>>> while True:\n...     print(accel.acceleration)\n...     time.sleep(0.1)\n...     \n...     \n... \nacceleration(x=0.162835, y=-0.00957851, z=-9.47314)\nacceleration(x=0.162835, y=-0.0478925, z=-9.52104)\nacceleration(x=0.0957851, y=-0.057471, z=-9.30073)\nacceleration(x=0.172413, y=-0.00957851, z=-9.51146)\nacceleration(x=0.153256, y=-0.0478925, z=-9.48272)\nacceleration(x=0.153256, y=-0.057471, z=-9.53062)\nacceleration(x=0.162835, y=-0.057471, z=-9.53062)\n```", "```py\nfrom adafruit_lis3dh import LIS3DH_I2C\nimport board\nimport busio\nimport time\n\nACCEL_ADDRESS = 0x18\n\ndef main():\n    i2c = busio.I2C(board.SCL, board.SDA)\n    accel = LIS3DH_I2C(i2c, address=ACCEL_ADDRESS)\n    while True:\n        print(accel.acceleration)\n        time.sleep(0.1)\n\nmain()\n```", "```py\n>>> from adafruit_lis3dh import LIS3DH_I2C\n>>> import board\n>>> import busio\n>>> import time\n>>> \n>>> ACCEL_ADDRESS = 0x18\n```", "```py\n>>> i2c = busio.I2C(board.SCL, board.SDA)\n>>> accel = LIS3DH_I2C(i2c, address=ACCEL_ADDRESS)\n```", "```py\n>>> accel.acceleration.z\n-9.43483\n```", "```py\n>>> accel.acceleration.z\n9.50188\n```", "```py\n>>> face = 'up' if accel.acceleration.z < 0 else 'down'\n>>> face\n'up'\n```", "```py\n>>> while True:\n...     face = 'up' if accel.acceleration.z < 0 else 'down'\n...     print('board is face', face)\n...     time.sleep(0.1)\n...     \n...     \n... \nboard is face up\nboard is face up\nboard is face up\nboard is face down\nboard is face down\nboard is face up\nboard is face up\nboard is face up\n```", "```py\nfrom adafruit_lis3dh import LIS3DH_I2C\nimport board\nimport busio\nimport time\n\nACCEL_ADDRESS = 0x18\n\ndef main():\n    i2c = busio.I2C(board.SCL, board.SDA)\n    accel = LIS3DH_I2C(i2c, address=ACCEL_ADDRESS)\n    while True:\n        face = 'up' if accel.acceleration.z < 0 else 'down'\n        print('board is face', face)\n        time.sleep(0.1)\n\nmain()\n```", "```py\n>>> import board\n>>> import time\n```", "```py\n>>> board.DISPLAY.brightness = 0.5\n```", "```py\n>>> board.DISPLAY.brightness = 0\n```", "```py\n>>> board.DISPLAY.brightness = 1.0\n```", "```py\n>>> def fade_in():\n...     for i in range(0, 11):\n...         brightness = i / 10\n...         print('brightness:', brightness)\n...         board.DISPLAY.brightness = brightness\n...         time.sleep(0.1)\n...         \n...         \n... \n>>> \n```", "```py\n>>> fade_in()\nbrightness: 0.0\nbrightness: 0.1\nbrightness: 0.2\nbrightness: 0.3\nbrightness: 0.4\nbrightness: 0.5\nbrightness: 0.6\nbrightness: 0.7\nbrightness: 0.8\nbrightness: 0.9\nbrightness: 1.0\n>>> \n```", "```py\nimport board\nimport time\n\ndef fade_in():\n    for i in range(0, 11):\n        brightness = i / 10\n        print('brightness:', brightness)\n        board.DISPLAY.brightness = brightness\n        time.sleep(0.1)\n\ndef main():\n    while True:\n        fade_in()\n\nmain()\n```", "```py\n>>> import board\n>>> from displayio import OnDiskBitmap, ColorConverter, TileGrid, Group\n```", "```py\n>>> path = 'joke_01_question.bmp'\n>>> f = open(path, 'rb')\n```", "```py\n>>> bitmap = OnDiskBitmap(f)\n>>> pixel_shader = ColorConverter()\n```", "```py\nsprite = TileGrid(bitmap, pixel_shader=pixel_shader)\n```", "```py\n>>> group = Group()\n>>> group.append(sprite)\n```", "```py\n>>> board.DISPLAY.show(group)\n>>> board.DISPLAY.wait_for_frame()\n>>> f.close()\n```", "```py\n>>> def show_image(path):\n...     with open(path, 'rb') as f:\n...         bitmap = OnDiskBitmap(f)\n...         pixel_shader = ColorConverter()\n...         sprite = TileGrid(bitmap, pixel_shader=pixel_shader)\n...         group = Group()\n...         group.append(sprite)\n...         board.DISPLAY.show(group)\n...         board.DISPLAY.wait_for_frame()\n...         \n...         \n... \n>>> show_image('joke_01_response.bmp')\n>>> \n```", "```py\nimport board\nfrom displayio import OnDiskBitmap, ColorConverter, TileGrid, Group\n\nIMAGES = ['joke_01_question.bmp', 'joke_01_response.bmp']\n\ndef show_image(path):\n    with open(path, 'rb') as f:\n        bitmap = OnDiskBitmap(f)\n        pixel_shader = ColorConverter()\n        sprite = TileGrid(bitmap, pixel_shader=pixel_shader)\n        group = Group()\n        group.append(sprite)\n        board.DISPLAY.show(group)\n        board.DISPLAY.wait_for_frame()\n\ndef main():\n    while True:\n        for image in IMAGES:\n            show_image(image)\n\nmain()\n```", "```py\n>>> import os\n>>> paths = sorted(os.listdir())\n>>> paths\n['.Trashes', '.fseventsd', '.metadata_never_index', 'boot_out.txt', 'joke_01_question.bmp', 'joke_01_response.bmp', 'joke_02_question.bmp', 'joke_02_response.bmp', 'joke_03_question.bmp', 'joke_03_response.bmp', 'joke_04_question.bmp', 'joke_04_response.bmp', 'main.py']\n```", "```py\n>>> images = [i for i in paths if i.endswith('.bmp')]\n>>> images\n['joke_01_question.bmp', 'joke_01_response.bmp', 'joke_02_question.bmp', 'joke_02_response.bmp', 'joke_03_question.bmp', 'joke_03_response.bmp', 'joke_04_question.bmp', 'joke_04_response.bmp']\n```", "```py\n>>> questions = [i for i in paths if i.endswith('question.bmp')]\n>>> questions\n['joke_01_question.bmp', 'joke_02_question.bmp', 'joke_03_question.bmp', 'joke_04_question.bmp']\n>>> \n```", "```py\n>>> question = questions[0]\n>>> question\n'joke_01_question.bmp'\n```", "```py\n>>> response = question.replace('question.bmp', 'response.bmp')\n>>> response\n'joke_01_response.bmp'\n```", "```py\n>>> response in paths\nTrue\n```", "```py\nimport os\n\ndef get_questions():\n    paths = sorted(os.listdir())\n    return [i for i in paths if i.endswith('question.bmp')]\n\ndef main():\n    questions = get_questions()\n    for question in questions:\n        response = question.replace('question.bmp', 'response.bmp')\n        print(question, response)\n\nmain()\n```", "```py\n>>> from displayio import OnDiskBitmap, ColorConverter, TileGrid, Group\n>>> import board\n>>> import random\n>>> import time\n>>> import touchio\n>>> import os\n```", "```py\n>>> touch = touchio.TouchIn(board.TOUCH1)\n>>>\n```", "```py\n>>> touch.value\nFalse\n```", "```py\n>>> touch.value\nTrue\n```", "```py\n>>> def wait_for_touch(touch):\n...     while not touch.value:\n...         print('waiting...')\n...         time.sleep(0.1)\n...         \n...         \n... \n>>> \n```", "```py\n>>> wait_for_touch(touch)\nwaiting...\nwaiting...\nwaiting...\nwaiting...\n>>> \n```", "```py\n>>> def get_questions():\n...     paths = sorted(os.listdir())\n...     return [i for i in paths if i.endswith('question.bmp')]\n...     \n...     \n... \n>>> \n>>> questions = get_questions()\n>>> questions\n['joke_01_question.bmp', 'joke_02_question.bmp', 'joke_03_question.bmp', 'joke_04_question.bmp']\n```", "```py\n>>> question = random.choice(questions)\n>>> question\n'joke_04_question.bmp'\n```", "```py\nfrom displayio import OnDiskBitmap, ColorConverter, TileGrid, Group\nimport board\nimport random\nimport time\nimport touchio\nimport os\n\ndef show_image(path):\n    print('showing image', path)\n    with open(path, 'rb') as f:\n        bitmap = OnDiskBitmap(f)\n        pixel_shader = ColorConverter()\n        sprite = TileGrid(bitmap, pixel_shader=pixel_shader)\n        group = Group()\n        group.append(sprite)\n        board.DISPLAY.show(group)\n        board.DISPLAY.wait_for_frame()\n\ndef wait_for_touch(touch):\n    while not touch.value:\n        print('waiting...')\n        time.sleep(0.1)\n\ndef get_questions():\n    paths = sorted(os.listdir())\n    return [i for i in paths if i.endswith('question.bmp')]\n\ndef main():\n    touch = touchio.TouchIn(board.TOUCH1)\n    questions = get_questions()\n    while True:\n        question = random.choice(questions)\n        response = question.replace('question.bmp', 'response.bmp')\n        show_image(question)\n        wait_for_touch(touch)\n        show_image(response)\n        wait_for_touch(touch)\n\nmain()\n```"]