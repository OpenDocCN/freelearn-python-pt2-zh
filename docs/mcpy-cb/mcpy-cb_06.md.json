["```py\nfrom adafruit_circuitplayground.express import cpx\n```", "```py\n>>> from adafruit_circuitplayground.express import cpx\n>>> class ButtonEvent:\n...     def __init__(self, name):\n...         self.name = name\n...         self.last = False\n...         \n...         \n... \n>>> button = ButtonEvent('button_a')\n```", "```py\n>>> button = ButtonEvent('button_a')\n>>> button\n<ButtonEvent object at 20003410>\n>>> button.name\n'button_a'\n```", "```py\n>>> pressed = getattr(cpx, button.name)\n>>> pressed\nFalse\n```", "```py\n>>> pressed = getattr(cpx, button.name)\n>>> pressed\nTrue\n```", "```py\nfrom adafruit_circuitplayground.express import cpx\n\nclass ButtonEvent:\n    def __init__(self, name):\n        self.name = name\n        self.last = False\n\n    def is_pressed(self):\n        pressed = getattr(cpx, self.name)\n        changed = (pressed != self.last)\n        self.last = pressed\n        return (pressed and changed)\n\nbutton = ButtonEvent('button_a')\nwhile True:\n    if button.is_pressed():\n        print('button A pressed')\n```", "```py\nfrom adafruit_circuitplayground.express import cpx\n\nclass ButtonEvent:\n    def __init__(self, name):\n        self.name = name\n        self.last = False\n\n    def is_pressed(self):\n        pressed = getattr(cpx, self.name)\n        changed = (pressed != self.last)\n        self.last = pressed\n        return (pressed and changed)\n```", "```py\n>>> from button import ButtonEvent\n>>> ButtonEvent\n<class 'ButtonEvent'>\n>>> \n```", "```py\n>>> button = ButtonEvent('button_a')\n>>> button.is_pressed()\nFalse\n```", "```py\n>>> button = ButtonEvent('button_a')\n>>> button.is_pressed()\n```", "```py\nfrom button import ButtonEvent\n\nbutton = ButtonEvent('button_a')\nwhile True:\n    if button.is_pressed():\n        print('button A pressed')\n```", "```py\n>>> from button import ButtonEvent\n>>> \n>>> buttons = {}\n>>> buttons[1] = ButtonEvent('button_a')\n>>> buttons[2] = ButtonEvent('button_b')\n>>> buttons[1].is_pressed()\nFalse\n```", "```py\n>>> buttons[1].is_pressed()\nTrue\n```", "```py\nfrom button import ButtonEvent\n\ndef main():\n    buttons = {1: ButtonEvent('button_a'), 2: ButtonEvent('button_b')}\n    while True:\n        for player, button in buttons.items():\n            if button.is_pressed():\n                print('button pressed for player', player)\n\nmain()\n```", "```py\n>>> from adafruit_circuitplayground.express import cpx\n>>> BLACK = 0x000000\n>>> SEQUENCE = [\n...     0xFFFF00,   # Yellow\n...     0xFF8C00,   # DarkOrange\n...     0xFF0000,   # Red\n...     0xFF00FF,   # Magenta\n...     ]\n>>> cpx.pixels.brightness = 0.02\n>>> cpx.pixels[0] = SEQUENCE[0]\n```", "```py\n>>> PLAYER_PIXELS1 = [0, 1, 2, 3, 4]\n>>> PLAYER_PIXELS2 = [9, 8, 7, 6, 5]\n>>> \n>>> def generate_colors(positions):\n...     yield 0, BLACK\n...     for i in positions:\n...         for color in SEQUENCE:\n...             yield i, color\n...             \n...             \n... \n>>> COLORS = dict()\n>>> COLORS[1] = list(generate_colors(PLAYER_PIXELS1))\n>>> COLORS[2] = list(generate_colors(PLAYER_PIXELS2))\n>>> \n>>> COLORS[1]\n[(0, 0), (0, 16776960), (0, 16747520), (0, 16711680), (0, 16711935), (1, 16776960), (1, 16747520), (1, 16711680), (1, 16711935), (2, 16776960), (2, 16747520), (2, 16711680), (2, 16711935), (3, 16776960), (3, 16747520), (3, 16711680), (3, 16711935), (4, 16776960), (4, 16747520), (4, 16711680), (4, 16711935)]\n>>> len(COLORS[1])\n21\n```", "```py\nBLACK = 0x000000\nSEQUENCE = [\n    0xFFFF00,   # Yellow\n    0xFF8C00,   # DarkOrange\n    0xFF0000,   # Red\n    0xFF00FF,   # Magenta\n]\nPLAYER_PIXELS1 = [0, 1, 2, 3, 4]\nPLAYER_PIXELS2 = [9, 8, 7, 6, 5]\n\ndef generate_colors(positions):\n    yield 0, BLACK\n    for i in positions:\n        for color in SEQUENCE:\n            yield i, color\n\nCOLORS = dict()\nCOLORS[1] = list(generate_colors(PLAYER_PIXELS1))\nCOLORS[2] = list(generate_colors(PLAYER_PIXELS2))\n```", "```py\n>>> from adafruit_circuitplayground.express import cpx\n>>> from colors import COLORS\n>>> \n>>> class ScoreBoard:\n...     def __init__(self):\n...         self.score = {1: 0, 2: 0}\n...         cpx.pixels.brightness = 0.02\n...         cpx.play_file('start.wav')\n...         \n...         \n... \n>>> board = ScoreBoard()\n>>> board.score[1]\n0\n```", "```py\nfrom adafruit_circuitplayground.express import cpx\nfrom colors import COLORS\n\nclass ScoreBoard:\n    def __init__(self):\n        self.score = {1: 0, 2: 0}\n        cpx.pixels.brightness = 0.02\n        cpx.play_file('start.wav')\n\n    def show(self, player):\n        score = self.score[player]\n        pos, color = COLORS[player][score]\n        cpx.pixels[pos] = color\n```", "```py\n>>> from score import ScoreBoard\n>>> \n>>> board = ScoreBoard()\n>>> board.score[1] = 3\n>>> board.show(1)\n```", "```py\nfrom adafruit_circuitplayground.express import cpx\nfrom colors import COLORS\n\nclass ScoreBoard:\n    def __init__(self):\n        self.score = {1: 0, 2: 0}\n        cpx.pixels.brightness = 0.02\n        cpx.play_file('start.wav')\n\n    def scored(self, player):\n        self.score[player] += 1\n        self.show(player)\n        if self.score[player] == 20:\n            cpx.play_file('win%s.wav' % player)\n\n    def show(self, player):\n        score = self.score[player]\n        pos, color = COLORS[player][score]\n        cpx.pixels[pos] = color\n```", "```py\n>>> from score import ScoreBoard\n>>> board = ScoreBoard()\n>>> board.score\n{2: 0, 1: 0}\n```", "```py\n>>> board.scored(1)\n>>> board.score\n{2: 0, 1: 1}\n```", "```py\nfrom button import ButtonEvent\nfrom score import ScoreBoard\n\ndef main():\n    buttons = {1: ButtonEvent('button_a'), 2: ButtonEvent('button_b')}\n    board = ScoreBoard()\n    while True:\n        for player, button in buttons.items():\n            if button.is_pressed():\n                board.scored(player)\n\nmain()\n```"]