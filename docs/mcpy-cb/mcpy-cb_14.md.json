["```py\n>>> import urequests >>> >>> API_URL = 'http://api.openweathermap.org/data/2.5/weather' >>> \n```", "```py\n>>> APPID = 'put-your-API-key(APPID)-here'\n>>> city = 'Berlin'\n>>> url = API_URL + '?units=metric&APPID=' + APPID + '&q=' + city\n```", "```py\n>>> response = urequests.get(url)\n>>> response\n<Response object at 3fff1b00>\n```", "```py\n>>> data = response.json()\n>>> len(data)\n13\n```", "```py\n>>> data\n{'cod': 200, 'rain': {'1h': 0.34}, 'dt': 1555227314, 'base': 'stations', 'weather': [{'id': 500, 'icon': '10d', 'main': 'Rain', 'description': 'light rain'}, {'id': 310, 'icon': '09d', 'main': 'Drizzle', 'description': 'light intensity drizzle rain'}], 'sys': {'message': 0.0052, 'country': 'DE', 'sunrise': 1555215098, 'sunset': 1555264894, 'id': 1275, 'type': 1}, 'name': 'Berlin', 'clouds': {'all': 75}, 'coord': {'lon': 13.39, 'lat': 52.52}, 'visibility': 7000, 'wind': {'speed': 3.6, 'deg': 40}, 'id': 2950159, 'main': {'pressure': 1025, 'humidity': 93, 'temp_min': 2.22, 'temp_max': 3.89, 'temp': 3.05}}\n```", "```py\n>>> data = {'cod': 200, 'rain': {'1h': 0.34}, 'dt': 1555227314, 'base': 'stations', 'weather': [{'id': 500, 'icon': '10d', 'main': 'Rain', 'description': 'light rain'}, {'id': 310, 'icon': '09d', 'main': 'Drizzle', 'description': 'light intensity drizzle rain'}], 'sys': {'message': 0.0052, 'country': 'DE', 'sunrise': 1555215098, 'sunset': 1555264894, 'id': 1275, 'type': 1}, 'name': 'Berlin', 'clouds': {'all': 75}, 'coord': {'lon': 13.39, 'lat': 52.52}, 'visibility': 7000, 'wind': {'speed': 3.6, 'deg': 40}, 'id': 2950159, 'main': {'pressure': 1025, 'humidity': 93, 'temp_min': 2.22, 'temp_max': 3.89, 'temp': 3.05}}\n```", "```py\n>>> import pprint\n>>> pprint.pprint(data)\n{'base': 'stations',\n 'clouds': {'all': 75},\n 'cod': 200,\n 'coord': {'lat': 52.52, 'lon': 13.39},\n 'dt': 1555227314,\n 'id': 2950159,\n 'main': {'humidity': 93,\n          'pressure': 1025,\n          'temp': 3.05,\n          'temp_max': 3.89,\n          'temp_min': 2.22},\n 'name': 'Berlin',\n 'rain': {'1h': 0.34},\n 'sys': {'country': 'DE',\n         'id': 1275,\n         'message': 0.0052,\n         'sunrise': 1555215098,\n         'sunset': 1555264894,\n         'type': 1},\n 'visibility': 7000,\n 'weather': [{'description': 'light rain',\n              'icon': '10d',\n              'id': 500,\n              'main': 'Rain'},\n             {'description': 'light intensity drizzle rain',\n              'icon': '09d',\n              'id': 310,\n              'main': 'Drizzle'}],\n 'wind': {'deg': 40, 'speed': 3.6}}\n>>> \n```", "```py\n>>> data['main']\n{'pressure': 1025, 'humidity': 93, 'temp_min': 2.22, 'temp_max': 3.89, 'temp': 3.05}\n```", "```py\n>>> data['main']['temp']\n3.05\n>>> data['main']['humidity']\n93\n>>> \n```", "```py\n>>> data['wind']\n{'speed': 3.6, 'deg': 40}\n>>> data['wind']['speed']\n3.6\n```", "```py\n>>> from netcheck import wait_for_networking\n>>> import urequests\n>>> import json\n>>> \n>>> CONF_PATH = 'conf.json'\n>>> API_URL = 'http://api.openweathermap.org/data/2.5/weather'\n```", "```py\n{\"APPID\": \"put-your-API-key(APPID)-here\"}\n```", "```py\n>>> def get_conf():\n...     content = open(CONF_PATH).read()\n...     return json.loads(content)\n...     \n...     \n... \n>>> \n```", "```py\n>>> conf = get_conf()\n>>> APPID = conf['APPID']\n```", "```py\n>>> def get_weather(APPID, city):\n...     url = API_URL + '?units=metric&APPID=' + APPID + '&q=' \n...     + city\n...     return urequests.get(url).json()\n...     \n...     \n... \n>>> \n```", "```py\n>>> data = get_weather(APPID, 'London')\n>>> \n>>> print('temp:', data['main']['temp'])\ntemp: 7.87\n>>> print('wind:', data['wind']['speed'])\nwind: 3.1\n>>> print('name:', data['name'])\nname: London\n>>> print('country:', data['sys']['country'])\ncountry: GB\n>>> \n```", "```py\nfrom netcheck import wait_for_networking\nimport urequests\nimport json\n\nCONF_PATH = 'conf.json'\nAPI_URL = 'http://api.openweathermap.org/data/2.5/weather'\n\ndef get_conf():\n    content = open(CONF_PATH).read()\n    return json.loads(content)\n\ndef get_weather(APPID, city):\n    url = API_URL + '?units=metric&APPID=' + APPID + '&q=' + city\n    return urequests.get(url).json()\n\ndef main():\n    wait_for_networking()\n    conf = get_conf()\n    APPID = conf['APPID']\n    data = get_weather(APPID, 'London')\n    print('temp:', data['main']['temp'])\n    print('wind:', data['wind']['speed'])\n    print('name:', data['name'])\n    print('country:', data['sys']['country'])\n\nmain()\n```", "```py\n>>> import random\n>>> \n>>> CITIES = ['Berlin', 'London', 'Paris', 'Tokyo', 'Rome', 'Oslo', 'Bangkok']\n```", "```py\n>>> random.random()\n0.0235046\n>>> random.random()\n0.830886\n>>> random.random()\n0.0738319\n```", "```py\n>>> random.choice(CITIES)\n'Rome'\n>>> random.choice(CITIES)\n'Berlin'\n>>> \n>>> random.choice(CITIES)\n'Oslo'\n```", "```py\n>>> for i in range(10):\n...     city = random.choice(CITIES)\n...     print('random selection', i, city)\n...     \n...     \n... \nrandom selection 0 London\nrandom selection 1 Tokyo\nrandom selection 2 Oslo\nrandom selection 3 Berlin\nrandom selection 4 Bangkok\nrandom selection 5 Tokyo\nrandom selection 6 London\nrandom selection 7 Oslo\nrandom selection 8 Oslo\nrandom selection 9 London\n>>> \n```", "```py\nimport random\n\nCITIES = ['Berlin', 'London', 'Paris', 'Tokyo', 'Rome', 'Oslo', 'Bangkok']\n\ndef main():\n    for i in range(10):\n        city = random.choice(CITIES)\n        print('random selection', i, city)\n\nmain()\n```", "```py\n>>> import adafruit_ssd1306\n>>> import board\n>>> import busio\n>>> \n>>> BLACK = 0\n>>> WHITE = 1\n>>> \n>>> MESSAGE = \"\"\"\\\n... top line %s\n... middle line\n... last line\n... \"\"\"\n>>> \n```", "```py\n>>> class Screen:\n...     def __init__(self, oled):\n...         self.oled = oled\n...         self.oled.fill(BLACK)\n...         self.oled.show()\n...         \n...         \n... \n>>> \n```", "```py\n>>> i2c = busio.I2C(board.SCL, board.SDA)\n>>> oled = adafruit_ssd1306.SSD1306_I2C(128, 32, i2c)\n>>> screen = Screen(oled)\n```", "```py\n>>> class Screen:\n...     def __init__(self, oled):\n...         self.oled = oled\n...         self.oled.fill(BLACK)\n...         self.oled.show()\n...         \n...     def write(self, text):\n...         self.oled.fill(BLACK)\n...         lines = text.strip().split('\\n')\n...         for row, line in enumerate(lines):\n...             self.oled.text(line, 0, 10 * row, WHITE)\n...         self.oled.show()\n...         \n...         \n... \n>>> \n```", "```py\n>>> screen = Screen(oled)\n>>> screen.write('hello')\n```", "```py\n>>> screen.write('multi \\n line \\n output')\n>>> \n```", "```py\n>>> for i in range(10):\n...     print(i)\n...     screen.write(MESSAGE % i)\n...     \n...     \n... \n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n>>> \n```", "```py\nimport adafruit_ssd1306\nimport board\nimport busio\n\nBLACK = 0\nWHITE = 1\n\nclass Screen:\n    def __init__(self, oled):\n        self.oled = oled\n        self.oled.fill(BLACK)\n        self.oled.show()\n\n    def write(self, text):\n        self.oled.fill(BLACK)\n        lines = text.strip().split('\\n')\n        for row, line in enumerate(lines):\n            self.oled.text(line, 0, 10 * row, WHITE)\n        self.oled.show()\n\ndef get_oled():\n    i2c = busio.I2C(board.SCL, board.SDA)\n    return adafruit_ssd1306.SSD1306_I2C(128, 32, i2c)\n```", "```py\nfrom screen import Screen, get_oled\n\nMESSAGE = \"\"\"\\\ntop line %s\nmiddle line\nlast line\n\"\"\"\n\ndef main():\n    oled = get_oled()\n    screen = Screen(oled)\n    screen.write('hello')\n\n    for i in range(10):\n        print(i)\n        screen.write(MESSAGE % i)\n\nmain()\n```", "```py\n>>> from screen import Screen, get_oled\n>>> from netcheck import wait_for_networking\n>>> import urequests\n>>> import json\n>>> \n>>> CONF_PATH = 'conf.json'\n>>> API_URL = 'http://api.openweathermap.org/data/2.5/weather'\n>>> CITIES = ['Berlin', 'London', 'Paris', 'Tokyo', 'Rome', 'Oslo', 'Bangkok']\n>>> WEATHER = \"\"\"\\\n... City: {city}\n... Temp: {temp}\n... Wind: {wind}\n... \"\"\"\n>>> \n```", "```py\n>>> def get_conf():\n...     content = open(CONF_PATH).read()\n...     return json.loads(content)\n...     \n...     \n... \n>>> def get_weather(APPID, city):\n...     url = API_URL + '?units=metric&APPID=' + APPID + '&q=' + city\n...     return urequests.get(url).json()\n...     \n...     \n... \n>>> oled = get_oled()\n>>> screen = Screen(oled)\n>>> wait_for_networking()\naddress on network: 10.0.0.38\n'10.0.0.38'\n>>> conf = get_conf()\n>>> APPID = conf['APPID']\n>>> \n```", "```py\n>>> def show_weather(screen, APPID, city):\n...     weather = get_weather(APPID, city)\n...     data = {}\n...     data['city'] = city\n...     data['temp'] = weather['main']['temp']\n...     data['wind'] = weather['wind']['speed']\n...     text = WEATHER.format(**data)\n...     print('-------- %s --------' % city)\n...     print(text)\n...     screen.write(text)\n...     \n...     \n... \n>>> \n```", "```py\n>>> show_weather(screen, APPID, 'Tokyo')\n-------- Tokyo --------\nCity: Tokyo\nTemp: 13.67\nWind: 6.7\n\n>>> \n```", "```py\n>>> for city in CITIES:\n...     show_weather(screen, APPID, city)\n...     \n...     \n... \n-------- Berlin --------\nCity: Berlin\nTemp: 10.03\nWind: 3.6\n\n-------- London --------\nCity: London\nTemp: 8.56\nWind: 8.7\n\n-------- Paris --------\nCity: Paris\nTemp: 9.11\nWind: 5.1\n\n-------- Tokyo --------\nCity: Tokyo\nTemp: 13.55\nWind: 6.7\n\n-------- Rome --------\nCity: Rome\nTemp: 11.69\nWind: 6.2\n\n-------- Oslo --------\nCity: Oslo\nTemp: 10.13\nWind: 2.1\n\n-------- Bangkok --------\nCity: Bangkok\nTemp: 30.66\nWind: 5.1\n\n>>> \n```", "```py\nfrom screen import Screen, get_oled\nfrom netcheck import wait_for_networking\nimport urequests\nimport json\n\nCONF_PATH = 'conf.json'\nAPI_URL = 'http://api.openweathermap.org/data/2.5/weather'\nCITIES = ['Berlin', 'London', 'Paris', 'Tokyo', 'Rome', 'Oslo', 'Bangkok']\nWEATHER = \"\"\"\\\nCity: {city}\nTemp: {temp}\nWind: {wind}\n\"\"\"\n\ndef get_conf():\n    content = open(CONF_PATH).read()\n    return json.loads(content)\n\ndef get_weather(APPID, city):\n    url = API_URL + '?units=metric&APPID=' + APPID + '&q=' + city\n    return urequests.get(url).json()\n\ndef show_weather(screen, APPID, city):\n    weather = get_weather(APPID, city)\n    data = {}\n    data['city'] = city\n    data['temp'] = weather['main']['temp']\n    data['wind'] = weather['wind']['speed']\n    text = WEATHER.format(**data)\n    print('-------- %s --------' % city)\n    print(text)\n    screen.write(text)\n\ndef main():\n    oled = get_oled()\n    screen = Screen(oled)\n    wait_for_networking()\n    conf = get_conf()\n    APPID = conf['APPID']\n    for city in CITIES:\n        show_weather(screen, APPID, city)\n\nmain()\n```", "```py\n>>> import time\n>>> \n>>> def measure_time(label, func, args=(), count=3):\n...     for i in range(count):\n...         start = time.monotonic()\n...         func(*args)\n...         total = (time.monotonic() - start) * 1000\n...         print(label + ':', '%s ms' % total)\n...         \n...         \n... \n>>> \n```", "```py\n>>> oled = get_oled()\n>>> screen = Screen(oled)\n>>> wait_for_networking()\naddress on network: 10.0.0.38\n'10.0.0.38'\n>>> conf = get_conf()\n>>> APPID = conf['APPID']\n>>> \n```", "```py\n>>> measure_time('show_weather', show_weather, [screen, APPID, 'Rome'])\n-------- Rome --------\nCity: Rome\nTemp: 9.34\nWind: 2.6\n\nshow_weather: 2047.0 ms\n-------- Rome --------\nCity: Rome\nTemp: 9.3\nWind: 2.6\n\nshow_weather: 1925.9 ms\n-------- Rome --------\nCity: Rome\nTemp: 9.36\nWind: 2.6\n\nshow_weather: 2019.04 ms\n>>> \n```", "```py\n>>> def show_weather(screen, APPID, city):\n...     screen.oled.invert(True)\n...     weather = get_weather(APPID, city)\n...     data = {}\n...     data['city'] = city\n...     data['temp'] = weather['main']['temp']\n...     data['wind'] = weather['wind']['speed']\n...     text = WEATHER.format(**data)\n...     print('-------- %s --------' % city)\n...     print(text)\n...     screen.write(text)\n...     screen.oled.invert(False)\n...     \n...     \n... \n>>> \n```", "```py\n>>> show_weather(screen, APPID, 'Rome')\n-------- Rome --------\nCity: Rome\nTemp: 9.3\nWind: 2.6\n\n>>> \n```", "```py\nfrom screen import Screen, get_oled\nfrom netcheck import wait_for_networking\nimport urequests\nimport json\nimport time\n\nCONF_PATH = 'conf.json'\nAPI_URL = 'http://api.openweathermap.org/data/2.5/weather'\nCITIES = ['Berlin', 'London', 'Paris', 'Tokyo', 'Rome', 'Oslo', 'Bangkok']\nWEATHER = \"\"\"\\\nCity: {city}\nTemp: {temp}\nWind: {wind}\n\"\"\"\n\ndef get_conf():\n    content = open(CONF_PATH).read()\n    return json.loads(content)\n\ndef get_weather(APPID, city):\n    url = API_URL + '?units=metric&APPID=' + APPID + '&q=' + city\n    return urequests.get(url).json()\n\ndef show_weather(screen, APPID, city):\n    screen.oled.invert(True)\n    weather = get_weather(APPID, city)\n    data = {}\n    data['city'] = city\n    data['temp'] = weather['main']['temp']\n    data['wind'] = weather['wind']['speed']\n    text = WEATHER.format(**data)\n    print('-------- %s --------' % city)\n    print(text)\n    screen.write(text)\n    screen.oled.invert(False)\n\ndef main():\n    oled = get_oled()\n    screen = Screen(oled)\n    wait_for_networking()\n    conf = get_conf()\n    APPID = conf['APPID']\n    for city in CITIES:\n        show_weather(screen, APPID, city)\n        time.sleep(1)\n\nmain()\n```", "```py\n>>> import random\n>>> \n>>> def show_random_weather(screen, APPID):\n...     city = random.choice(CITIES)\n...     show_weather(screen, APPID, city)\n...     \n...     \n... \n>>> \n```", "```py\n>>> oled = get_oled()\n>>> screen = Screen(oled)\n>>> wait_for_networking()\naddress on network: 10.0.0.38\n'10.0.0.38'\n>>> conf = get_conf()\n>>> APPID = conf['APPID']\n>>> \n```", "```py\n>>> show_random_weather(screen, APPID)\n-------- Bangkok --------\nCity: Bangkok\nTemp: 30.01\nWind: 5.1\n\n>>> \n```", "```py\n>>> for i in range(3):\n...     show_random_weather(screen, APPID)\n...     \n...     \n... \n-------- Rome --------\nCity: Rome\nTemp: 9.08\nWind: 2.6\n\n-------- Berlin --------\nCity: Berlin\nTemp: 8.1\nWind: 3.6\n\n-------- London --------\nCity: London\nTemp: 5.41\nWind: 6.2\n\n>>> \n```", "```py\nfrom screen import Screen, get_oled\nfrom netcheck import wait_for_networking\nimport urequests\nimport json\nimport time\nimport random\n\nCONF_PATH = 'conf.json'\nAPI_URL = 'http://api.openweathermap.org/data/2.5/weather'\nCITIES = ['Berlin', 'London', 'Paris', 'Tokyo', 'Rome', 'Oslo', 'Bangkok']\nWEATHER = \"\"\"\\\nCity: {city}\nTemp: {temp}\nWind: {wind}\n\"\"\"\n\ndef get_conf():\n    content = open(CONF_PATH).read()\n    return json.loads(content)\n\ndef get_weather(APPID, city):\n    url = API_URL + '?units=metric&APPID=' + APPID + '&q=' + city\n    return urequests.get(url).json()\n\ndef show_weather(screen, APPID, city):\n    screen.oled.invert(True)\n    weather = get_weather(APPID, city)\n    data = {}\n    data['city'] = city\n    data['temp'] = weather['main']['temp']\n    data['wind'] = weather['wind']['speed']\n    text = WEATHER.format(**data)\n    print('-------- %s --------' % city)\n    print(text)\n    screen.write(text)\n    screen.oled.invert(False)\n\ndef show_random_weather(screen, APPID):\n    city = random.choice(CITIES)\n    show_weather(screen, APPID, city)\n\ndef main():\n    oled = get_oled()\n    screen = Screen(oled)\n    wait_for_networking()\n    conf = get_conf()\n    APPID = conf['APPID']\n    for i in range(3):\n        show_random_weather(screen, APPID)\n\nmain()\n```", "```py\n>>> from machine import Pin\n>>> \n>>> BUTTON_A_PIN = 0\n>>> \n```", "```py\n>>> button = Pin(BUTTON_A_PIN, Pin.IN, Pin.PULL_UP)\n>>> \n```", "```py\n>>> not button.value()\nFalse\n>>> \n```", "```py\n>>> not button.value()\nTrue\n>>> \n```", "```py\n>>> oled = get_oled()\n>>> screen = Screen(oled)\n>>> wait_for_networking()\naddress on network: 10.0.0.38\n'10.0.0.38'\n>>> conf = get_conf()\n>>> APPID = conf['APPID']\n>>> \n```", "```py\n>>> while True:\n...     if not button.value():\n...         show_random_weather(screen, APPID)\n...         \n...         \n... \n-------- London --------\nCity: London\nTemp: 6.62\nWind: 4.6\n\n-------- Paris --------\nCity: Paris\nTemp: 4.53\nWind: 2.6\n\n-------- Rome --------\nCity: Rome\nTemp: 10.39\nWind: 2.6\n>>> \n```", "```py\nfrom screen import Screen, get_oled\nfrom netcheck import wait_for_networking\nfrom machine import Pin\nimport urequests\nimport json\nimport time\nimport random\n\nBUTTON_A_PIN = 0\nCONF_PATH = 'conf.json'\nAPI_URL = 'http://api.openweathermap.org/data/2.5/weather'\nCITIES = ['Berlin', 'London', 'Paris', 'Tokyo', 'Rome', 'Oslo', 'Bangkok']\nWEATHER = \"\"\"\\\nCity: {city}\nTemp: {temp}\nWind: {wind}\n\"\"\"\n\ndef get_conf():\n    content = open(CONF_PATH).read()\n    return json.loads(content)\n\ndef get_weather(APPID, city):\n    url = API_URL + '?units=metric&APPID=' + APPID + '&q=' + city\n    return urequests.get(url).json()\n\ndef show_weather(screen, APPID, city):\n    screen.oled.invert(True)\n    weather = get_weather(APPID, city)\n    data = {}\n    data['city'] = city\n    data['temp'] = weather['main']['temp']\n    data['wind'] = weather['wind']['speed']\n    text = WEATHER.format(**data)\n    print('-------- %s --------' % city)\n    print(text)\n    screen.write(text)\n    screen.oled.invert(False)\n\ndef show_random_weather(screen, APPID):\n    city = random.choice(CITIES)\n    show_weather(screen, APPID, city)\n\ndef main():\n    oled = get_oled()\n    screen = Screen(oled)\n    wait_for_networking()\n    conf = get_conf()\n    APPID = conf['APPID']\n    button = Pin(BUTTON_A_PIN, Pin.IN, Pin.PULL_UP)\n    show_random_weather(screen, APPID)\n    while True:\n        if not button.value():\n            show_random_weather(screen, APPID)\n\nmain()\n```"]