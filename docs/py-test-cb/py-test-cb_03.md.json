["```py\ndef convert_to_basen(value, base):\n    import math\n    def _convert(remaining_value, base, exp):\n        def stringify(value):\n            if value > 9:\n                return chr(value + ord('a')-10)\n            else:\n                return str(value)\n        if remaining_value >= 0 and exp >= 0:\n            factor = int(math.pow(base, exp))\n            if factor <= remaining_value:\n                multiple = remaining_value / factor\n                return stringify(multiple) + \\\n                  _convert(remaining_value-multiple*factor, \\\n                    base, exp-1)\n        else:\n            return \"0\" + \\\n                _convert(remaining_value, base, exp-1)\n        else:\n            return \"\"\n    return \"%s/%s\" % (_convert(value, base, \\\n                int(math.log(value, base))), base)\n```", "```py\ndef convert_to_basen(value, base):\n    \"\"\"Convert a base10 number to basen\n >>> convert_to_basen(1, 2)\n '1/2'\n >>> convert_to_basen(2, 2)\n '10/2'\n >>> convert_to_basen(3, 2)\n '11/2'\n >>> convert_to_basen(4, 2)\n '100/2'\n >>> convert_to_basen(5, 2)\n '101/2'\n >>> convert_to_basen(6, 2)\n '110/2'\n >>> convert_to_basen(7, 2)\n '111/2'\n >>> convert_to_basen(1, 16)\n '1/16'\n >>> convert_to_basen(10, 16)\n 'a/16'\n >>> convert_to_basen(15, 16)\n 'f/16'\n >>> convert_to_basen(16, 16)\n '10/16'\n >>> convert_to_basen(31, 16)\n '1f/16'\n >>> convert_to_basen(32, 16)\n '20/16'\n \"\"\"\n    import math\n```", "```py\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```", "```py\ndef convert_to_basen(value, base):\n    import math\n    def _convert(remaining_value, base, exp):\n        def stringify(value):\n            if value > 9:\n                return chr(value + ord('a')-10)\n            else:\n                return str(value)\n        if remaining_value >= 0 and exp >= 0:\n            factor = int(math.pow(base, exp))\n            if factor <= remaining_value:\n                multiple = remaining_value / factor\n                return stringify(multiple) + \\\n                    _convert(remaining_value-multiple*factor, \\\n                                base, exp-1)\n            else:\n                return \"0\" + \\\n                    _convert(remaining_value, base, exp-1)\n        else:\n            return \"\"\n    return \"%s/%s\" % (_convert(value, base, \\\n                int(math.log(value, base))), base)\n```", "```py\ndef convert_to_basen(value, base):\n    \"\"\"Convert a base10 number to basen.\n\n >>> convert_to_basen(0, 2)\n Traceback (most recent call last):\n ...\n ValueError: math domain error\n\n >>> convert_to_basen(-1, 2)\n Traceback (most recent call last):\n ...\n ValueError: math domain error\n \"\"\"\n    import math\n```", "```py\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```", "```py\ndef convert_to_basen(value, base):\n    import math\n    def _convert(remaining_value, base, exp):\n        def stringify(value):\n            if value > 9:\n                return chr(value + ord('a')-10)\n            else:\n                return str(value)\n        if remaining_value >= 0 and exp >= 0:\n            factor = int(math.pow(base, exp))\n            if factor <= remaining_value:\n                multiple = remaining_value / factor\n                return stringify(multiple) + \\\n                  _convert(remaining_value-multiple*factor, \\\n                                base, exp-1)\n            else:\n                return \"0\" + \\\n                       _convert(remaining_value, base, exp-1)\n        else:\n            return \"\"\n    return \"%s/%s\" % (_convert(value, base, \\\n                         int(math.log(value, base))), base)\n```", "```py\ndef convert_to_basen(value, base):\n    \"\"\"Convert a base10 number to basen.\n >>> convert_to_basen(10, 2)\n '1010/2'\n >>> convert_to_basen(15, 16)\n 'f/16'\n >>> convert_to_basen(0, 2)\n Traceback (most recent call last):\n ...\n ValueError: math domain error\n >>> convert_to_basen(-1, 2)\n Traceback (most recent call last):\n ...\n ValueError: math domain error\n \"\"\"\n    import math\n```", "```py\nclass ShoppingCart(object):\n    def __init__(self):\n        self.items = []\n    def add(self, item, price):\n        self.items.append(Item(item, price))\n        return self\n    def item(self, index):\n        return self.items[index-1].item\n    def price(self, index):\n        return self.items[index-1].price\n    def total(self, sales_tax):\n        sum_price = sum([item.price for item in self.items])\n        return sum_price*(1.0 + sales_tax/100.0)\n    def __len__(self):\n        return len(self.items)\nclass Item(object):\n    def __init__(self, item, price):\n        self.item = item\n        self.price = price\n```", "```py\n\"\"\"\nThis is documentation for the this entire recipe.\nWith it, we can demonstrate usage of the code.\n\n>>> cart = ShoppingCart().add(\"tuna sandwich\", 15.0)\n>>> len(cart)\n1\n>>> cart.item(1)\n'tuna sandwich'\n>>> cart.price(1)\n15.0\n>>> print (round(cart.total(9.25), 2))\n16.39\n\"\"\"\nclass ShoppingCart(object):\n...\n```", "```py\ndef item(self, index):\n    \"\"\"\n    >>> cart.item(1)\n    'tuna sandwich'\n    \"\"\"\n    return self.items[index-1].item\n```", "```py\ndef convert_to_basen(value, base):\n    import math\n    def _convert(remaining_value, base, exp):\n        def stringify(value):\n            if value > 9:\n                return chr(value + ord('a')-10)\n            else:\n                return str(value)\n\n        if remaining_value >= 0 and exp >= 0:\n            factor = int(math.pow(base, exp))\n            if factor <= remaining_value:\n                multiple = remaining_value / factor\n                return stringify(multiple) + \\\n                  _convert(remaining_value-multiple*factor, \\\n                                base, exp-1)\n            else:\n                return \"0\" + \\\n                       _convert(remaining_value, base, exp-1)\n        else:\n            return \"\"\n    return \"%s/%s\" % (_convert(value, base, \\\n                         int(math.log(value, base))), base)\n```", "```py\ndef convert_to_basen(value, base):\n    \"\"\"Convert a base10 number to basen.\n\n >>> [convert_to_basen(i, 16) for i in range(1,16)] #doctest:\n+NORMALIZE_WHITESPACE\n ['1/16', '2/16', '3/16', '4/16', '5/16', '6/16', '7/16', '8/16',\n '9/16',  'a/16', 'b/16', 'c/16', 'd/16', 'e/16', 'f/16']\n\n FUTURE: Binary may support 2's complement in the future, but not\nnow.\n >>> convert_to_basen(-10, 2) #doctest: +SKIP\n '0110/2'\n \"\"\"\n    import math\n```", "```py\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```", "```py\ndef convert_to_basen(value, base):\n    \"\"\"Convert a base10 number to basen.\n    >>> [convert_to_basen(i, 16) for i in range(1,16)] #doctest:\n+NORMALIZE_WHITESPACE\n    ['1/16', '2/16', '3/16', '4/16', '5/16', '6/16', '7/16', '8/16',\n    '9/16',  'a/16', 'b/16', 'c/16', 'd/16', 'e/16', 'f/16']\n    FUTURE: Binary may support 2's complement in the future, but not\nnow.\n    >>> convert_to_basen(-10, 2) #doctest: +SKIP\n    '0110/2'\n    BUG: Discovered that this algorithm doesn't handle 0\\. Need to patch\nit.\n TODO: Renable this when patched.\n >>> convert_to_basen(0, 2)\n '0/2'\n \"\"\"\n    import math\n```", "```py\ndef convert_to_basen(value, base): \n    \"\"\"Convert a base10 number to basen. \n\n    >>> [convert_to_basen(i, 16) for i in range(1,16)] #doctest: +NORMALIZE_WHITESPACE \n    ['1/16', '2/16', '3/16', '4/16', '5/16', '6/16', '7/16', '8/16', \n    '9/16',  'a/16', 'b/16', 'c/16', 'd/16', 'e/16', 'f/16'] \n\n    FUTURE: Binary may support 2's complement in the future, but not now. \n    >>> convert_to_basen(-10, 2) #doctest: +SKIP \n    '0110/2' \n\n    BUG: Discovered that this algorithm doesn't handle 0\\. Need to patch it. \n    TODO: Renable this when patched. \n    >>> convert_to_basen(0, 2) #doctest: +SKIP \n    '0/2' \n    \"\"\" \n    import math\n```", "```py\ndef print_doc(name, item):\n    if item.__doc__:\n        print \"Documentation for %s\" % name\n        print \"-------------------------------\"\n        print item.doc\n        print \"-------------------------------\"\n    else:\n        print \"Documentation for %s - None\" % name\n```", "```py\ndef print_docstrings(m, prefix=\"\"):\n    print_doc(prefix + \"module %s\" % m.__name__, m)\n\n    for (name, value) in getmembers(m, isclass):\n        if name == '__class__': continue\n        print_docstrings(value, prefix=name + \".\")\n    for (name, value) in getmembers(m, ismethod):\n        print_doc(\"%s%s()\" % (prefix, name), value)\n    for (name, value) in getmembers(m, isfunction):\n        print_doc(\"%s%s()\" % (prefix, name), value)\n```", "```py\nif __name__ == \"__main__\":\n    import sys\n    import doctest\n\n    for arg in sys.argv[1:]:\n        if arg.startswith(\"-\"): continue\n        print \"===============================\"\n        print \"== Processing module %s\" % arg\n        print \"===============================\"\n        m = __import__(arg)\n        print_docstrings(m)\n        print \"Running doctests for %s\" % arg\n        print \"-------------------------------\"\n        doctest.testmod(m)\n```", "```py\n>>> cart = ShoppingCart().add(\"tuna sandwich\", 15.0)\n>>> len(cart)\n1\n>>> cart.item(1)\n'tuna sandwich'\n>>> cart.price(1)\n15.0\n>>> print round(cart.total(9.25), 2)\n16.39\n\"\"\"\n\nclass ShoppingCart(object):\n    \"\"\"\n    This object is used to store the goods.\n    It conveniently calculates total cost including\n    tax.\n    \"\"\"\n    def __init__(self):\n        self.items = []\n    def add(self, item, price):\n        \"Add an item to the internal list.\"\n        self.items.append(Item(item, price))\n        return self\n    def item(self, index):\n        \"Look up the item. The cart is a 1-based index.\"\n        return self.items[index-1].item\n    def price(self, index):\n        \"Look up the price. The cart is a 1-based index.\"\n        return self.items[index-1].price\n    def total(self, sales_tax):\n        \"Add up all costs, and then apply a sales tax.\"\n        sum_price = sum([item.price for item in self.items])\n        return sum_price*(1.0 + sales_tax/100.0)\n    def __len__(self):\n        \"Support len(cart) operation.\"\n        return len(self.items)\n\nclass Item(object):\n    def __init__(self, item, price):\n        self.item = item\n        self.price = price\n```", "```py\n===============================\n== Processing module recipe21\n===============================\nDocumentation for module recipe21\n-------------------------------\nThis is documentation for the this entire recipe.\nWith it, we can demonstrate usage of the code.\n>>> cart = ShoppingCart().add(\"tuna sandwich\", 15.0)\n>>> len(cart)\n1\n>>> cart.item(1)\n'tuna sandwich'\n>>> cart.price(1)\n15.0\n>>> print round(cart.total(9.25), 2)\n16.39\n-------------------------------\nDocumentation for Item.module Item - None\nDocumentation for Item.__init__() - None\nDocumentation for ShoppingCart.module ShoppingCart\n-------------------------------\n This object is used to store the goods.\n It conveniently calculates total cost including\n tax.\n\u2026\nRunning doctests for recipe21\n-------------------------------\nTrying:\n cart = ShoppingCart().add(\"tuna sandwich\", 15.0)\nExpecting nothing\nok\nTrying:\n len(cart)\nExpecting:\n 1\nok\n5 tests in 10 items.\n5 passed and 0 failed.\nTest passed.\n```", "```py\n if arg.startswith(\"-\"): continue \n```", "```py\ndef convert_to_basen(value, base):\n    if base < 2 or base > 36:\n        raise Exception(\"Only support bases 2-36\")\n\n    import math\n    def _convert(remaining_value, base, exp):\n        def stringify(value):\n            if value > 9:\n                return chr(value + ord('a')-10)\n            else:\n                return str(value)\n\n        if remaining_value >= 0 and exp >= 0:\n            factor = int(math.pow(base, exp))\n            if factor <= remaining_value:\n                multiple = remaining_value / factor\n                return stringify(multiple) + \\\n                  _convert(remaining_value-multiple*factor, \\\n                                base, exp-1)\n            else:\n                return \"0\" + \\\n                       _convert(remaining_value, base, exp-1)\n        else:\n            return \"\"\n\n    return \"%s/%s\" % (_convert(value, base, \\\n                         int(math.log(value, base))), base)\n```", "```py\ndef convert_to_basen(value, base):\n    \"\"\"Convert a base10 number to basen.\n\n    These show the edges for base 2.\n    >>> convert_to_basen(1, 2)\n    '1/2'\n    >>> convert_to_basen(2, 2)\n    '10/2'\n    >>> convert_to_basen(0, 2)\n    Traceback (most recent call last):\n       ...\n    ValueError: math domain error\n\n    These show the edges for base 36.\n    >>> convert_to_basen(1, 36)\n    '1/36'\n    >>> convert_to_basen(35, 36)\n    'z/36'\n    >>> convert_to_basen(36, 36)\n    '10/36'\n    >>> convert_to_basen(0, 36)\n    Traceback (most recent call last):\n       ...\n    ValueError: math domain error\n\n    These show the edges for base 37.\n    >>> convert_to_basen(1, 37)\n    Traceback (most recent call last):\n       ...\n    Exception: Only support bases 2-36\n    >>> convert_to_basen(36, 37)\n    Traceback (most recent call last):\n       ...\n    Exception: Only support bases 2-36\n    >>> convert_to_basen(37, 37)\n    Traceback (most recent call last):\n       ...\n    Exception: Only support bases 2-36\n    >>> convert_to_basen(0, 37)   \n    Traceback (most recent call last):\n       ...\n    Exception: Only support bases 2-36\n    \"\"\"\n    if base < 2 or base > 36:\n```", "```py\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```", "```py\ndef convert_to_basen(value, base):\n    import math\n\n    def _convert(remaining_value, base, exp):\n        def stringify(value):\n            if value > 9:\n                return chr(value + ord('a')-10)\n            else:\n                return str(value)\n\n        if remaining_value >= 0 and exp >= 0:\n            factor = int(math.pow(base, exp))\n            if factor <= remaining_value:\n                multiple = remaining_value / factor\n                return stringify(multiple) + \\\n                  _convert(remaining_value-multiple*factor, \\\n                                base, exp-1)\n            else:\n                return \"0\" + \\\n                       _convert(remaining_value, base, exp-1)\n        else:\n            return \"\"\n\n    return \"%s/%s\" % (_convert(value, base, \\\n                         int(math.log(value, base))), base)\n```", "```py\ndef convert_to_basen(value, base):\n    \"\"\"Convert a base10 number to basen.\n\n    Base 2\n    >>> inputs = [(1,2,'1/2'), (2,2,'11/2')]\n    >>> for value,base,expected in inputs:\n    ...     actual = convert_to_basen(value,base)\n    ...     assert actual == expected, 'expected: %s actual: %s' %\n(expected, actual)\n\n    >>> convert_to_basen(0, 2)\n    Traceback (most recent call last):\n       ...\n    ValueError: math domain error\n\n    Base 36.\n    >>> inputs = [(1,36,'1/36'), (35,36,'z/36'), (36,36,'10/36')]\n    >>> for value,base,expected in inputs:\n    ...     actual = convert_to_basen(value,base)\n    ...     assert actual == expected, 'expected: %s actual: %s' %\n(expected, value)\n\n    >>> convert_to_basen(0, 36)\n    Traceback (most recent call last):\n       ...\n    ValueError: math domain error\n    \"\"\"\n    import math\n```", "```py\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```", "```py\nimport getopt\nimport glob\nimport logging\nimport nose\nimport os\nimport os.path\nimport re\nimport sys\ndef usage():\n    print ()\n    print (\"Usage: python recipe25.py [command]\")\n    print ()\n    print (\"\\t--help\")\n    print (\"\\t--doctest\")\n    print (\"\\t--suite [suite]\")\n    print (\"\\t--debug-level [info|debug]\")\n    print (\"\\t--package\")\n    print (\"\\t--publish\")\n    print (\"\\t--register\")\n    print ()\n\ntry:\n    optlist, args = getopt.getopt(sys.argv[1:],\n            \"h\",\n           [\"help\", \"doctest\", \"suite=\", \\\n            \"debug-level=\", \"package\", \\\n            \"publish\", \"register\"])\nexcept getopt.GetoptError:\n    # print help information and exit:\n    print \"Invalid command found in %s\" % sys.argv\n    usage()\n    sys.exit(2)\n```", "```py\ndef test(test_suite, debug_level):\n    logger = logging.getLogger(\"recipe25\")\n    loggingLevel = debug_level\n    logger.setLevel(loggingLevel)\n    ch = logging.StreamHandler()\n    ch.setLevel(loggingLevel)\n    formatter = logging.Formatter(\"%(asctime)s - %(name)s - \n(levelname)s - %(message)s\")\n    ch.setFormatter(formatter)\n    logger.addHandler(ch)\n\n    nose.run(argv=[\"\", test_suite, \"--verbosity=2\"])\n```", "```py\ndef doctest(test_suite=None):\n    args = [\"\", \"--with-doctest\"]\n    if test_suite is not None:\n        print (\"Running doctest suite %s\" % test_suite)\n        args.extend(test_suite.split(','))\n        nose.run(argv=args)\n    else:\n        nose.run(argv=args)\n```", "```py\ndef package(): \n    print (\"This is where we can plug in code to run \" + \\\n          \"setup.py to generate a bundle.\")\n\ndef publish():\n    print (\"This is where we can plug in code to upload \" + \\\n          \"our tarball to S3 or some other download site.\")\n\ndef register():\n    print (\"setup.py has a built in function to \" + \\\n          \"'register' a release to PyPI. It's \" + \\\n          \"convenient to put a hook in here.\")\n    # os.system(\"%s setup.py register\" % sys.executable)\n```", "```py\nif len(optlist) == 0:\n    usage()\n    sys.exit(1)\n```", "```py\ndebug_levels = {\"info\":logging.INFO, \"debug\":logging.DEBUG}\n# Default debug level is INFO\ndebug_level = debug_levels[\"info\"]\n\nfor option in optlist:\n    if option[0] in (\"--debug-level\"):\n        # Override with a user-supplied debug level\n        debug_level = debug_levels[option[1]]\n```", "```py\n# Check for help requests, which cause all other\n# options to be ignored.\nfor option in optlist:\n    if option[0] in (\"--help\", \"-h\"):\n    usage()\n    sys.exit(1)\n```", "```py\nran_doctests = False\nfor option in optlist:\n    # If --doctest is picked, then --suite is a\n    # suboption.\n    if option[0] in (\"--doctest\"):\n        suite = None\n        for suboption in optlist:\n            if suboption[0] in (\"--suite\"):\n                suite = suboption[1]\n        print \"Running doctests...\"\n        doctest(suite)\n        ran_doctests = True\n\nif not ran_doctests:\n    for option in optlist:\n        if option[0] in (\"--suite\"):\n            print \"Running test suite %s...\" % option[1]\n            test(option[1], debug_level)\n```", "```py\n# Parse the arguments, in order\nfor option in optlist:\n    if option[0] in (\"--package\"):\n        package()\n\n    if option[0] in (\"--publish\"):\n        publish()\n\n    if option[0] in (\"--register\"):\n        register()\n```", "```py\noptlist, args = getopt.getopt(sys.argv[1:],\n        \"h\",\n       [\"help\", \"doctest\", \"suite=\", \\\n        \"debug-level=\", \"package\", \\\n        \"publish\", \"register\"])\n```"]