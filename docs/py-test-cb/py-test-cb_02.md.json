["```py\nclass ShoppingCart(object):\n      def __init__(self):\n          self.items = []\n      def add(self, item, price):\n          self.items.append(Item(item, price))\n          return self\n     def item(self, index):\n          return self.items[index-1].item\n     def price(self, index):\n          return self.items[index-1].price\n     def total(self, sales_tax):\n          sum_price = sum([item.price for item in self.items])\n          return sum_price*(1.0 + sales_tax/100.0)\n     def __len__(self):\n          return len(self.items)\nclass Item(object):\n     def __init__(self, item, price):\n          self.item = item\n          self.price = price\n```", "```py\nimport unittest\nclass ShoppingCartTest(unittest.TestCase):\n     def setUp(self):\n        self.cart = ShoppingCart().add(\"tuna sandwich\", 15.00)\n     def test_length(self):\n        self.assertEquals(1, len(self.cart))\n     def test_item(self):\n        self.assertEquals(\"tuna sandwich\", self.cart.item(1))\n     def test_price(self):\n        self.assertEquals(15.00, self.cart.price(1))\n     def test_total_with_sales_tax(self):\n        self.assertAlmostEquals(16.39,\n        self.cart.total(9.25), 2)\n```", "```py\nif __name__ == \"__main__\": \n    unittest.main()\n```", "```py\nclass ShoppingCart(object):\n   def __init__(self):\n      self.items = []\n   def add(self, item, price):\n      self.items.append(Item(item, price))\n      return self\n   def item(self, index):\n      return self.items[index-1].item\n   def price(self, index):\n      return self.items[index-1].price\n   def total(self, sales_tax):\n      sum_price = sum([item.price for item in self.items])\n      return sum_price*(1.0 + sales_tax/100.0)\n   def __len__(self):\n      return len(self.items)\nclass Item(object):\n   def __init__(self, item, price):\n      self.item = item\n      self.price = price\n```", "```py\nimport unittest\nclass ShoppingCartTest(unittest.TestCase):\n   def setUp(self): \n      self.cart = ShoppingCart().add(\"tuna sandwich\", 15.00)\n   def test_length(self):\n      self.assertEquals(1, len(self.cart))\n   def test_item(self):\n      self.assertEquals(\"tuna sandwich\", self.cart.item(1))\n   def test_price(self):\n      self.assertEquals(15.00, self.cart.price(1))\n   def test_total_with_sales_tax(self):\n      self.assertAlmostEquals(16.39,\n      self.cart.total(9.25), 2)\n```", "```py\nif __name__ == \"__main__\":\n    import nose\n    nose.run(argv=[\"\", \"recipe12\", \"--verbosity=2\"])\n```", "```py\nif __name__ == \"__main__\": \n    import unittest \n    from recipe12 import * \n    suite = unittest.TestLoader().loadTestsFromTestCase( \n                                        ShoppingCartTest) \n    unittest.TextTestRunner(verbosity=2).run(suite) \n```", "```py\nif __name__ == \"__main__\": \n    import nose \n    nose.run(argv=[\"\", \"recipe12\", \"--verbosity=2\"]) \n```", "```py\nclass ShoppingCart(object):\n   def __init__(self):\n     self.items = []\n   def add(self, item, price):\n     self.items.append(Item(item, price))\n     return self\n   def item(self, index):\n     return self.items[index-1].item\n   def price(self, index):\n     return self.items[index-1].price\n   def total(self, sales_tax):\n     sum_price = sum([item.price for item in self.items])\n     return sum_price*(1.0 + sales_tax/100.0)\n   def __len__(self):\n     return len(self.items)\nclass Item(object):\n   def __init__(self, item, price):\n     self.item = item\n     self.price = price\n```", "```py\nimport unittest\nclass ShoppingCartTest(unittest.TestCase):\n   def setUp(self):\n     self.cart = ShoppingCart().add(\"tuna sandwich\", 15.00)\n   def length(self):\n     self.assertEquals(1, len(self.cart))\n   def test_item(self):\n     self.assertEquals(\"tuna sandwich\", self.cart.item(1))\n   def test_price(self):\n     self.assertEquals(15.00, self.cart.price(1))\n   def test_total_with_sales_tax(self):\n     self.assertAlmostEquals(16.39,\n     self.cart.total(9.25), 2)\n```", "```py\nimport sys \nerr = sys.stderr \n```", "```py\nimport nose\nimport re\nfrom nose.plugins import Plugin\nclass RegexPicker(Plugin):\n   name = \"regexpicker\"\n   def __init__(self):\n      Plugin.__init__(self)\n      self.verbose = False\n```", "```py\ndef options(self, parser, env):\n    Plugin.options(self, parser, env)\n    parser.add_option(\"--re-pattern\",\n       dest=\"pattern\", action=\"store\",\n       default=env.get(\"NOSE_REGEX_PATTERN\", \"test.*\"),\n       help=(\"Run test methods that have a method name matching this regular expression\"))\n```", "```py\ndef configure(self, options, conf):\n     Plugin.configure(self, options, conf)\n     self.pattern = options.pattern\n     if options.verbosity >= 2:\n        self.verbose = True\n        if self.enabled:\n           err.write(\"Pattern for matching test methods is %sn\" % self.pattern)\n```", "```py\ndef wantMethod(self, method):\n   wanted =\n     re.match(self.pattern, method.func_name) is not None\n   if self.verbose and wanted:\n      err.write(\"nose will run %sn\" % method.func_name)\n   return wanted\n```", "```py\nif __name__ == \"__main__\":\n     args = [\"\", \"recipe13\", \"--with-regexpicker\", \"--re-pattern=test.*|length\", \"--verbosity=2\"]\n     print \"With verbosity...\"\n     print \"====================\"\n     nose.run(argv=args, plugins=[RegexPicker()])\n     print \"Without verbosity...\"\n     print \"====================\"\n     args = args[:-1]\n     nose.run(argv=args, plugins=[RegexPicker()])\n```", "```py\nimport sys\ntry:\n        import ez_setup\n        ez_setup.use_setuptools()\nexcept ImportError:\n        pass\nfrom setuptools import setup\nsetup(\n        name=\"RegexPicker plugin\",\n        version=\"0.1\",\n        author=\"Greg L. Turnquist\",\n        author_email=\"Greg.L.Turnquist@gmail.com\",\n        description=\"Pick test methods based on a regular expression\",\n        license=\"Apache Server License 2.0\",\n        py_modules=[\"recipe13_plugin\"],\n        entry_points = {\n            'nose.plugins': [\n                'recipe13_plugin = recipe13_plugin:RegexPicker'\n               ]\n        }\n)\n```", "```py\nclass ShoppingCart(object):\n   def __init__(self):\n     self.items = [] \n   def add(self, item, price):\n     self.items.append(Item(item, price))\n     return self\n   def item(self, index):\n     return self.items[index-1].item\n   def price(self, index):\n     return self.items[index-1].price\n   def total(self, sales_tax):\n     sum_price = sum([item.price for item in self.items])\n     return sum_price*(1.0 + sales_tax/100.0)\n   def __len__(self):\n     return len(self.items)\nclass Item(object):\n   def __init__(self, item, price):\n     self.item = item\n     self.price = price\n```", "```py\nimport unittest\nclass ShoppingCartTest(unittest.TestCase):\n    def setUp(self):\n      self.cart = ShoppingCart().add(\"tuna sandwich\", 15.00)\n    def test_length(self):\n      self.assertEquals(1, len(self.cart))\n    def test_item(self):\n      self.assertEquals(\"tuna sandwich\", self.cart.item(1))\n    def test_price(self):\n      self.assertEquals(15.00, self.cart.price(1))\n    def test_total_with_sales_tax(self):\n      self.assertAlmostEquals(16.39,\n      self.cart.total(9.25), 2)\n    def test_assert_failure(self):\n      self.fail(\"You should see this failure message in the report.\")\n```", "```py\nimport nose\nimport re\nfrom nose.plugins import Plugin\nclass CsvReport(Plugin):\n    name = \"csv-report\"\n    def __init__(self):\n      Plugin.__init__(self)\n      self.results = []\n```", "```py\ndef options(self, parser, env):\n  Plugin.options(self, parser, env)\n  parser.add_option(\"--csv-file\",\n    dest=\"filename\", action=\"store\",\n    default=env.get(\"NOSE_CSV_FILE\", \"log.csv\"),\n    help=(\"Name of the report\"))\n```", "```py\ndef configure(self, options, conf):\n  Plugin.configure(self, options, conf)\n  self.filename = options.filename\n```", "```py\ndef addSuccess(self, *args, **kwargs):\n  test = args[0]\n  self.results.append((test, \"Success\"))\ndef addError(self, *args, **kwargs):\n  test, error = args[0], args[1]\n  self.results.append((test, \"Error\", error))\ndef addFailure(self, *args, **kwargs):\n  test, error = args[0], args[1]\n  self.results.append((test, \"Failure\", error))\n```", "```py\ndef finalize(self, result):\n   report = open(self.filename, \"w\")\n   report.write(\"Test,Success/Failure,Detailsn\")\n   for item in self.results:\n       if item[1] == \"Success\":\n           report.write(\"%s,%sn\" % (item[0], item[1]))\n       else:\n           report.write(\"%s,%s,%sn\" % (item[0],item[1], item[2][1]))\n    report.close()\n```", "```py\nif __name__ == \"__main__\":\n   args = [\"\", \"recipe14\", \"--with-csv-report\", \"--csv-file=recipe14.csv\"]\nnose.run(argv=args, plugin=[CsvReport()])\n```", "```py\nimport sys\ntry:\n   import ez_setup\n   ez_setup.use_setuptools()\nexcept ImportError:\n   pass\nfrom setuptools import setup\nsetup(\n   name=\"CSV report plugin\",\n   version=\"0.1\",\n   author=\"Greg L. Turnquist\",\n   author_email=\"Greg.L.Turnquist@gmail.com\",\n   description=\"Generate CSV report\",\n   license=\"Apache Server License 2.0\",\n   py_modules=[\"recipe14_plugin\"],\n   entry_points = {\n       'nose.plugins': [\n           'recipe14_plugin = recipe14_plugin:CsvReport'\n         ]\n   }\n)\n```", "```py\nimport getopt\nimport glob\nimport logging\nimport nose\nimport os\nimport os.path\nimport pydoc\nimport re\nimport sys\ndef usage():\n    print\n    print \"Usage: python recipe15.py [command]\"\n    print\n    print \"t--help\"\n    print \"t--test\"\n    print \"t--suite [suite]\"\n    print \"t--debug-level [info|debug]\"\n    print \"t--package\"\n    print \"t--publish\"\n    print \"t--register\"\n    print \"t--pydoc\"\n    print\ntry:\n    optlist, args = getopt.getopt(sys.argv[1:],\n                    \"ht\", \n                    [\"help\", \"test\", \"suite=\",\n                    \"debug-level=\", \"package\",\n                    \"publish\", \"register\", \"pydoc\"])\nexcept getopt.GetoptError:\n    # print help information and exit:\n    print \"Invalid command found in %s\" % sys.argvusage()\n    sys.exit(2)\n```", "```py\ndef test(test_suite, debug_level):\n    logger = logging.getLogger(\"recipe15\")\n    loggingLevel = debug_level\n    logger.setLevel(loggingLevel)\n    ch = logging.StreamHandler()\n    ch.setLevel(loggingLevel)\n    formatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s -\n%(message)s\")\n    ch.setFormatter(formatter)\n    logger.addHandler(ch)\n    nose.run(argv=[\"\", test_suite, \"--verbosity=2\"])\n```", "```py\ndef package():\n    print \"This is where we can plug in code to run \" +\n    \"setup.py to generate a bundle.\"\ndef publish():\n    print \"This is where we can plug in code to upload \" +\n          \"our tarball to S3 or some other download site.\"\ndef register():\n    print \"setup.py has a built in function to \" +\n          \"'register' a release to PyPI. It's \" +\n          \"convenient to put a hook in here.\"\n    # os.system(\"%s setup.py register\" % sys.executable)\n```", "```py\ndef create_pydocs():\n    print \"It's useful to use pydoc to generate docs.\"\n    pydoc_dir = \"pydoc\"\n    module = \"recipe15_all\"\n    __import__(module)\n    if not os.path.exists(pydoc_dir):\n        os.mkdir(pydoc_dir)\n    cur = os.getcwd()\n    os.chdir(pydoc_dir)\n    pydoc.writedoc(\"recipe15_all\")\n    os.chdir(cur)\n```", "```py\ndebug_levels = {\"info\":logging.INFO, \"debug\":logging.DEBUG}\n# Default debug level is INFO\ndebug_level = debug_levels[\"info\"]\nfor option in optlist:\n    if option[0] in (\"--debug-level\"):\n        # Override with a user-supplied debug level\n        debug_level = debug_levels[option[1]]\n```", "```py\n# Check for help requests, which cause all other\n# options to be ignored.\nfor option in optlist:\nif option[0] in (\"--help\", \"-h\"):\n   usage()\n   sys.exit(1)\n```", "```py\n# Parse the arguments, in order\nfor option in optlist:\n    if option[0] in (\"--test\"):\n       print \"Running recipe15_checkin tests...\"\n       test(\"recipe15_checkin\", debug_level)\n    if option[0] in (\"--suite\"):\n       print \"Running test suite %s...\" % option[1]\n       test(option[1], debug_level)\n    if option[0] in (\"--package\"):\n       package()\n    if option[0] in (\"--publish\"):\n       publish()\n    if option[0] in (\"--register\"):\n       register()\n    if option[0] in (\"--pydoc\"):\n       create_pydocs()\n```", "```py\nimport recipe11 \n\nclass Recipe11Test(recipe11.ShoppingCartTest): \n    pass \n```", "```py\nimport recipe11\nimport recipe12\nimport recipe13\nimport recipe14\nclass Recipe11Test(recipe11.ShoppingCartTest):\n    pass\nclass Recipe12Test(recipe12.ShoppingCartTest):\n    pass\nclass Recipe13Test(recipe13.ShoppingCartTest):\n    pass\nclass Recipe14Test(recipe14.ShoppingCartTest):\n    pass\n```", "```py\noptlist, args = getopt.getopt(sys.argv[1:],\n                \"ht\",\n                [\"help\", \"test\", \"suite=\",\n                \"debug-level=\", \"package\",\n                \"publish\", \"register\", \"pydoc\"])\n```"]