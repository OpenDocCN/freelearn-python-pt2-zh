["```py\npip install -r http://bitbucket.org/gturnquist/satchmo/raw/tip/scripts/requirements.txt\npip install -e hg+http://bitbucket.org/gturnquist/satchmo/#egg=satchmo\n```", "```py\nclass ShoppingCart(object): \n    def __init__(self): \n        self.items = [] \n\n    def add(self, item, price): \n        for cart_item in self.items: \n            # Since we found the item, we increment \n            # instead of append \n            if cart_item.item == item: \n                cart_item.q += 1 \n                return self \n\n        # If we didn't find, then we append \n        self.items.append(Item(item, price)) \n        return self \n\n    def item(self, index): \n        return self.items[index-1].item \n\n    def price(self, index): \n        return self.items[index-1].price * self.items[index-1].q \n\n    def total(self, sales_tax): \n        sum_price = sum([item.price*item.q for item in self.items]) \n        return sum_price*(1.0 + sales_tax/100.0) \n\n    def __len__(self): \n        return sum([item.q for item in self.items]) \n\nclass Item(object): \n    def __init__(self, item, price, q=1): \n        self.item = item \n        self.price = price \n        self.q = q \n```", "```py\nAs a Yahoo User\nI want to search Yahoo\nSo that I can test my installation of Pyccuracy\n\nScenario 1 - Searching for Python Testing Cookbook\nGiven\n    I go to \"http://yahoo.com\"\nWhen\n    I fill \"p\" textbox with \"Python Testing Cookbook\"\n    And I click \"search-submit\" button and wait\nThen\n    I see \"Python Testing Cookbook - Yahoo! Search Results\" title\n```", "```py\nAs a store customer\nI want to put things into my cart\nSo that I can verify the store's functionality.\n```", "```py\nScenario 1 - Inspect empty cart in detail\nGiven\nI go to \"http://localhost:8000\"\nWhen\nI click \"Cart\" link and wait\nThen\nI see that current page contains \"Your cart is empty\"\nAnd I see that current page contains \"0 - $0.00\"\n```", "```py\nScenario 2 - Load up a cart with 2 of the same\nGiven\nI go to \"http://localhost:8000\"\nWhen\nI click \"Science Fiction\" link\nAnd I click \"Robots Attack!\" link and wait\nAnd I fill \"quantity\" textbox with \"2\"\nAnd I click \"addcart\" button and wait\nAnd I click \"Cart\" link and wait\nThen\nI see that current page contains \"Robots Attack!\"\nAnd I see \"quantity\" textbox contains \"2\"\nAnd I see that current page contains \"<td align=\"center\">$7.99</td>\"\nAnd I see that current page contains \"<td align=\"center\">$15.98</td>\"\nAnd I see that current page contains \"<td>$15.98</td>\"\n```", "```py\nAs a system administrator, \nI want to log in to Django's admin page \nso that I can check the product catalog.\n```", "```py\nScenario 1 - Logging in to the admin page\nGiven\n    I go to \"http://localhost:8000/admin\"\nWhen\n    I fill \"username\" textbox with \"gturnquist\"\n    And I fill \"password\" textbox with \"password\"\n    And I click \"login\" button and wait\nThen\n    I see that current page contains \n    \"<ahref=\"product/product/\">Products</a>\"\n```", "```py\nScenario 2 - Check product catalog\nGiven\n    I am logged in with username \"gturnquist\" and password \"password\"\nWhen\n    I click \"Products\" link and wait\nThen\n    I see that current page contains \"robot-attack\"\n```", "```py\nfrom pyccuracy.actions import ActionBase\nfrom pyccuracy.errors import *\n\nclass LoggedInAction(ActionBase):\n    regex = r'(And )?I am logged in with username [\"] (?P<username>.+)[\"] and password [\"](?P<password>.+)[\"]$'\n    def execute(self, context, username, password):\n        self.execute_action(u'I go to \"http://localhost:8000/\nadmin\"', context)\n    logged_in = False\n    try:\n        self.execute_action(\n          u'And I see that current page contains \"id_username\"', context)\n        except ActionFailedError:\n            logged_in = True\n        if not logged_in:\n            self.execute_action(u'And I fill \"username\" textbox with \"%s\"' % username, context)\n            self.execute_action(u'And I fill \"password\" textbox with \"%s\"' % password, context)\n            self.execute_action(u'And I click \"login\" button', context)\n```", "```py\nfrom cart import *\n\nclass recipe39:\n    def __init__(self):\n        self.cart = ShoppingCart()\n    def add_item_to_cart(self, description, price):\n        self.cart.add(description, float(price))\n    def get_total(self, tax):\n        return format(self.cart.total(float(tax)), \".2f\")\n```", "```py\nfrom cart import *\nclass recipe40:\ndef __init__(self):\nself.cart = None\ndef create_empty_cart(self):\nself.cart = ShoppingCart()\ndef lookup_item(self, index):\ntry:\nreturn self.cart.item(int(index))\nexcept IndexError:\nreturn \"ERROR\"\ndef lookup_price(self, index):\ntry:\nreturn format(self.cart.price(int(index)), \".2f\")\nexcept IndexError:\nreturn \"ERROR\"\ndef add_item(self, description, price):\nself.cart.add(description, float(price))\ndef size_of_cart(self):\nreturn len(self.cart)\ndef total(self, tax):\nreturn format(self.cart.total(float(tax)), \".2f\")\n```", "```py\nWhen I add a carton of milk for 2.50 \n```", "```py\nclass ShoppingCart(object):\n    def __init__(self):\n        self.items = []\n    def add(self, item, price):\n        for cart_item in self.items:\n            # Since we found the item, we increment\n            # instead of append\n            if cart_item.item == item:\n                cart_item.q += 1\n                return self\n        # If we didn't find, then we append\n        self.items.append(Item(item, price))\n        return self\n    def item(self, index):\n        return self.items[index-1].item\n    def price(self, index):\n        return self.items[index-1].price * self.items[index-1].q\n    def total(self, sales_tax):\n        sum_price = sum([item.price*item.q for item in self.items])\n        return sum_price*(1.0 + sales_tax/100.0)\n    def store(self):\n        # This simulates a DB being created.\n        f = open(\"cart.db\", \"w\")\n        f.close()\n    def retrieve(self, id):\n        # This simulates a DB being read.\n        f = open(\"cart.db\")\n        f.close()\n    def __len__(self):\n        return sum([item.q for item in self.items])\nclass Item(object):\n    def __init__(self, item, price, q=1):\n        self.item = item\n        self.price = price\n        self.q = q\n```", "```py\n***Test Cases***\nSimple check of adding one item\n    Given an empty cart\n    When I add a carton of milk for 2.50\n    Then the total with 0 % tax is 2.50\n    And the total with 10 % tax is 2.75\n\nMore complex by storing cart to database\n    [Documentation] This test case has special tagging, so it can be\nexcluded. This is in case the developer doesn't have the right database\nsystem installed to interact properly.cart.db\n    [Tags] database\n    Given an empty cart\n    When I add a carton of milk for 2.50\n    And I add a frozen pizza for 3.50\n    And I store the cart\n    And I retrieve the cart\n    Then there are 2 items\n```", "```py\n***Keywords***\nGiven an empty cart\n    create empty cart\nWhen I add a\n    [Arguments] ${description} ${noop} ${price}\n    add item ${description} ${price}\nAnd I add a\n    [Arguments] ${description} ${noop} ${price}\n    add item ${description} ${price}\nThen the total with\n    [Arguments] ${tax} ${noop} ${total}\n    ${calc total}= total ${tax}\n    Should Be Equal ${calc total} ${total}\nAnd the total with\n    [Arguments] ${tax} ${noop} ${total}\n    Then the total with ${tax} ${noop} ${total}\nAnd I store the cart\n    Set Test Variable ${cart id} store cart\nAnd I retrieve the cart\n    retrieve cart ${cart id}\nThen there are\n    [Arguments] ${size} ${noop}\n    ${calc size}= Size of cart\n    Should Be Equal As Numbers ${calc size} ${size}\n```", "```py\nfrom cart41 import *\n\nclass recipe41:\n    def __init__(self):\n        self.cart = None\n    def create_empty_cart(self):\n        self.cart = ShoppingCart()\n    def lookup_item(self, index):\n        try:\n            return self.cart.item(int(index))\n        except IndexError:\n            return \"ERROR\"\n    def lookup_price(self, index):\n        try:\n            return format(self.cart.price(int(index)), \".2f\")\n        except IndexError:\n            return \"ERROR\"\n    def add_item(self, description, price):\n        self.cart.add(description, float(price))\n    def size_of_cart(self):\n        return len(self.cart)\n    def total(self, tax):\n        return format(self.cart.total(float(tax)), \".2f\")\n    def store_cart(self):\n        return self.cart.store()\n    def retrieve_cart(self, id):\n        self.cart.retrieve(id)\n    def size_of_cart(self):\n        return len(self.cart)\n```", "```py\n***Settings****** Library recipe41.py\n```", "```py\nMore complex by storing cart to database \n  [Documentation]  This test case has special tagging, so it can be excluded. This is in case the developer doesn't have the right database system installed to interact properly.cart.db \n  [Tags]  database \n  Given an empty cart \n  When I add a  carton of milk  for  2.50 \n  And I add a   frozen pizza    for  3.50 \n  And I store the cart \n  And I retrieve the cart \n  Then there are  2  items \n```", "```py\nAs a store customer\nI want to put things into my cart\nSo that I can verify the store's functionality.\n```", "```py\n***Test Cases***\nInspect empty cart in detail\n  Click link Cart\n  Page Should Contain Your cart is empty\n  Page Should Contain 0 - $0.00\n  Capture Page Screenshot recipe42-scenario1-1.png\n```", "```py\nLoad up a cart with 2 of the same\n  Click link Science Fiction don't wait\n  Capture Page Screenshot recipe42-scenario2-1.png\n  Click link Robots Attack!\n  Capture Page Screenshot recipe42-scenario2-2.png\n  Input text quantity 2\n  Capture Page Screenshot recipe42-scenario2-3.png\n  Click button Add to cart\n  Click link Cart\n  Capture Page Screenshot recipe42-scenario2-4.png\n  Textfield Value Should Be quantity 2\n  Page Should Contain Robots Attack! (Hard cover)\n  Html Should Contain <td align=\"center\">$7.99</td>\n  Html Should Contain <td align=\"center\">$15.98</td>\n  Html Should Contain <td>$15.98</td>\n```", "```py\n***Keywords***\nHtml Should Contain\n    [Arguments]     ${expected}\n    ${html}= Get Source\n    Should Contain ${html} ${expected}\nStartup\n    Start Selenium Server\n    Sleep 3s\n```", "```py\n***Settings***\nLibrary         SeleniumLibrary\nTest Setup      Open Browser http://localhost:8000\nTest Teardown   Close All Browsers\nSuite Setup     Startup\nSuite Teardown  Stop Selenium Server\n```", "```py\nAs a system administrator\nI want to login to Django's admin page\nSo that I can check the product catalog.\n```", "```py\n***Test Cases***\nLogging in to the admin page\n  Open Browser http://localhost:8000/admin\n  Input text username gturnquist\n  Input text password password\n  Submit form\n  Page Should Contain Link Products\n  Close All Browsers\n```", "```py\nCheck product catalog\n  Given that I am logged in\n  Click link Products\n  Capture Page Screenshot recipe43-scenario2-1.png\n  Table Should Contain result_list Robots Attack!\n  Table Row Should Contain result_list 4 Robots Attack!\n  Table Row Should Contain result_list 4 7.99\n  Close All Browsers\n```", "```py\n***Keywords***\nGiven that I am logged in\n  Open Browser http://localhost:8000/admin/\n  Input text username gturnquist\n  Input text password password\n  Submit form\n\nStartup\n  Start Selenium Server\n  Sleep 3s\n```", "```py\n***Settings***\nLibrary SeleniumLibrary\nSuite Setup Startup\nSuite Teardown Stop Selenium Server\n```", "```py\nimport getopt\nimport logging\nimport os\nimport os.path\nimport re\nimport sys\nfrom glob import glob\n\ndef usage():\n    print\n    print \"Usage: python recipe44.py [command]\"\n    print\n    print \"t--help\"\n    print \"t--test\"\n    print \"t--package\"\n    print \"t--publish\"\n    print \"t--register\"\n    print\ntry:\n    optlist, args = getopt.getopt(sys.argv[1:],\n            \"h\",\n            [\"help\", \"test\", \"package\", \"publish\", \"register\"])\nexcept getopt.GetoptError:\n    # print help information and exit:\n    print \"Invalid command found in %s\" % sys.argv\n    usage()\n    sys.exit(2)\n```", "```py\ndef test_with_pyccuracy():\n    from SeleniumLibrary import start_selenium_server\n    from SeleniumLibrary import shut_down_selenium_server\n    from time import sleep\n\n    f = open(\"recipe44_selenium_log.txt\", \"w\")\n    start_selenium_server(logfile=f)\n    sleep(10)\n\n    import subprocess\n    subprocess.call([\"pyccuracy_console\"])\n    shut_down_selenium_server()\n    sleep(5)\n    f.close()\n```", "```py\ndef test_with_robot():\n    from robot import run\n    run(\".\")\n```", "```py\ndef test():\n    test_with_pyccuracy()\n    test_with_robot()\n```", "```py\ndef package():\n    print \"This is where we can plug in code to run \" +\n        \"setup.py to generate a bundle.\"\ndef publish():\n    print \"This is where we can plug in code to upload \" +\n        \"our tarball to S3 or some other download site.\"\ndef register():\n    print \"setup.py has a built in function to \" +\n        \"'register' a release to PyPI. It's \" +\n        \"convenient to put a hook in here.\"\n    # os.system(\"%s setup.py register\" % sys.executable)\n```", "```py\nif len(optlist) == 0:\n    usage()\n    sys.exit(1)\n# Check for help requests, which cause all other\n# options to be ignored.\nfor option in optlist:\n    if option[0] in (\"--help\", \"-h\"):\n        usage()\n        sys.exit(1)\n\n# Parse the arguments, in order\nfor option in optlist:\n    if option[0] in (\"--test\"):\n        test()\n    if option[0] in (\"--package\"):\n        package()\n    if option[0] in (\"--publish\"):\n        publish()\n    if option[0] in (\"--register\"):\n        register()\n```", "```py\n    optlist, args = getopt.getopt(sys.argv[1:], \n            \"h\", \n           [\"help\", \"test\", \"package\", \"publish\", \"register\"]) \n```", "```py\n    from robot import run \n    run(\".\") \n```"]