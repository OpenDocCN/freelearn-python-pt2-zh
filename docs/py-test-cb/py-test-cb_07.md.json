["```py\nclass Event(object):\n   def init  (self, hostname, condition, severity, event_time):\n       self.hostname = hostname\n       self.condition = condition\n       self.severity = severity\n       self.id = -1\n   def str(self):\n       return \"(ID:%s) %s:%s - %s\" % (self.id, self.hostname,\\ \n               self.condition,self.severity)\n```", "```py\n   CREATE TABLE EVENTS(\n       ID INTEGER PRIMARY KEY,\n       HOST_NAME TEXT,\n       SEVERITY INTEGER,\n       EVENT_CONDITION TEXT\n       );  \n```", "```py\nfrom springpython.database.core import*\n\nclass EventCorrelator(object):\n   def init(self, factory):\n      self.dt = DatabaseTemplate(factory)\n   def del(self):\n      del(self.dt)\n   def process(self, event):\n     stored_event, is_active = self.store_event(event)\n     affected_services, affected_equip = self.impact(event)\n     updated_services = [\n          self.update_service(service, event) \n          for service in affected_services]\n     updated_equipment = [\n          self.update_equipment(equip, event)\n          for equip in affected_equip]\n     return (stored_event, is_active,\n         updated_services,updated_equipment)\n```", "```py\ndef store_event(self,event):\n   try:\n     max_id = self.dt.query_for_init(\"\"\"select max(ID) \n        from EVENTS\"\"\")\n   except DataAccessException, e:\n     max_id=0\n   event.id = max_id+1\n   self.dt.update(\"\"\"insert into EVENTS\n                     (ID, HOST_NAME, SEVERITY, EVENT_CONDITION)\n                        values(?,?,?,?)\"\"\",\n                     (event.id, event.hostname, event.severity,\n                        event.condition))\n   is active = self.add_or_remove_from_active_events(event)\n\n```", "```py\ndef add_or_remove_from_active_events(self,event):\n    \"\"\"Active events are current ones that cause equipment\n       and\\or services to be down.\"\"\"\n    if event.severity == 1:\n       self.dt.update (\"\"\"DELETE FROM ACTIVE_EVENTS\n                          WHERE EVENT_FK in (\n                          SELECT ID FROM EVENTS\n                          WHERE HOST_NAME=?\n                          AND EVENT_CONDITION=?)\"\"\",\n                       (event.hostname,event.condition))\n      return False\n    else:\n      self.dt.execute (\"\"\"INSERT INTO ACTIVE_EVENTS (EVENT_FK) values (?) \"\"\", event.id,))\n      return True\n```", "```py\nCREATE TABLE ACTIVE_EVENTS(ID INTEGER PRIMARY KEY, EVENT_FK,\n    FOREIGN KEY(EVENT_FK) REFERENCES EVENTS(ID)\n    );\n```", "```py\ndef impact(self, event):\n   \"\"\"Look up this event has impact on either equipment \n      or services.\"\"\"\n   affected_equipment = self.dt.query(\\\n               \"\"\"select * from EQUIPMENT \n                  where HOST_NAME = ?\"\"\",\n               (event.hostname,), \n               rowhandler=DictionaryRowMapper())\n   affected_services = self.dt.query(\\\n               \"\"\"select SERVICE.* from   SERVICE\n                  join SERVICE_MAPPING SM\n                  on (SERVICE.ID = SM.SERVICE_FK)\n                  join EQUIPMENT\n                  on (SM.EQUIPMENT_FK = EQUIPMENT.ID) where\n                  EQUIPMENT.HOST_NAME = ?\"\"\",\n                  (event.hostname,),                   \n                  rowhandler=DictionaryRowMapper())\n   return (affected_services, affected_equipment)\n```", "```py\nCREATE TABLE EQUIPMENT(\n      ID INTEGER PRIMARY KEY, \n      HOST_NAME TEXT UNIQUE,\n      STATUS INTEGER );\nCREATE TABLE SERVICE (\n      ID INTEGER PRIMARY KEY, \n      NAME TEXT UNIQUE, \n      STATUS TEXT );\nCREATE TABLE SERVICE_MAPPING (\n      ID INTEGER PRIMARY KEY, \n      SERVICE_FK,EQUIPMENT_FK,\n      FOREIGN KEY(SERVICE_FK) REFERENCES SERVICE(ID),\n      FOREIGN KEY(EQUIPMENT_FK) REFERENCES EQUIPMENT(ID));\n```", "```py\ndef update_service(self, service, event):\n    if event.severity == 1:\n        self.dt.update(\"\"\"delete from SERVICE_EVENTS\n                          where EVENT_FK in (select ID from EVENTS\n                          where HOST_NAME = ?\n                          and EVENT_CONDITION = ?)\"\"\",\n                          (event.hostname,event.condition))\n    else:\n      self.dt.execute(\"\"\"insert into SERVICE_EVENTS \n                         (EVENT_FK, SERVICE_FK) values (?,?)\"\"\",\n                         (event.id,service[\"ID\"]))\n    try:\n      max = self.dt.query_for_int(\\\n                      \"\"\"select max(EVENTS.SEVERITY)   \n                         from SERVICE_EVENTS SE join EVENTS\n                         on (EVENTS.ID = SE.EVENT_FK) join SERVICE\n                         on (SERVICE.ID = SE.SERVICE_FK)\n                         where SERVICE.NAME = ?\"\"\", \n                         (service[\"NAME\"],))\n    except DataAccessException, e:\n           max=1\n    if max > 1 and service[\"STATUS\"] == \"Operational\":\n       service[\"STATUS\"] = \"Outage\"\n       self.dt.update(\"\"\"update SERVICE\n                         set STATUS = ? \n                         where ID = ?\"\"\",\n                     (service[\"STATUS\"], service[\"ID\"]))\n\n    if max == 1 and service[\"STATUS\"] == \"Outage\":\n       service[\"STATUS\"] = \"Operational\"\n       self.dt.update(\"\"\"update SERVICE set STATUS = ?\n                         where ID = ?\"\"\",\n                     (service[\"STATUS\"], service[\"ID\"]))\n    if event.severity == 1:\n       return {\"service\":service, \"is_active\":False}\n    else:\n       return {\"service\":service, \"is_active\":True}\n```", "```py\nCREATE TABLE SERVICE_EVENTS ( \n    ID INTEGER PRIMARY KEY, \n    SERVICE_FK,\n    EVENT_FK,FOREIGN KEY(SERVICE_FK) REFERENCES SERVICE(ID),\n    FOREIGN KEY(EVENT_FK) REFERENCES EVENTS(ID));\n```", "```py\nDROP TABLE IF EXISTS SERVICE_MAPPING;\nDROP TABLE IF EXISTS SERVICE_EVENTS;\nDROP TABLE IF EXISTS ACTIVE_EVENTS;\nDROP TABLE IF EXISTS EQUIPMENT;\nDROP TABLE IF EXISTS SERVICE;\nDROP TABLE IF EXISTS EVENTS;\n```", "```py\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (1,'pyhost1', 1);\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (2,'pyhost2', 1);\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (3,'pyhost3', 1);\nINSERT into SERVICE (ID, NAME, STATUS) values (1, 'service-abc', 'Operational');\nINSERT into SERVICE (ID, NAME, STATUS) values (2, 'service-xyz', 'Outage');\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (1,1);\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (1,2);\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (2,1);\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (2,3);\n```", "```py\ndef update_equipment(self,equip,event):\n    try:\n      max = self.dt.query_for_int(\\\n                  \"\"\"select max(EVENTS.SEVERITY) \n                     from ACTIVE_EVENTS AE\n                     join EVENTS on (EVENTS.ID = AE.EVENT_FK) \n                     where EVENTS.HOST_NAME = ?\"\"\",\n                  (event.hostname,))\n    except DataAccessException:\n        max = 1\n    if max != equip[\"STATUS\"]:\n         equip[\"STATUS\"] = max \n         self.dt.update(\"\"\"update EQUIPMENT\n                           set STATUS = ?\"\"\",\n                        (equip[\"STATUS\"],))\n    return equip\n```", "```py\nfrom network import * \nimport unittest\nfrom springpython.database.factory import *\nfrom springpython.database.core import *\nclass EventCorrelationTest(unittest.TestCase):\n      def setUp(self):\n          db_name = \"recipe52.db\"\n          factory = Sqlite3ConnectionFactory(db_name)\n          self.correlator = EventCorrelator(factory)\n          dt = DatabaseTemplate(factory)\n          sql = open(\"network.sql\").read().split(\";\")\n          for statement in sql:\n              dt.execute(statement + \";\")\n      def test_process_events(self):\n          evt1 = Event(\"pyhost1\", \"serverRestart\", 5)\n          stored_event, is_active, \\\n                updated_services, updated_equipment = \\\n                self.correlator.process(evt1)\n          print \"Stored event: %s\" % stored_event\n          if is_active:\n             print \"This event was an active event.\"\n             print \"Updated services: %s\" % updated_services\n             print \"Updated equipment: %s\" % updated_equipment\n             print \"---------------------------------\"\nif __name__ == \"main\":\n     unittest.main()          \n```", "```py\ngturnquist$ coverage -x recipe52.py\nStored event: (ID:1) pyhost1:serverRestart - 5 This event was an active event.\nUpdated services: [{'is_active': True, 'service': {'STATUS': 'Outage', 'ID': 1, 'NAME': u'service-abc'}}, {'is_active': True, 'service': {'STATUS': u'Outage', 'ID': 2, 'NAME': u'service- xyz'}}] \nUpdated equipment: [{'STATUS': 5, 'ID': 1, 'HOST_NAME': u'pyhost1'}]\n---------------------------------\n\n.\n\n------------------------------------------------------------------\n----\nRan 1 test in 0.211s OK \n```", "```py\nfrom network import*\nimport unittest\nfrom springpython.database.factory import*\nfrom springpython.database.core import*\nclass EventCorrelationTest(unittest.TestCase):\n      def setUp(self):\n          db_name = \"recipe52b.db\"\n          factory = Sqlite3ConnectionFactory(db=db_name)\n          self.correlator = EventCorrelator(factory)\n          dt = DatabaseTemplate(factory)\n          sql = open(\"network.sql\").read().split(\";\")\n          for statement in sql:\n             dt.execute(statement + \";\")\n      def test_process_events(self):\n          evt1 = Event(\"pyhost1\", \"serverRestart\", 5)\n          evt2 = Event(\"pyhost2\", \"lineStatus\", 5)\n          evt3 = Event(\"pyhost2\", \"lineStatus\", 1)\n          evt4 = Event(\"pyhost1\", \"serverRestart\", 1)\n          for event in [evt1, evt2, evt3, evt4]:\n              stored_event, is_active, \\ \n                 updated_services, updated_equipment = \\\n                  self.correlator.process(event)\n              print \"Stored event: %s\" % stored_event\n              if is_active:\n                print \"This event was an active event.\"\n                print \"Updated services: %s\" % updated_services\n                print \"Updated equipment: %s\" % updated_equipment\n                print \"---------------------------------\"\n  if __name__ == \"__main__\": \n     unittest.main()\n```", "```py\nfrom network import*\nimport unittest\nfrom springpython.database.factory import*\nfrom springpython.database.core import*\nclass EventCorrelationTest(unittest.TestCase):\n      def setUp(self):\n         db_name = \"recipe55.db\"\n         factory = Sqlite3ConnectionFactory(db=db_name)\n         self.correlator = EventCorrelator(factory)\n         dt = DatabaseTemplate(factory)\n         sql = open(\"network.sql\").read().split(\";\")\n         for statement in sql:\n            dt.execute(statement + \";\")\n      def test_process_events(self):\n         evt1 = Event(\"pyhost1\", \"serverRestart\", 5)\n         stored_event, is_active, \\ \n              updated_services, updated_equipment = \\\n         self.correlator.process(evt1)\n         print \"Stored event: %s\" % stored_event\n         if is_active:\n            print \"This event was an active event.\"\n            print \"Updated services: %s\" % updated_services\n            print \"Updated equipment: %s\" % updated_equipment\n            print \"---------------------------------\"\n```", "```py\nfrom network import*\nimport unittest\nfrom springpython.database.factory import*\nfrom springpython.database.core import *\nclass EventCorrelationTest(unittest.TestCase):\n   def setUp(self):\n      db_name = \"recipe56.db\"\n      factory = Sqlite3ConnectionFactory(db=db_name)\n      self.correlator = EventCorrelator(factory)\n      dt = DatabaseTemplate(factory)\n      sql = open(\"network.sql\").read().split(\";\")\n      for statement in sql:\n        dt.execute(statement + \";\")\n   def test_process_events(self):\n       evt1 = Event(\"pyhost1\", \"serverRestart\", 5)\n       evt2 = Event(\"pyhost2\", \"lineStatus\", 5)\n       evt3 = Event(\"pyhost2\", \"lineStatus\", 1)\n       evt4 = Event(\"pyhost1\", \"serverRestart\", 1)\n       for event in [evt1, evt2, evt3, evt4]:\n           stored_event, is_active,\\\n              updated_services, updated_equipment=\\\n                  self.correlator.process(event)\n           print \"Stored event: %s\" % stored_event\n       if is_active:\n          print \"This event was an active event.\"\n          print \"Updated services: %s\" % updated_services\n          print \"Updated equipment: %s\" % updated_equipment\n          print \"---------------------------------\"\nif __name__==\"__main__\":\n   unittest.main()\n```", "```py\ngturnquist$ mkdir /tmp/recipe57\n```", "```py\ngturnquist$ git init /tmp/recipe57\n```", "```py\ngturnquist$ cp network.py /tmp/recipe57/ \ngturnquist$ cp network.sql /tmp/recipe57/ \ngturnquist$ cd /tmp/recipe57/\ngturnquist$ git add network.py network.sql\ngturnquist$ git commit -m \"Add network app\"\n[master (root-commit) 7f78d46] Add network app\n2 files changed, 221 insertions(+), 0 deletions(-)\ncreate mode 100644 network.py\ncreate mode 100644 network.sql \n```", "```py\nfrom network import*\nimport unittest\nfrom springpython.database.factory import*\nfrom springpython.database.core import*\nclass EventCorrelationTest(unittest.TestCase):\n    def setUp(self):\n        db_name = \"recipe57.db\"\n        factory = Sqlite3ConnectionFactory(db=db_name)\n        self.correlator = EventCorrelator(factory)\n        dt = DatabaseTemplate(factory)\n        sql = open(\"network.sql\").read().split(\";\")\n        for statement in sql:\n           dt.execute(statement + \";\")\n    def test_process_events(self):\n        evt1 = Event(\"pyhost1\", \"serverRestart\", 5)\n        stored_event, is_active, updated_services, updated_equipment = \\\n            self.correlator.process(evt1)\n        print \"Stored event: %s\" % stored_event\n        if is_active:\n        print \"This event was an active event.\"\n        print \"Updated services: %s\" % updated_services\n        print \"Updated equipment: %s\" % updated_equipment\n        print \"---------------------------------\"\n```", "```py\ngturnquist$ cp recipe57.py /tmp/recipe57/ gturnquist$ cd /tmp/recipe57/ gturnquist$ git add recipe57.py\ngturnquist$ git commit -m \"Added tests.\"\n[master 0bf1761] Added tests.\n1 files changed, 37 insertions(+), 0 deletions(-)\ncreate mode 100644 recipe57.py\n```", "```py\n. /Users/gturnquist/ptc/bin/activate\ncoverage -e\ncoverage run /Users/gturnquist/ptc/bin/nosetests\nrecipe57.py coverage xml --include=network.py,recipe57.py\n```", "```py\nimport getopt\nimport logging\nimport nose \nimport os\nimport os.path\nimport re\nimport sys\nfrom glob import glob\ndef usage():\nprint\nprint \"Usage: python recipe58.py [command]\"\nprint \"\\t--help\"\nprint \"\\t--test\"\nprint \"\\t--package\"\nprint \"\\t--publish\"\nprint \"\\t--register\"\nprint\ntry:\n optlist, args = getopt.getopt(sys.argv[1:],\n \"h\",\n [\"help\", \"test\", \"package\", \"publish\", \"register\"])\nexcept getopt.GetoptError:\n# print help information and exit:\n print \"Invalid command found in %s\" % sys.argv\n usage()\n sys.exit(2)\n```", "```py\ndef test():\n   from coverage import coverage\n   cov = coverage() cov.start()\n   suite = [\"recipe52\", \"recipe52b\", \"recipe55\", \"recipe56\", \"recipe57\"]\n   print(\"Running suite %s\" % suite)\n   args = [\"\"]\n   args.extend(suite)\n   nose.run(argv=args)\n   cov.stop()\n   modules_to_report = [module + \".py\" for module in suite]\n   modules_to_report.append(\"network.py\")\n   cov.report(morfs=modules_to_report)\n   cov.html_report(morfs=modules_to_report, \\\n                         directory=\"recipe58\")\n   cov.xml_report(morfs=modules_to_report, \\\n                        outfile=\"recipe58.xml\")      \n```", "```py\ndef package():\n  print \"This is where we can plug in code to run \" + \\ \n        \"setup.py to generate a bundle.\"\ndef publish():\n  print \"This is where we can plug in code to upload \" +\\\n        \"our tarball to S3 or some other download site.\"\ndef publish():\n  print \"This is where we can plug in code to upload \" +\\\n        \"our tarball to S3 or some other download site.\"\ndef register():\n  print \"setup.py has a built in function to \" + \\\n        \"'register' a release to PyPI. It's \" + \\\n        \"convenient to put a hook in here.\"\n# os.system(\"%s setup.py register\" % sys.executable)\n```", "```py\nif len(optlist) == 0:\n   usage()\n   sys.exit(1)\n# Check for help requests, which cause all other\n# options to be ignored. for option in optlist:\nif option[0] in (\"--help\", \"-h\"):\n    usage()\n    sys.exit(1)\n# Parse the arguments, in order for option in optlist:\nif option[0] in (\"--test\"):\n   test()\nif option[0] in (\"--package\"):\n   package()\nif option[0] in (\"--publish\"):\n   publish()\nif option[0] in (\"--register\"):\n\n```", "```py\nfrom coverage import coverage\ncov = coverage()\n```", "```py\ncov.start()\n```", "```py\nsuite = [\"recipe52\", \"recipe52b\", \"recipe55\", \"recipe56\", \"recipe57\"]\nprint(\"Running suite %s\" % suite) \nargs = [\"\"]\nargs.extend(suite)\nnose.run(argv=args)\n```", "```py\ncov.stop()\n```", "```py\nmodules_to_report = [module + \".py\" for module in suite] \nmodules_to_report.append(\"network.py\")\ncov.report(morfs=modules_to_report)\ncov.html_report(morfs=modules_to_report, directory=\"recipe58\")\ncov.xml_report(morfs=modules_to_report, outfile=\"recipe58.xml\")\n```"]