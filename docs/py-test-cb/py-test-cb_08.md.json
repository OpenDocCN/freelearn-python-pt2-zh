["```py\nimport logging\nfrom network import *\nimport unittest\nfrom springpython.database.factory import *\nfrom springpython.database.core import *\n```", "```py\nclass EventCorrelatorUnitTests(unittest.TestCase):\ndef setUp(self):\n  db_name = \"recipe59.db\"\n  factory = Sqlite3ConnectionFactory(db=db_name)\n  self.correlator = EventCorrelator(factory)\n  # We \"unplug\" the DatabaseTemplate so that\n  # we don't talk to a real database.\n  self.correlator.dt = None\n  # Instead, we create a dictionary of\n  # canned data to return back\n  self.return_values = {}\n  # For each sub-function of the network app,\n  # we replace them with stubs which return our\n  # canned data.\ndef stub_store_event(event):\n  event.id = self.return_values[\"id\"]\n  return event, self.return_values[\"active\"]\n  self.correlator.store_event = stub_store_event\ndef stub_impact(event):\n  return (self.return_values[\"services\"],\n  self.return_values[\"equipment\"])\n  self.correlator.impact = stub_impact\ndef stub_update_service(service, event):\n  return service + \" updated\"self.correlator.update_service = \n  tub_update_service\n\ndef stub_update_equip(equip, event):\n  return equip + \" updated\"\n  self.correlator.update_equipment = stub_update_equip\n```", "```py\ndef test_process_events(self):\n  # For this test case, we can preload the canned data,\n  # and verify that our process function is working\n  # as expected without touching the database.\n  self.return_values[\"id\"] = 4668\n  self.return_values[\"active\"] = True\n  self.return_values[\"services\"] = [\"service1\",\n                                    \"service2\"]\n  self.return_values[\"equipment\"] = [\"device1\"]\n  evt1 = Event(\"pyhost1\", \"serverRestart\", 5)\n  stored_event, is_active,\n  updated_services, updated_equipment =\n  self.correlator.process(evt1)\n  self.assertEquals(4668, stored_event.id)\n  self.assertTrue(is_active)\nself.assertEquals(2, len(updated_services))\nself.assertEquals(1, len(updated_equipment))\n```", "```py\nclass EventCorrelatorIntegrationTests(unittest.TestCase):\n  def setUp(self):\n      db_name = \"recipe59.db\"\n      factory = Sqlite3ConnectionFactory(db=db_name)\n      self.correlator = EventCorrelator(factory)\n      dt = DatabaseTemplate(factory)\n      sql = open(\"network.sql\").read().split(\";\")\nfor statement in sql:\n   dt.execute(statement + \";\")\n```", "```py\ndef test_process_events(self):\n    evt1 = Event(\"pyhost1\", \"serverRestart\", 5)\n    stored_event, is_active,\n       updated_services, updated_equipment =\n                 self.correlator.process(evt1)\n    print \"Stored event: %s\" % stored_event\n    if is_active:\n         print \"This event was an active event.\"\n    print \"Updated services: %s\" % updated_services\n    print \"Updated equipment: %s\" % updated_equipment\n    print \"---------------------------------\"\n```", "```py\nfrom recipe59_test import EventCorrelatorIntegrationTests\nif __name__ == \"__main__\":\n     import unittest\n     unittest.main()\n```", "```py\nimport logging\nfrom network import *\nimport unittest\nfrom springpython.database.factory import *\nfrom springpython.database.core import *\n```", "```py\nclass EventCorrelatorUnitTests(unittest.TestCase):\ndef setUp(self):\ndb_name = \"recipe60.db\"\nfactory = Sqlite3ConnectionFactory(db=db_name)\nself.correlator = EventCorrelator(factory)\n# We \"unplug\" the DatabaseTemplate so that\n# we don't talk to a real database.\nself.correlator.dt = None\n# Instead, we create a dictionary of\n# canned data to return back\nself.return_values = {}\n# For each sub-function of the network app,\n# we replace them with stubs which return our\n# canned data.\ndef stub_store_event(event):\nevent.id = self.return_values[\"id\"]\nreturn event, self.return_values[\"active\"]\nself.correlator.store_event = stub_store_event\ndef stub_impact(event):\nreturn (self.return_values[\"services\"],self.return_values[\"equipment\"])\nself.correlator.impact = stub_impact\ndef stub_update_service(service, event):\nreturn service + \" updated\"\nself.correlator.update_service = stub_update_service\ndef stub_update_equip(equip, event):\nreturn equip + \" updated\"\nself.correlator.update_equipment = stub_update_equip\n```", "```py\ndef test_process_events(self):\n# For this test case, we can preload the canned data,\n# and verify that our process function is working\n# as expected without touching the database.\nself.return_values[\"id\"] = 4668\nself.return_values[\"active\"] = True\nself.return_values[\"services\"] = [\"service1\",\n\"service2\"]\nself.return_values[\"equipment\"] = [\"device1\"]\nevt1 = Event(\"pyhost1\", \"serverRestart\", 5)\nstored_event, is_active,\nupdated_services, updated_equipment =\nself.correlator.process(evt1)\nself.assertEquals(4668, stored_event.id)\nself.assertTrue(is_active)\nself.assertEquals(2, len(updated_services))\nself.assertEquals(1, len(updated_equipment))\n```", "```py\nclass EventCorrelatorIntegrationTests(unittest.TestCase):\ndef setUp(self):\ndb_name = \"recipe60.db\"\nfactory = Sqlite3ConnectionFactory(db=db_name)\nself.correlator = EventCorrelator(factory)\ndt = DatabaseTemplate(factory)\nsql = open(\"network.sql\").read().split(\";\")\nfor statement in sql:\ndt.execute(statement + \";\")\n```", "```py\ndef test_process_events(self):\nevt1 = Event(\"pyhost1\", \"serverRestart\", 5)\nstored_event, is_active,\nupdated_services, updated_equipment =\nself.correlator.process(evt1)\nprint \"Stored event: %s\" % stored_event\nif is_active:\nprint \"This event was an active event.\"\nprint \"Updated services: %s\" % updated_services\nprint \"Updated equipment: %s\" % updated_equipment\nprint \"---------------------------------\"\n```", "```py\nfrom recipe60_test import EventCorrelatorUnitTests\nif __name__ == \"__main__\":\nimport unittest\nunittest.main()\n```", "```py\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (1, 'pyhost1', 1);\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (2, 'pyhost2', 1);\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (3, 'pyhost3', 1);\nINSERT into SERVICE (ID, NAME, STATUS) values (1, 'service-abc', \n'Operational');\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (1,1);\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (1,2);\n```", "```py\nimport logging\nfrom network import *\nimport unittest\nfrom springpython.database.factory import *\nfrom springpython.database.core import *\nclass EventCorrelatorEquipmentThreadTests(unittest.TestCase):\ndef setUp(self):\ndb_name = \"recipe61.db\"\nfactory = Sqlite3ConnectionFactory(db=db_name)\nself.correlator = EventCorrelator(factory)\ndt = DatabaseTemplate(factory)\nsql = open(\"recipe61_network.sql\").read().split(\";\")\nfor statement in sql:\ndt.execute(statement + \";\")\ndef tearDown(self):\nself.correlator = None\n```", "```py\ndef test_equipment_failing(self):\n# This alarm maps to a device\n# but doesn't map to any service.\n```", "```py\nevt1 = Event(\"pyhost3\", \"serverRestart\", 5)\nstored_event, is_active,\nupdated_services, updated_equipment =\nself.correlator.process(evt1)\nself.assertTrue(is_active)\nself.assertEquals(len(updated_services), 0)\nself.assertEquals(len(updated_equipment), 1)\nself.assertEquals(updated_equipment[0][\"HOST_NAME\"],\n\"pyhost3\")\n# 5 is the value for a failed piece of equipment\nself.assertEquals(updated_equipment[0][\"STATUS\"], 5)\n```", "```py\nevt2 = Event(\"pyhost3\", \"serverRestart\", 1)\nstored_event, is_active,\nupdated_services, updated_equipment =\nself.correlator.process(evt2)\nself.assertFalse(is_active)\nself.assertEquals(len(updated_services), 0)\nself.assertEquals(len(updated_equipment), 1)\nself.assertEquals(updated_equipment[0][\"HOST_NAME\"],\n\"pyhost3\")\n# 1 is the value for a clear piece of equipment\nself.assertEquals(updated_equipment[0][\"STATUS\"], 1)\n```", "```py\ndef test_service_failing(self):\n# This alarm maps to a service.\n```", "```py\nevt1 = Event(\"pyhost1\", \"serverRestart\", 5)\nstored_event, is_active,\nupdated_services, updated_equipment =\nself.correlator.process(evt1)\nself.assertEquals(len(updated_services), 1)\nself.assertEquals(\"service-abc\",\nupdated_services[0][\"service\"][\"NAME\"])\nself.assertEquals(\"Outage\",\nupdated_services[0][\"service\"][\"STATUS\"])\n```", "```py\nevt2 = Event(\"pyhost1\", \"serverRestart\", 1)\nstored_event, is_active,\nupdated_services, updated_equipment =\nself.correlator.process(evt2)\nself.assertEquals(len(updated_services), 1)\nself.assertEquals(\"service-abc\",\nupdated_services[0][\"service\"][\"NAME\"])\nself.assertEquals(\"Operational\",\nupdated_services[0][\"service\"][\"STATUS\"])\n```", "```py\nfrom recipe61_test import *\nif __name__ == \"__main__\":\nimport unittest\nunittest.main()\n```", "```py\nDROP TABLE IF EXISTS SERVICE_MAPPING;\nDROP TABLE IF EXISTS SERVICE_EVENTS;\nDROP TABLE IF EXISTS ACTIVE_EVENTS;\nDROP TABLE IF EXISTS EQUIPMENT;\nDROP TABLE IF EXISTS SERVICE;\nDROP TABLE IF EXISTS EVENTS;\nCREATE TABLE EQUIPMENT (\nID SMALLINT PRIMARY KEY AUTO_INCREMENT,\nHOST_NAME TEXT,\nSTATUS SMALLINT\n);\nCREATE TABLE SERVICE (\nID SMALLINT PRIMARY KEY AUTO_INCREMENT,\nNAME TEXT,\nSTATUS TEXT\n);\nCREATE TABLE SERVICE_MAPPING (\nID SMALLINT PRIMARY KEY AUTO_INCREMENT,\nSERVICE_FK SMALLINT,\nEQUIPMENT_FK SMALLINT\n);\nCREATE TABLE EVENTS (\nID SMALLINT PRIMARY KEY AUTO_INCREMENT,\nHOST_NAME TEXT,\nSEVERITY SMALLINT,\nEVENT_CONDITION TEXT\n);\nCREATE TABLE SERVICE_EVENTS (\nID SMALLINT PRIMARY KEY AUTO_INCREMENT,\nSERVICE_FK SMALLINT,\nEVENT_FK SMALLINT\n);\nCREATE TABLE ACTIVE_EVENTS (\nID SMALLINT PRIMARY KEY AUTO_INCREMENT,\nEVENT_FK SMALLINT\n);\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (1, 'pyhost1', 1);\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (2, 'pyhost2', 1);\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (3, 'pyhost3', 1);\nINSERT into SERVICE (ID, NAME, STATUS) values (1, 'service-abc', \n'Operational');\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (1,1);\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (1,2)\n```", "```py\nimport logging\nfrom network import *\nimport unittest\nfrom springpython.database.factory import *\nfrom springpython.database.core import *\nclass AbstractEventCorrelatorTests(unittest.TestCase):\ndef tearDown(self):\nself.correlator = None\ndef test_service_failing(self):\n# This alarm maps to a service.\nevt1 = Event(\"pyhost1\", \"serverRestart\", 5)\nstored_event, is_active,\nupdated_services, updated_equipment =\nself.correlator.process(evt1)\nself.assertEquals(len(updated_services), 1)\nself.assertEquals(\"service-abc\",\nupdated_services[0][\"service\"][\"NAME\"])\nself.assertEquals(\"Outage\",\nupdated_services[0][\"service\"][\"STATUS\"])\nevt2 = Event(\"pyhost1\", \"serverRestart\", 1)\nstored_event, is_active,\nupdated_services, updated_equipment =\nself.correlator.process(evt2)\nself.assertEquals(len(updated_services), 1)\nself.assertEquals(\"service-abc\",\nupdated_services[0][\"service\"][\"NAME\"])\nself.assertEquals(\"Operational\",\nupdated_services[0][\"service\"][\"STATUS\"])\n```", "```py\nclass MySQLEventCorrelatorTests(AbstractEventCorrelatorTests):\ndef setUp(self):\nfactory = MySQLConnectionFactory(\"user\", \"password\",\n\"localhost\", \"recipe62\")\nself.correlator = EventCorrelator(factory)\ndt = DatabaseTemplate(factory)\nsql = open(\"recipe62_network.mysql\").read().split(\";\")\nfor statement in sql:\ndt.execute(statement + \";\")\n```", "```py\nfrom recipe62_test import MySQLEventCorrelatorTests\nif __name__ == \"__main__\":\nimport unittest\nunittest.main()\n```", "```py\nDROP TABLE IF EXISTS SERVICE_MAPPING;\nDROP TABLE IF EXISTS SERVICE_EVENTS;\nDROP TABLE IF EXISTS ACTIVE_EVENTS;\nDROP TABLE IF EXISTS EQUIPMENT;\nDROP TABLE IF EXISTS SERVICE;\nDROP TABLE IF EXISTS EVENTS;\nCREATE TABLE EQUIPMENT (\nID INTEGER PRIMARY KEY,\nHOST_NAME TEXT UNIQUE,\nSTATUS INTEGER\n);\nCREATE TABLE SERVICE (\nID INTEGER PRIMARY KEY,\nNAME TEXT UNIQUE,\nSTATUS TEXT\n);\nCREATE TABLE SERVICE_MAPPING (\nID INTEGER PRIMARY KEY,\nSERVICE_FK,\nEQUIPMENT_FK,\nFOREIGN KEY(SERVICE_FK) REFERENCES SERVICE(ID),\nFOREIGN KEY(EQUIPMENT_FK) REFERENCES EQUIPMENT(ID)\n);\nCREATE TABLE EVENTS (\nID INTEGER PRIMARY KEY,\nHOST_NAME TEXT,\nSEVERITY INTEGER,\nEVENT_CONDITION TEXT\n);\nCREATE TABLE SERVICE_EVENTS (\nID INTEGER PRIMARY KEY,\nSERVICE_FK,\nEVENT_FK,\nFOREIGN KEY(SERVICE_FK) REFERENCES SERVICE(ID),\nFOREIGN KEY(EVENT_FK) REFERENCES EVENTS(ID)\n);\nCREATE TABLE ACTIVE_EVENTS (\nID INTEGER PRIMARY KEY,\nEVENT_FK,\nFOREIGN KEY(EVENT_FK) REFERENCES EVENTS(ID)\n);\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (1, 'pyhost1', 1);\nINSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (2, 'pyhost2', 1);INSERT into EQUIPMENT (ID, HOST_NAME, STATUS) values (3, 'pyhost3', 1);\nINSERT into SERVICE (ID, NAME, STATUS) values (1, 'service-abc', 'Op\nerational');\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (1,1);\nINSERT into SERVICE_MAPPING (SERVICE_FK, EQUIPMENT_FK) values (1,2);\n```", "```py\nclass Sqlite3EventCorrelatorTests(AbstractEventCorrelatorTests):\ndef setUp(self):\nfactory = Sqlite3ConnectionFactory(\"recipe62.db\")\nself.correlator = EventCorrelator(factory)\ndt = DatabaseTemplate(factory)\nsql = open(\"recipe62_network.sql\").read().split(\";\")for statement in sql:\ndt.execute(statement + \";\")\n```", "```py\nfrom recipe62_test import Sqlite3EventCorrelatorTests\nif __name__ == \"__main__\":\nimport unittest\nunittest.main()\n```", "```py\nimport getopt\nimport random\nimport sys\nimport time\nfrom network import *\nfrom springpython.remoting.pyro import *\n```", "```py\ndef usage():\nprint \"Usage\"\nprint \"=====\"\nprint \"-h, --help read this help\"\nprint \"-r, --rate [arg] number of events per second\"\nprint \"-d, --demo demo by printing events\"\n```", "```py\ntry:\nopts, args = getopt.getopt(sys.argv[1:], \"hr:d\", [\"help\", \"rate=\",\n\"demo\"])\nexcept getopt.GetoptError, err:\nprint str(err)\nusage()\nsys.exit(1)\nrate = 10\ndemo_mode = False\nfor o, a in opts:\nif o in (\"-h\", \"--help\"):\nusage()\nsys.exit(1)\nelif o in (\"-r\", \"--rate\"):\nrate = a\nelif o in (\"-d\", \"--demo\"):\ndemo_mode = True\n```", "```py\nif not demo_mode:\nprint \"Sending events to live network app. Ctrl+C to exit...\"\nproxy = PyroProxyFactory()\nproxy.service_url = \"PYROLOC://127.0.0.1:7766/network\"\n```", "```py\nwhile True:\nhostname = random.choice([\"pyhost1\",\"pyhost2\",\"pyhost3\"])\ncondition = random.choice([\"serverRestart\", \"lineStatus\"])\nseverity = random.choice([1,5])\nevt = Event(hostname, condition, severity)\n```", "```py\nif demo_mode:\nnow = time.strftime(\"%a, %d %b %Y %H:%M:%S +0000\",\ntime.localtime())\nprint \"%s: Sending out %s\" % (now, evt)\n```", "```py\nelse:\nstored_event, is_active, updated_services,\nupdated_equipment = proxy.process(evt)\nprint \"Stored event: %s\" % stored_event\nprint \"Active? %s\" % is_active\nprint \"Services updated: %s\" % updated_services\nprint \"Equipment updated; %s\" % updated_equipment\nprint \"================\"\n```", "```py\ntime.sleep(1.0/float(rate))\n```", "```py\nfrom springpython.database.factory import *\nfrom springpython.database.core import *\nfrom springpython.remoting.pyro import *\nfrom network import *\nimport logging\nlogger = logging.getLogger(\"springpython\")\nloggingLevel = logging.DEBUG\nlogger.setLevel(loggingLevel)\nch = logging.StreamHandler()\nch.setLevel(loggingLevel)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s -\n%(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n# Initialize the database\nfactory = MySQLConnectionFactory(\"user\", \"password\",\n\"localhost\", \"recipe63\")\ndt = DatabaseTemplate(factory)\nsql = open(\"recipe62_network.mysql\").read().split(\";\")\nfor statement in sql:\ndt.execute(statement + \";\")\n```", "```py\n# Create an instance of the network management app\ntarget_service = EventCorrelator(factory)\n# Expose the network app as a Pyro service\nexporter = PyroServiceExporter()\nexporter.service_name = \"network\"\nexporter.service = target_service\nexporter.after_properties_set()\n```", "```py\nimport random\nimport sys\nimport time\nfrom network import *\nfrom springpython.remoting.pyro import *print \"Sending events to live network app. Ctrl+C to exit...\"\nproxy = PyroProxyFactory()\nproxy.service_url = \"PYROLOC://127.0.0.1:7766/network_advised\"\nwhile True:\nhostname = random.choice([\"pyhost1\",\"pyhost2\",\"pyhost3\"])\ncondition = random.choice([\"serverRestart\", \"lineStatus\"])\nseverity = random.choice([1,5])\nevt = Event(hostname, condition, severity)\nstored_event, is_active, updated_services,\nupdated_equipment = proxy.process(evt)\nprint \"Stored event: %s\" % stored_event\nprint \"Active? %s\" % is_active\nprint \"Services updated: %s\" % updated_services\nprint \"Equipment updated; %s\" % updated_equipment\nprint \"================\"\ntime.sleep(random.choice(range(1,10)))\n```", "```py\nfrom springpython.database.factory import *\nfrom springpython.database.core import *\nfrom springpython.remoting.pyro import *\nfrom springpython.aop import *\nfrom network import *\nfrom datetime import datetime\nimport os\nimport os.path\nimport pickle\nimport logging\nlogger = logging.getLogger(\"springpython.remoting\")\nloggingLevel = logging.DEBUG\nlogger.setLevel(loggingLevel)\nch = logging.StreamHandler()\nch.setLevel(loggingLevel)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s -\n%(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n# Initialize the database\nfactory = MySQLConnectionFactory(\"user\", \"password\",\n\"localhost\", \"recipe64\")\ndt = DatabaseTemplate(factory)\nsql = open(\"recipe62_network.mysql\").read().split(\";\")\nfor statement in sql:\ndt.execute(statement + \";\")\n```", "```py\n# Create an instance of the network management app\ntarget_service = EventCorrelator(factory)\n# Expose the original network app as a Pyro service\nunadvised_service = PyroServiceExporter()\nunadvised_service.service_name = \"network\"\nunadvised_service.service = target_service\nunadvised_service.after_properties_set()\n```", "```py\nclass Recorder(MethodInterceptor):\n\"\"\"\nAn interceptor that catches each event,\nwrite it to disk, then proceeds to the\nnetwork management app.\n\"\"\"\ndef __init__(self):\nself.filename = \"recipe64_data.txt\"\nself.special_char = \"&&&\"\nif os.path.exists(self.filename):\nos.remove(self.filename)\ndef invoke(self, invocation):\n# Write data to disk\nwith open(self.filename, \"a\") as f:\nevt = invocation.args[0]\nnow = datetime.now()\noutput = (evt, now)\nprint \"Recording %s\" % evt\nf.write(pickle.dumps(output).replace(\"n\", \"&&&\") + \"n\")\n# Now call the advised service\nreturn invocation.proceed()\n```", "```py\n# Wrap the network app with an interceptor\nadvisor = ProxyFactoryObject()\nadvisor.target = target_service\nadvisor.interceptors = [Recorder()]\n# Expose the advised network app as a Pyro service\nadvised_service = PyroServiceExporter()\nadvised_service.service_name = \"network_advised\"\nadvised_service.service = advisor\nadvised_service.after_properties_set()\n```", "```py\nfrom springpython.remoting.pyro import *\nfrom datetime import datetime\nimport pickle\nimport time\nwith open(\"recipe64_data.txt\") as f:\nlines = f.readlines()\nevents = [pickle.loads(line.replace(\"&&&\", \"n\"))\nfor line in lines]\n```", "```py\ndef calc_offset(evt, time_it_happened, previous_time):\nif previous_time is None:\nreturn time_it_happened - time_it_happened\nelse:\nreturn time_it_happened - previous_time\n```", "```py\nprint \"Sending events to live network app. Ctrl+C to exit...\"\nproxy = PyroProxyFactory()\nproxy.service_url = \"PYROLOC://127.0.0.1:7766/network\"\n```", "```py\nprevious_time = None\nfor (e, time_it_happened) in events:\ndiff = calc_offset(e, time_it_happened, previous_time)\nprint \"Original: %s Now: %s\" % (time_it_happened, datetime.now())\nstored_event, is_active, updated_services,\nupdated_equipment = proxy.process(e)\nprint \"Stored event: %s\" % stored_event\nprint \"Active? %s\" % is_active\nprint \"Services updated: %s\" % updated_services\nprint \"Equipment updated; %s\" % updated_equipment\nprint \"Next event in %s seconds\" % diff.seconds\nprint \"================\"\ntime.sleep(diff.seconds)\nprevious_time = time_it_happened\n```", "```py\nimport random\nimport sys\nimport time\nfrom network import *\nfrom springpython.remoting.pyro import *\nprint \"Sending events to live network app. Ctrl+C to exit...\"\nproxy = PyroProxyFactory()\nproxy.service_url = \"PYROLOC://127.0.0.1:7766/network_advised\"\nwhile True:\nhostname = random.choice([\"pyhost1\",\"pyhost2\",\"pyhost3\"])\ncondition = random.choice([\"serverRestart\", \"lineStatus\"])\nseverity = random.choice([1,5])\nevt = Event(hostname, condition, severity)\nstored_event, is_active, updated_services,\nupdated_equipment = proxy.process(evt)\nprint \"Stored event: %s\" % stored_event\nprint \"Active? %s\" % is_active\nprint \"Services updated: %s\" % updated_services\nprint \"Equipment updated; %s\" % updated_equipment\nprint \"================\"\ntime.sleep(random.choice(range(1,10)))\n```", "```py\nfrom springpython.database.factory import *\nfrom springpython.database.core import *\nfrom springpython.remoting.pyro import *\nfrom springpython.aop import *\nfrom network import *\nfrom datetime import datetime\nimport os\nimport os.path\nimport pickle\nimport logging\nlogger = logging.getLogger(\"springpython.remoting\")\nloggingLevel = logging.DEBUG\nlogger.setLevel(loggingLevel)\nch = logging.StreamHandler()\nch.setLevel(loggingLevel)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s -%(message)s\")\nch.setFormatter(formatter)\nlogger.addHandler(ch)\n# Initialize the database\nfactory = MySQLConnectionFactory(\"user\", \"password\",\n\"localhost\", \"recipe65\")\ndt = DatabaseTemplate(factory)\nsql = open(\"recipe62_network.mysql\").read().split(\";\")\nfor statement in sql:\ndt.execute(statement + \";\")\n```", "```py\n# Create an instance of the network management app\ntarget_service = EventCorrelator(factory)\n# Expose the original network app as a Pyro service\nunadvised_service = PyroServiceExporter()\nunadvised_service.service_name = \"network\"\nunadvised_service.service = target_service\nunadvised_service.after_properties_set()\n```", "```py\nclass Recorder(MethodInterceptor):\n\"\"\"\nAn interceptor that catches each event,\nwrite it to disk, then proceeds to the\nnetwork management app.\n\"\"\"\ndef __init__(self):\nself.filename = \"recipe65_data.txt\"\nself.special_char = \"&&&\"\nif os.path.exists(self.filename):\nos.remove(self.filename)\ndef invoke(self, invocation):\n# Write data to disk\nwith open(self.filename, \"a\") as f:\nevt = invocation.args[0]\nnow = datetime.now()\noutput = (evt, now)\nprint \"Recording %s\" % evt\nf.write(pickle.dumps(output).replace(\n\"n\", \"&&&\") + \"n\")\n# Now call the advised service\nreturn invocation.proceed()\n```", "```py\n# Wrap the network app with an interceptor\nadvisor = ProxyFactoryObject()\nadvisor.target = target_service\nadvisor.interceptors = [Recorder()]\n# Expose the advised network app as a Pyro service\nadvised_service = PyroServiceExporter()\nadvised_service.service_name = \"network_advised\"\nadvised_service.service = advisor\nadvised_service.after_properties_set()\n```", "```py\nfrom springpython.remoting.pyro import *\nfrom datetime import datetime\nimport pickle\nimport time\nwith open(\"recipe65_data.txt\") as f:\nlines = f.readlines()\nevents = [pickle.loads(line.replace(\"&&&\", \"n\"))\nfor line in lines]\n```", "```py\nprint \"Sending events to live network app. Ctrl+C to exit...\"\nproxy = PyroProxyFactory()\nproxy.service_url = \"PYROLOC://127.0.0.1:7766/network\"\n```", "```py\nfor (e, time_it_happened) in events:\nstored_event, is_active, updated_services,\nupdated_equipment = proxy.process(e))\nprint \"Stored event: %s\" % stored_event\nprint \"Active? %s\" % is_active\nprint \"Services updated: %s\" % updated_services\nprint \"Equipment updated; %s\" % updated_equipment\nprint \"================\"\n```", "```py\nimport unittest\nfrom network import *\nfrom springpython.database.factory import *\nclass ManagementDemo(unittest.TestCase):\ndef setUp(self):\nfactory = MySQLConnectionFactory(\"user\", \"password\",\n\"localhost\", \"recipe62\")\nself.correlator = EventCorrelator(factory)\ndt = DatabaseTemplate(factory)\nsql = open(\"recipe62_network.mysql\").read().split(\";\")\nfor statement in sql:\ndt.execute(statement + \";\")\ndef test_processing_a_service_affecting_event(self):\n# Define a service-affecting event\nevt1 = Event(\"pyhost1\", \"serverRestart\", 5)\n# Inject it into the system\nstored_event, is_active,\nupdated_services, updated_equipment =\nself.correlator.process(evt1)\n# These are the values I plan to call\n# attention to during my demo\nself.assertEquals(len(updated_services), 1)\nself.assertEquals(\"service-abc\",\nupdated_services[0][\"service\"][\"NAME\"])\nself.assertEquals(\"Outage\",\nupdated_services[0][\"service\"][\"STATUS\"])\nif __name__ == \"__main__\":\nunittest.main()\n```"]