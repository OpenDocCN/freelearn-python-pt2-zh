["```py\ngit clone https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python\n```", "```py\npip install memory_profiler\n```", "```py\npip install pytest-benchmark\n```", "```py\n'''File: sample_benchmark_test.pyDescription: A simple benchmark test'''import pytestimport timedef sample_method():  time.sleep(0.0001)  return 0def test_sample_benchmark(benchmark):  result = benchmark(sample_method)  assert result == 0if __name__ == '__main__':  pytest.main()\n```", "```py\n'''\nFile: test_index_benchmark.py\nDescription: Benchmark the index API endpoint\n'''\nimport os\nimport pytest\nimport sys\nimport tempfile\n\nsys.path.append('.')\nimport bugzot\n\n@pytest.fixture(scope='module')\ndef test_client():\n  db, bugzot.app.config['DATABASE'] = tempfile.mkstemp()\n  bugzot.app.config['TESTING'] = True\n  test_client = bugzot.app.test_client()\n\n  with bugzot.app.app_context():\n    bugzot.db.create_all()\n\n  yield test_client\n\n  os.close(db)\n  os.unlink(bugzot.app.config['DATABASE'])\n\ndef test_index_benchmark(test_client, benchmark):\n  resp = benchmark(test_client.get, \"/\")\n  assert resp.status_code == 200\n```", "```py\nimport timeit\n\ndef calc_sum():\n    sum = 0\n    for i in range(0, 100):\n        sum = sum + i\n    return sum\n\nif __name__ == '__main__':\n    setup = \"from __main__ import calc_sum\"\n    print(timeit.timeit(\"calc_sum()\", setup=setup))\n```", "```py\n7.255408144999819\n```", "```py\nimport time\ndef time_profile(func):\n  \"\"\"Decorator for timing the execution of a method.\"\"\"\n  def timer_func(*args, **kwargs):\n    start = time.time()\n    value = func(*args, **kwargs)\n    end = time.time()\n    total_time = end \u2013 start\n    output_msg = \"The method {func} took {total_time} to execute\"\n    print(output_msg.format(func=func, total_time=total_time))\n    return value\n  return timer_func\n```", "```py\n@time_profile\ndef calc_sum():\n    sum = 0\n    for i in range(100):\n        sum = sum+i\n    return sum\n```", "```py\npip install memory_profiler\n```", "```py\nfrom memory_profiler import profile\n\n@profile\ndef calc_sum():\n    sum = 0\n    for i in range(100):\n        sum = sum + i\n    print(str(sum))\n\nif __name__ == '__main__':\n    calc_sum()\n```", "```py\npython3 memory_profile_example.py\n```", "```py\n4950\nFilename: memory_profile.py\n\nLine # Mem usage Increment Line Contents\n================================================\n     3 11.6 MiB 11.6 MiB @profile\n     4 def calc_sum():\n     5 11.6 MiB 0.0 MiB sum = 0\n     6 11.6 MiB 0.0 MiB for i in range(100):\n     7 11.6 MiB 0.0 MiB sum = sum + i\n     8 11.6 MiB 0.0 MiB print(str(sum))\n```", "```py\nfrom memory_profiler import profile\n\n@profile\ndef calc_sum():\n    sum = 0\n    for i in range(100):\n        sum = sum + i\n    say_hello()\n    print(str(sum))\n\ndef say_hello():\n    lst = []\n    for i in range(10000):\n        lst.append(i)\n\nif __name__ == '__main__':\n    calc_sum()\n```", "```py\nLine # Mem usage Increment Line Contents\n================================================\n     3 11.6 MiB 11.6 MiB @profile\n     4 def calc_sum():\n     5 11.6 MiB 0.0 MiB sum = 0\n     6 11.6 MiB 0.0 MiB for i in range(100):\n     7 11.6 MiB 0.0 MiB sum = sum + i\n     8 11.7 MiB 0.1 MiB say_hello()\n     9 11.7 MiB 0.0 MiB print(str(sum))\n```", "```py\n@app.before_request\ndef before_request_handler():\n    g.start_time = time.time()\n\n@app.teardown_request\ndef teardown_request_handler(exception=None):\n    execution_time = time.time() - g.start_time\n    app.logger.info(\"Request URL: {} took {} seconds\".format(request.url, str(execution_time)))\n```"]