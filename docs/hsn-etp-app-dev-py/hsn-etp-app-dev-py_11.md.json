["```py\ngit clone https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python\n```", "```py\n'''\nFile: models.py\nDescription: The models for the todo service.\n'''\nfrom todo_service.todo_service import db\nimport datetime\n\nclass List(db.Model):\n    \"\"\"The list database model.\n\n    The list database model is used to create a new todo list\n    based on the input provided by the user.\n    \"\"\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, nullable=False)\n    list_name = db.Column(db.String(25), nullable=False)\n    db.UniqueConstraint('user_id', 'list_name', name='list_name_uiq')\n\n    def __repr__(self):\n        \"\"\"Provide a representation of model.\"\"\"\n        return \"<List {}>\".format(self.list_name)\n\nclass Item(db.Model):\n    \"\"\"The item database model.\n\n    The model is used to store the information about the items\n    in a particular list maintained by the user.\n    \"\"\"\n\n    id = db.Column(db.Integer, primary_key=True)\n    list_id = db.Column(db.Integer, db.ForeignKey(List.id))\n    item_name = db.Column(db.String(50), nullable=False)\n    db.UniqueConstraint('list_id', 'item_name', name='item_list_uiq')\n\n    def __repr__(self):\n        \"\"\"Provide a representation of model.\"\"\"\n        return \"<Item {}>\".format(self.item_name)\n```", "```py\ndef check_required_fields(req_fields, input_list):\n    \"\"\"Check if the required fields are present or not in a given list.\n\n    Keyword arguments:\n    req_fields -- The list of fields required\n    input_list -- The input list to check for\n\n    Returns:\n        Boolean\n    \"\"\"\n\n    if all(field in req_fields for field in input_list):\n        return True\n    return False\n\ndef validate_user(auth_token):\n    \"\"\"Validates a user and returns it user id.\n\n    Keyword arguments:\n    auth_token -- The authentication token to be used\n\n    Returns:\n        Integer\n    \"\"\"\n\n    endpoint = user_service + '/auth/validate'\n    resp = requests.post(endpoint, json={\"auth_token\": auth_token})\n    if resp.status_code == 200:\n        user = resp.json()\n        user_id = user['user_id']\n        return user_id\n    else:\n        return None\n\n@app.route('/list/new', methods=['POST'])\ndef new_list():\n    \"\"\"Handle the creation of new list.\"\"\"\n\n    required_fields = ['auth_token', 'list_name']\n    response = {}\n    list_data = request.get_json()\n    if not check_required_fields(required_fields, list_data.keys()):\n        response['message'] = 'The required parameters are not provided'\n        return jsonify(response), 400\n\n    auth_token = list_data['auth_token']\n\n    # Get the user id for the auth token provided\n    user_id = validate_user(auth_token)\n\n    # If the user is not valid, return an error\n    if user_id is None:\n        response['message'] = \"Unable to login user. Please check the auth token\"\n        return jsonify(response), 400\n\n    # User token is valid, let's create the list\n    list_name = list_data['list_name']\n    new_list = List(user_id=user_id, list_name=list_name)\n    db.session.add(new_list)\n    try:\n        db.session.commit()\n    except Exception:\n        response['message'] = \"Unable to create a new todo-list\"\n        return jsonify(response), 500\n    response['message'] = \"List created\"\n    return jsonify(response), 200\n\n@app.route('/list/add_item', methods=['POST'])\ndef add_item():\n    \"\"\"Handle the addition of new items to the list.\"\"\"\n\n    ...\n    # The complete code for the service can be found inside the assisting code repository for the book\n```", "```py\nDEBUG = False\nSECRET_KEY = 'du373r3uie3yf3@U#^$*EU9373^#'\nBCRYPT_LOG_ROUNDS = 5\nSQLALCHEMY_DATABASE_URI = 'sqlite:///todo_service.db'\nSQLALCHEMY_ECHO = False\nUSER_SERVICE_ENDPOINT = 'http://localhost:5000'\n```", "```py\npython3 run.py\n```"]