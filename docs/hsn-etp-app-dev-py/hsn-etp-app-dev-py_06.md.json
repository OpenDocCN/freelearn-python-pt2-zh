["```py\ngit clone https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python\n```", "```py\ndnf install postgresql postgresql-server postgresql-devel\n```", "```py\nvirtualenv \u2013python=python3 \n```", "```py\nsource bin/activate\n```", "```py\npip install flask\n```", "```py\npip install flask-sqlalchemy requests pytest flask-session\n```", "```py\n$ tree --dirsfirst\u251c\u2500\u2500 bugzot\u2502   \u251c\u2500\u2500 helpers\u2502   \u2502   \u2514\u2500\u2500 __init__.py\u2502   \u251c\u2500\u2500 models\u2502   \u2502   \u2514\u2500\u2500 __init__.py\u2502   \u251c\u2500\u2500 static\u2502 \u251c\u2500\u2500 templates ...\n```", "```py\n'''\nFile: application.py\nDescription: The file contains the application initialization\n             logic that is used to serve the application.\n'''\nfrom flask import Flask, session\nfrom flask_bcrypt import Bcrypt\nfrom flask_session import Session\nfrom flask_sqlalchemy import SQLAlchemy\n\n# Initialize our Flask application\napp = Flask(__name__, instance_relative_config=True)\n\n# Let's read the configuration\napp.config.from_object('config')\napp.config.from_pyfile('config.py')\n\n# Let's setup the database\ndb = SQLAlchemy(app)\n\n# Initializing the security configuration\nbcrypt = Bcrypt(app)\n\n# We will require sessions to store user activity across the application\nSession(app)\n```", "```py\napp = Flask(__name__, instance_relative_config=True)\n```", "```py\napp.config.from_object('config')\napp.config.from_pyfile('config.py')\n```", "```py\ndb = SQLAlchemy(app)\nbcrypt = Bcrypt(app)\nSession(app)\n```", "```py\n'''\nFile: __init__.py\nDescription: Bugzot application entrypoint file.\n'''\nfrom .application import app, bcrypt, db\n```", "```py\n'''\nFile: run.py\nDescription: Bugzot application execution point.\n'''\nfrom bugzot import app\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n```", "```py\n'''File: config.pyDescription: Global configuration for Bugzot project'''DEBUG = FalseSECRET_KEY = 'your_application_secret_key'BCRYPT_LOG_ROUNDS = 5 # Increase this value as required for your applicationSQLALCHEMY_DATABASE_URI = \"sqlite:///bugzot.db\"SQLALCHEMY_ECHO = FalseSESSION_TYPE = 'filesystem'STATIC_PATH = 'bugzot/static'TEMPLATES_PATH = 'bugzot/templates'\n```", "```py\nmkdir bugzot/models/users\n```", "```py\n'''\nFile: users.py\nDescription: The file contains the definition for the user data model\n             that will be used to store the information related to the\n             user accounts.\n'''\nfrom bugzot.application import db\nfrom .roles import Role\n\nclass User(db.Model):\n    \"\"\"User data model for storing user account information.\n\n    The model is responsible for storing the account information on a\n    per user basis and providing access to it for authentication\n    purposes.\n    \"\"\"\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    username = db.Column(db.String(50), unique=True, index=True, nullable=False)\n    password = db.Column(db.String(512), nullable=False)\n    email = db.Column(db.String(255), unique=True, nullable=False, index=True)\n    user_role = db.Column(db.Integer, db.ForeignKey(Role.id))\n    role = db.relationship(\"Role\", lazy=False)\n    joining_date = db.Column(db.DateTime, nullable=False)\n    last_login = db.Column(db.DateTime, nullable=False)\n    account_status= db.Column(db.Boolean, nullable=False, default=False)\n\n    def __repr__(self):\n        \"\"\"User model representation.\"\"\"\n        return \"<User {}>\".format(self.username)\n```", "```py\nindex=True\n```", "```py\nrole = db.relationship(\"Role\", lazy=False)\n```", "```py\nfrom .activation_key import ActivationKey\nfrom .roles import Role\nfrom .users import User\n```", "```py\n'''\nFile: products.py\nDescription: The file contains the definition for the products\n             that are supported for bug filing inside the bug tracker\n'''\nfrom bugzot.application import db\nfrom .categories import Category\n\nclass Product(db.Model):\n    \"\"\"Product defintion model.\n\n    The model is used to store the information related to the products\n    for which the users can file a bug.\n    \"\"\"\n\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    product_name = db.Column(db.String(100), nullable=False, unique=True, index=True)\n    category_id = db.Column(db.Integer, db.ForeignKey(Category.id))\n    category = db.relationship(\"Category\", lazy=True)\n\n    def __repr__(self):\n        \"\"\"Product model representation.\"\"\"\n        return \"<Product {}>\".format(self.product_name)\n```", "```py\nfrom bugzot.models import ActivationKey, Category, Component, Product, Role, User, Version\n```", "```py\nmkdir bugzot/views/indextouch bugzot/views/index/__init__.py\n```", "```py\n'''File: index.pyDescription: The file provides the definition for the index view             which is used to render the homepage of Bugzot.'''from bugzot.application ...\n```", "```py\nfrom bugzot.views import IndexView\napp.add_url_rule('/', view_func=IndexView.as_view('index_view'))\n```", "```py\npython run.py\n```", "```py\n'''File: user_registration.pyDescription: The file contains the definition for the user registration             view allowing new users to register to the BugZot.'''from bugzot.application import app, brcypt, dbfrom bugzot.models import User, Rolefrom flask.views import MethodViewfrom datetime import datetimefrom flask import render_template, sessionclass UserRegistrationView(MethodView):    \"\"\"User registration view to allow new user registration. The user ...\n```", "```py\npip install gunicorn\n```", "```py\n'''File: wsgi.pyDescription: WSGI interface file to run the application through WSGI interface'''from bugzot import appif __name__ == '__main__':    app.run()\n```", "```py\n$ sudo dnf install nginx\n```", "```py\nserver {\n    listen 80;\n    server_name <your_domain> www.<your_domain>;\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:<path_to_project_folder>/bugzot.sock;\n    }\n}\n```", "```py\nproxy_pass http://unix:<path_to_project_folder>/bugzot.sock\n```", "```py\ngunicorn \u2013bind unix:bugzot.sock -m 007 wsgi:app\n```", "```py\nsystemctl start nginx.service\n```"]