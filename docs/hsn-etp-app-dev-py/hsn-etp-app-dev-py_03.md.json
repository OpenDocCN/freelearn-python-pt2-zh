["```py\ngit clone https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python\n```", "```py\nmkdir ch3 && cd ch3 ...\n```", "```py\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Boolean, Date, Integer, String, Column\nfrom datetime import datetime\n\n# Initialize the declarative base model\nBase = declarative_base()\n\n# Construct our User model\nclass User(Base):\n __tablename__ = 'users'\n\n id = Column(Integer, primary_key=True, autoincrement=True)\n first_name = Column(String, nullable=False)\n last_name = Column(String, nullable=False)\n username = Column(String(length=25), unique=True, nullable=False)\n email = Column(String(length=255), unique=True, nullable=False)\n password = Column(String(length=255), nullable=False)\n date_joined = Column(Date, default=datetime.now())\n user_role = Column(String, nullable=False)\n user_role_permissions = Column(Integer, nullable=False)\n account_active = Column(Boolean, default=False)\n activation_key = Column(String(length=32))\n\n def __repr__(self):\n return \"<User {}>\".format(self.username)\n```", "```py\nid = Column(Integer, primary_key=True, autoincrement=True)\n```", "```py\nusername = Column(String(length=25), unique=True, nullable=False)\n```", "```py\nclass Role(Base):\n __tablename__ = 'roles'\n\n id = Column(Integer, primary_key=True, autoincrement=True)\n role_name = Column(String(length=25), nullable=False, unique=True)\n role_permissions = Column(Integer, nullable=False)\n\n def __repr__(self):\n return \"<Role {}>\".format(role_name)\n```", "```py\nclass User(Base):\n  __tablename__ = 'users'\n\n  id = Column(Integer, primary_key=True, autoincrement=True)\n  first_name = Column(String, nullable=False)\n  last_name = Column(String, nullable=False)\n  username = Column(String(length=25), unique=True, nullable=False)\n  email = Column(String(length=255), unique=True, nullable=False)\n  password = Column(String(length=255), nullable=False)\n  date_joined = Column(Date, default=datetime.now())\n  user_role = Column(Integer, ForeignKey(\"roles.id\"))\n  account_active = Column(Boolean, default=False)\n  activation_key = Column(String(length=32))\n\n  def __repr__(self):\n    return \"<User {}>\".format(self.username) \n```", "```py\nclass ActivationKey(Base):\n  __tablename__ = 'activation_keys'\n\n  id = Column(Integer, primary_key=True, autoincrement=True)\n  user_id = Column(Integer, ForeignKey(\"users.id\"))\n  activation_key = Column(String(length=32), nullable=False)\n\n  def __repr__(self):\n    return \"<ActivationKey {}>\".format(self.id)\n```", "```py\nrole = relationship(\"Role\", lazy_load='select')\n```", "```py\n>>> Session = sessionmaker(bind=engine)\n>>> db_session = Session()\n>>> user_record = db_session.query(User).first()\nINFO sqlalchemy.engine.base.Engine SELECT users.username AS users_username, users.id AS users_id, users.role_id AS users_role_id \nFROM users \n LIMIT %(param_1)s\nINFO sqlalchemy.engine.base.Engine {'param_1': 1}\n>>> role = user_record.role\nINFO sqlalchemy.engine.base.Engine SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_permissions AS roles_role_permissions \nFROM roles \nWHERE roles.id = %(param_1)s\nINFO sqlalchemy.engine.base.Engine {'param_1': 1}\n```", "```py\nfor name in ['super_admin', 'admin', 'user']:  if db_session.query(User).first().role.role_name == name:    print(\"True\")\n```", "```py\nINFO sqlalchemy.engine.base.Engine SELECT users.username AS users_username, users.id AS users_id, users.role_id AS ...\n```"]