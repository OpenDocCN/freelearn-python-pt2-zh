["```py\ngit clone https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python\n```", "```py\nclass MessageHandler:\n  __message_type = ['Error', 'Information', 'Warning', 'Debug']\n\n  def __init__(self, date_format):\n    self.date_format = date_format\n\n  def new_message(message, message_code, message_type='Information'):\n    if message_type not in self.__message_type:\n      raise Exception(\"Unable to handle the message type\")\n    msg = \"[{}] {}: {}\".format(message_type, message_code, message)\n    return msg\n\nclass WatchDog:\n\n  def __init__(self, message_handler, debug=False):\n    self.message_handler = message_handler\n    self.debug = debug\n\n  def new_message(message, message_code, message_type):\n    try:\n      msg = self.message_handler.new_message(message, message_code, message_type)\n    except Exception:\n      print(\"Unable to handle the message type\")\n    return msg\n\nmessage_handler = MessageHandler('%Y-%m-%d')\nwatchdog = WatchDog(message_handler)\n```", "```py\nclass A:\n    def __init__(self):\n        print(\"Class A\")\n\nclass B:\n    def __init__(self):\n        print(\"Class B\")\n\nclass C(A,B):\n    def __init__(self):\n        print(\"Class C\")\n```", "```py\n>>> Cobj = C()Class C\n```", "```py\n>>> class C(A,B):...  def __init__(self):...    print(\"C\")...    super().__init__()>>> Cobj = C()CA\n```", "```py\nImport json\nclass JSONMixin:\n  def return_json(self, data):\n    try:\n      json_data = json.dumps(data)\n    except TypeError:\n      print(\"Unable to parse the data into JSON\")\n    return json_data\n```", "```py\nclass Bug(Request, JSONMixin):\n  \u2026\n```", "```py\nclass AbstractUser:  def return_data(self):    passclass ...\n```", "```py\nclass A:\n  def __init__(self):\n    print(\"Hello there from class A\")\n\n>>>isinstance(A, type)\nTrue\n```", "```py\nclass LoggerMeta(type):\n  def __init__(cls, name, base, dct):\n    for k in dct.keys():\n      if k.startswith('HANDLER_'):\n        if not callable(dct[k]):\n          raise AttributeError(\"{} is not callable\".format(k))\n    super().__init__(name, base, dct)\n\ndef error_handler():\n  print(\"error\")\ndef warning_handler():\n  print(\"warning\")\n\nclass Log(metaclass=LoggerMeta):\n  HANDLER_ERROR = error_handler\n  HANDLER_WARN = warning_handler\n  HANDLER_INFO = 'info_handler'\n\n  def __init__(self):\n    print(\u201cLogger class\u201d)\n```", "```py\npython3 metaclass_example.py\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 6, in __init__\nAttributeError: HANDLER_INFO is not callable\n```", "```py\nclass ExampleMeta(type):\n  def __init__(cls, name, bases, dct):\n    print(\"__init__ called\")\n    return super().__init__(name, bases, dct)\n  def __call__(cls, *args, **kwargs):\n    print(\"__call__ called\")\n    return super().__call__(*args, **kwargs)\nclass Example(metaclass=Example):\n  def __init__(self):\n    print(\"Example class\")\n__init__ called\n>>> obj = Example()\n__call__ called\n```", "```py\nfrom bugzot.meta import Singleton\n\nclass Database(metaclass=Singleton):\n  def __init__(self, hostname, port, username, password, dbname, **kwargs):\n    \"\"\"Initialize the databases\n    Initializes the database class, establishing a connection with the database and providing\n    the functionality to call the database.\n    :params hostname: The hostname on which the database server runs\n    :parms port: The port on which database is listening\n    :params username: The username to connect to database\n    :params password: The password to connect to the database\n    :params dbname: The name of the database to connect to\n    \"\"\" \n    self.uri = build_uri(hostname, port, username, password, dbname)\n    #self.db = connect_db()\n    self.db_opts = kwargs\n    #self.set_db_opts()\n\n  def connect_db(self):\n    \"\"\"Establish a connection with the database.\"\"\"\n    pass\n  def set_db_opts(self):\n    \"\"\"Setup the database connection options.\"\"\"\n    pass\n```", "```py\ndbobj1 = Database(\"example.com\", 5432, \"joe\", \"changeme\", \"testdb\")\ndbobj2 = Database(\"example.com\", 5432, \"joe\", \"changeme\", \"testdb\")\n>>> dbobj1\n<__main__.Database object at 0x7fb6d754a7b8>\n>>> dbobj2\n<__main__.Database object at 0x7fb6d754a7b8>\n```"]