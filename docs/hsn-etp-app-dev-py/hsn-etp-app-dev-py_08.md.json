["```py\ngit clone https://github.com/PacktPublishing/Hands-On-Enterprise-Application-Development-with-Python\n```", "```py\npip install -r requirements.txt\n```", "```py\nimport hashlib\nimport secrets\n\ndef strip_password(password):\n    \"\"\"Strip the trailing and leading whitespace.\n\n    Returns:\n        String\n    \"\"\"\n    return password.strip()\n\ndef generate_salt(num_bytes=8):\n    \"\"\"Generate a new salt\n\n    Keyword arguments:\n    num_bytes -- Number of bytes of random salt to generate\n\n    Returns:\n        Bytes\n    \"\"\"\n\n    return secrets.token_bytes(num_bytes)\n\ndef encrypt_password(password, salt):\n    \"\"\"Encrypt a provided password and return a hash.\n\n    Keyword arguments:\n    password -- The plaintext password to be encrypted\n    salt -- The salt to be used for padding\n\n    Returns:\n        String\n    \"\"\"\n\n    passwd_hash = hashlib.pbkdf2_hmac('sha256', password.encode('utf-8'), salt, 10000).hex()\n    return passwd_hash\n```", "```py\nfrom helpers import strip_password, encrypt_password\nimport unittest\n\nclass TestPasswordHelpers(unittest.TestCase):\n    \"\"\"Unit tests for Password helpers.\"\"\"\n\n    def test_strip_password(self):\n        \"\"\"Test the strip password function.\"\"\"\n\n        self.assertEqual(strip_password(' saurabh '), 'saurabh')\n\n    def test_encrypt_password(self):\n        \"\"\"Test the encrypt password function.\"\"\"\n\n        salt = b'\\xf6\\xb6(\\xa1\\xe8\\x99r\\xe5\\xf6\\xa5Q\\xa9\\xd5\\xc1\\xad\\x08'\n        encrypted_password = '2ba31a39ccd2fb7225d6b1ee564a6380713aa94625e275e59900ebb5e7b844f9'\n\n        self.assertEqual(encrypt_password('saurabh', salt), encrypted_password)\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\nclass TestPasswordHelpers(unittest.TestCase):\n```", "```py\ndef test_strip_password(self):\n```", "```py\nself.assertEqual(strip_password(' saurabh '), 'saurabh')\n```", "```py\npython helpers_test.py\n..\n----------------------------------------------------------------------\nRan 2 tests in 0.020s\n\nOK\n```", "```py\npip install pytest\n```", "```py\nmkdir -p bugzot/tests\n```", "```py\n'''File: test_user_model.pyDescription: Tests the User database model'''import sysimport pytest# Setup the import path for our applicationsys.path.append('.') # Add the current rootdir as the module path# import our bugzot model we want to testfrom bugzot.models import User@pytest.fixture(scope='module')def create_user():  user = User(username='joe', email='joe@gmail.com', password='Hello123')  return userdef test_user_creation(create_user): assert create_user.email ...\n```", "```py\n'''\nFile: test_index_route.py\nDescription: Test the index API endpoint\n'''\nimport os\nimport pytest\nimport sys\nimport tempfile\n\nsys.path.append('.')\nimport bugzot\n\n@pytest.fixture(scope='module')\ndef test_client():\n  db, bugzot.app.config['DATABASE'] = tempfile.mkstemp()\n  bugzot.app.config['TESTING'] = True\n  test_client = bugzot.app.test_client()\n\n  with bugzot.app.app_context():\n    bugzot.db.create_all()\n\n  yield test_client\n\n  os.close(db)\n  os.unlink(bugzot.app.config['DATABASE'])\n\ndef test_index_route(test_client):\n  resp = test_client.get('/')\n  assert resp.status_code == 200\n```", "```py\ndb, bugzot.app.config['DATABASE'] = tempfile.mkstemp()\n```", "```py\ntest_client = bugzot.app.test_client()\n```", "```py\nyield test_client\n```", "```py\nresp = test_client.get('/')\n```", "```py\nassert resp.status_code == 200\n```", "```py\nos.close(db)\nos.unlink(bugzot.app.config['DATABASE'])\n```"]