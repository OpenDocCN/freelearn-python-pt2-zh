["```py\n**>>> def spam_generator():**\n**...     print('a')**\n**...     yield 'spam'**\n**...     print('b')**\n**...     yield 'spam!'**\n**...     print('c')**\n**...     yield 'SPAM!'**\n**...     print('d')**\n\n**>>> generator = spam_generator()**\n\n**>>> next(generator)**\n**a**\n**'spam'**\n\n**>>> next(generator)**\n**b**\n**'spam!'**\n\n```", "```py\n**>>> import string**\n\n**>>> def print_character():**\n**...     i = 0**\n**...     while True:**\n**...         print('Letter: %r' % string.ascii_letters[i])**\n**...         i = (i + 1) % len(string.ascii_letters)**\n**...         yield**\n**>>> # Always initialize**\n**>>> print_character = print_character()**\n\n**>>> next(print_character)**\n**Letter: 'a'**\n**>>> next(print_character)**\n**Letter: 'b'**\n**>>> next(print_character)**\n**Letter: 'c'**\n\n```", "```py\ndef eggs_generator():\n    yield 'eggs'\n    yield 'EGGS!'\n\ndef spam_generator():\n    yield 'spam'\n    yield 'spam!'\n    yield 'SPAM!'\n\ngenerator = spam_generator()\nprint(next(generator))\nprint(next(generator))\n\ngenerator = eggs_generator()\nprint(next(generator))\n```", "```py\n**# python3 -m trace --trace --timing tracing.py**\n **--- modulename: tracing, funcname: <module>**\n**0.00 tracing.py(1): def eggs_generator():**\n**0.00 tracing.py(6): def spam_generator():**\n**0.00 tracing.py(11): generator = spam_generator()**\n**0.00 tracing.py(12): print(next(generator))**\n **--- modulename: tracing, funcname: spam_generator**\n**0.00 tracing.py(7):     yield 'spam'**\n**spam**\n**0.00 tracing.py(13): print(next(generator))**\n **--- modulename: tracing, funcname: spam_generator**\n**0.00 tracing.py(8):     yield 'spam!'**\n**spam!**\n**0.00 tracing.py(15): generator = eggs_generator()**\n **--- modulename: tracing, funcname: spam_generator**\n**0.00 tracing.py(16): print(next(generator))**\n **--- modulename: tracing, funcname: eggs_generator**\n**0.00 tracing.py(2):     yield 'eggs'**\n**eggs**\n **--- modulename: trace, funcname: _unsettrace**\n**0.00 trace.py(77):         sys.settrace(None)**\n\n```", "```py\nimport- sys\nimport trace as trace_module\nimport contextlib\n\n@contextlib.contextmanager\ndef trace(count=False, trace=True, timing=True):\n    tracer = trace_module.Trace(\n        count=count, trace=trace, timing=timing)\n    sys.settrace(tracer.globaltrace)\n    yield tracer\n    sys.settrace(None)\n\n    result = tracer.results()\n    result.write_results(show_missing=False, summary=True)\n\ndef eggs_generator():\n    yield 'eggs'\n    yield 'EGGS!'\n\ndef spam_generator():\n    yield 'spam'\n    yield 'spam!'\n    yield 'SPAM!'\n\nwith trace():\n    generator = spam_generator()\n    print(next(generator))\n    print(next(generator))\n\ngenerator = eggs_generator()\nprint(next(generator))\n```", "```py\n**# python3 tracing.py**\n **--- modulename: tracing, funcname: spam_generator**\n**0.00 tracing.py(24):     yield 'spam'**\n**spam**\n **--- modulename: tracing, funcname: spam_generator**\n**0.00 tracing.py(25):     yield 'spam!'**\n**spam!**\n **--- modulename: contextlib, funcname: __exit__**\n**0.00 contextlib.py(64):         if type is None:**\n**0.00 contextlib.py(65):             try:**\n**0.00 contextlib.py(66):                 next(self.gen)**\n **--- modulename: tracing, funcname: trace**\n**0.00 tracing.py(12):     sys.settrace(None)**\n\n```", "```py\nimport pprint\nimport inspect\nimport logging\nimport functools\n\nlogging.basicConfig(level=logging.DEBUG)\n\ndef debug(function):\n    @functools.wraps(function)\n    def _debug(*args, **kwargs):\n        try:\n            result = function(*args, **kwargs)\n        finally:\n            # Extract the signature from the function\n            signature = inspect.signature(function)\n            # Fill the arguments\n            arguments = signature.bind(*args, **kwargs)\n            # NOTE: This only works for Python 3.5 and up!\n            arguments.apply_defaults()\n\n            logging.debug('%s(%s): %s' % (\n                function.__qualname__,\n                ', '.join('%s=%r' % (k, v) for k, v in\n                          arguments.arguments.items()),\n                pprint.pformat(result),\n            ))\n\n    return _debug\n\n@debug\ndef spam(a, b=123):\n    return 'some spam'\n\nspam(1)\nspam(1, 456)\nspam(b=1, a=456)\n```", "```py\n**# python3 logged.py**\n**DEBUG:root:spam(a=1, b=123): 'some spam'**\n**DEBUG:root:spam(a=1, b=456): 'some spam'**\n**DEBUG:root:spam(a=456, b=1): 'some spam'**\n\n```", "```py\nimport logging\n\nlog_format = (\n    '[%(relativeCreated)d %(levelname)s] '\n    '%(pathname)s:%(lineno)d:%(funcName)s: %(message)s'\n)\nlogging.basicConfig(level=logging.DEBUG, format=log_format)\n```", "```py\n**# time python3 logged.py**\n**[0 DEBUG] logged.py:31:_debug: spam(a=1, b=123): 'some spam'**\n**[0 DEBUG] logged.py:31:_debug: spam(a=1, b=456): 'some spam'**\n**[0 DEBUG] logged.py:31:_debug: spam(a=456, b=1): 'some spam'**\n**python3 logged.py  0.04s user 0.01s system 96% cpu 0.048 total**\n\n```", "```py\nimport traceback\n\nclass Spam(object):\n\n    def run(self):\n        print('Before stack print')\n        traceback.print_stack()\n        print('After stack print')\n\nclass Eggs(Spam):\n    pass\n\nif __name__ == '__main__':\n    eggs = Eggs()\n    eggs.run()\n```", "```py\n**# python3 traceback_test.py**\n**Before stack print**\n **File \"traceback_test.py\", line 18, in <module>**\n **eggs.run()**\n **File \"traceback_test.py\", line 8, in run**\n **traceback.print_stack()**\n**After stack print**\n\n```", "```py\nimport traceback\n\nclass Spam(object):\n\n    def run(self):\n        print('Before stack print')\n        traceback.print_stack(limit=-1)\n        print('After stack print')\n\nclass Eggs(Spam):\n    pass\n\nif __name__ == '__main__':\n    eggs = Eggs()\n    eggs.run()\n```", "```py\n**# python3 traceback_test.py**\n**Before stack print**\n **File \"traceback_test.py\", line 18, in <module>**\n **eggs.run()**\n**After stack print**\n\n```", "```py\n**SOME_ENVIRONMENT_VARIABLE=value python3 script.py**\n\n```", "```py\n**export SOME_ENVIRONMENT_VARIABLE=value**\n\n```", "```py\n**echo $SOME_ENVIRONMENT_VARIABLE**\n\n```", "```py\n**set SOME_ENVIRONMENT_VARIABLE=value**\n\n```", "```py\n**set SOME_ENVIRONMENT_VARIABLE**\n\n```", "```py\nimport asyncio\n\n@asyncio.coroutine\ndef printer():\n    print('This is a coroutine')\n\nprinter()\n```", "```py\n**# PYTHONASYNCIODEBUG=1 python3 asyncio_test.py**\n**<CoroWrapper printer() running, defined at asyncio_test.py:4, created at asyncio_test.py:8> was never yielded from**\n**Coroutine object created at (most recent call last):**\n **File \"asyncio_test.py\", line 8, in <module>**\n **printer()**\n\n```", "```py\nimport asyncio\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\nloop = asyncio.get_event_loop()\n```", "```py\n**# PYTHONASYNCIODEBUG=1 python3 asyncio_test.py**\n**DEBUG:asyncio:Using selector: KqueueSelector**\n**DEBUG:asyncio:Close <_UnixSelectorEventLoop running=False closed=False debug=True>**\n\n```", "```py\nimport ctypes\n\n# Get memory address 0, your kernel shouldn't allow this:\nctypes.string_at(0)\n```", "```py\n**# python faulthandler_test.py**\n**zsh: segmentation fault  python faulthandler_test.py**\n\n```", "```py\nimport ctypes\n\ntry:\n    # Get memory address 0, your kernel shouldn't allow this:\n    ctypes.string_at(0)\nexcept Exception as e:\n    print('Got exception:', e)\n```", "```py\nimport ctypes\nimport faulthandler\n\nfaulthandler.enable()\n\n# Get memory address 0, your kernel shouldn't allow this:\nctypes.string_at(0)\n```", "```py\n**# python faulthandler_test.py**\n**Fatal Python error: Segmentation fault**\n\n**Current thread 0x00007fff79171300 (most recent call first):**\n **File \"ctypes/__init__.py\", line 491 in string_at**\n **File \"faulthandler_test.py\", line 7 in <module>**\n**zsh: segmentation fault  python faulthandler_test.py**\n\n```", "```py\nimport code\n\ndef spam():\n    eggs = 123\n    print('The begin of spam')\n    code.interact(banner='', local=locals())\n    print('The end of spam')\n    print('The value of eggs: %s' % eggs)\n\nif __name__ == '__main__':\n    spam()\n```", "```py\n**# python3 test_code.py**\n**The begin of spam**\n**>>> eggs**\n**123**\n**>>> eggs = 456**\n**>>>**\n**The end of spam**\n**The value of eggs: 123**\n\n```", "```py\nimport pdb\n\ndef spam():\n    eggs = 123\n    print('The begin of spam')\n    pdb.set_trace()\n    print('The end of spam')\n    print('The value of eggs: %s' % eggs)\n\nif __name__ == '__main__':\n    spam()\n```", "```py\n**# python3 test_pdb.py**\n**The begin of spam**\n**> test_pdb.py(8)spam()**\n**-> print('The end of spam')**\n**(Pdb) eggs**\n**123**\n**(Pdb) eggs = 456**\n**(Pdb) continue**\n**The end of spam**\n**The value of eggs: 456**\n\n```", "```py\n**alias pd pp %1.__dict__** \n\n```", "```py\nimport pdb\n\ndef spam():\n    print('The begin of spam')\n    print('The end of spam')\n\nif __name__ == '__main__':\n    pdb.set_trace()\n    spam()\n```", "```py\n**# python3 test_pdb.py**\n**> test_pdb.py(11)<module>()**\n**-> while True:**\n**(Pdb) source spam  # View the source of spam**\n **4     def spam():**\n **5         print('The begin of spam')**\n **6         print('The end of spam')**\n\n**(Pdb) b 5  # Add a breakpoint to line 5**\n**Breakpoint 1 at test_pdb.py:5**\n\n**(Pdb) w  # Where shows the current line**\n**> test_pdb.py(11)<module>()**\n**-> while True:**\n\n**(Pdb) c  # Continue (until the next breakpoint or exception)**\n**> test_pdb.py(5)spam()**\n**-> print('The begin of spam')**\n\n**(Pdb) w  # Where again**\n **test_pdb.py(12)<module>()**\n**-> spam()**\n**> test_pdb.py(5)spam()**\n**-> print('The begin of spam')**\n\n**(Pdb) ll  # List the lines of the current function**\n **4     def spam():**\n **5 B->     print('The begin of spam')**\n **6         print('The end of spam')**\n\n**(Pdb) b  # Show the breakpoints**\n**Num Type         Disp Enb   Where**\n**1   breakpoint   keep yes   at test_pdb.py:5**\n **breakpoint already hit 1 time**\n\n**(Pdb) cl 1  # Clear breakpoint 1**\n**Deleted breakpoint 1 at test_pdb.py:5**\n\n```", "```py\nimport pdb\n\ndef spam(eggs):\n    print('eggs:', eggs)\n\nif __name__ == '__main__':\n    pdb.set_trace()\n    for i in range(5):\n        spam(i)\n```", "```py\n**# python3 test_breakpoint.py**\n**> test_breakpoint.py(10)<module>()**\n**-> for i in range(5):**\n**(Pdb) source spam**\n **4     def spam(eggs):**\n **5         print('eggs:', eggs)**\n**(Pdb) b 5, eggs == 3  # Add a breakpoint to line 5 whenever eggs=3**\n**Breakpoint 1 at test_breakpoint.py:5**\n**(Pdb) c  # Continue**\n**eggs: 0**\n**eggs: 1**\n**eggs: 2**\n**> test_breakpoint.py(5)spam()**\n**-> print('eggs:', eggs)**\n**(Pdb) a  # Show function arguments**\n**eggs = 3**\n**(Pdb) c  # Continue**\n**eggs: 3**\n**eggs: 4**\n\n```", "```py\nprint('This still works')\n1/0\nprint('We shouldnt reach this code')\n```", "```py\n**# python3 -m pdb test_zero.py**\n**> test_zero.py(1)<module>()**\n**-> print('This still works')**\n**(Pdb) w  # Where**\n **bdb.py(431)run()**\n**-> exec(cmd, globals, locals)**\n **<string>(1)<module>()**\n**> test_zero.py(1)<module>()**\n**-> print('This still works')**\n**(Pdb) s  # Step into the next statement**\n**This still works**\n**> test_zero.py(2)<module>()**\n**-> 1/0**\n**(Pdb) c  # Continue**\n**Traceback (most recent call last):**\n **File \"pdb.py\", line 1661, in main**\n **pdb._runscript(mainpyfile)**\n **File \"pdb.py\", line 1542, in _runscript**\n **self.run(statement)**\n **File \"bdb.py\", line 431, in run**\n **exec(cmd, globals, locals)**\n **File \"<string>\", line 1, in <module>**\n **File \"test_zero.py\", line 2, in <module>**\n **1/0**\n**ZeroDivisionError: division by zero**\n**Uncaught exception. Entering post mortem debugging**\n**Running 'cont' or 'step' will restart the program**\n**> test_zero.py(2)<module>()**\n**-> 1/0**\n\n```", "```py\nimport pdb\n\ndef spam(eggs):\n    print('eggs:', eggs)\n\nif __name__ == '__main__':\n    pdb.set_trace()\n    for i in range(5):\n        spam(i)\n```", "```py\n**# python3 test_breakpoint.py**\n**> test_breakpoint.py(10)<module>()**\n**-> for i in range(3):**\n**(Pdb) b spam  # Add a breakpoint to function spam**\n**Breakpoint 1 at test_breakpoint.py:4**\n**(Pdb) commands 1  # Add a command to breakpoint 1**\n**(com) print('The value of eggs: %s' % eggs)**\n**(com) end  # End the entering of the commands**\n**(Pdb) c  # Continue**\n**The value of eggs: 0**\n**> test_breakpoint.py(5)spam()**\n**-> print('eggs:', eggs)**\n**(Pdb) c  # Continue**\n**eggs: 0**\n**The value of eggs: 1**\n**> test_breakpoint.py(5)spam()**\n**-> print('eggs:', eggs)**\n**(Pdb) cl 1  # Clear breakpoint 1**\n**Deleted breakpoint 1 at test_breakpoint.py:4**\n**(Pdb) c  # Continue**\n**eggs: 1**\n**eggs: 2**\n\n```", "```py\n**pip install ipdb**\n\n```", "```py\nimport ipdb\n\ndef spam(eggs):\n    print('eggs:', eggs)\n\nif __name__ == '__main__':\n    ipdb.set_trace()\n    for i in range(3):\n        spam(i)\n```", "```py\n**# python3 test_ipdb.py**\n**> test_ipdb.py(10)<module>()**\n **9     ipdb.set_trace()**\n**---> 10     for i in range(3):**\n **11         spam(i)**\n\n**ipdb> b spam  # Set a breakpoint**\n**Breakpoint 1 at test_ipdb.py:4**\n**ipdb> c  # Continue (until exception or breakpoint)**\n**> test_ipdb.py(5)spam()**\n**1     4 def spam(eggs):**\n**----> 5     print('eggs:', eggs)**\n **6**\n\n**ipdb> a  # Show the arguments**\n**eggs = 0**\n**ipdb> c  # Continue**\n**eggs: 0**\n**> test_ipdb.py(5)spam()**\n**1     4 def spam(eggs):**\n**----> 5     print('eggs:', eggs)**\n **6**\n\n**ipdb>   # Repeat the previous command, so continue again**\n**eggs: 1**\n**> test_ipdb.py(5)spam()**\n**1     4 def spam(eggs):**\n**----> 5     print('eggs:', eggs)**\n **6**\n\n**ipdb> cl 1  # Remove breakpoint 1**\n**Deleted breakpoint 1 at test_ipdb.py:4**\n**ipdb> c  # Continue**\n**eggs: 2**\n\n```", "```py\nimport ipdb\n\nwith ipdb.launch_ipdb_on_exception():\n    main()\n```"]