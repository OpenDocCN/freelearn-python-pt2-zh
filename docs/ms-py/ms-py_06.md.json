["```py\n**>>> def count(start=0, step=1, stop=10):**\n**...     n = start**\n**...     while n <= stop:**\n**...         yield n**\n**...         n += step**\n\n**>>> for x in count(10, 2.5, 20):**\n**...     print(x)**\n**10**\n**12.5**\n**15.0**\n**17.5**\n**20.0**\n\n```", "```py\n**>>> def generator():**\n**...     yield 'this is a generator'**\n**...     return 'returning from a generator'**\n\n**>>> g = generator()**\n**>>> next(g)**\n**'this is a generator'**\n**>>> next(g)**\n**Traceback (most recent call last):**\n **...**\n**StopIteration: returning from a generator**\n\n```", "```py\n**>>> generator = (x ** 2 for x in range(4))**\n\n**>>> for x in generator:**\n**...    print(x)**\n**0**\n**1**\n**4**\n**9**\n\n```", "```py\n**>>> class Count(object):**\n**...     def __init__(self, start=0, step=1, stop=10):**\n**...         self.n = start**\n**...         self.step = step**\n**...         self.stop = stop**\n**...**\n**...     def __iter__(self):**\n**...         return self**\n**...**\n**...     def __next__(self):**\n**...         n = self.n**\n**...         if n > self.stop:**\n**...             raise StopIteration()**\n**...**\n**...         self.n += self.step**\n**...         return n**\n\n**>>> for x in Count(10, 2.5, 20):**\n**...     print(x)**\n**10**\n**12.5**\n**15.0**\n**17.5**\n**20.0**\n\n```", "```py\n**>>> def generator():**\n**...     print('Before 1')**\n**...     yield 1**\n**...     print('After 1')**\n**...     print('Before 2')**\n**...     yield 2**\n**...     print('After 2')**\n**...     print('Before 3')**\n**...     yield 3**\n**...     print('After 3')**\n\n**>>> g = generator()**\n**>>> print('Got %d' % next(g))**\n**Before 1**\n**Got 1**\n\n**>>> print('Got %d' % next(g))**\n**After 1**\n**Before 2**\n**Got 2**\n\n```", "```py\nspam\neggs\nspam spam\neggs eggs\nspam spam spam\neggs eggs eggs\n```", "```py\n**# cat lines.txt | grep spam | sed 's/spam/bacon/g'**\n**bacon**\n**bacon bacon**\n**bacon bacon bacon**\n\n```", "```py\n**>>> def cat(filename):**\n**...     for line in open(filename):**\n**...         yield line.rstrip()**\n**...**\n**>>> def grep(sequence, search):**\n**...     for line in sequence:**\n**...         if search in line:**\n**...             yield line**\n**...**\n**>>> def replace(sequence, search, replace):**\n**...     for line in sequence:**\n**...         yield line.replace(search, replace)**\n**...**\n**>>> lines = cat('lines.txt')**\n**>>> spam_lines = grep(lines, 'spam')**\n**>>> bacon_lines = replace(spam_lines, 'spam', 'bacon')**\n\n**>>> for line in bacon_lines:**\n**...     print(line)**\n**...**\n**bacon**\n**bacon bacon**\n**bacon bacon bacon**\n\n**# Or the one-line version, fits within 78 characters:**\n**>>> for line in replace(grep(cat('lines.txt'), 'spam'),**\n**...                     'spam', 'bacon'):**\n**...     print(line)**\n**...**\n**bacon**\n**bacon bacon**\n**bacon bacon bacon**\n\n```", "```py\n**>>> import itertools**\n\n**>>> def spam_and_eggs():**\n**...     yield 'spam'**\n**...     yield 'eggs'**\n\n**>>> a, b = itertools.tee(spam_and_eggs())**\n**>>> next(a)**\n**'spam'**\n**>>> next(a)**\n**'eggs'**\n**>>> next(b)**\n**'spam'**\n**>>> next(b)**\n**'eggs'**\n**>>> next(b)**\n**Traceback (most recent call last):**\n **...**\n**StopIteration**\n\n```", "```py\n**>>> import itertools**\n\n**>>> def powerset(sequence):**\n**...     for size in range(len(sequence) + 1):**\n**...         for item in itertools.combinations(sequence, size):**\n**...             yield item**\n\n**>>> for result in powerset('abc'):**\n**...     print(result)**\n**()**\n**('a',)**\n**('b',)**\n**('c',)**\n**('a', 'b')**\n**('a', 'c')**\n**('b', 'c')**\n**('a', 'b', 'c')**\n\n```", "```py\n**>>> import itertools**\n\n**>>> def powerset(sequence):**\n**...     for size in range(len(sequence) + 1):**\n**...         yield from itertools.combinations(sequence, size)**\n\n**>>> for result in powerset('abc'):**\n**...     print(result)**\n**()**\n**('a',)**\n**('b',)**\n**('c',)**\n**('a', 'b')**\n**('a', 'c')**\n**('b', 'c')**\n**('a', 'b', 'c')**\n\n```", "```py\n**>>> def flatten(sequence):**\n**...     for item in sequence:**\n**...         try:**\n**...             yield from flatten(item)**\n**...         except TypeError:**\n**...             yield item**\n**...**\n**>>> list(flatten([1, [2, [3, [4, 5], 6], 7], 8]))**\n**[1, 2, 3, 4, 5, 6, 7, 8]**\n\n```", "```py\n**>>> import datetime**\n**>>> import contextlib**\n\n**# Context manager that shows how long a context was active**\n**>>> @contextlib.contextmanager**\n**... def timer(name):**\n**...     start_time = datetime.datetime.now()**\n**...     yield**\n**...     stop_time = datetime.datetime.now()**\n**...     print('%s took %s' % (name, stop_time - start_time))**\n\n**# The write to log function writes all stdout (regular print data) to**\n**# a file. The contextlib.redirect_stdout context wrapper**\n**# temporarily redirects standard output to a given file handle, in**\n**# this case the file we just opened for writing.**\n**>>> @contextlib.contextmanager**\n**... def write_to_log(name):**\n**...     with open('%s.txt' % name, 'w') as fh:**\n**...         with contextlib.redirect_stdout(fh):**\n**...             with timer(name):**\n**...                 yield**\n\n**# Use the context manager as a decorator**\n**>>> @write_to_log('some function')**\n**... def some_function():**\n**...     print('This function takes a bit of time to execute')**\n**...     ...**\n**...     print('Do more...')**\n\n**>>> some_function()**\n\n```", "```py\n**>>> import contextlib**\n\n**>>> @contextlib.contextmanager**\n**... def write_to_log(name):**\n**...     with contextlib.ExitStack() as stack:**\n**...         fh = stack.enter_context(open('stdout.txt', 'w'))**\n**...         stack.enter_context(contextlib.redirect_stdout(fh))**\n**...         stack.enter_context(timer(name))**\n**...**\n**...         yield**\n\n**>>> @write_to_log('some function')**\n**... def some_function():**\n**...     print('This function takes a bit of time to execute')**\n**...     ...**\n**...     print('Do more...')**\n\n**>>> some_function()**\n\n```", "```py\n**>>> import contextlib**\n\n**>>> with contextlib.ExitStack() as stack:**\n**...     spam_fh = stack.enter_context(open('spam.txt', 'w'))**\n**...     eggs_fh = stack.enter_context(open('eggs.txt', 'w'))**\n**...     spam_bytes_written = spam_fh.write('writing to spam')**\n**...     eggs_bytes_written = eggs_fh.write('writing to eggs')**\n**...     # Move the contexts to a new ExitStack and store the**\n**...     # close method**\n**...     close_handlers = stack.pop_all().close**\n\n**>>> spam_bytes_written = spam_fh.write('still writing to spam')**\n**>>> eggs_bytes_written = eggs_fh.write('still writing to eggs')**\n\n**# After closing we can't write anymore**\n**>>> close_handlers()**\n**>>> spam_bytes_written = spam_fh.write('cant write anymore')**\n**Traceback (most recent call last):**\n **...**\n**ValueError: I/O operation on closed file.**\n\n```", "```py\n**>>> def generator():**\n**...     value = yield 'spam'**\n**...     print('Generator received: %s' % value)**\n**...     yield 'Previous value: %r' % value**\n\n**>>> g = generator()**\n**>>> print('Result from generator: %s' % next(g))**\n**Result from generator: spam**\n**>>> print(g.send('eggs'))**\n**Generator received: eggs**\n**Previous value: 'eggs'**\n\n```", "```py\n**>>> import functools**\n\n**>>> def coroutine(function):**\n**...     @functools.wraps(function)**\n**...     def _coroutine(*args, **kwargs):**\n**...         active_coroutine = function(*args, **kwargs)**\n**...         next(active_coroutine)**\n**...         return active_coroutine**\n**...     return _coroutine**\n\n**>>> @coroutine**\n**... def spam():**\n**...     while True:**\n**...         print('Waiting for yield...')**\n**...         value = yield**\n**...         print('spam received: %s' % value)**\n\n**>>> generator = spam()**\n**Waiting for yield...**\n\n**>>> generator.send('a')**\n**spam received: a**\n**Waiting for yield...**\n\n**>>> generator.send('b')**\n**spam received: b**\n**Waiting for yield...**\n\n```", "```py\n@coroutine\ndef simple_coroutine():\n    print('Setting up the coroutine')\n    try:\n        while True:\n            item = yield\n            print('Got item: %r' % item)\n    except GeneratorExit:\n        print('Normal exit')\n    except Exception as e:\n        print('Exception exit: %r' % e)\n        raise\n    finally:\n        print('Any exit')\n\nprint('Creating simple coroutine')\nactive_coroutine = simple_coroutine()\nprint()\n\nprint('Sending spam')\nactive_coroutine.send('spam')\nprint()\n\nprint('Close the coroutine')\nactive_coroutine.close()\nprint()\n\nprint('Creating simple coroutine')\nactive_coroutine = simple_coroutine()\nprint()\n\nprint('Sending eggs')\nactive_coroutine.send('eggs')\nprint()\n\nprint('Throwing runtime error')\nactive_coroutine.throw(RuntimeError, 'Oops...')\nprint()\n```", "```py\n**# python3 H06.py**\n**Creating simple coroutine**\n**Setting up the coroutine**\n\n**Sending spam**\n**Got item: 'spam'**\n\n**Close the coroutine**\n**Normal exit**\n**Any exit**\n\n**Creating simple coroutine**\n**Setting up the coroutine**\n\n**Sending eggs**\n**Got item: 'eggs'**\n\n**Throwing runtime error**\n**Exception exit: RuntimeError('Oops...',)**\n**Any exit**\n**Traceback (most recent call last):**\n**...**\n **File ... in <module>**\n **active_coroutine.throw(RuntimeError, 'Oops...')**\n **File ... in simple_coroutine**\n **item = yield**\n**RuntimeError: Oops...**\n\n```", "```py\nspam\neggs\nspam spam\neggs eggs\nspam spam spam\neggs eggs eggs\n```", "```py\n**>>> @coroutine**\n**... def replace(search, replace):**\n**...     while True:**\n**...         item = yield**\n**...         print(item.replace(search, replace))**\n\n**>>> spam_replace = replace('spam', 'bacon')**\n**>>> for line in open('lines.txt'):**\n**...     spam_replace.send(line.rstrip())**\n**bacon**\n**eggs**\n**bacon bacon**\n**eggs eggs**\n**bacon bacon bacon**\n**eggs eggs eggs**\n\n```", "```py\n**>>> @coroutine**\n**... def replace(search, replace):**\n**...     while True:**\n**...         item = yield**\n**...         yield item.replace(search, replace)**\n\n**>>> spam_replace = replace('spam', 'bacon')**\n**>>> spam_replace.send('spam')**\n**'bacon'**\n**>>> spam_replace.send('spam spam')**\n**>>> spam_replace.send('spam spam spam')**\n**'bacon bacon bacon'**\n\n```", "```py\n**>>> @coroutine**\n**... def replace(search, replace):**\n**...     item = yield**\n**...     while True:**\n**...         item = yield item.replace(search, replace)**\n\n**>>> spam_replace = replace('spam', 'bacon')**\n**>>> spam_replace.send('spam')**\n**'bacon'**\n**>>> spam_replace.send('spam spam')**\n**'bacon bacon'**\n**>>> spam_replace.send('spam spam spam')**\n**'bacon bacon bacon'**\n\n```", "```py\n**# Grep sends all matching items to the target**\n**>>> @coroutine**\n**... def grep(target, pattern):**\n**...     while True:**\n**...         item = yield**\n**...         if pattern in item:**\n**...             target.send(item)**\n\n**# Replace does a search and replace on the items and sends it to**\n**# the target once it's done**\n**>>> @coroutine**\n**... def replace(target, search, replace):**\n**...     while True:**\n**...         target.send((yield).replace(search, replace))**\n\n**# Print will print the items using the provided formatstring**\n**>>> @coroutine**\n**... def print_(formatstring):**\n**...     while True:**\n**...         print(formatstring % (yield))**\n\n**# Tee multiplexes the items to multiple targets**\n**>>> @coroutine**\n**... def tee(*targets):**\n**...     while True:**\n**...         item = yield**\n**...         for target in targets:**\n**...             target.send(item)**\n\n**# Because we wrap the results we need to work backwards from the**\n**# inner layer to the outer layer.**\n\n**# First, create a printer for the items:**\n**>>> printer = print_('%s')**\n\n**# Create replacers that send the output to the printer**\n**>>> replacer_spam = replace(printer, 'spam', 'bacon')**\n**>>> replacer_eggs = replace(printer, 'spam spam', 'sausage')**\n\n**# Create a tee to send the input to both the spam and the eggs**\n**# replacers**\n**>>> branch = tee(replacer_spam, replacer_eggs)**\n\n**# Send all items containing spam to the tee command**\n**>>> grepper = grep(branch, 'spam')**\n\n**# Send the data to the grepper for all the processing**\n**>>> for line in open('lines.txt'):**\n**...     grepper.send(line.rstrip())**\n**bacon**\n**spam**\n**bacon bacon**\n**sausage**\n**bacon bacon bacon**\n**sausage spam**\n\n```", "```py\n**>>> @coroutine**\n**... def average():**\n**...     count = 1**\n**...     total = yield**\n**...     while True:**\n**...         total += yield total / count**\n**...         count += 1**\n\n**>>> averager = average()**\n**>>> averager.send(20)**\n**20.0**\n**>>> averager.send(10)**\n**15.0**\n**>>> averager.send(15)**\n**15.0**\n**>>> averager.send(-25)**\n**5.0**\n\n```", "```py\n**>>> @coroutine**\n**... def print_(formatstring):**\n**...     while True:**\n**...         print(formatstring % (yield))**\n\n**>>> @coroutine**\n**... def average(target):**\n**...     count = 0**\n**...     total = 0**\n**...     while True:**\n**...         count += 1**\n**...         total += yield**\n**...         target.send(total / count)**\n\n**>>> printer = print_('%.1f')**\n**>>> averager = average(printer)**\n**>>> averager.send(20)**\n**20.0**\n**>>> averager.send(10)**\n**15.0**\n**>>> averager.send(15)**\n**15.0**\n**>>> averager.send(-25)**\n**5.0**\n\n```", "```py\n**>>> @coroutine**\n**... def groupby():**\n**...     # Fetch the first key and value and initialize the state**\n**...     # variables**\n**...     key, value = yield**\n**...     old_key, values = key, []**\n**...     while True:**\n**...         # Store the previous value so we can store it in the**\n**...         # list**\n**...         old_value = value**\n**...         if key == old_key:**\n**...             key, value = yield**\n**...         else:**\n**...             key, value = yield old_key, values**\n**...             old_key, values = key, []**\n**...         values.append(old_value)**\n\n**>>> grouper = groupby()**\n**>>> grouper.send(('a', 1))**\n**>>> grouper.send(('a', 2))**\n**>>> grouper.send(('a', 3))**\n**>>> grouper.send(('b', 1))**\n**('a', [1, 2, 3])**\n**>>> grouper.send(('b', 2))**\n**>>> grouper.send(('a', 1))**\n**('b', [1, 2])**\n**>>> grouper.send(('a', 2))**\n**>>> grouper.send((None, None))**\n**('a', [1, 2])**\n\n```", "```py\n**>>> @coroutine**\n**... def print_(formatstring):**\n**...     while True:**\n**...         print(formatstring % (yield))**\n\n**>>> @coroutine**\n**... def groupby(target):**\n**...     old_key = None**\n**...     while True:**\n**...         key, value = yield**\n**...         if old_key != key:**\n**...             # A different key means a new group so send the**\n**...             # previous group and restart the cycle.**\n**...             if old_key and values:**\n**...                 target.send((old_key, values))**\n**...             values = []**\n**...             old_key = key**\n**...         values.append(value)**\n\n**>>> grouper = groupby(print_('group: %s, values: %s'))**\n**>>> grouper.send(('a', 1))**\n**>>> grouper.send(('a', 2))**\n**>>> grouper.send(('a', 3))**\n**>>> grouper.send(('b', 1))**\n**group: a, values: [1, 2, 3]**\n**>>> grouper.send(('b', 2))**\n**>>> grouper.send(('a', 1))**\n**group: b, values: [1, 2]**\n**>>> grouper.send(('a', 2))**\n**>>> grouper.send((None, None))**\n**group: a, values: [1, 2]**\n\n```"]