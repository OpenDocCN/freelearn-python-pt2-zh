["```py\n**>>> from __future__ import braces**\n **File \"<stdin>\", line 1**\n**SyntaxError: not a chance**\n\n```", "```py\n**>>> import this**\n**The Zen of Python, by Tim Peters**\n\n**Beautiful is better than ugly.**\n**Explicit is better than implicit.**\n**Simple is better than complex.**\n**Complex is better than complicated.**\n**Flat is better than nested.**\n**Sparse is better than dense.**\n**Readability counts.**\n**Special cases aren't special enough to break the rules.**\n**Although practicality beats purity.**\n**Errors should never pass silently.**\n**Unless explicitly silenced.**\n**In the face of ambiguity, refuse the temptation to guess.**\n**There should be one-- and preferably only one --obvious way to do it.**\n**Although that way may not be obvious at first unless you're Dutch.**\n**Now is better than never.**\n**Although never is often better than *right* now.**\n**If the implementation is hard to explain, it's a bad idea.**\n**If the implementation is easy to explain, it may be a good idea.**\n**Namespaces are one honking great idea -- let's do more of those!**\n\n```", "```py\n def filter_modulo(items, modulo):\n    output_items = []\n    for i in range(len(items)):\n        if items[i] % modulo:\n            output_items.append(items[i])\n    return output_items\n```", "```py\nfilter_modulo = lambda i, m: [i[j] for i in range(len(i))\n                              if i[j] % m]\n```", "```py\ndef filter_modulo(items, modulo):\n    for item in items:\n        if item % modulo:\n            yield item\n```", "```py\nfrom spam import *\nfrom eggs import *\n\nsome_function()\n```", "```py\nimport spam\nimport eggs\n\nspam.some_function()\neggs.some_function()\n```", "```py\ndef spam(egg, *args, **kwargs):\n    processed_egg = process_egg(egg, *args, **kwargs)\n    return Spam(processed_egg)\n```", "```py\nimport pickle  # Or json/yaml\nWith open('data.pickle', 'wb') as fh:\n    pickle.dump(data, fh, pickle.HIGHEST_PROTOCOL)\n```", "```py\nimport sqlite3\nconnection = sqlite3.connect('database.sqlite')\ncursor = connection.cursor()\ncursor.execute('CREATE TABLE data (key text, value text)')\ncursor.execute('''INSERT INTO data VALUES ('key', 'value')''')\nconnection.commit()\nconnection.close()\n```", "```py\ndef print_matrices():\n    for matrix in matrices:\n        print('Matrix:')\n        for row in matrix:\n            for col in row:\n                print(col, end='')\n            print()\n        print()\n```", "```py\ndef print_row(row):\n    for col in row:\n        print(col, end='')\n\ndef print_matrix(matrix):\n    for row in matrix:\n        print_row(row)\n        print()\n\ndef print_matrices(matrices):\n    for matrix in matrices:\n        print('Matrix:')\n        print_matrix(matrix)\n        print()\n```", "```py\n>>> def make_eggs(a,b):'while',['technically'];print('correct');\\\n...     {'this':'is','highly':'unreadable'};print(1-a+b**4/2**2)\n...\n>>> make_eggs(1,2)\ncorrect\n4.0\n```", "```py\n>>> def make_eggs(a, b):\n...     'while', ['technically']\n...     print('correct')\n...     {'this': 'is', 'highly': 'unreadable'}\n...     print(1 - a + ((b ** 4) / (2 ** 2)))\n...\n>>> make_eggs(1, 2)\ncorrect\n4.0\n```", "```py\nfib=lambda n:reduce(lambda x,y:(x[0]+x[1],x[0]),[(1,1)]*(n-2))[0]\n```", "```py\ndef fib(n):\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n```", "```py\nfrom spam.eggs.foo.bar import spam, eggs, extra_spam, extra_eggs, extra_stuff  from spam.eggs.foo.bar import spam, eggs, extra_spam, extra_eggs\n```", "```py\nfrom spam.eggs.foo.bar import spam from spam.eggs.foo.bar import eggs from spam.eggs.foo.bar import extra_spam from spam.eggs.foo.bar import extra_eggs from spam.eggs.foo.bar import extra_stuff  from spam.eggs.foo.bar import spam\nfrom spam.eggs.foo.bar import eggs\nfrom spam.eggs.foo.bar import extra_spam\nfrom spam.eggs.foo.bar import extra_eggs\n```", "```py\nfrom spam_eggs_and_some_extra_spam_stuff import my_spam_and_eggs_stuff_which_is_too_long_for_a_line\n```", "```py\nfrom spam_eggs_and_some_extra_spam_stuff \\\n    import my_spam_and_eggs_stuff_which_is_too_long_for_a_line\n```", "```py\ntry:\n    value = int(user_input)\nexcept:\n    pass\n```", "```py\ntry:\n    value = int(user_input)\nexcept Exception as e:\n    logging.warn('Uncaught exception %r', e)\n```", "```py\ntry:\n    value = int(user_input)\nexcept ValueError:\n    value = 0\n```", "```py\ntry:\n    value = int(user_input)\n    value = do_some_processing(value)\n    value = do_some_other_processing(value)\nexcept ValueError:\n    value = 0\n```", "```py\ntry:\n    value = int(user_input)\nexcept ValueError:\n    value = 0\nelse:\n    value = do_some_processing(value)\n    value = do_some_other_processing(value)\n```", "```py\nspam(1, 2, 3, 4, 5)\nspam(spam=1, eggs=2, a=3, b=4, c=5)\n```", "```py\ndef spam(a=0, b=0, c=0, d=0, e=0, spam=1, eggs=2):\n    pass\n```", "```py\na = 3\nb = 4\nc = 5\nspam(a, b, c)\n```", "```py\nimport warnings\nwarnings.warn('Something deprecated', DeprecationWarning)\n```", "```py\nload(fh)\n```", "```py\npickle.load(fh)\n```", "```py\nfrom django.contrib.auth.models import User\n# Use it as: User\n```", "```py\nfrom django.contrib.auth import models\n# Use it as: models.User\n```", "```py\nfrom django.contrib.auth import models as auth_models\n# Use it as auth_models.User\n```", "```py\nimport django.contrib.auth as auth_models\n# Use it as auth_models.User\n```", "```py\nfilename = '%s.csv' % timestamp\n\n```", "```py\nimport datetime\nif isinstance(timestamp, (datetime.date, datetime.datetime)):\n    filename = '%s.csv' % timestamp\nelse:\n    raise TypeError(\n        'Timestamp %r should be date(time) object, got %s'\n        % (timestamp, type(timestamp))) \n```", "```py\nimport datetime\ntimestamp = datetime.date(2000, 10, 5)\nfilename = '%s.csv' % timestamp\nprint('Filename from date: %s' % filename)\n\ntimestamp = '2000-10-05'\nfilename = '%s.csv' % timestamp\nprint('Filename from str: %s' % filename)\n```", "```py\nFilename from date: 2000-10-05.csv\nFilename from str: 2000-10-05.csv\n```", "```py\nif isinstance(value, int):\n```", "```py\nvalue = int(value)\n```", "```py\nimport io\n\nif isinstance(fh, io.IOBase):\n```", "```py\nif hasattr(fh, 'read'):\n```", "```py\na = 200 + 56\nb = 256\nc = 200 + 57\nd = 257\n\nprint('%r == %r: %r' % (a, b, a == b))\nprint('%r is %r: %r' % (a, b, a is b))\nprint('%r == %r: %r' % (c, d, c == d))\nprint('%r is %r: %r' % (c, d, c is d))\n```", "```py\n256 == 256: True\n256 is 256: True\n257 == 257: True\n257 is 257: False\n```", "```py\nspam = range(1000000)\neggs = range(1000000)\n```", "```py\ni = 0\nwhile i < len(my_list):\n    item = my_list[i]\n    i += 1\n    do_something(i, item)\n```", "```py\nfor i, item in enumerate(my_list):\n    do_something(i, item)\n```", "```py\n[do_something(i, item) for i, item in enumerate(my_list)]\n```", "```py\nspam_items = [x for x in items if x.startswith('spam_')]\n```", "```py\neggs = [is_egg(item) or create_egg(item) for item in list_of_items if egg and hasattr(egg, 'egg_property') and isinstance(egg, Egg)]  eggs = [is_egg(item) or create_egg(item) for item in list_of_items\n        if egg and hasattr(egg, 'egg_property')\n        and isinstance(egg, Egg)]\n```", "```py\ndef to_egg(item):\n    return is_egg(item) or create_egg(item)\n\ndef can_be_egg(item):\n    has_egg_property = hasattr(egg, 'egg_property')\n    is_egg_instance = isinstance(egg, Egg)\n    return egg and has_egg_property and is_egg_instance\n\neggs = [to_egg(item) for item in list_of_items if can_be_egg(item)]  eggs = [to_egg(item) for item in list_of_items if\n        can_be_egg(item)]\n```", "```py\nwith open('/path/to/some/file/you/want/to/read') as file_1, \\\n        open('/path/to/some/file/being/written', 'w') as file_2:\n    file_2.write(file_1.read())\n```", "```py\nfilename_1 = '/path/to/some/file/you/want/to/read'\nfilename_2 = '/path/to/some/file/being/written'\nwith open(filename_1) as file_1, open(filename_2, 'w') as file_2:\n    file_2.write(file_1.read())\n```", "```py\nfilename_1 = '/path/to/some/file/you/want/to/read'\nfilename_2 = '/path/to/some/file/being/written'\nwith open(filename_1) as file_1:\n    with open(filename_2, 'w') as file_2:\n        file_2.write(file_1.read())\n```", "```py\ndef spam():\n    pass\n\ndef eggs(matrix):\n    for x in matrix:\n        for y in x:\n            for z in y:\n                print(z, end='')\n            print()\n        print()\n```", "```py\n**# pip install mccabe**\n**...**\n**# python -m mccabe cabe_test.py 1:1: 'spam' 1**\n**5:1: 'eggs' 4**\n\n```", "```py\ndef spam(a,b,c):\n    print(a,b+c)\n\ndef eggs():\n    pass\n```", "```py\n**# pip install flake8**\n**...**\n**# flake8 flake8_test.py**\n**flake8_test.py:1:11: E231 missing whitespace after ','**\n**flake8_test.py:1:13: E231 missing whitespace after ','**\n**flake8_test.py:2:12: E231 missing whitespace after ','**\n**flake8_test.py:2:14: E226 missing whitespace around arithmetic operator**\n**flake8_test.py:4:1: E302 expected 2 blank lines, found 1**\n\n```", "```py\ndef spam(key, value, list_=[], dict_={}):\n    list_.append(value)\n    dict_[key] = value\n\n    print('List: %r' % list_)\n    print('Dict: %r' % dict_)\n\nspam('key 1', 'value 1')\nspam('key 2', 'value 2')\n```", "```py\nList: ['value 1']\nDict: {'key 1': 'value 1'}\nList: ['value 2']\nDict: {'key 2': 'value 2'}\n```", "```py\nList: ['value 1']\nDict: {'key 1': 'value 1'}\nList: ['value 1', 'value 2']\nDict: {'key 1': 'value 1', 'key 2': 'value 2'}\n```", "```py\ndef spam(key, value, list_=None, dict_=None):\n    if list_ is None:\n        list_ = []\n\n    if dict_ is None:\n        dict_ {}\n\n    list_.append(value)\n    dict_[key] = value\n```", "```py\nclass Spam(object):\n    list_ = []\n    dict_ = {}\n\n    def __init__(self, key, value):\n        self.list_.append(value)\n        self.dict_[key] = value\n\n        print('List: %r' % self.list_)\n        print('Dict: %r' % self.dict_)\n\nSpam('key 1', 'value 1')\nSpam('key 2', 'value 2')\n```", "```py\nList: ['value 1']\nDict: {'key 1': 'value 1'}\nList: ['value 1', 'value 2']\nDict: {'key 1': 'value 1', 'key 2': 'value 2'}\n```", "```py\nclass Spam(object):\n    def __init__(self, key, value):\n        self.list_ = [key]\n        self.dict_ = {key: value}\n\n        print('List: %r' % self.list_)\n        print('Dict: %r' % self.dict_)\n```", "```py\n **>>> class A(object):**\n**...     spam = 1**\n\n**>>> class B(A):**\n**...     pass**\n\n**Regular inheritance, the spam attribute of both A and B are 1 as**\n**you would expect.**\n**>>> A.spam**\n**1**\n**>>> B.spam**\n**1**\n\n**Assigning 2 to A.spam now modifies B.spam as well**\n**>>> A.spam = 2**\n\n**>>> A.spam**\n**2**\n**>>> B.spam**\n**2**\n\n```", "```py\n **>>> def eggs():**\n**...     print('Spam: %r' % spam)**\n\n**>>> eggs()**\n**Spam: 1**\n\n```", "```py\n **>>> spam = 1**\n\n**>>> def eggs():**\n**...     spam += 1**\n**...     print('Spam: %r' % spam)**\n\n**>>> eggs()**\n**Traceback (most recent call last):**\n **...**\n**UnboundLocalError: local variable 'spam' referenced before assignment**\n\n```", "```py\nlist = [1, 2, 3]\n```", "```py\nlist_ = [1, 2, 3]\n```", "```py\n**>>> list = list((1, 2, 3))**\n**>>> list**\n**[1, 2, 3]**\n\n**>>> list((4, 5, 6))**\n**Traceback (most recent call last):**\n **...**\n**TypeError: 'list' object is not callable**\n\n**>>> import = 'Some import'**\n**Traceback (most recent call last):**\n **...**\n**SyntaxError: invalid syntax**\n\n```", "```py\nimport builtins\nimport inspect\nimport pprint\nimport re\n\ndef pp(*args, **kwargs):\n    '''PrettyPrint function that prints the variable name when\n    available and pprints the data'''\n    name = None\n    # Fetch the current frame from the stack\n    frame = inspect.currentframe().f_back\n    # Prepare the frame info\n    frame_info = inspect.getframeinfo(frame)\n\n    # Walk through the lines of the function\n    for line in frame_info[3]:\n        # Search for the pp() function call with a fancy regexp\n        m = re.search(r'\\bpp\\s*\\(\\s*([^)]*)\\s*\\)', line)\n        if m:\n            print('# %s:' % m.group(1), end=' ')\n            break\n\n    pprint.pprint(*args, **kwargs)\n\nbuiltins.pf = pprint.pformat\nbuiltins.pp = pp\n```", "```py\nx = 10\npp(x)\n```", "```py\n# x: 10\n```", "```py\ndict_ = {'spam': 'eggs'}\nlist_ = ['spam']\nset_ = {'spam', 'eggs'}\n\nfor key in dict_:\n    del dict_[key]\n\nfor item in list_:\n    list_.remove(item)\n\nfor item in set_:\n    set_.remove(item)\n```", "```py\ndict_ = {'spam': 'eggs'}\nlist_ = ['spam']\nset_ = {'spam', 'eggs'}\n\nfor key in list(dict_):\n    del dict_[key]\n\nfor item in list(list_):\n    list_.remove(item)\n\nfor item in list(set_):\n    set_.remove(item)\n```", "```py\ntry:\n    ... # do something here\nexcept (ValueError, TypeError) as e:\n    print('Exception: %r' % e)\n```", "```py\ndef spam(value):\n    try:\n        value = int(value)\n    except ValueError as exception:\n        print('We caught an exception: %r' % exception)\n\n    return exception\n\nspam('a')\n```", "```py\nWe caught an exception: ValueError(\"invalid literal for int() with base 10: 'a'\",)\nTraceback (most recent call last):\n  File \"test.py\", line 14, in <module>\n    spam('a')\n  File \"test.py\", line 11, in spam\n    return exception\nUnboundLocalError: local variable 'exception' referenced before assignment\n```", "```py\ndef spam(value):\n    exception = None\n    try:\n        value = int(value)\n    except ValueError as exception:\n        print('We caught an exception: %r' % exception)\n\n    return exception\n```", "```py\nexception = None\ntry:\n    value = int(value)\nexcept ValueError as exception:\n    try:\n        print('We caught an exception: %r' % exception)\n    finally:\n        del exception\n```", "```py\ndef spam(value):\n    exception = None\n    try:\n        value = int(value)\n    except ValueError as e:\n        exception = e\n        print('We caught an exception: %r' % exception)\n\n    return exception\n```", "```py\neggs = [lambda a: i * a for i in range(3)]\n\nfor egg in eggs:\n    print(egg(5))\n```", "```py\n0\n5\n10\n```", "```py\n10\n10\n10\n```", "```py\nimport functools\n\neggs = [functools.partial(lambda i, a: i * a, i) for i in range(3)]\n\nfor egg in eggs:\n    print(egg(5))\n```", "```py\nfrom spam import spam\n\ndef eggs():\n    print('This is eggs')\n    spam()\n```", "```py\nfrom eggs import eggs\n\ndef spam():\n    print('This is spam')\n\nif __name__ == '__main__':\n    eggs()\n```", "```py\nTraceback (most recent call last):\n  File \"spam.py\", line 1, in <module>\n    from eggs import eggs\n  File \"eggs.py\", line 1, in <module>\n    from spam import spam\n  File \"spam.py\", line 1, in <module>\n    from eggs import eggs\nImportError: cannot import name 'eggs'\n```", "```py\nimport spam\n\ndef eggs():\n    print('This is eggs')\n    spam.spam()\n```", "```py\nimport eggs\n\ndef spam():\n    print('This is spam')\n\nif __name__ == '__main__':\n    eggs.eggs()\n```", "```py\ndef eggs():\n    from spam import spam\n    print('This is eggs')\n    spam()\n```", "```py\ndef spam():\n    from eggs import eggs\n    print('This is spam')\n\nif __name__ == '__main__':\n    eggs()\n```", "```py\ndef eggs():\n    print('This is eggs')\n    spam()\n\nfrom spam import spam\n```", "```py\ndef spam():\n    print('This is spam')\n\nfrom eggs import eggs\n\nif __name__ == '__main__':\n    eggs()\n```"]