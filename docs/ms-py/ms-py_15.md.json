["```py\n**pip install package**\n\n```", "```py\n**cd package**\n**python setup.py install**\n\n```", "```py\n**pip install \u2013e package_directory**\n\n```", "```py\n**cd package_directory**\n**python setup.py develop**\n\n```", "```py\n**pip install -U pip setuptools**\n\n```", "```py\nimport setuptools\n\nif __name__ == '__main__':\n    setuptools.setup(\n        name='Name',\n        version='0.1',\n\n        # This automatically detects the packages in the specified\n        # (or current directory if no directory is given).\n        packages=setuptools.find_packages(),\n\n        # The entry points are the big difference between\n        # setuptools and distutils, the entry points make it\n        # possible to extend setuptools and make it smarter and/or\n        # add custom commands.\n        entry_points={\n\n            # The following would add: python setup.py\n            # command_name\n            'distutils.commands': [\n                'command_name = your_package:YourClass',\n            ],\n\n            # The following would make these functions callable as\n            # standalone scripts. In this case it would add the\n            # spam command to run in your shell.\n            'console_scripts': [\n                'spam = your_package:SpamClass',\n            ],\n        },\n\n        # Packages required to use this one, it is possible to\n        # specify simply the application name, a specific version\n        # or a version range. The syntax is the same as pip\n        # accepts.\n        install_requires=['docutils>=0.3'],\n\n        # Extra requirements are another amazing feature of\n        # setuptools, it allows people to install extra\n        # dependencies if you are interested. In this example\n        # doing a \"pip install name[all]\" would install the\n        # python-utils package as well.\n        extras_requires={\n            'all': ['python-utils'],\n        },\n\n        # Packages required to install this package, not just for\n        # running it but for the actual install. These will not be\n        # installed but only downloaded so they can be used during\n        # the install. The pytest-runner is a useful example:\n        setup_requires=['pytest-runner'],\n\n        # The requirements for the test command. Regular testing\n        # is possible through: python setup.py test The Pytest\n        # module installs a different command though: python\n        # setup.py pytest\n        tests_require=['pytest'],\n\n        # The package_data, include_package_data and\n        # exclude_package_data arguments are used to specify which\n        # non-python files should be included in the package. An\n        # example would be documentation files.  More about this\n        # in the next paragraph\n        package_data={\n            # Include (restructured text) documentation files from\n            # any directory\n            '': ['*.rst'],\n            # Include text files from the eggs package:\n            'eggs': ['*.txt'],\n        },\n\n        # If a package is zip_safe the package will be installed\n        # as a zip file. This can be faster but it generally\n        # doesn't make too much of a difference and breaks\n        # packages if they need access to either the source or the\n        # data files. When this flag is omitted setuptools will\n        # try to autodetect based on the existance of datafiles\n        # and C extensions. If either exists it will not install\n        # the package as a zip. Generally omitting this parameter\n        # is the best option but if you have strange problems with\n        # missing files, try disabling zip_safe.\n        zip_safe=False,\n\n        # All of the following fileds are PyPI metadata fields.\n        # When registering a package at PyPI this is used as\n        # information on the package page.\n        author='Rick van Hattem',\n        author_email='wolph@wol.ph',\n\n        # This should be a short description (one line) for the\n        # package\n        description='Description for the name package',\n\n        # For this parameter I would recommend including the\n        # README.rst\n\n        long_description='A very long description',\n        # The license should be one of the standard open source\n        # licenses: https://opensource.org/licenses/alphabetical\n        license='BSD',\n\n        # Homepage url for the package\n        url='https://wol.ph/',\n    )\n```", "```py\n**packages = find_packages(exclude=['tests', 'docs'])**\n\n```", "```py\nentry_points={\n    'distutils.commands': [\n        'command_name = your_package:YourClass',\n    ],\n    'console_scripts': [\n        'spam = your_package:SpamClass',\n    ],\n},\n```", "```py\nimport setuptools\n\nif __name__ == '__main__':\n    setuptools.setup(\n        name='Our little project',\n        entry_points={\n            'console_scripts': [\n                'spam = spam.main:main',\n            ],\n        },\n    )\n```", "```py\nimport sys\n\ndef main():\n    print('Args:', sys.argv)\n```", "```py\n**# pip install -e .**\n**Installing collected packages: Our-little-project**\n **Running setup.py develop for Our-little-project**\n**Successfully installed Our-little-project**\n**# spam 123 abc**\n**Args: ['~/envs/mastering_python/bin/spam', '123', 'abc']**\n\n```", "```py\n**python setup.py sdist bdist_wheel upload build_sphinx upload_sphinx**\n\n```", "```py\nimport setuptools\n\nif __name__ == '__main__':\n    setuptools.setup(\n        name='Our little project',\n        entry_points={\n            'distutils.commands': [\n                'spam = spam.command:SpamCommand',\n            ],\n        },\n    )\n```", "```py\nimport setuptools\n\nclass SpamCommand(setuptools.Command):\n    description = 'Make some spam!'\n# Specify the commandline arguments for this command here. This\n# parameter uses the getopt module for parsing'\n    user_options = [\n        ('spam=', 's', 'Set the amount of spams'),\n    ]\n\n    def initialize_options(self):\n# This method can be used to set default values for the\n# options. These defaults can be overridden by\n# command-line, configuration files and the setup script\n# itself.\n        self.spam = 3\n\n    def finalize_options(self):\n# This method allows you to override the values for the\n# options, useful for automatically disabling\n# incompatible options and for validation.\n        self.spam = max(0, int(self.spam))\n\n    def run(self):\n        # The actual running of the command.\n        print('spam' * self.spam)\n```", "```py\n**# pip install -e .**\n**Installing collected packages: Our-little-project**\n **Running setup.py develop for Our-little-project**\n**Successfully installed Our-little-project-0.0.0**\n**# python setup.py --help-commands**\n**[...]**\n**Extra commands:**\n **[...]**\n **spam              Make some spam!**\n **test              run unit tests after in-place build**\n **[...]**\n\n**usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]**\n **or: setup.py --help [cmd1 cmd2 ...]**\n **or: setup.py --help-commands**\n **or: setup.py cmd \u2013help**\n\n**# python setup.py --help spam**\n**Common commands: (see '--help-commands' for more)**\n\n**[...]**\n\n**Options for 'SpamCommand' command:**\n **--spam (-s)  Set the amount of spams**\n\n**usage: setup.py [global_opts] cmd1 [cmd1_opts] [cmd2 [cmd2_opts] ...]**\n **or: setup.py --help [cmd1 cmd2 ...]**\n **or: setup.py --help-commands**\n **or: setup.py cmd --help**\n\n**# python setup.py spam**\n**running spam**\n**spamspamspam**\n**# python setup.py spam -s 5**\n**running spam**\n**spamspamspamspamspam**\n\n```", "```py\npackage_data = {\n    'docs': ['*.rst'],\n}\n```", "```py\n# Comments can be added with a hash tag\ninclude LICENSE CHANGES AUTHORS\n\n# Include the docs, tests and examples completely\ngraft docs\ngraft tests\ngraft examples\n\n# Always exclude compiled python files\nglobal-exclude *.py[co]\n\n# Remove documentation builds\nprune docs/_build\n```", "```py\nimport unittest\n\nclass Test(unittest.TestCase):\n\n    def test(self):\n        pass\n```", "```py\n**# python setup.py -v test**\n**running test**\n**running \"unittest --verbose\"**\n**running egg_info**\n**writing Our_little_project.egg-info/PKG-INFO**\n**writing dependency_links to Our_little_project.egg-info/dependency_links.txt**\n**writing top-level names to Our_little_project.egg-info/top_level.txt**\n**writing entry points to Our_little_project.egg-info/entry_points.txt**\n**reading manifest file 'Our_little_project.egg-info/SOURCES.txt'**\n**writing manifest file 'Our_little_project.egg-info/SOURCES.txt'**\n**running build_ext**\n**test (test.Test) ... ok**\n\n**----------------------------------------------------------------------**\n**Ran 1 test in 0.000s**\n\n**OK**\n\n```", "```py\ndef test_a():\n    pass\n\ndef test_b():\n    pass\n```", "```py\n**# pip install pytest-runner**\n**Collecting pytest-runner**\n **Using cached pytest_runner-2.7-py2.py3-none-any.whl**\n**Installing collected packages: pytest-runner**\n**Successfully installed pytest-runner-2.7**\n**# python setup.py pytest**\n**running pytest**\n**running egg_info**\n**writing top-level names to Our_little_project.egg-info/top_level.txt**\n**writing dependency_links to Our_little_project.egg-info/dependency_links.txt**\n**writing entry points to Our_little_project.egg-info/entry_points.txt**\n**writing Our_little_project.egg-info/PKG-INFO**\n**reading manifest file 'Our_little_project.egg-info/SOURCES.txt'**\n**writing manifest file 'Our_little_project.egg-info/SOURCES.txt'**\n**running build_ext**\n**======================== test session starts =========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.7, py-1.4.31, pluggy-0.3.1**\n**rootdir: h15, inifile: pytest.ini**\n**collected 2 items**\n\n**test_pytest.py ..**\n\n**====================== 2 passed in 0.01 seconds ======================**\n\n```", "```py\n[aliases]\ntest=pytest\n```", "```py\nimport setuptools\n\nif __name__ == '__main__':\n    setuptools.setup(\n        name='Our little project',\n        entry_points={\n            'distutils.commands': [\n                'spam = spam.command:SpamCommand',\n            ],\n        },\n        setup_requires=['pytest-runner'],\n        tests_require=['pytest'],\n    )\n```", "```py\n**# pip install nose**\n**Collecting nose**\n **Using cached nose-1.3.7-py3-none-any.whl**\n**Installing collected packages: nose**\n**Successfully installed nose-1.3.7**\n**# python setup.py nosetests**\n**running nosetests**\n**running egg_info**\n**writing top-level names to Our_little_project.egg-info/top_level.txt**\n**writing entry points to Our_little_project.egg-info/entry_points.txt**\n**writing Our_little_project.egg-info/PKG-INFO**\n**writing dependency_links to Our_little_project.egg-info/dependency_lin**\n**ks.txt**\n**reading manifest file 'Our_little_project.egg-info/SOURCES.txt'**\n**writing manifest file 'Our_little_project.egg-info/SOURCES.txt'**\n**..**\n**----------------------------------------------------------------------**\n**Ran 2 tests in 0.006s**\n\n**OK**\n\n```", "```py\nimport setuptools\n\nspam = setuptools.Extension('spam', sources=['spam.c'])\n\nsetuptools.setup(\n    name='Spam',\n    version='1.0',\n    ext_modules=[spam],\n)\n```", "```py\nexts = [(Extension(\"PIL._imaging\", files, libraries=libs,\n                   define_macros=defs))]\n```", "```py\nif feature.freetype:\n    exts.append(Extension(\n        \"PIL._imagingft\", [\"_imagingft.c\"], libraries=[\"freetype\"]))\n```", "```py\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\nsetup(\n    ext_modules = cythonize(\"eggs.pyx\")\n)\n```", "```py\ndef make_eggs(int n):\n    print('Making %d eggs: %s' % (n, n * 'eggs '))\n```", "```py\n**# python setup.py build**\n**Traceback (most recent call last):**\n **File \"setup.py\", line 2, in <module>**\n **import Cython**\n**ImportError: No module named 'Cython'**\n\n```", "```py\nimport setuptools\n\neggs = setuptools.Extension('eggs', sources=['eggs.pyx'])\n\nsetuptools.setup(\n    name='Eggs',\n    version='1.0',\n    ext_modules=[eggs],\n    setup_requires=['Cython'],\n)\n```", "```py\n**# python setup.py build**\n**running build**\n**running build_ext**\n**cythoning eggs.pyx to eggs.c**\n**building 'eggs' extension**\n**...**\n**# python setup.py develop**\n**running develop**\n**running egg_info**\n**creating Eggs.egg-info**\n**writing dependency_links to Eggs.egg-info/dependency_links.txt**\n**writing top-level names to Eggs.egg-info/top_level.txt**\n**writing Eggs.egg-info/PKG-INFO**\n**writing manifest file 'Eggs.egg-info/SOURCES.txt'**\n**reading manifest file 'Eggs.egg-info/SOURCES.txt'**\n**writing manifest file 'Eggs.egg-info/SOURCES.txt'**\n**running build_ext**\n**skipping 'eggs.c' Cython extension (up-to-date)**\n**copying build/... ->**\n**Creating Eggs.egg-link (link to .)**\n**Adding Eggs 1.0 to easy-install.pth file**\n\n**Installed Eggs**\n**Processing dependencies for Eggs==1.0**\n**Finished processing dependencies for Eggs==1.0**\n**# python -c 'import eggs; eggs.make_eggs(3)'**\n**Making 3 eggs: eggs eggs eggs**\n\n```", "```py\n**# pip uninstall eggs -y**\n**Uninstalling Eggs-1.0:**\n **Successfully uninstalled Eggs-1.0**\n**# pip uninstall eggs -y**\n**Cannot uninstall requirement eggs, not installed**\n**# python setup.py clean**\n**# pip install cython**\n\n```", "```py\n**>>> import pyximport**\n**>>> pyximport.install()**\n**(None, <pyximport.pyximport.PyxImporter object at 0x...>)**\n**>>> import eggs**\n**>>> eggs.make_eggs(3)**\n**Making 3 eggs: eggs eggs eggs**\n\n```", "```py\n**# pip install wheel**\n\n```", "```py\n[bdist_wheel]\nuniversal = 1\n```", "```py\n**# python setup.py check**\n**running check**\n**warning: check: missing required meta-data: url**\n\n**warning: check: missing meta-data: either (author and author_email) or (maintainer and maintainer_email) must be supplied**\n\n```", "```py\nimport setuptools\n\neggs = setuptools.Extension('eggs', sources=['eggs.pyx'])\n\nsetuptools.setup(\n    name='Eggs',\n    version='1.0',\n    ext_modules=[eggs],\n    setup_requires=['Cython'],\n    url='https://wol.ph/',\n    author='Rick van Hattem (Wolph)',\n    author_email='wolph@wol.ph',\n)\n```", "```py\n**# python setup.py check**\n**running check**\n\n```", "```py\n**# python setup.py test**\n**running test**\n**running egg_info**\n**writing dependency_links to Eggs.egg-info/dependency_links.txt**\n**writing Eggs.egg-info/PKG-INFO**\n**writing top-level names to Eggs.egg-info/top_level.txt**\n**reading manifest file 'Eggs.egg-info/SOURCES.txt'**\n**writing manifest file 'Eggs.egg-info/SOURCES.txt'**\n**running build_ext**\n**skipping 'eggs.c' Cython extension (up-to-date)**\n**copying build/... ->**\n\n**---------------------------------------------------------------------**\n**Ran 0 tests in 0.000s**\n\n**OK**\n\n```", "```py\n**# python setup.py build_sphinx**\n**running build_sphinx**\n**Running Sphinx v1.3.5**\n**...**\n\n```", "```py\n**# python setup.py build_sphinx upload_sphinx sdist bdist_wheel upload**\n\n```"]