["```py\nimport datetime\nimport threading\n\ndef busy_wait(n):\n    while n > 0:\n        n -= 1\n\nif __name__ == '__main__':\n    n = 10000000\n    start = datetime.datetime.now()\n    for _ in range(4):\n        busy_wait(n)\n    end = datetime.datetime.now()\n    print('The single threaded loops took: %s' % (end - start))\n\n    start = datetime.datetime.now()\n    threads = []\n    for _ in range(4):\n        thread = threading.Thread(target=busy_wait, args=(n,))\n        thread.start()\n        threads.append(thread)\n\n    for thread in threads:\n        thread.join()\n\n    end = datetime.datetime.now()\n    print('The multithreaded loops took: %s' % (end - start))\n```", "```py\n**# python3 test_multithreading.py**\n**The single threaded loops took: 0:00:02.623443**\n**The multithreaded loops took: 0:00:02.597900**\n\n```", "```py\n**# python2 test_multithreading.py**\n**The single threaded loops took: 0:00:02.010967**\n**The multithreaded loops took: 0:00:03.924950**\n\n```", "```py\nimport datetime\nimport multiprocessing\n\ndef busy_wait(n):\n    while n > 0:\n        n -= 1\n\nif __name__ == '__main__':\n    n = 10000000\n    start = datetime.datetime.now()\n\n    processes = []\n    for _ in range(4):\n        process = multiprocessing.Process(\n            target=busy_wait, args=(n,))\n        process.start()\n        processes.append(process)\n\n    for process in processes:\n        process.join()\n\n    end = datetime.datetime.now()\n    print('The multiprocessed loops took: %s' % (end - start))\n```", "```py\n**# python3 test_multiprocessing.py**\n**The multiprocessed loops took: 0:00:00.671249**\n\n```", "```py\nimport sys\nimport datetime\nimport multiprocessing\n\ndef busy_wait(n):\n    while n > 0:\n        n -= 1\n\nif __name__ == '__main__':\n    n = 10000000\n    start = datetime.datetime.now()\n    if sys.argv[-1].isdigit():\n        processes = int(sys.argv[-1])\n    else:\n        print('Please specify the number of processes')\n        print('Example: %s 4' % ' '.join(sys.argv))\n        sys.exit(1)\n\n    with multiprocessing.Pool(processes=processes) as pool:\n        # Execute the busy_wait function 8 times with parameter n\n        pool.map(busy_wait, [n for _ in range(8)])\n\n    end = datetime.datetime.now()\n    print('The multithreaded loops took: %s' % (end - start))\n```", "```py\n**# python3 test_multiprocessing.py 1**\n**The multithreaded loops took: 0:00:05.297707**\n**# python3 test_multiprocessing.py 2**\n**The multithreaded loops took: 0:00:02.701344**\n**# python3 test_multiprocessing.py 4**\n**The multithreaded loops took: 0:00:01.477845**\n**# python3 test_multiprocessing.py 8**\n**The multithreaded loops took: 0:00:01.579218**\n**# python3 test_multiprocessing.py 16**\n**The multithreaded loops took: 0:00:01.595239**\n\n```", "```py\nimport time\nimport multiprocessing\n\ndef busy_wait(n):\n    while n > 0:\n        n -= 1\n\nif __name__ == '__main__':\n    n = 10000000\n    items = [n for _ in range(8)]\n    with multiprocessing.Pool() as pool:\n        results = []\n        start = time.time()\n        print('Start processing...')\n        for _ in range(5):\n            results.append(pool.map_async(busy_wait, items))\n        print('Still processing %.3f' % (time.time() - start))\n        for result in results:\n            result.wait()\n            print('Result done %.3f' % (time.time() - start))\n        print('Done processing: %.3f' % (time.time() - start))\n```", "```py\n**# python3 test_pool.py**\n**Start processing...**\n**Still processing 0.000**\n**Result done 1.513**\n**Result done 2.984**\n**Result done 4.463**\n**Result done 5.978**\n**Result done 7.388**\n**Done processing: 7.388**\n\n```", "```py\nimport multiprocessing\nmanager = multiprocessing.Manager()\nnamespace = manager.Namespace()\nnamespace.spam = 123\nnamespace.eggs = 456\n```", "```py\nhost = 'localhost'\nport = 12345\npassword = b'some secret password'\n\ndef primes(n):\n    for i, prime in enumerate(prime_generator()):\n        if i == n:\n            return prime\n\ndef prime_generator():\n    n = 2\n    primes = set()\n    while True:\n        for p in primes:\n            if n % p == 0:\n                break\n        else:\n            primes.add(n)\n            yield n\n        n += 1\n```", "```py\nimport constants\nimport multiprocessing\nfrom multiprocessing import managers\n\nqueue = multiprocessing.Queue()\nmanager = managers.BaseManager(address=('', constants.port),\n                               authkey=constants.password)\n\nmanager.register('queue', callable=lambda: queue)\nmanager.register('primes', callable=constants.primes)\n\nserver = manager.get_server()\nserver.serve_forever()\n```", "```py\nfrom multiprocessing import managers\nimport functions\n\nmanager = managers.BaseManager(\n    address=(functions.host, functions.port),\n    authkey=functions.password)\nmanager.register('queue')\nmanager.connect()\n\nqueue = manager.queue()\nfor i in range(1000):\n    queue.put(i)\n```", "```py\nfrom multiprocessing import managers\nimport functions\n\nmanager = managers.BaseManager(\n    address=(functions.host, functions.port),\n    authkey=functions.password)\nmanager.register('queue')\nmanager.register('primes')\nmanager.connect()\n\nqueue = manager.queue()\nwhile not queue.empty():\n    print(manager.primes(queue.get()))\n```", "```py\n**# python3 multiprocessing_server.py**\n\n```", "```py\n**# python3 multiprocessing_producer.py**\n\n```", "```py\n**# python3 multiprocessing_client.py**\n\n```", "```py\n**pip install -U ipython[all] ipyparallel**\n\n```", "```py\n**# ipython profile create --parallel --profile=mastering_python**\n**[ProfileCreate] Generating default config file: '~/.ipython/profile_mastering_python/ipython_config.py'**\n**[ProfileCreate] Generating default config file: '~/.ipython/profile_mastering_python/ipython_kernel_config.py'**\n**[ProfileCreate] Generating default config file: '~/.ipython/profile_mastering_python/ipcontroller_config.py'**\n**[ProfileCreate] Generating default config file: '~/.ipython/profile_mastering_python/ipengine_config.py'**\n**[ProfileCreate] Generating default config file: '~/.ipython/profile_mastering_python/ipcluster_config.py'**\n\n```", "```py\nc.InteractiveShellApp.extensions = [\n    'line_profiler',\n    'memory_profiler',\n]\n```", "```py\nc.HubFactory.client_ip = '*'\nc.RegistrationFactory.ip = '*'\n```", "```py\n**# ipcontroller --profile=mastering_python**\n**[IPControllerApp] Hub listening on tcp://*:58412 for registration.**\n**[IPControllerApp] Hub listening on tcp://127.0.0.1:58412 for registration.**\n**[IPControllerApp] Hub using DB backend: 'NoDB'**\n**[IPControllerApp] hub::created hub**\n**[IPControllerApp] writing connection info to ~/.ipython/profile_mastering_python/security/ipcontroller-client.json**\n**[IPControllerApp] writing connection info to ~/.ipython/profile_mastering_python/security/ipcontroller-engine.json**\n**[IPControllerApp] task::using Python leastload Task scheduler**\n**[IPControllerApp] Heartmonitor started**\n**[IPControllerApp] Creating pid file: .ipython/profile_mastering_python/pid/ipcontroller.pid**\n**[scheduler] Scheduler started [leastload]**\n**[IPControllerApp] client::client b'\\x00\\x80\\x00A\\xa7' requested 'connection_request'**\n**[IPControllerApp] client::client [b'\\x00\\x80\\x00A\\xa7'] connected**\n\n```", "```py\n**# ipython profile create --parallel --profile=mastering_python**\n\n```", "```py\n**# ipcluster engines --profile=mastering_python -n 4**\n**[IPClusterEngines] IPython cluster: started**\n**[IPClusterEngines] Starting engines with [daemon=False]**\n**[IPClusterEngines] Starting 4 Engines with LocalEngineSetLauncher**\n\n```", "```py\nIn [1]: %timeit for _ in range(10): sum(range(10000000))\n1 loops, best of 3: 2.27 s per loop\n```", "```py\nIn [1]: import ipyparallel\n\nIn [2]: client = ipyparallel.Client(profile='mastering_python')\n\nIn [3]: view = client.load_balanced_view()\n\nIn [4]: %timeit view.map(lambda _: sum(range(10000000)), range(100)).wait()\n1 loop, best of 3: 909 ms per loop\n```", "```py\nIn [1]: import ipyparallel\n\nIn [2]: client = ipyparallel.Client(profile='mastering_python')\n\nIn [3]: view = client.load_balanced_view()\n\nIn [4]: @view.parallel()\n   ...: def loop():\n   ...:     return sum(range(10000000))\n   ...:\n\nIn [5]: loop.map(range(10))\nOut[5]: <AsyncMapResult: loop>\n```", "```py\n**ipcluster nbextension enable**\n\n```", "```py\n**# jupyter notebook**\n**Unrecognized JSON config file version, assuming version 1**\n**Loading IPython parallel extension**\n**Serving notebooks from local directory: ./**\n**0 active kernels**\n**The Jupyter Notebook is running at: http://localhost:8888/**\n**Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).**\n\n```"]