["```py\n**def square(n):**\n **'''**\n **Returns the input number, squared**\n\n **>>> square(0)**\n **0**\n **>>> square(1)**\n **1**\n **>>> square(2)**\n **4**\n **>>> square(3)**\n **9**\n **>>> square()**\n **Traceback (most recent call last):**\n **...**\n **TypeError: square() missing 1 required positional argument: 'n'**\n **>>> square('x')**\n **Traceback (most recent call last):**\n **...**\n **TypeError: can't multiply sequence by non-int of type 'str'**\n\n **Args:**\n **n (int): The number to square**\n\n **Returns:**\n **int: The squared result**\n **'''**\n **return n * n**\n\n**if __name__ == '__main__':**\n **import doctest**\n **doctest.testmod()**\n\n```", "```py\n**# python square.py -v**\n**Trying:**\n **square(0)**\n**Expecting:**\n **0**\n**ok**\n**Trying:**\n **square(1)**\n**Expecting:**\n **1**\n**ok**\n**Trying:**\n **square(2)**\n**Expecting:**\n **4**\n**ok**\n**Trying:**\n **square(3)**\n**Expecting:**\n **9**\n**ok**\n**Trying:**\n **square()**\n**Expecting:**\n **Traceback (most recent call last):**\n **...**\n **TypeError: square() missing 1 required positional argument: 'n'**\n**ok**\n**Trying:**\n **square('x')**\n**Expecting:**\n **Traceback (most recent call last):**\n **...**\n **TypeError: can't multiply sequence by non-int of type 'str'**\n**ok**\n**1 items had no tests:**\n **__main__**\n**1 items passed all tests:**\n **6 tests in __main__.square**\n**6 tests in 2 items.**\n**6 passed and 0 failed.**\n**Test passed.**\n\n```", "```py\n**def square(n):**\n **'''**\n **Returns the input number, squared**\n\n **>>> square(0)**\n **0**\n **>>> square(1)**\n **1**\n **>>> square(2)**\n **4**\n **>>> square(3)**\n **9**\n **>>> square()**\n **Traceback (most recent call last):**\n **...**\n **TypeError: square() missing 1 required positional argument: 'n'**\n **>>> square('x')**\n **Traceback (most recent call last):**\n **...**\n **TypeError: can't multiply sequence by non-int of type 'str'**\n\n **Args:**\n **n (int): The number to square**\n\n **Returns:**\n **int: The squared result**\n **'''**\n **return n ** 2**\n\n**if __name__ == '__main__':**\n **import doctest**\n **doctest.testmod()**\n\n```", "```py\n**# python square.py**\n**************************************************************************\n**File \"square.py\", line 17, in __main__.square**\n**Failed example:**\n **square('x')**\n**Expected:**\n **Traceback (most recent call last):**\n **...**\n **TypeError: can't multiply sequence by non-int of type 'str'**\n**Got:**\n **Traceback (most recent call last):**\n **File \"doctest.py\", line 1320, in __run**\n **compileflags, 1), test.globs)**\n **File \"<doctest __main__.square[5]>\", line 1, in <module>**\n **square('x')**\n **File \"square.py\", line 28, in square**\n **return n ** 2**\n **TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'int'**\n**************************************************************************\n**1 items had failures:**\n **1 of   6 in __main__.square**\n*****Test Failed*** 1 failures.**\n\n```", "```py\n**# python**\n**>>> from square import square**\n**>>> square(5)**\n**25**\n**>>> square()**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**TypeError: square() missing 1 required positional argument: 'n'**\n\n```", "```py\n**> doctest: automatically test code snippets in doctest blocks (y/n) [n]:y**\n\n```", "```py\n**def square(n):**\n **'''**\n **Returns the input number, squared**\n\n **>>> square(2)**\n **4**\n\n **Args:**\n **n (int): The number to square**\n\n **Returns:**\n **int: The squared result**\n **'''**\n **return n * n**\n\n**if __name__ == '__main__':**\n **import doctest**\n **doctest.testmod()**\n\n```", "```py\n**square module**\n**=============**\n\n**.. automodule:: square**\n **:members:**\n **:undoc-members:**\n **:show-inheritance:**\n\n**Examples:**\n\n**.. testsetup::**\n\n **from square import square**\n\n**.. doctest::**\n\n **>>> square(100)**\n\n **>>> square(0)**\n **0**\n **>>> square(1)**\n **1**\n **>>> square(3)**\n **9**\n **>>> square()**\n **Traceback (most recent call last):**\n **...**\n **TypeError: square() missing 1 required positional argument: 'n'**\n **>>> square('x')**\n **Traceback (most recent call last):**\n **...**\n **TypeError: can't multiply sequence by non-int of type 'str'**\n\n```", "```py\n**# make doctest**\n**sphinx-build -b doctest -d _build/doctrees . _build/doctest**\n**Running Sphinx v1.3.3**\n**loading translations [en]... done**\n**loading pickled environment... done**\n**building [mo]: targets for 0 po files that are out of date**\n**building [doctest]: targets for 3 source files that are out of date**\n**updating environment: 0 added, 0 changed, 0 removed**\n**looking for now-outdated files... none found**\n**running tests...**\n\n**Document: square**\n**----------------**\n**************************************************************************\n**File \"square.rst\", line 16, in default**\n**Failed example:**\n **square(100)**\n**Expected nothing**\n**Got:**\n **10000**\n**************************************************************************\n**1 items had failures:**\n **1 of   7 in default**\n**7 tests in 1 items.**\n**6 passed and 1 failed.**\n*****Test Failed*** 1 failures.**\n\n**Doctest summary**\n**===============**\n **7 tests**\n **1 failure in tests**\n **0 failures in setup code**\n **0 failures in cleanup code**\n**build finished with problems.**\n**make: *** [doctest] Error 1**\n\n```", "```py\n**doctest_optionflags = ELLIPSIS NORMALIZE_WHITESPACE**\n\n```", "```py\n**'''**\n**>>> False**\n**0**\n**>>> True**\n**1**\n**>>> False  # doctest: +DONT_ACCEPT_TRUE_FOR_1**\n**0**\n**>>> True  # doctest: +DONT_ACCEPT_TRUE_FOR_1**\n**1**\n**'''**\n\n**if __name__ == '__main__':**\n **import doctest**\n **doctest.testmod()**\n\n```", "```py\n**# python test.py**\n**************************************************************************\n**File \"test.py\", line 6, in __main__**\n**Failed example:**\n **False  # doctest: +DONT_ACCEPT_TRUE_FOR_1**\n**Expected:**\n **0**\n**Got:**\n **False**\n**************************************************************************\n**File \"test.py\", line 8, in __main__**\n**Failed example:**\n **True  # doctest: +DONT_ACCEPT_TRUE_FOR_1**\n**Expected:**\n **1**\n**Got:**\n **True**\n**************************************************************************\n**1 items had failures:**\n **2 of   4 in __main__**\n*****Test Failed*** 2 failures.**\n\n```", "```py\n**>>> [list(range(5)) for i in range(5)]**\n**[[0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]]**\n\n```", "```py\n**>>> [list(range(5)) for i in range(5)]  # doctest: +NORMALIZE_WHITESPACE**\n**[[0, 1, 2, 3, 4],**\n **[0, 1, 2, 3, 4],**\n **[0, 1, 2, 3, 4],**\n **[0, 1, 2, 3, 4],**\n **[0, 1, 2, 3, 4]]**\n\n```", "```py\n**>>> {10: 'a', 20: 'b'}  # doctest: +ELLIPSIS**\n**{...}**\n**>>> [True, 1, 'a']  # doctest: +ELLIPSIS**\n**[...]**\n**>>> True,  # doctest: +ELLIPSIS**\n**(...)**\n**>>> [1, 2, 3, 4]  # doctest: +ELLIPSIS**\n**[1, ..., 4]**\n**>>> [1, 0, 0, 0, 0, 0, 4]  # doctest: +ELLIPSIS**\n**[1, ..., 4]**\n\n```", "```py\n**>>> class Spam(object):**\n**...     pass**\n**>>> Spam()  # doctest: +ELLIPSIS**\n**<__main__.Spam object at 0x...>**\n\n```", "```py\n**Failed example:**\n **Spam()**\n**Expected:**\n **<__main__.Spam object at 0x...>**\n**Got:**\n **<__main__.Spam object at 0x10d9ad160>**\n\n```", "```py\n**>>> dict.fromkeys('spam')**\n**{'s': None, 'p': None, 'a': None, 'm': None}**\n**>>> 1./7.**\n**0.14285714285714285**\n\n**>>> import time**\n**>>> time.time() - time.time()**\n**-9.5367431640625e-07**\n\n```", "```py\n**>>> import pprint**\n**>>> data = dict.fromkeys('spam')**\n**>>> pprint.pprint(data)**\n**{'a': None, 'm': None, 'p': None, 's': None}**\n\n```", "```py\n**>>> data = dict.fromkeys('spam')**\n**>>> sorted(data.items())**\n**[('a', None), ('m', None), ('p', None), ('s', None)]**\n\n```", "```py\n**>>> data = dict.fromkeys('spam')**\n**>>> data == {'a': None, 'm': None, 'p': None, 's': None}**\n**True**\n\n```", "```py\n**Failed example:**\n **data == {'a': None, 'm': None, 'p': None}**\n**Expected:**\n **True**\n**Got:**\n **False**\n\n```", "```py\n**Failed example:**\n **sorted(data.items())**\n**Expected:**\n **[('a', None), ('m', None), ('p', None)]**\n**Got:**\n **[('a', None), ('m', None), ('p', None), ('s', None)]**\n\n**Failed example:**\n **pprint.pprint(data)**\n**Expected:**\n **{'a': None, 'm': None, 'p': None}**\n**Got:**\n **{'a': None, 'm': None, 'p': None, 's': None}**\n\n```", "```py\n**>>> 1/3  # doctest: +ELLIPSIS**\n**0.333...**\n**>>> '%.3f' % (1/3)**\n**'0.333'**\n**>>> '{:.3f}'.format(1/3)**\n**'0.333'**\n**>>> round(1/3, 3)**\n**0.333**\n**>>> 0.333 < 1/3 < 0.334**\n**True**\n\n```", "```py\n**>>> import time**\n**>>> a = time.time()**\n**>>> b = time.time()**\n**>>> (b - a) < 0.01**\n**True**\n\n```", "```py\n**>>> import datetime**\n**>>> a = datetime.datetime.now()**\n**>>> b = datetime.datetime.now()**\n**>>> str(b - a)  # doctest: +ELLIPSIS**\n**'0:00:00.000...**\n\n```", "```py\n**pip install pytest**\n\n```", "```py\n**# py.test --doctest-modules -v square.py**\n**======================== test session starts ========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.2, py-1.4.30, pluggy-0.3.1 -- python3.5**\n**cachedir: .cache**\n**rootdir: code, inifile: pytest.ini**\n**collected 1 items**\n\n**square.py::square.square PASSED**\n\n**===================== 1 passed in 0.02 seconds ======================**\n\n```", "```py\n**def cube(n):**\n **'''**\n **Returns the input number, cubed**\n\n **Args:**\n **n (int): The number to cube**\n\n **Returns:**\n **int: The cubed result**\n **'''**\n **return n ** 3**\n\n```", "```py\n**import cube**\n**import unittest**\n\n**class TestCube(unittest.TestCase):**\n **def test_0(self):**\n **self.assertEqual(cube.cube(0), 0)**\n\n **def test_1(self):**\n **self.assertEqual(cube.cube(1), 1)**\n\n **def test_2(self):**\n **self.assertEqual(cube.cube(2), 8)**\n\n **def test_3(self):**\n **self.assertEqual(cube.cube(3), 27)**\n\n **def test_no_arguments(self):**\n **with self.assertRaises(TypeError):**\n **cube.cube()**\n\n **def test_exception_str(self):**\n **with self.assertRaises(TypeError):**\n **cube.cube('x')**\n\n**if __name__ == '__main__':**\n **unittest.main()**\n\n```", "```py\n**# python test_cube.py -v**\n**test_0 (__main__.TestCube) ... ok**\n**test_1 (__main__.TestCube) ... ok**\n**test_2 (__main__.TestCube) ... ok**\n**test_3 (__main__.TestCube) ... ok**\n**test_exception_str (__main__.TestCube) ... ok**\n**test_no_arguments (__main__.TestCube) ... ok**\n\n**----------------------------------------------------------------------**\n**Ran 6 tests in 0.001s**\n\n**OK**\n\n```", "```py\n**# python -m unittest -v test_cube.py**\n**test_0 (test_cube.TestCube) ... ok**\n**test_1 (test_cube.TestCube) ... ok**\n**test_2 (test_cube.TestCube) ... ok**\n**test_3 (test_cube.TestCube) ... ok**\n**test_exception_str (test_cube.TestCube) ... ok**\n**test_no_arguments (test_cube.TestCube) ... ok**\n\n**----------------------------------------------------------------------**\n**Ran 6 tests in 0.001s**\n\n**OK**\n\n```", "```py\n**# py.test -v test_cube.py**\n**====================== test session starts ======================**\n**platform darwin -- Python 3.5.1, pytest-2.8.5, py-1.4.31, pluggy-0.3.1 -- python3.5**\n**cachedir: ../.cache**\n**rootdir: code, inifile: pytest.ini**\n**collected 6 items**\n\n**test_cube.py::TestCube::test_0 PASSED**\n**test_cube.py::TestCube::test_1 PASSED**\n**test_cube.py::TestCube::test_2 PASSED**\n**test_cube.py::TestCube::test_3 PASSED**\n**test_cube.py::TestCube::test_exception_str PASSED**\n**test_cube.py::TestCube::test_no_arguments PASSED**\n\n**=================== 6 passed in 0.02 seconds ====================**\n\n```", "```py\n**# nosetests -v test_cube.py**\n**test_0 (test_cube.TestCube) ... ok**\n**test_1 (test_cube.TestCube) ... ok**\n**test_2 (test_cube.TestCube) ... ok**\n**test_3 (test_cube.TestCube) ... ok**\n**test_exception_str (test_cube.TestCube) ... ok**\n**test_no_arguments (test_cube.TestCube) ... ok**\n\n**----------------------------------------------------------------------**\n**Ran 6 tests in 0.001s**\n\n**OK**\n\n```", "```py\n**# python test_cube.py -v**\n**test_0 (__main__.TestCube) ... ok**\n**test_1 (__main__.TestCube) ... ok**\n**test_2 (__main__.TestCube) ... FAIL**\n**test_3 (__main__.TestCube) ... FAIL**\n**test_exception_str (__main__.TestCube) ... ok**\n**test_no_arguments (__main__.TestCube) ... ok**\n\n**======================================================================**\n**FAIL: test_2 (__main__.TestCube)**\n**----------------------------------------------------------------------**\n**Traceback (most recent call last):**\n **File \"test_cube.py\", line 13, in test_2**\n **self.assertEqual(cube.cube(2), 8)**\n**AssertionError: 4 != 8**\n\n**======================================================================**\n**FAIL: test_3 (__main__.TestCube)**\n**----------------------------------------------------------------------**\n**Traceback (most recent call last):**\n **File \"test_cube.py\", line 16, in test_3**\n **self.assertEqual(cube.cube(3), 27)**\n**AssertionError: 9 != 27**\n\n**----------------------------------------------------------------------**\n**Ran 6 tests in 0.001s**\n\n**FAILED (failures=2)**\n\n```", "```py\n**# py.test -v test_cube.py**\n**======================= test session starts ========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.5, py-1.4.31, pluggy-0.3.1 -- python3.5**\n**cachedir: ../.cache**\n**rootdir: code, inifile: pytest.ini**\n**collected 6 items**\n\n**test_cube.py::TestCube::test_0 PASSED**\n**test_cube.py::TestCube::test_1 PASSED**\n**test_cube.py::TestCube::test_2 FAILED**\n**test_cube.py::TestCube::test_3 FAILED**\n**test_cube.py::TestCube::test_exception_str PASSED**\n**test_cube.py::TestCube::test_no_arguments PASSED**\n\n**============================= FAILURES =============================**\n**_________________________ TestCube.test_2 __________________________**\n\n**self = <test_cube.TestCube testMethod=test_2>**\n\n **def test_2(self):**\n**>       self.assertEqual(cube.cube(2), 8)**\n**E       AssertionError: 4 != 8**\n\n**test_cube.py:13: AssertionError**\n**_________________________ TestCube.test_3 __________________________**\n\n**self = <test_cube.TestCube testMethod=test_3>**\n\n **def test_3(self):**\n**>       self.assertEqual(cube.cube(3), 27)**\n**E       AssertionError: 9 != 27**\n\n**test_cube.py:16: AssertionError**\n**================= 2 failed, 4 passed in 0.03 seconds ================**\n\n```", "```py\nimport cube\nimport pytest\nimport unittest\n\nclass TestCube(unittest.TestCase):\n    def test_0(self):\n        self.assertEqual(cube.cube(0), 0)\n\n    def test_1(self):\n        self.assertEqual(cube.cube(1), 1)\n\n    def test_2(self):\n        self.assertEqual(cube.cube(2), 8)\n\n    def test_3(self):\n        self.assertEqual(cube.cube(3), 27)\n\n    def test_no_arguments(self):\n        with self.assertRaises(TypeError):\n            cube.cube()\n\n    def test_exception_str(self):\n        with self.assertRaises(TypeError):\n            cube.cube('x')\n\nclass TestPyCube(object):\n    def test_0(self):\n        assert cube.cube(0) == 0\n\n    def test_1(self):\n        assert cube.cube(1) == 1\n\n    def test_2(self):\n        assert cube.cube(2) == 8\n\n    def test_3(self):\n        assert cube.cube(3) == 27\n\n    def test_no_arguments(self):\n        with pytest.raises(TypeError):\n            cube.cube()\n\n    def test_exception_str(self):\n        with pytest.raises(TypeError):\n            cube.cube('x')\n```", "```py\n**============================= FAILURES =============================**\n**_________________________ TestCube.test_2 __________________________**\n\n**self = <test_cube.TestCube testMethod=test_2>**\n\n **def test_2(self):**\n**>       self.assertEqual(cube.cube(2), 8)**\n**E       AssertionError: 4 != 8**\n\n**test_cube.py:14: AssertionError**\n**_________________________ TestCube.test_3 __________________________**\n\n**self = <test_cube.TestCube testMethod=test_3>**\n\n **def test_3(self):**\n**>       self.assertEqual(cube.cube(3), 27)**\n**E       AssertionError: 9 != 27**\n\n**test_cube.py:17: AssertionError**\n**________________________ TestPyCube.test_2 _________________________**\n\n**self = <test_cube.TestPyCube object at 0x107c7bef0>**\n\n **def test_2(self):**\n**>       assert cube.cube(2) == 8**\n**E       assert 4 == 8**\n**E        +  where 4 = <function cube at 0x107bb7c80>(2)**\n**E        +    where <function cube at 0x107bb7c80> = cube.cube**\n\n**test_cube.py:36: AssertionError**\n**________________________ TestPyCube.test_3 _________________________**\n\n**self = <test_cube.TestPyCube object at 0x107c56a90>**\n\n **def test_3(self):**\n**>       assert cube.cube(3) == 27**\n**E       assert 9 == 27**\n**E        +  where 9 = <function cube at 0x107bb7c80>(3)**\n**E        +    where <function cube at 0x107bb7c80> = cube.cube**\n\n**test_cube.py:39: AssertionError**\n**================ 4 failed, 8 passed in 0.05 seconds ================**\n\n```", "```py\nclass Spam(object):\n    def __init__(self, count):\n        self.count = count\n\n    def __eq__(self, other):\n        return self.count == other.count\n\ndef test_spam_equal_correct():\n    a = Spam(5)\n    b = Spam(5)\n\n    assert a == b\n\ndef test_spam_equal_broken():\n    a = Spam(5)\n    b = Spam(10)\n\n    assert a == b\n```", "```py\n**============================= FAILURES =============================**\n**______________________ test_spam_equal_broken ______________________**\n\n **def test_spam_equal_broken():**\n **a = Spam(5)**\n **b = Spam(10)**\n\n**>       assert a == b**\n**E       assert <test_spam.Spam object at 0x105b484e0> == <test_spam.Spam object at 0x105b48518>**\n\n**test_spam.py:20: AssertionError**\n**================ 1 failed, 1 passed in 0.01 seconds ================**\n\n```", "```py\nimport test_spam\n\ndef pytest_assertrepr_compare(config, op, left, right):\n    left_spam = isinstance(left, test_spam.Spam)\n    right_spam = isinstance(right, test_spam.Spam)\n    if left_spam and right_spam and op == '==':\n        return [\n            'Comparing Spam instances:',\n            '    counts: %s != %s' % (left.count, right.count),\n        ]\n```", "```py\n**============================= FAILURES =============================**\n**______________________ test_spam_equal_broken ______________________**\n\n **def test_spam_equal_broken():**\n **a = Spam(5)**\n **b = Spam(10)**\n\n**>       assert a == b**\n**E       assert Comparing Spam instances:**\n**E             counts: 5 != 10**\n\n**test_spam.py:20: AssertionError**\n**================ 1 failed, 1 passed in 0.01 seconds ================**\n\n```", "```py\nimport cube\nimport pytest\n\ncubes = (\n    (0, 0),\n    (1, 1),\n    (2, 8),\n    (3, 27),\n)\n\n@pytest.mark.parametrize('n,expected', cubes)\ndef test_cube(n, expected):\n    assert cube.cube(n) == expected\n```", "```py\n**============================= FAILURES =============================**\n**__________________________ test_cube[2-8] __________________________**\n\n**n = 2, expected = 8**\n\n **@pytest.mark.parametrize('n,expected', cubes)**\n **def test_cube(n, expected):**\n**>       assert cube.cube(n) == expected**\n**E       assert 4 == 8**\n**E        +  where 4 = <function cube at 0x106576268>(2)**\n**E        +    where <function cube at 0x106576268> = cube.cube**\n\n**test_cube.py:15: AssertionError**\n**_________________________ test_cube[3-27] __________________________**\n\n**n = 3, expected = 27**\n\n **@pytest.mark.parametrize('n,expected', cubes)**\n **def test_cube(n, expected):**\n**>       assert cube.cube(n) == expected**\n**E       assert 9 == 27**\n**E        +  where 9 = <function cube at 0x106576268>(3)**\n**E        +    where <function cube at 0x106576268> = cube.cube**\n\n**test_cube.py:15: AssertionError**\n**================ 2 failed, 2 passed in 0.02 seconds ================**\n\n```", "```py\n**# py.test --quiet --fixtures**\n**cache**\n **Return a cache object that can persist state between testing sessions.**\n\n **cache.get(key, default)**\n **cache.set(key, value)**\n\n **Keys must be a ``/`` separated value, where the first part is usually the**\n **name of your plugin or application to avoid clashes with other cache users.**\n\n **Values can be any object handled by the json stdlib module.**\n**capsys**\n **enables capturing of writes to sys.stdout/sys.stderr and makes**\n **captured output available via ``capsys.readouterr()`` method calls**\n **which return a ``(out, err)`` tuple.**\n**capfd**\n **enables capturing of writes to file descriptors 1 and 2 and makes**\n **captured output available via ``capfd.readouterr()`` method calls**\n **which return a ``(out, err)`` tuple.**\n**record_xml_property**\n **Fixture that adds extra xml properties to the tag for the calling test.**\n **The fixture is callable with (name, value), with value being automatically**\n **xml-encoded.**\n**monkeypatch**\n **The returned ``monkeypatch`` funcarg provides these**\n **helper methods to modify objects, dictionaries or os.environ::**\n\n **monkeypatch.setattr(obj, name, value, raising=True)**\n **monkeypatch.delattr(obj, name, raising=True)**\n **monkeypatch.setitem(mapping, name, value)**\n **monkeypatch.delitem(obj, name, raising=True)**\n **monkeypatch.setenv(name, value, prepend=False)**\n **monkeypatch.delenv(name, value, raising=True)**\n **monkeypatch.syspath_prepend(path)**\n **monkeypatch.chdir(path)**\n\n **All modifications will be undone after the requesting**\n **test function has finished. The ``raising``**\n **parameter determines if a KeyError or AttributeError**\n **will be raised if the set/deletion operation has no target.**\n**pytestconfig**\n **the pytest config object with access to command line opts.**\n**recwarn**\n **Return a WarningsRecorder instance that provides these methods:**\n\n *** ``pop(category=None)``: return last warning matching the category.**\n *** ``clear()``: clear list of warnings**\n\n **See http://docs.python.org/library/warnings.html for information**\n **on warning categories.**\n**tmpdir_factory**\n **Return a TempdirFactory instance for the test session.**\n**tmpdir**\n **return a temporary directory path object**\n **which is unique to each test function invocation,**\n **created as a sub directory of the base temporary**\n **directory.  The returned object is a `py.path.local`_**\n **path object.**\n\n```", "```py\ndef test_cache(cache):\n    counter = cache.get('counter', 0)\n    assert counter < 5\n    cache.set('counter', counter + 1)\n```", "```py\nimport pytest\n\n@pytest.yield_fixture\ndef some_yield_fixture():\n    # Before the function\n    yield 'some_value_to_pass_as_parameter'\n    # After the function\n\n@pytest.fixture\ndef some_regular_fixture():\n    # Do something here\n    return 'some_value_to_pass_as_parameter'\n```", "```py\nimport pytest\nimport sqlite3\n\n@pytest.fixture(params=[':memory:'])\ndef connection(request):\n    return sqlite3.connect(request.param)\n\n@pytest.yield_fixture\ndef transaction(connection):\n    with connection:\n        yield connection\n\ndef test_insert(transaction):\n    transaction.execute('create table test (id integer)')\n    transaction.execute('insert into test values (1), (2), (3)')\n```", "```py\nimport sys\nimport logging\n\ndef test_print():\n    print('Printing to stdout')\n    print('Printing to stderr', file=sys.stderr)\n    logging.debug('Printing to debug')\n    logging.info('Printing to info')\n    logging.warning('Printing to warning')\n    logging.error('Printing to error')\n```", "```py\n**# py.test test_print.py -v**\n**======================= test session starts ========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.5, py-1.4.31, pluggy-0.3.1**\n**cachedir: ../.cache**\n**rootdir: code, inifile: pytest.ini**\n**collected 1 items**\n\n**test_print.py .**\n\n**===================== 1 passed in 0.01 seconds =====================**\n\n```", "```py\nimport sys\nimport logging\n\ndef test_print():\n    print('Printing to stdout')\n    print('Printing to stderr', file=sys.stderr)\n    logging.debug('Printing to debug')\n    logging.info('Printing to info')\n    logging.warning('Printing to warning')\n    logging.error('Printing to error')\n    assert False, 'Dying because we can'\n```", "```py\n**============================= FAILURES =============================**\n**____________________________ test_print ____________________________**\n\n **def test_print():**\n **print('Printing to stdout')**\n **print('Printing to stderr', file=sys.stderr)**\n **logging.debug('Printing to debug')**\n **logging.info('Printing to info')**\n **logging.warning('Printing to warning')**\n **logging.error('Printing to error')**\n**>       assert False, 'Dying because we can'**\n**E       AssertionError: Dying because we can**\n**E       assert False**\n\n**test_print.py:12: AssertionError**\n**------------------------ Captured stdout call ------------------------**\n**Printing to stdout**\n**------------------------ Captured stderr call ------------------------**\n**Printing to stderr**\n**WARNING:root:Printing to warning**\n**ERROR:root:Printing to error**\n**===================== 1 failed in 0.01 seconds =====================**\n\n```", "```py\n**pip install pytest-cov**\n\n```", "```py\n[report]\n# The test coverage you require, keeping to 100% is not easily\n# possible for all projects but it's a good default for new projects.\nfail_under = 100\n\n# These functions are generally only needed for debugging and/or\n# extra safety so we want to ignore them from the coverage\n# requirements\nexclude_lines =\n    # Make it possible to ignore blocks of code\n    pragma: no cover\n\n    # Generally only debug code uses this\n    def __repr__\n\n    # If a debug setting is set, skip testing\n    if self\\.debug:\n    if settings.DEBUG\n\n    # Don't worry about safety checks and expected errors\n    raise AssertionError\n    raise NotImplementedError\n\n    # This code will probably never run so don't complain about that\n    if 0:\n    if __name__ == .__main__.:\n    @abc.abstractmethod\n\n[run]\n# Make sure we require that all branches of the code is covered. So\n# both the if and the else\nbranch = True\n\n# No need to test the testing code\nomit =\n    test_*.py\n```", "```py\ndef cube_root(n):\n    '''\n    Returns the cube root of the input number\n\n    Args:\n        n (int): The number to cube root\n\n    Returns:\n        int: The cube root result\n    '''\n    if n >= 0:\n        return n ** (1/3)\n    else:\n        raise ValueError('A number larger than 0 was expected')\n```", "```py\nimport pytest\nimport cube_root\n\ncubes = (\n    (0, 0),\n    (1, 1),\n    (8, 2),\n    (27, 3),\n)\n\n@pytest.mark.parametrize('n,expected', cubes)\ndef test_cube_root(n, expected):\n    assert cube_root.cube_root(n) == expected\n```", "```py\n**# py.test test_cube_root.py --cov-report=html --cov-report=term-missing --cov=cube_root.py**\n**======================= test session starts ========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.5, py-1.4.31, pluggy-0.3.1**\n**rootdir: code, inifile: pytest.ini**\n**plugins: cov-2.2.0**\n**collected 4 items**\n\n**test_cube_root.py ....**\n**--------- coverage: platform darwin, python 3.5.1-final-0 ----------**\n**Name           Stmts   Miss Branch BrPart  Cover   Missing**\n**----------------------------------------------------------**\n**cube_root.py       4      1      2      1    67%   14, 11->14**\n**Coverage HTML written to dir htmlcov**\n**Traceback (most recent call last):**\n**...**\n**pytest_cov.plugin.CoverageError: Required test coverage of 100% not reached. Total coverage: 66.67%**\n\n```", "```py\n**#  pragma: no branch**\n\n```", "```py\nimport cube\nimport pytest\n\ncubes = (\n    (0, 0),\n    (1, 1),\n    (2, 8),\n    (3, 27),\n)\n\n@pytest.mark.parametrize('n,expected', cubes)\ndef test_cube(n, expected):\n    assert cube.cube(n) == expected\n\ndef test_cube_root_below_zero():\n    with pytest.raises(ValueError):\n        cube_root.cube_root(-1)\n```", "```py\n**# py.test test_cube_root.py --cov-report=html --cov-report=term-missing --cov=cube_root.py**\n**======================= test session starts ========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.5, py-1.4.31, pluggy-0.3.1**\n**rootdir: code, inifile: pytest.ini**\n**plugins: cov-2.2.0**\n**collected 5 items**\n\n**test_cube_root.py .....**\n**---------- coverage: platform darwin, python 3.5.1-final-0 -----------**\n**Name           Stmts   Miss Branch BrPart  Cover   Missing**\n**----------------------------------------------------------**\n**cube_root.py       4      0      2      0   100%**\n**Coverage HTML written to dir htmlcov**\n\n**===================== 5 passed in 0.03 seconds =====================**\n\n```", "```py\ndef cube_root(n):\n    '''\n    Returns the cube root of the input number\n\n    Args:\n        n (int): The number to cube root\n\n    Returns:\n        int: The cube root result\n    '''\n    if n >= 0:\n        return n ** (1 / 3)\n    else:\n        raise NotImplementedError(\n            'A number larger than 0 was expected')\n```", "```py\nimport cube_root\nimport pytest\n\ncubes = (\n    (0, 0),\n    (1, 1),\n    (8, 2),\n    (27, 3),\n)\n\n@pytest.mark.parametrize('n,expected', cubes)\ndef test_cube_root(n, expected):\n    assert cube_root.cube_root(n) == expected\n```", "```py\n**# py.test test_cube_root.py --cov-report=html --cov-report=term-missing --cov=cube_root.py**\n**======================= test session starts ========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.5, py-1.4.31, pluggy-0.3.1**\n**rootdir: code, inifile: pytest.ini**\n**plugins: cov-2.2.0**\n**collected 4 items**\n\n**test_cube_root.py ....**\n**---------- coverage: platform darwin, python 3.5.1-final-0 -----------**\n**Name           Stmts   Miss Branch BrPart  Cover   Missing**\n**----------------------------------------------------------**\n**cube_root.py       3      0      0      0   100%**\n**Coverage HTML written to dir htmlcov**\n\n**===================== 4 passed in 0.03 seconds =====================**\n\n```", "```py\n**# pip install pytest-flakes pytest-pep8**\n\n```", "```py\n\n**# py.test --flakes --pep8 cube_root.py**\n**======================= test session starts ========================**\n**platform darwin -- Python 3.5.1, pytest-2.8.5, py-1.4.31, pluggy-0.3.1**\n**rootdir: code, inifile: pytest.ini**\n**plugins: cov-2.2.0, flakes-1.0.1, pep8-1.0.6**\n**collected 2 items**\n\n**cube_root.py ..**\n\n**===================== 2 passed in 0.01 seconds =====================**\n\n```", "```py\n[pytest]\npython_files =\n    your_project_source/*.py\n    tests/*.py\n\naddopts =\n    --doctest-modules\n    --cov your_project_source\n    --cov-report term-missing\n    --cov-report html\n    --pep8\n    --flakes\n\n# W391 is the error about blank lines at the end of a file\npep8ignore =\n    *.py W391\n\n# Ignore unused imports\nflakes-ignore =\n    *.py UnusedImport\n```", "```py\nfrom unittest import mock\nimport random\n\ndef bernoulli(p):\n    return random.random() > p\n\n@mock.patch('random.random')\ndef test_bernoulli(mock_random):\n    # Test for random value of 0.1\n    mock_random.return_value = 0.1\n    assert bernoulli(0.0)\n    assert not bernoulli(0.1)\n    assert mock_random.call_count == 2\n```", "```py\nfrom unittest import mock\nimport random\n\ndef bernoulli(p):\n    return random.random() > p\n\ndef test_bernoulli():\n    with mock.patch('random.random') as mock_random:\n        mock_random.return_value = 0.1\n        assert bernoulli(0.0)\n        assert not bernoulli(0.1)\n        assert mock_random.call_count == 2\n```", "```py\nimport os\nfrom unittest import mock\n\ndef delete_file(filename):\n    while os.path.exists(filename):\n        os.unlink(filename)\n\n@mock.patch('os.path.exists', side_effect=(True, False, False))\n@mock.patch('os.unlink')\ndef test_delete_file(mock_exists, mock_unlink):\n    # First try:\n    delete_file('some non-existing file')\n\n    # Second try:\n    delete_file('some non-existing file')\n```", "```py\nimport os\n\ndef test_chdir_monkeypatch(monkeypatch):\n    monkeypatch.chdir('/dev')\n    assert os.getcwd() == '/dev'\n    monkeypatch.chdir('/')\n    assert os.getcwd() == '/'\n\ndef test_chdir():\n    original_directory = os.getcwd()\n    try:\n        os.chdir('/dev')\n        assert os.getcwd() == '/dev'\n        os.chdir('/')\n        assert os.getcwd() == '/'\n    finally:\n        os.chdir(original_directory)\n```", "```py\nimport logging\n\nlogging.debug('debug')\nlogging.info('info')\nlogging.warning('warning')\nlogging.error('error')\nlogging.critical('critical')\n```", "```py\n**# python log.py**\n**WARNING:root:warning**\n**ERROR:root:error**\n**CRITICAL:root:critical**\n\n```", "```py\nimport logging\n\nlog_format = (\n    '[%(asctime)s] %(levelname)-8s %(name)-12s %(message)s')\n\nlogging.basicConfig(\n    filename='debug.log',\n    format=log_format,\n    level=logging.DEBUG,\n)\n\nformatter = logging.Formatter(log_format)\nhandler = logging.StreamHandler()\nhandler.setLevel(logging.WARNING)\nhandler.setFormatter(formatter)\nlogging.getLogger().addHandler(handler)\n```", "```py\nlogging.debug('debug')\nlogging.info('info')\nsome_logger = logging.getLogger('some')\nsome_logger.warning('warning')\nsome_logger.error('error')\nother_logger = some_logger.getChild('other')\nother_logger.critical('critical')\n```", "```py\n**# python log.py**\n**[2015-12-02 15:56:19,449] WARNING  some         warning**\n**[2015-12-02 15:56:19,449] ERROR    some         error**\n**[2015-12-02 15:56:19,449] CRITICAL some.other   critical**\n\n```", "```py\n[2015-12-02 15:56:19,449] DEBUG    root         debug\n[2015-12-02 15:56:19,449] INFO     root         info\n[2015-12-02 15:56:19,449] WARNING  some         warning\n[2015-12-02 15:56:19,449] ERROR    some         error\n[2015-12-02 15:56:19,449] CRITICAL some.other   critical\n```", "```py\nfrom logging import config\n\nconfig.dictConfig({\n    'version': 1,\n    'formatters': {\n        'standard': {\n            'format': '[%(asctime)s] %(levelname)-8s '\n            '%(name)-12s %(message)s',\n        },\n    },\n    'handlers': {\n        'file': {\n            'filename': 'debug.log',\n            'level': 'DEBUG',\n            'class': 'logging.FileHandler',\n            'formatter': 'standard',\n        },\n        'stream': {\n            'level': 'WARNING',\n            'class': 'logging.StreamHandler',\n            'formatter': 'standard',\n        },\n    },\n    'loggers': {\n        '': {\n            'handlers': ['file', 'stream'],\n            'level': 'DEBUG',\n        },\n    },\n})\n```", "```py\n{\n    \"version\": 1,\n    \"formatters\": {\n        \"standard\": {\n            \"format\": \"[%(asctime)s] %(levelname)-8s %(name)-12s %(message)s\"\n        }\n    },\n    \"handlers\": {\n        \"file\": {\n            \"filename\": \"debug.log\",\n            \"level\": \"DEBUG\",\n            \"class\": \"logging.FileHandler\",\n            \"formatter\": \"standard\"\n        },\n        \"stream\": {\n            \"level\": \"WARNING\",\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"standard\"\n        }\n    },\n    \"loggers\": {\n        \"\": {\n            \"handlers\": [\"file\", \"stream\"],\n            \"level\": \"DEBUG\"\n        }\n    }\n}\n```", "```py\nimport json\nfrom logging import config\n\nwith open('log_config.json') as fh:\n    config.dictConfig(json.load(fh))\n```", "```py\n[formatters]\nkeys=standard\n\n[handlers]\nkeys=file,stream\n\n[loggers]\nkeys=root\n\n[formatter_standard]\nformat=[%(asctime)s] %(levelname)-8s %(name)-12s %(message)s\n\n[handler_file]\nlevel=DEBUG\nclass=FileHandler\nformatter=standard\n**args=('debug.log',)**\n\n[handler_stream]\nlevel=WARNING\nclass=StreamHandler\nformatter=standard\n**args=(sys.stderr,)**\n\n[logger_root]\nhandlers=file,stream\nlevel=DEBUG\n```", "```py\nfrom logging import config\n\nconfig.fileConfig('log_config.ini')\n```", "```py\nimport time\nimport logging\nfrom logging import config\n\nlistener = config.listen()\nlistener.start()\n\ntry:\n    while True:\n        logging.debug('debug')\n        logging.info('info')\n        some_logger = logging.getLogger('some')\n        some_logger.warning('warning')\n        some_logger.error('error')\n        other_logger = some_logger.getChild('other')\n        other_logger.critical('critical')\n\n        time.sleep(5)\n\nexcept KeyboardInterrupt:\n    # Stop listening and finish the listening thread\n    logging.config.stopListening()\n    listener.join()\n```", "```py\nimport struct\nimport socket\nfrom logging import config\n\nwith open('log_config.ini') as fh:\n    data = fh.read()\n\n# Open the socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# Connect to the server\nsock.connect(('127.0.0.1', config.DEFAULT_LOGGING_CONFIG_PORT))\n# Send the magic logging packet\nsock.send(struct.pack('>L', len(data)))\n# Send the config\nsock.send(data)\n# And close the connection again\nsock.close()\n```", "```py\n**# python log_networkconfig.py**\n**WARNING:some:warning**\n**ERROR:some:error**\n**CRITICAL:some.other:critical**\n\n```", "```py\n[2015-12-03 12:32:38,894] DEBUG    root         debug\n[2015-12-03 12:32:38,894] INFO     root         info\n```", "```py\n[formatters]\nkeys=standard\n\n[handlers]\nkeys=file,stream\n\n[loggers]\n**keys=root,some**\n\n[formatter_standard]\nformat=[%(asctime)s] %(levelname)-8s %(name)-12s %(message)s\n\n[handler_file]\nlevel=DEBUG\nclass=FileHandler\nformatter=standard\nargs=('debug.log',)\n\n[handler_stream]\nlevel=WARNING\nclass=StreamHandler\nformatter=standard\nargs=(sys.stderr,)\n\n[logger_root]\nhandlers=file,stream\nlevel=DEBUG\n\n**[logger_some]**\n**level=DEBUG**\n**qualname=some**\n**handlers=**\n\n```", "```py\n**# python log_networkconfig.py**\n**WARNING:some:warning**\n**ERROR:some:error**\n**CRITICAL:some.other:critical**\n**[2015-12-03 12:42:05,621] WARNING  some         warning**\n**[2015-12-03 12:42:05,622] ERROR    some         error**\n**[2015-12-03 12:42:05,622] CRITICAL some.other   critical**\n\n```", "```py\n[logger_some]\nhandlers=file,stream\nlevel=DEBUG\nqualname=some\npropagate=0\n```", "```py\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nclass Spam(object):\n    def __init__(self, count):\n        self.logger = logger.getChild(self.__class__.__name__)\n```", "```py\nimport logging\n\nlogger = logging.getLogger('main_module.sub_module')\nlogger.addHandler(logging.FileHandler('sub_module.log'))\n```", "```py\nimport logging\n\nlogger = logging.getLogger('main_module.sub_module')\nlogger.setLevel(logging.DEBUG)\n```", "```py\nimport logging\n\nlogger = logging.getLogger()\nexception = 'Oops...'\nlogger.error('Some horrible error: %r', exception)\n```", "```py\nimport logging\n\nlogger = logging.getLogger()\nlogger.error('simple error', extra=dict(spam='some spam'))\n```", "```py\nimport logging\n\nlogging.basicConfig(format='%(spam)s: %(message)s')\nlogger = logging.getLogger()\nlogger.error('the message', extra=dict(spam='some spam'))\n```", "```py\n**# python test_spam.py**\n**some spam: the message**\n\n```", "```py\nimport logging\n\nlogger = logging.getLogger()\n\ntry:\n    raise RuntimeError('Not enough spam')\nexcept:\n    logger.exception('Got an exception')\n\nlogger.error('And an error')\n```", "```py\n**# python test_spam.py**\n**Got an exception**\n**Traceback (most recent call last):**\n **File \"test_spam.py\", line 6, in <module>**\n **raise RuntimeError('Not enough spam')**\n**RuntimeError: Not enough spam**\n**And an error**\n\n```"]