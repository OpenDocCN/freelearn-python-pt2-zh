["```py\nmy_list = []\n\nif 'd' not in my_list:\n    my_list.append('d')\n```", "```py\nfrom doctest import IGNORE_EXCEPTION_DETAIL\nfrom doctest import REPORT_ONLY_FIRST_FAILURE\n```", "```py\nimport os\nimport sys\n\nsys.exit(os.EX_SOFTWARE)\n```", "```py\nimport doctest\nTEST_OPTIONS = (doctest.ELLIPSIS |\n                doctest.NORMALIZE_WHITESPACE | \n                doctest.REPORT_ONLY_FIRST_FAILURE)\n```", "```py\n# config.py\nSQL_USER = 'tarek'\nSQL_PASSWORD = 'secret'\nSQL_URI = 'postgres://%s:%s@localhost/db' % (\n    SQL_USER, SQL_PASSWORD\n)\nMAX_THREADS = 4\n```", "```py\nOPTIONS = {}\n\ndef register_option(name):\n    return OPTIONS.setdefault(name, 1 << len(OPTIONS))\n\ndef has_option(options, name):\n    return bool(options & name)\n\n# now defining options\nBLUE = register_option('BLUE')\nRED = register_option('RED')\nWHITE = register_option('WHITE')\n```", "```py\n**>>> # let's try them**\n**>>> SET = BLUE | RED**\n**>>> has_option(SET, BLUE)**\n**True**\n**>>> has_option(SET, WHITE)**\n**False**\n\n```", "```py\n_observers = []\n\ndef add_observer(observer):\n    _observers.append(observer)\n\ndef get_observers():\n    \"\"\"Makes sure _observers cannot be modified.\"\"\"\n    return tuple(_observers)\n```", "```py\nclass Citizen(object):\n    def __init__(self):\n        self._message = 'Rosebud...'\n\n    def _get_message(self):\n        return self._message\n\n    kane = property(_get_message)\n```", "```py\nclass UnforgivingElephant(object):\n    def __init__(self, name):\n        self.name = name\n        self._people_to_stomp_on = []\n\n    def get_slapped_by(self, name):\n        self._people_to_stomp_on.append(name)\n        print('Ouch!')\n\n    def revenge(self):\n        print('10 years later...')\n        for person in self._people_to_stomp_on:\n            print('%s stomps on %s' % (self.name, person))\n```", "```py\n**>>> joe = UnforgivingElephant('Joe')**\n**>>> joe.get_slapped_by('Tarek')**\n**Ouch!**\n**>>> joe.get_slapped_by('Bill')**\n**Ouch!**\n**>>> joe.revenge()**\n**10 years later...**\n**Joe stomps on Tarek**\n**Joe stomps on Bill**\n\n```", "```py\nclass Base(object):\n    def __secret(self):\n        print(\"don't tell\")\n\n    def public(self):\n        self.__secret()\n\nclass Derived(Base):\n    def __secret(self):\n        print(\"never ever\")\n```", "```py\n**>>> Base.__secret**\n**Traceback (most recent call last):**\n **File \"<input>\", line 1, in <module>**\n**AttributeError: type object 'Base' has no attribute '__secret'**\n**>>> dir(Base)**\n**['_Base__secret', ..., 'public']**\n**>>> Derived().public()**\n**don't tell**\n\n```", "```py\nclass Base:\n    def _Base_secret(self):  # don't do this !!!\n        print(\"you told it ?\")\n```", "```py\nclass WeirdInt(int):\n    def __add__(self, other):\n        return int.__add__(self, other) + 1\n\n    def __repr__(self):\n        return '<weirdo %d>' % self\n\n    # public API\n    def do_this(self):\n        print('this')\n\n    def do_that(self):\n        print('that')\n```", "```py\nclass BadHabits:\n    def __my_method__(self):\n        print('ok')\n```", "```py\nclass Connection:\n    _connected = []\n\n    def connect(self, user):\n        self._connected.append(user)\n\n    @property\n\n    def connected_people(self):\n        return ', '.join(self._connected)\n\n```", "```py\n**>>> connection = Connection()**\n**>>> connection.connect('Tarek')**\n**>>> connection.connect('Shannon')**\n**>>> print(connection.connected_people)**\n**Tarek, Shannon**\n\n```", "```py\nclass Database:\n    def open(self):\n        pass\n\nclass User:\n    pass\n```", "```py\n**>>> user = User()**\n**>>> db = Database()**\n**>>> db.open()**\n\n```", "```py\nclass DB:\n    is_connected = False\n    has_cache = False\n```", "```py\nclass DB:\n    connected_users = ['Tarek']\n    tables = {\n        'Customer': ['id', 'first_name', 'last_name']\n    }\n```", "```py\npersons_addresses = {'Bill': '6565 Monty Road', \n                     'Pamela': '45 Python street'}\npersons_addresses['Pamela']\n'45 Python street'\n```", "```py\ndef compute(data):  # too generic\n    for element in data:\n        yield element ** 2\n\ndef squares(numbers):  # better\n    for number in numbers:\n        yield number ** 2\n```", "```py\n**>>> def bad_citizen():**\n**...     os = 1**\n**...     import pdb; pdb.set_trace()**\n**...     return os**\n**...**\n**>>> bad_citizen()**\n**> <stdin>(4)bad_citizen()**\n**(Pdb) os**\n**1**\n**(Pdb) import os**\n**(Pdb) c**\n**<module 'os' from '/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/os.pyc'>**\n\n```", "```py\ndef xapian_query(terms, or_=True):\n    \"\"\"if or_ is true, terms are combined with the OR clause\"\"\"\n    ...\n```", "```py\ndef factory(klass, *args, **kwargs):\n    return klass(*args, **kwargs)\n```", "```py\nclass Service:  # version 1\n    def _query(self, query, type):\n        print('done')\n\n    def execute(self, query):\n        self._query(query, 'EXECUTE')\n\n**>>> Service().execute('my query')**\n**done**\n\nimport logging\n\nclass Service(object):  # version 2\n    def _query(self, query, type, logger):\n        logger('done')\n\n    def execute(self, query, logger=logging.info):\n        self._query(query, 'EXECUTE', logger)\n\n**>>> Service().execute('my query')    # old-style call**\n**>>> Service().execute('my query', logging.warning)**\n**WARNING:root:done**\n\n```", "```py\ndef division(dividend, divisor):\n    assert isinstance(dividend, (int, float))\n    assert isinstance(divisor, (int, float))\n    return dividend / divisor\n\n**>>> division(2, 4)**\n**0.5**\n**>>> division(2, None)**\n**Traceback (most recent call last):**\n **File \"<input>\", line 1, in <module>**\n **File \"<input>\", line 3, in division**\n**AssertionError**\n\n```", "```py\ndef fuzzy_thing(**kwargs):\n\n    if 'do_this' in kwargs:\n        print('ok i did')\n\n    if 'do_that' in kwargs:\n        print('that is done')\n\n    print('errr... ok')\n\n**>>> fuzzy_thing(do_this=1)**\n**ok i did**\n**errr... ok**\n**>>> fuzzy_thing(do_that=1)**\n**that is done**\n**errr... ok**\n**>>> fuzzy_thing(hahaha=1)**\n**errr... ok**\n\n```", "```py\ndef sum(*args):  # okay\n    total = 0\n    for arg in args:\n        total += arg\n    return total\n\ndef sum(sequence):  # better!\n    total = 0\n    for arg in sequence:\n        total += arg\n    return total\n```", "```py\ndef make_sentence(**kwargs):\n    noun = kwargs.get('noun', 'Bill')\n    verb = kwargs.get('verb', 'is')\n    adj = kwargs.get('adjective', 'happy')\n    return '%s %s %s' % (noun, verb, adj)\n\ndef make_sentence(noun='Bill', verb='is', adjective='happy'):\n    return '%s %s %s' % (noun, verb, adjective)\n```", "```py\ndef log_request(request):  # version 1\n    print(request.get('HTTP_REFERER', 'No referer'))\n\ndef log_request(request):  # version 2\n    print(request.get('HTTP_REFERER', 'No referer'))\n    print(request.get('HTTP_HOST', 'No host'))\n```", "```py\nimport logging\n\ndef log(**context):\n    logging.info('Context is:\\n%s\\n' % str(context))\n```", "```py\n**>>> SMTP.smtp_send()  # redundant information in the namespace**\n**>>> SMTP.send()       # more readable and mnemonic** \n\n```", "```py\nimport smtp**lib**\nimport url**lib**\nimport telnet**lib**\n\n```", "```py\nfrom widgets.stringwidgets import TextWidget  # bad\nfrom widgets.strings import TextWidget        # better\n```", "```py\nfrom .module1 import feature1, feature2\nfrom .module2 import feature3\n```", "```py\n**from foo import feature1, feature2, feature3**\n\n```", "```py\n**$ pip install pylint**\n\n```", "```py\n**$ wget -O bootstrap.py https://bootstrap.pypa.io/bootstrap-buildout.py -q**\n**$ pylint bootstrap.py**\n**No config file found, using default configuration**\n*************** Module bootstrap**\n**C: 76, 0: Unnecessary parens after 'print' keyword (superfluous-parens)**\n**C: 31, 0: Invalid constant name \"tmpeggs\" (invalid-name)**\n**C: 33, 0: Invalid constant name \"usage\" (invalid-name)**\n**C: 45, 0: Invalid constant name \"parser\" (invalid-name)**\n**C: 74, 0: Invalid constant name \"options\" (invalid-name)**\n**C: 74, 9: Invalid constant name \"args\" (invalid-name)**\n**C: 84, 4: Import \"from urllib.request import urlopen\" should be placed at the top of the module (wrong-import-position)**\n\n**...**\n\n**Global evaluation**\n**-----------------**\n**Your code has been rated at 6.12/10**\n\n```", "```py\n**$ pylint --generate-rcfile > .pylintrc**\n\n```", "```py\n**$ pip install pep8**\n\n```", "```py\n**$ wget -O bootstrap.py https://bootstrap.pypa.io/bootstrap-buildout.py -q**\n**$ pep8 bootstrap.py**\n**bootstrap.py:118:1: E402 module level import not at top of file**\n**bootstrap.py:119:1: E402 module level import not at top of file**\n**bootstrap.py:190:1: E402 module level import not at top of file**\n**bootstrap.py:200:1: E402 module level import not at top of file**\n\n```"]