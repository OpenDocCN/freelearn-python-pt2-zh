["```py\n**>>> def test_speed():**\n**...     import time**\n**...     start = time.time()**\n**...     the_code()**\n**...     end = time.time() - start**\n**...     assert end < 10, \\**\n**...     \"sorry this code should not take 10 seconds !\"**\n**...** \n\n```", "```py\nimport time\n\ndef medium():\n    time.sleep(0.01)\n\ndef light():\n    time.sleep(0.001)\n\ndef heavy():\n    for i in range(100):\n        light()\n        medium()\n        medium()\n    time.sleep(2)\n\ndef main():\n    for i in range(2):\n        heavy()\n\nif __name__ == '__main__':\n    main()\n```", "```py\n**$ python3 -m cProfile myapp.py**\n **1208 function calls in 8.243 seconds**\n\n **Ordered by: standard name**\n\n **ncalls  tottime  percall  cumtime  percall filename:lineno(function)**\n **2    0.001    0.000    8.243    4.121 myapp.py:13(heavy)**\n **1    0.000    0.000    8.243    8.243 myapp.py:2(<module>)**\n **1    0.000    0.000    8.243    8.243 myapp.py:21(main)**\n **400    0.001    0.000    4.026    0.010 myapp.py:5(medium)**\n **200    0.000    0.000    0.212    0.001 myapp.py:9(light)**\n **1    0.000    0.000    8.243    8.243 {built-in method exec}**\n **602    8.241    0.014    8.241    0.014 {built-in method sleep}**\n\n```", "```py\n**>>> import cProfile**\n**>>> from myapp import main**\n**>>> profiler = cProfile.Profile()**\n**>>> profiler.runcall(main)**\n**>>> profiler.print_stats()**\n **1206 function calls in 8.243 seconds**\n\n **Ordered by: standard name**\n\n **ncalls  tottime  percall  cumtime  percall file:lineno(function)**\n **2    0.001    0.000    8.243    4.121 myapp.py:13(heavy)**\n **1    0.000    0.000    8.243    8.243 myapp.py:21(main)**\n **400    0.001    0.000    4.026    0.010 myapp.py:5(medium)**\n **200    0.000    0.000    0.212    0.001 myapp.py:9(light)**\n **602    8.241    0.014    8.241    0.014 {built-in method sleep}**\n\n```", "```py\n**>>> import pstats**\n**>>> import cProfile**\n**>>> from myapp import main**\n**>>> cProfile.run('main()', 'myapp.stats')**\n**>>> stats = pstats.Stats('myapp.stats')**\n**>>> stats.total_calls**\n**1208**\n**>>> stats.sort_stats('time').print_stats(3)**\n**Mon Apr  4 21:44:36 2016    myapp.stats**\n\n **1208 function calls in 8.243 seconds**\n\n **Ordered by: internal time**\n **List reduced from 8 to 3 due to restriction <3>**\n\n **ncalls  tottime  percall  cumtime  percall file:lineno(function)**\n **602    8.241    0.014    8.241    0.014 {built-in method sleep}**\n **400    0.001    0.000    4.025    0.010 myapp.py:5(medium)**\n **2    0.001    0.000    8.243    4.121 myapp.py:13(heavy)**\n\n```", "```py\n**>>> stats.print_callees('medium')**\n **Ordered by: internal time**\n **List reduced from 8 to 1 due to restriction <'medium'>**\n\n**Function           called...**\n **ncalls  tottime  cumtime**\n**myapp.py:5(medium) ->  400    4.025    4.025  {built-in method sleep}**\n\n**>>> stats.print_callees('light')**\n **Ordered by: internal time**\n **List reduced from 8 to 1 due to restriction <'light'>**\n\n**Function           called...**\n **ncalls  tottime  cumtime**\n**myapp.py:9(light)  ->  200    0.212    0.212  {built-in method sleep}**\n\n```", "```py\n**$ gprof2dot.py -f pstats myapp.stats | dot -Tpng -o output.png**\n\n```", "```py\n**>>> import tempfile, os, cProfile, pstats**\n**>>> def profile(column='time', list=5):**\n**...     def _profile(function):**\n**...         def __profile(*args, **kw):**\n**...             s = tempfile.mktemp()**\n**...             profiler = cProfile.Profile()**\n**...             profiler.runcall(function, *args, **kw)**\n**...             profiler.dump_stats(s)**\n**...             p = pstats.Stats(s)**\n**...             p.sort_stats(column).print_stats(list)**\n**...         return __profile**\n**...     return _profile**\n**...**\n**>>> from myapp import main**\n**>>> @profile('time', 6)**\n**... def main_profiled():**\n**...     return main()**\n**...**\n**>>> main_profiled()**\n**Mon Apr  4 22:01:01 2016    /tmp/tmpvswuovz_**\n\n **1207 function calls in 8.243 seconds**\n\n **Ordered by: internal time**\n **List reduced from 7 to 6 due to restriction <6>**\n\n **ncalls  tottime  percall  cumtime  percall file:lineno(function)**\n **602    8.241    0.014    8.241    0.014 {built-in method sleep}**\n **400    0.001    0.000    4.026    0.010 myapp.py:5(medium)**\n **2    0.001    0.000    8.243    4.121 myapp.py:13(heavy)**\n **200    0.000    0.000    0.213    0.001 myapp.py:9(light)**\n **1    0.000    0.000    8.243    8.243 myapp.py:21(main)**\n **1    0.000    0.000    8.243    8.243 <stdin>:1(main_profiled)**\n\n**>>> from myapp import light**\n**>>> stats = profile()(light)**\n**>>> stats()**\n**Mon Apr  4 22:01:57 2016    /tmp/tmpnp_zk7dl**\n\n **3 function calls in 0.001 seconds**\n\n **Ordered by: internal time**\n\n **ncalls  tottime  percall  cumtime  percall file:lineno(function)**\n **1    0.001    0.001    0.001    0.001 {built-in method sleep}**\n **1    0.000    0.000    0.001    0.001 myapp.py:9(light)**\n\n```", "```py\n**>>> from myapp import light**\n**>>> import timeit**\n**>>> t = timeit.Timer('main()')**\n**>>> t.timeit(number=5)**\n**10000000 loops, best of 3: 0.0269 usec per loop**\n**10000000 loops, best of 3: 0.0268 usec per loop**\n**10000000 loops, best of 3: 0.0269 usec per loop**\n**10000000 loops, best of 3: 0.0268 usec per loop**\n**10000000 loops, best of 3: 0.0269 usec per loop**\n**5.6196951866149902**\n\n```", "```py\n**$ python3 -m timeit -s 'a = map(str, range(1000))' '\"\".join(a)'**\n**1000000 loops, best of 3: 0.497 usec per loop**\n\n**$ python3 -m timeit -s 'a = map(str, range(1000)); s=\"\"' 'for i in a: s += i'**\n**10000000 loops, best of 3: 0.0808 usec per loop**\n\n```", "```py\n**$ python3 -m timeit -s 'a = [str(i) for i in range(10000)]' 's=\"\".join(a)'**\n**10000 loops, best of 3: 128 usec per loop**\n\n**$ python3 -m timeit -s 'a = [str(i) for i in range(10000)]' '**\n**>s = \"\"**\n**>for i in a:**\n**>    s += i**\n**>'**\n**1000 loops, best of 3: 1.38 msec per loop**\n\n```", "```py\n**>>> from test import pystone**\n**>>> pystone.pystones()**\n**(1.0500000000000007, 47619.047619047589)**\n\n```", "```py\n**>>> from test import pystone**\n**>>> benchtime, pystones = pystone.pystones()**\n**>>> def seconds_to_kpystones(seconds):**\n**...     return (pystones*seconds) / 1000** \n**...** \n**...** \n**>>> seconds_to_kpystones(0.03)**\n**1.4563106796116512**\n**>>> seconds_to_kpystones(1)**\n**48.543689320388381**\n**>>> seconds_to_kpystones(2)**\n**97.087378640776762**\n\n```", "```py\n**>>> def my_function(argument={}):  # bad practice**\n**...     if '1' in argument:**\n**...         argument['1'] = 2**\n**...     argument['3'] = 4**\n**...     return argument**\n**...** \n**>>> my_function()**\n**{'3': 4}**\n**>>> res = my_function()**\n**>>> res['4'] = 'I am still alive!'**\n**>>> print my_function()**\n**{'3': 4, '4': 'I am still alive!'}**\n\n```", "```py\n**>>> def my_function(argument=None):  # better practice**\n**...     if argument is None:**\n**...         argument = {}  # a fresh dict is created everytime**\n**...     if '1' in argument:**\n**...         argument['1'] = 2**\n**...     argument['3'] = 4**\n**...     return argument**\n**...** \n**>>> my_function()**\n**{'3': 4}**\n**>>> res = my_function()**\n**>>> res['4'] = 'I am still alive!'**\n**>>> print my_function()**\n**{'3': 4}**\n\n```", "```py\n**>>> import objgraph**\n**>>> objgraph.show_most_common_types()**\n**function                   1910**\n**dict                       1003**\n**wrapper_descriptor         989**\n**tuple                      837**\n**weakref                    742**\n**method_descriptor          683**\n**builtin_function_or_method 666**\n**getset_descriptor          338**\n**set                        323**\n**member_descriptor          305**\n**>>> objgraph.count('list')**\n**266**\n**>>> objgraph.typestats(objgraph.get_leaking_objects())**\n**{'Gt': 1, 'AugLoad': 1, 'GtE': 1, 'Pow': 1, 'tuple': 2, 'AugStore': 1, 'Store': 1, 'Or': 1, 'IsNot': 1, 'RecursionError': 1, 'Div': 1, 'LShift': 1, 'Mod': 1, 'Add': 1, 'Invert': 1, 'weakref': 1, 'Not': 1, 'Sub': 1, 'In': 1, 'NotIn': 1, 'Load': 1, 'NotEq': 1, 'BitAnd': 1, 'FloorDiv': 1, 'Is': 1, 'RShift': 1, 'MatMult': 1, 'Eq': 1, 'Lt': 1, 'dict': 341, 'list': 7, 'Param': 1, 'USub': 1, 'BitOr': 1, 'BitXor': 1, 'And': 1, 'Del': 1, 'UAdd': 1, 'Mult': 1, 'LtE': 1}**\n\n```", "```py\nimport objgraph\n\ndef example():\n    x = []\n    y = [x, [x], dict(x=x)]\n\n    objgraph.show_refs(\n        (x, y),\n        filename='show_refs.png',\n        refcounts=True\n    )\n    objgraph.show_backrefs(\n        (x, y),\n        filename='show_backrefs.png',\n        refcounts=True\n    )\n\nif __name__ == \"__main__\":\n    example()\n```", "```py\nx = []\ny = [x]\nx.append(y)\n```", "```py\nimport gc\nimport platform\nimport objgraph\n\nclass WithDel(list):\n    \"\"\" list subclass with custom __del__ implementation \"\"\"\n    def __del__(self):\n        pass\n\ndef main():\n    x = WithDel()\n    y = []\n    z = []\n\n    x.append(y)\n    y.append(z)\n    z.append(x)\n\n    del x, y, z\n\n    print(\"unreachable prior collection: %s\" % gc.collect())\n    print(\"unreachable after collection: %s\" % len(gc.garbage))\n    print(\"WithDel objects count:        %s\" %\n          objgraph.count('WithDel'))\n\nif __name__ == \"__main__\":\n    print(\"Python version: %s\" % platform.python_version())\n    print()\n    main()\n```", "```py\n**$ python3.3 with_del.py** \n**Python version: 3.3.5**\n\n**unreachable prior collection: 3**\n**unreachable after collection: 1**\n**WithDel objects count:        1**\n\n```", "```py\n**$ python3.5 with_del.py** \n**Python version: 3.5.1**\n\n**unreachable prior collection: 3**\n**unreachable after collection: 0**\n**WithDel objects count:        0**\n\n```", "```py\ndef main():\n    x = WithDel()\n    y = []\n    z = []\n\n    x.append(y)\n    y.append(z)\n    z.append(x)\n\n    del x, y, z\n\n    print(\"unreachable prior collection: %s\" % gc.collect())\n    print(\"unreachable after collection: %s\" % len(gc.garbage))\n    print(\"WithDel objects count:        %s\" %\n          objgraph.count('WithDel'))\n\n    objgraph.show_backrefs(\n        objgraph.by_type('WithDel'),\n        filename='after-gc.png'\n    )\n```"]