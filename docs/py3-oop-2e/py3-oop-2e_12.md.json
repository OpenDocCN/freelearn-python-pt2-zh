["```py\nimport unittest\n\n**class CheckNumbers(unittest.TestCase):**\n    def test_int_float(self):\n **self.assertEqual(1, 1.0)**\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\n**.**\n**--------------------------------------------------------------**\n**Ran 1 test in 0.000s**\n\n**OK**\n\n```", "```py\n    def test_str_float(self):\n        self.assertEqual(1, \"1\")\n```", "```py\n**.F**\n**============================================================**\n**FAIL: test_str_float (__main__.CheckNumbers)**\n**--------------------------------------------------------------**\n**Traceback (most recent call last):**\n **File \"simplest_unittest.py\", line 8, in test_str_float**\n **self.assertEqual(1, \"1\")**\n**AssertionError: 1 != '1'**\n\n**--------------------------------------------------------------**\n**Ran 2 tests in 0.001s**\n\n**FAILED (failures=1)**\n\n```", "```py\nimport unittest\n\ndef average(seq):\n    return sum(seq) / len(seq)\n\nclass TestAverage(unittest.TestCase):\n    def test_zero(self):\n **self.assertRaises(ZeroDivisionError,**\n **average,**\n **[])**\n\n    def test_with_zero(self):\n **with self.assertRaises(ZeroDivisionError):**\n            average([])\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\nfrom collections import defaultdict\n\nclass StatsList(list):\n    def mean(self):\n        return sum(self) / len(self)\n\n    def median(self):\n        if len(self) % 2:\n            return self[int(len(self) / 2)]\n        else:\n            idx = int(len(self) / 2)\n            return (self[idx] + self[idx-1]) / 2\n\n    def mode(self):\n        freqs = defaultdict(int)\n        for item in self:\n            freqs[item] += 1\n        mode_freq = max(freqs.values())\n        modes = []\n        for item, value in freqs.items():\n            if value == mode_freq:\n                modes.append(item)\n        return modes\n```", "```py\nfrom stats import StatsList\nimport unittest\n\nclass TestValidInputs(unittest.TestCase):\n    **def setUp(self):**\n        self.stats = StatsList([1,2,2,3,3,4])\n\n    def test_mean(self):\n        self.assertEqual(self.stats.mean(), 2.5)\n\n    def test_median(self):\n        self.assertEqual(self.stats.median(), 2.5)\n        self.stats.append(4)\n        self.assertEqual(self.stats.median(), 3)\n\n    def test_mode(self):\n        self.assertEqual(self.stats.mode(), [2,3])\n        self.stats.remove(2)\n        self.assertEqual(self.stats.mode(), [3])\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\nimport unittest\nimport sys\n\nclass SkipTests(unittest.TestCase):\n **@unittest.expectedFailure**\n    def test_fails(self):\n        self.assertEqual(False, True)\n\n **@unittest.skip(\"Test is useless\")**\n    def test_skip(self):\n        self.assertEqual(False, True)\n\n **@unittest.skipIf(sys.version_info.minor == 4,**\n **\"broken on 3.4\")**\n    def test_skipif(self):\n        self.assertEqual(False, True)\n\n **@unittest.skipUnless(sys.platform.startswith('linux'),**\n **\"broken unless on linux\")**\n    def test_skipunless(self):\n        self.assertEqual(False, True)\n\nif __name__ == \"__main__\":\n    unittest.main()\n```", "```py\n**xssF**\n**=============================================================**\n**FAIL: test_skipunless (__main__.SkipTests)**\n**--------------------------------------------------------------**\n**Traceback (most recent call last):**\n **File \"skipping_tests.py\", line 21, in test_skipunless**\n **self.assertEqual(False, True)**\n**AssertionError: False != True**\n\n**--------------------------------------------------------------**\n**Ran 4 tests in 0.001s**\n\n**FAILED (failures=1, skipped=2, expected failures=1)**\n\n```", "```py\ndef test_int_float():\n    assert 1 == 1.0\n```", "```py\nclass TestNumbers:\n    def test_int_float(self):\n        assert 1 == 1.0\n\n    def test_int_str(self):\n        assert 1 == \"1\"\n```", "```py\n**============== test session starts ==============**\n**python: platform linux2 -- Python 3.4.1 -- pytest-2.6.4**\n**test object 1: class_pytest.py**\n\n**class_pytest.py .F**\n\n**=================== FAILURES====================**\n**___________ TestNumbers.test_int_str ____________**\n\n**self = <class_pytest.TestNumbers object at 0x85b4fac>**\n\n **def test_int_str(self):**\n**>       assert 1 == \"1\"**\n**E       assert 1 == '1'**\n\n**class_pytest.py:7: AssertionError**\n**====== 1 failed, 1 passed in 0.10 seconds =======**\n\n```", "```py\n**def setup_module(module):**\n    print(\"setting up MODULE {0}\".format(\n        module.__name__))\n\n**def teardown_module(module):**\n    print(\"tearing down MODULE {0}\".format(\n        module.__name__))\n\ndef test_a_function():\n    print(\"RUNNING TEST FUNCTION\")\n\nclass BaseTest:\n **def setup_class(cls):**\n        print(\"setting up CLASS {0}\".format(\n            cls.__name__))\n\n **def teardown_class(cls):**\n        print(\"tearing down CLASS {0}\\n\".format(\n            cls.__name__))\n\n **def setup_method(self, method):**\n        print(\"setting up METHOD {0}\".format(\n            method.__name__))\n\n **def teardown_method(self, method):**\n        print(\"tearing down  METHOD {0}\".format(\n            method.__name__))\n\nclass TestClass1(BaseTest):\n    def test_method_1(self):\n        print(\"RUNNING METHOD 1-1\")\n\n    def test_method_2(self):\n        print(\"RUNNING METHOD 1-2\")\n\nclass TestClass2(BaseTest):\n    def test_method_1(self):\n        print(\"RUNNING METHOD 2-1\")\n\n    def test_method_2(self):\n        print(\"RUNNING METHOD 2-2\")\n```", "```py\n**py.test setup_teardown.py -s**\n**setup_teardown.py**\n**setting up MODULE setup_teardown**\n**RUNNING TEST FUNCTION**\n**.setting up CLASS TestClass1**\n**setting up METHOD test_method_1**\n**RUNNING METHOD 1-1**\n**.tearing down  METHOD test_method_1**\n**setting up METHOD test_method_2**\n**RUNNING METHOD 1-2**\n**.tearing down  METHOD test_method_2**\n**tearing down CLASS TestClass1**\n**setting up CLASS TestClass2**\n**setting up METHOD test_method_1**\n**RUNNING METHOD 2-1**\n**.tearing down  METHOD test_method_1**\n**setting up METHOD test_method_2**\n**RUNNING METHOD 2-2**\n**.tearing down  METHOD test_method_2**\n**tearing down CLASS TestClass2**\n\n**tearing down MODULE setup_teardown**\n\n```", "```py\nfrom stats import StatsList\n\n**def pytest_funcarg__valid_stats(request):**\n    return StatsList([1,2,2,3,3,4])\n\ndef test_mean(valid_stats):\n    assert valid_stats.mean() == 2.5\n\ndef test_median(valid_stats):\n    assert valid_stats.median() == 2.5\n    valid_stats.append(4)\n    assert valid_stats.median() == 3\n\ndef test_mode(valid_stats):\n    assert valid_stats.mode() == [2,3]\n    valid_stats.remove(2)\n    assert valid_stats.mode() == [3]\n```", "```py\nimport tempfile\nimport shutil\nimport os.path\n\ndef pytest_funcarg__temp_dir(request):\n    dir = tempfile.mkdtemp()\n    print(dir)\n\n    def cleanup():\n        shutil.rmtree(dir)\n **request.addfinalizer(cleanup)**\n    return dir\n\ndef test_osfiles(temp_dir):\n    os.mkdir(os.path.join(temp_dir, 'a'))\n    os.mkdir(os.path.join(temp_dir, 'b'))\n    dir_contents = os.listdir(temp_dir)\n    assert len(dir_contents) == 2\n    assert 'a' in dir_contents\n    assert 'b' in dir_contents\n```", "```py\nimport socket\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\ns.bind(('localhost',1028))\ns.listen(1)\n\n    while True:\n        client, address = s.accept()\n        data = client.recv(1024)\n        client.send(data)\n        client.close()\n```", "```py\nimport subprocess\nimport socket\nimport time\n\n**def pytest_funcarg__echoserver(request):**\n **def setup():**\n **p = subprocess.Popen(**\n **['python3', 'echo_server.py'])**\n **time.sleep(1)**\n **return p**\n\n **def cleanup(p):**\n **p.terminate()**\n\n **return request.cached_setup(**\n **setup=setup,**\n **teardown=cleanup,**\n **scope=\"session\")**\n\ndef pytest_funcarg__clientsocket(request):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect(('localhost', 1028))\n    request.addfinalizer(lambda: s.close())\n    return s\n\ndef test_echo(echoserver, clientsocket):\n    clientsocket.send(b\"abc\")\n    assert clientsocket.recv(3) == b'abc'\n\ndef test_echo2(echoserver, clientsocket):\n    clientsocket.send(b\"def\")\n    assert clientsocket.recv(3) == b'def'\n```", "```py\nimport sys\n**import py.test**\n\ndef test_simple_skip():\n    if sys.platform != \"fakeos\":\n **py.test.skip(\"Test works only on fakeOS\")**\n\n    fakeos.do_something_fake()\n    assert fakeos.did_not_happen\n```", "```py\nimport py.test\n\n**@py.test.mark.skipif(\"sys.version_info <= (3,0)\")**\ndef test_python3():\n    assert b\"hello\".decode() == \"hello\"\n```", "```py\nimport datetime\nimport redis\n\nclass FlightStatusTracker:\n    ALLOWED_STATUSES = {'CANCELLED', 'DELAYED', 'ON TIME'}\n\n    def __init__(self):\n        self.redis = redis.StrictRedis()\n\n    def change_status(self, flight, status):\n        status = status.upper()\n        if status not in self.ALLOWED_STATUSES:\n            raise ValueError(\n                   \"{} is not a valid status\".format(status))\n\n        key = \"flightno:{}\".format(flight)\n        value = \"{}|{}\".format(\n            datetime.datetime.now().isoformat(), status)\n        self.redis.set(key, value)\n```", "```py\n**from unittest.mock import Mock**\nimport py.test\ndef pytest_funcarg__tracker():\n    return FlightStatusTracker()\n\ndef test_mock_method(tracker):\n **tracker.redis.set = Mock()**\n    with py.test.raises(ValueError) as ex:\n        tracker.change_status(\"AC101\", \"lost\")\n    assert ex.value.args[0] == \"LOST is not a valid status\"\n **assert tracker.redis.set.call_count == 0**\n\n```", "```py\nfrom unittest.mock import patch\ndef test_patch(tracker):\n    tracker.redis.set = Mock()\n **fake_now = datetime.datetime(2015, 4, 1)**\n **with patch('datetime.datetime') as dt:**\n **dt.now.return_value = fake_now**\n        tracker.change_status(\"AC102\", \"on time\")\n    dt.now.assert_called_once_with()\n **tracker.redis.set.assert_called_once_with(**\n **\"flightno:AC102\",**\n **\"2015-04-01T00:00:00|ON TIME\")**\n\n```", "```py\n    def __init__(self, redis_instance=None):\n        self.redis = redis_instance if redis_instance else redis.StrictRedis()\n```", "```py\n**coverage run coverage_unittest.py**\n\n```", "```py\n**>>> coverage report**\n\n```", "```py\n**Name                           Stmts   Exec  Cover**\n**--------------------------------------------------**\n**coverage_unittest                  7      7   100%**\n**stats                             19      6    31%**\n**--------------------------------------------------**\n**TOTAL                             26     13    50%**\n\n```", "```py\n**Missing**\n**-----------**\n**8-12, 15-23**\n\n```", "```py\nfrom stats import StatsList\nimport unittest\n\nclass TestMean(unittest.TestCase):\n    def test_mean(self):\n        self.assertEqual(StatsList([1,2,2,3,3,4]).mean(), 2.5)\n\nif __name__ == \"__main__\":\n\n    unittest.main()\n```", "```py\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z\nB C D E F G H I J K L M N O P Q R S T U V W X Y Z A\nC D E F G H I J K L M N O P Q R S T U V W X Y Z A B\nD E F G H I J K L M N O P Q R S T U V W X Y Z A B C\nE F G H I J K L M N O P Q R S T U V W X Y Z A B C D\nF G H I J K L M N O P Q R S T U V W X Y Z A B C D E\nG H I J K L M N O P Q R S T U V W X Y Z A B C D E F\nH I J K L M N O P Q R S T U V W X Y Z A B C D E F G\nI J K L M N O P Q R S T U V W X Y Z A B C D E F G H\nJ K L M N O P Q R S T U V W X Y Z A B C D E F G H I\nK L M N O P Q R S T U V W X Y Z A B C D E F G H I J\nL M N O P Q R S T U V W X Y Z A B C D E F G H I J K\nM N O P Q R S T U V W X Y Z A B C D E F G H I J K L\nN O P Q R S T U V W X Y Z A B C D E F G H I J K L M\nO P Q R S T U V W X Y Z A B C D E F G H I J K L M N\nP Q R S T U V W X Y Z A B C D E F G H I J K L M N O\nQ R S T U V W X Y Z A B C D E F G H I J K L M N O P\nR S T U V W X Y Z A B C D E F G H I J K L M N O P Q\nS T U V W X Y Z A B C D E F G H I J K L M N O P Q R\nT U V W X Y Z A B C D E F G H I J K L M N O P Q R S\nU V W X Y Z A B C D E F G H I J K L M N O P Q R S T\nV W X Y Z A B C D E F G H I J K L M N O P Q R S T U\nW X Y Z A B C D E F G H I J K L M N O P Q R S T U V\nX Y Z A B C D E F G H I J K L M N O P Q R S T U V W\nY Z A B C D E F G H I J K L M N O P Q R S T U V W X\nZ A B C D E F G H I J K L M N O P Q R S T U V W X Y\n```", "```py\n    E N C O D E D I N P Y T H O N    T R A I N T R A I N T R A I N\n    ```", "```py\ndef test_encode():\n    cipher = VigenereCipher(\"TRAIN\")\n    encoded = cipher.encode(\"ENCODEDINPYTHON\")\n    assert encoded == \"XECWQXUIVCRKHWA\"\n```", "```py\nclass VigenereCipher:\n    def __init__(self, keyword):\n        self.keyword = keyword\n\n    def encode(self, plaintext):\n **return \"XECWQXUIVCRKHWA\"**\n\n```", "```py\ndef test_encode_character():\n    cipher = VigenereCipher(\"TRAIN\")\n    encoded = cipher.encode(\"E\")\n    assert encoded == \"X\"\n```", "```py\ndef test_encode_spaces():\n    cipher = VigenereCipher(\"TRAIN\")\n    encoded = cipher.encode(\"ENCODED IN PYTHON\")\n    assert encoded == \"XECWQXUIVCRKHWA\"\n\ndef test_encode_lowercase():\n    cipher = VigenereCipher(\"TRain\")\n    encoded = cipher.encode(\"encoded in Python\")\n    assert encoded == \"XECWQXUIVCRKHWA\"\n```", "```py\nfrom vigenere_cipher import combine_character\ndef test_combine_character():\n    assert combine_character(\"E\", \"T\") == \"X\"\n    assert combine_character(\"N\", \"R\") == \"E\"\n```", "```py\ndef combine_character(plain, keyword):\n    plain = plain.upper()\n    keyword = keyword.upper()\n    plain_num = ord(plain) - ord('A')\n    keyword_num = ord(keyword) - ord('A')\n    return chr(ord('A') + (plain_num + keyword_num) % 26)\n```", "```py\ndef test_extend_keyword():\n    cipher = VigenereCipher(\"TRAIN\")\n    extended = cipher.extend_keyword(16)\n    assert extended == \"TRAINTRAINTRAINT\"\n```", "```py\n    def extend_keyword(self, number):\n        repeats = number // len(self.keyword) + 1\n        return (self.keyword * repeats)[:number]\n```", "```py\n    def encode(self, plaintext):\n        cipher = []\n        keyword = self.extend_keyword(len(plaintext))\n        for p,k in zip(plaintext, keyword):\n            cipher.append(combine_character(p,k))\n        return \"\".join(cipher)\n```", "```py\n        plaintext = plaintext.replace(\" \", \"\").upper()\n```", "```py\ndef test_separate_character():\n    assert separate_character(\"X\", \"T\") == \"E\"\n    assert separate_character(\"E\", \"R\") == \"N\"\n\ndef test_decode():\n    cipher = VigenereCipher(\"TRAIN\")\n    decoded = cipher.decode(\"XECWQXUIVCRKHWA\")\n    assert decoded == \"ENCODEDINPYTHON\"\n```", "```py\ndef separate_character(cypher, keyword):\n    cypher = cypher.upper()\n    keyword = keyword.upper()\n    cypher_num = ord(cypher) - ord('A')\n    keyword_num = ord(keyword) - ord('A')\n    return chr(ord('A') + (cypher_num - keyword_num) % 26)\n```", "```py\n    def decode(self, ciphertext):\n        plain = []\n        keyword = self.extend_keyword(len(ciphertext))\n        for p,k in zip(ciphertext, keyword):\n            plain.append(separate_character(p,k))\n        return \"\".join(plain)\n```", "```py\n    def _code(self, text, combine_func):\n        text = text.replace(\" \", \"\").upper()\n        combined = []\n        keyword = self.extend_keyword(len(text))\n        for p,k in zip(text, keyword):\n            combined.append(combine_func(p,k))\n        return \"\".join(combined)\n\n    def encode(self, plaintext):\n        return self._code(plaintext, combine_character)\n\n    def decode(self, ciphertext):\n        return self._code(ciphertext, separate_character)\n```"]