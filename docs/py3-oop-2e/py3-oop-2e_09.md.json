["```py\nwhile not iterator.done():\n    item = iterator.next()\n    # do something with the item\n```", "```py\nclass CapitalIterable:\n    def __init__(self, string):\n        self.string = string\n\n    def __iter__(self):\n        return CapitalIterator(self.string)\n\nclass CapitalIterator:\n    def __init__(self, string):\n        self.words = [w.capitalize() for w in string.split()]\n        self.index = 0\n\n    def __next__(self):\n        if self.index == len(self.words):\n            raise StopIteration()\n\n        word = self.words[self.index]\n        self.index += 1\n        return word\n\n    def __iter__(self):\n        return self\n```", "```py\n**>>> iterable = CapitalIterable('the quick brown fox jumps over the lazy dog')**\n**>>> iterator = iter(iterable)**\n**>>> while True:**\n**...     try:**\n**...         print(next(iterator))**\n**...     except StopIteration:**\n**...         break**\n**...** \n**The**\n**Quick**\n**Brown**\n**Fox**\n**Jumps**\n**Over**\n**The**\n**Lazy**\n**Dog**\n\n```", "```py\n**>>> for i in iterable:**\n**...     print(i)**\n**...** \n**The**\n**Quick**\n**Brown**\n**Fox**\n**Jumps**\n**Over**\n**The**\n**Lazy**\n**Dog**\n\n```", "```py\ninput_strings = ['1', '5', '28', '131', '3']\n\noutput_integers = []\nfor num in input_strings:\n    output_integers.append(int(num))\n```", "```py\ninput_strings = ['1', '5', '28', '131', '3']output_integers = [int(num) for num in input_strings]\n```", "```py\noutput_ints = [int(n) for n in input_strings if len(n) < 3]\n```", "```py\nimport sys\nfilename = sys.argv[1]\n\nwith open(filename) as file:\n    header = file.readline().strip().split('\\t')\n **contacts = [**\n **dict(**\n **zip(header, line.strip().split('\\t'))**\n **) for line in file**\n **]**\n\nfor contact in contacts:\n    print(\"email: {email} -- {last}, {first}\".format(\n        **contact))\n```", "```py\nfrom collections import namedtuple\n\nBook = namedtuple(\"Book\", \"author title genre\")\nbooks = [\n        Book(\"Pratchett\", \"Nightwatch\", \"fantasy\"),\n        Book(\"Pratchett\", \"Thief Of Time\", \"fantasy\"),\n        Book(\"Le Guin\", \"The Dispossessed\", \"scifi\"),\n        Book(\"Le Guin\", \"A Wizard Of Earthsea\", \"fantasy\"),\n        Book(\"Turner\", \"The Thief\", \"fantasy\"),\n        Book(\"Phillips\", \"Preston Diamond\", \"western\"),\n        Book(\"Phillips\", \"Twice Upon A Time\", \"scifi\"),\n        ]\n\n**fantasy_authors = {**\n **b.author for b in books if b.genre == 'fantasy'}**\n\n```", "```py\n**>>> fantasy_authors**\n**{'Turner', 'Pratchett', 'Le Guin'}**\n\n```", "```py\nfantasy_titles = {\n        b.title: b for b in books if b.genre == 'fantasy'}\n```", "```py\nJan 26, 2015 11:25:25    DEBUG        This is a debugging message.\nJan 26, 2015 11:25:36    INFO         This is an information method.\nJan 26, 2015 11:25:46    WARNING      This is a warning. It could be serious.\nJan 26, 2015 11:25:52    WARNING      Another warning sent.\nJan 26, 2015 11:25:59    INFO         Here's some information.\nJan 26, 2015 11:26:13    DEBUG        Debug messages are only useful if you want to figure something out.\nJan 26, 2015 11:26:32    INFO         Information is usually harmless, but helpful.\nJan 26, 2015 11:26:40    WARNING      Warnings should be heeded.\nJan 26, 2015 11:26:54    WARNING      Watch for warnings.\n```", "```py\nimport sys\n\ninname = sys.argv[1]\noutname = sys.argv[2]\n\nwith open(inname) as infile:\n    with open(outname, \"w\") as outfile:\n **warnings = (l for l in infile if 'WARNING' in l)**\n        for l in warnings:\n            outfile.write(l)\n```", "```py\nJan 26, 2015 11:25:46    WARNING     This is a warning. It could be serious.\nJan 26, 2015 11:25:52    WARNING     Another warning sent.\nJan 26, 2015 11:26:40    WARNING     Warnings should be heeded.\nJan 26, 2015 11:26:54    WARNING     Watch for warnings.\n```", "```py\nimport sys\ninname, outname = sys.argv[1:3]\n\nwith open(inname) as infile:\n    with open(outname, \"w\") as outfile:\n **warnings = (l.replace('\\tWARNING', '')**\n **for l in infile if 'WARNING' in l)**\n        for l in warnings:\n            outfile.write(l)\n```", "```py\nimport sys\ninname, outname = sys.argv[1:3]\n\nwith open(inname) as infile:\n    with open(outname, \"w\") as outfile:\n **for l in infile:**\n **if 'WARNING' in l:**\n **outfile.write(l.replace('\\tWARNING', ''))**\n\n```", "```py\nimport sys\ninname, outname = sys.argv[1:3]\n\n**class WarningFilter:**\n **def __init__(self, insequence):**\n **self.insequence = insequence**\n **def __iter__(self):**\n **return self**\n **def __next__(self):**\n **l = self.insequence.readline()**\n **while l and 'WARNING' not in l:**\n **l = self.insequence.readline()**\n **if not l:**\n **raise StopIteration**\n **return l.replace('\\tWARNING', '')**\n\nwith open(inname) as infile:\n    with open(outname, \"w\") as outfile:\n        filter = WarningFilter(infile)\n        for l in filter:\n            outfile.write(l)\n```", "```py\nimport sys\ninname, outname = sys.argv[1:3]\n\n**def warnings_filter(insequence):**\n **for l in insequence:**\n **if 'WARNING' in l:**\n **yield l.replace('\\tWARNING', '')**\n\nwith open(inname) as infile:\n    with open(outname, \"w\") as outfile:\n        filter = warnings_filter(infile)\n        for l in filter:\n            outfile.write(l)\n```", "```py\n**>>> print(warnings_filter([]))**\n**<generator object warnings_filter at 0xb728c6bc>**\n\n```", "```py\nimport sys\ninname, outname = sys.argv[1:3]\n\ndef warnings_filter(infilename):\n    with open(infilename) as infile:\n **yield from (**\n **l.replace('\\tWARNING', '')**\n **for l in infile**\n **if 'WARNING' in l**\n **)**\n\nfilter = warnings_filter(inname)\nwith open(outname, \"w\") as outfile:\n    for l in filter:\n        outfile.write(l)\n```", "```py\nclass File:\n    def __init__(self, name):\n        self.name = name\n\nclass Folder(File):\n    def __init__(self, name):\n        super().__init__(name)\n        self.children = []\n\nroot = Folder('')\netc = Folder('etc')\nroot.children.append(etc)\netc.children.append(File('passwd'))\netc.children.append(File('groups'))\nhttpd = Folder('httpd')\netc.children.append(httpd)\nhttpd.children.append(File('http.conf'))\nvar = Folder('var')\nroot.children.append(var)\nlog = Folder('log')\nvar.children.append(log)\nlog.children.append(File('messages'))\nlog.children.append(File('kernel'))\n```", "```py\ndef walk(file):\n    if isinstance(file, Folder):\n **yield file.name + '/'**\n        for f in file.children:\n **yield from walk(f)**\n    else:\n **yield file.name**\n\n```", "```py\ndef tally():\n    score = 0\n    while True:\n **increment = yield score**\n        score += increment\n```", "```py\n**>>> white_sox = tally()**\n**>>> blue_jays = tally()**\n**>>> next(white_sox)**\n**0**\n**>>> next(blue_jays)**\n**0**\n**>>> white_sox.send(3)**\n**3**\n**>>> blue_jays.send(2)**\n**2**\n**>>> white_sox.send(2)**\n**5**\n**>>> blue_jays.send(4)**\n**6**\n\n```", "```py\nincrement = yield score\n```", "```py\nunrelated log messages\nsd 0:0:0:0 Attached Disk Drive\nunrelated log messages\nsd 0:0:0:0 (SERIAL=ZZ12345)\nunrelated log messages\nsd 0:0:0:0 [sda] Options\nunrelated log messages\nXFS ERROR [sda]\nunrelated log messages\nsd 2:0:0:1 Attached Disk Drive\nunrelated log messages\nsd 2:0:0:1 (SERIAL=ZZ67890)\nunrelated log messages\nsd 2:0:0:1 [sdb] Options\nunrelated log messages\nsd 3:0:1:8 Attached Disk Drive\nunrelated log messages\nsd 3:0:1:8 (SERIAL=WW11111)\nunrelated log messages\nsd 3:0:1:8 [sdc] Options\nunrelated log messages\nXFS ERROR [sdc]\nunrelated log messages\n```", "```py\nimport re\n\ndef match_regex(filename, regex):\n    with open(filename) as file:\n        lines = file.readlines()\n    for line in reversed(lines):\n        match = re.match(regex, line)\n        if match:\n **regex = yield match.groups()[0]**\n\ndef get_serials(filename):\n    ERROR_RE = 'XFS ERROR (\\[sd[a-z]\\])'\n **matcher = match_regex(filename, ERROR_RE)**\n    device = next(matcher)\n    while True:\n        bus = matcher.send(\n            '(sd \\S+) {}.*'.format(re.escape(device)))\n        serial = matcher.send('{} \\(SERIAL=([^)]*)\\)'.format(bus))\n **yield serial**\n        device = matcher.send(ERROR_RE)\n\nfor serial_number in get_serials('EXAMPLE_LOG.log'):\n    print(serial_number)\n```", "```py\n0.30928279150905513,0.7536768153744394,0.3244011790604804,Green\n0.4991001855115986,0.6394567277907686,0.6340502030888825,Grey\n0.21132621004927998,0.3307376167520666,0.704037576789711,Blue\n0.7260420945787928,0.4025279573860123,0.49781705131696363,Pink\n0.706469868610228,0.28530423638868196,0.7880240251003464,Purple\n0.692243900051664,0.7053550777777416,0.1845069151913028,Yellow\n0.3628979381122397,0.11079495501215897,0.26924540840045075,Purple\n0.611273677646518,0.48798521783547677,0.5346130557761224,Purple\n.\n.\n.\n0.4014121109376566,0.42176706818252674,0.9601866228083298,Blue\n0.17750449496124632,0.8008214961070862,0.5073944321437429,Green\n```", "```py\nimport csv\n\ndataset_filename = 'colors.csv'\n\ndef load_colors(filename):\n    with open(filename) as dataset_file:\n **lines = csv.reader(dataset_file)**\n        for line in lines:\n **yield tuple(float(y) for y in line[0:3]), line[3]**\n\n```", "```py\nfrom random import random\n\ndef generate_colors(count=100):\n    for i in range(count):\n **yield (random(), random(), random())**\n\n```", "```py\nimport math\n\ndef color_distance(color1, color2):\n    channels = zip(color1, color2)\n    sum_distance_squared = 0\n    for c1, c2 in channels:\n        sum_distance_squared += (c1 - c2) ** 2\n    return math.sqrt(sum_distance_squared)\n```", "```py\ndef color_distance(color1, color2):\n    return math.sqrt(sum((x[0] - x[1]) ** 2 for x in zip(\n    color1, color2)))\n```", "```py\ndef nearest_neighbors(model_colors, num_neighbors):\n    model = list(model_colors)\n **target = yield**\n    while True:\n        distances = sorted(\n            ((color_distance(c[0], target), c) for c in model),\n        )\n **target = yield [**\n **d[1] for d in distances[0:num_neighbors]**\n **]**\n\nmodel_colors = load_colors(dataset_filename)\ntarget_colors = generate_colors(3)\nget_neighbors = nearest_neighbors(model_colors, 5)\nnext(get_neighbors)\n\nfor color in target_colors:\n    distances = get_neighbors.send(color)\n    print(color)\n    for d in distances:\n        print(color_distance(color, d[0]), d[1])\n```", "```py\n(distance, (r, g, b), color_name)\n```", "```py\ndef write_results(filename=\"output.csv\"):\n    with open(filename, \"w\") as file:\n        writer = csv.writer(file)\n        while True:\n **color, name = yield**\n            writer.writerow(list(color) + [name])\n\nresults = write_results()\nnext(results)\nfor i in range(3):\n    print(i)\n    results.send(((i, i, i), i * 10))\n```", "```py\nfrom collections import Counter\ndef name_colors(get_neighbors):\n **color = yield**\n    while True:\n **near = get_neighbors.send(color)**\n        name_guess = Counter(\n            n[1] for n in near).most_common(1)[0][0]\n **color = yield name_guess**\n\n```", "```py\ndef process_colors(dataset_filename=\"colors.csv\"):\n    model_colors = load_colors(dataset_filename)\n    get_neighbors = nearest_neighbors(model_colors, 5)\n **get_color_name = name_colors(get_neighbors)**\n    output = write_results()\n **next(output)**\n **next(get_neighbors)**\n **next(get_color_name)**\n\n    for color in generate_colors():\n **name = get_color_name.send(color)**\n **output.send((color, name))**\n\nprocess_colors()\n```"]