["```py\na = \"hello\"\nb = 'world'\nc = '''a multiple\nline string'''\nd = \"\"\"More\nmultiple\"\"\"\ne = (\"Three \" \"Strings \"\n        \"Together\")\n```", "```py\n**>>> float('45\\u06602')**\n**4502.0**\n\n```", "```py\n**>>> s = \"hello world\"**\n**>>> s.count('l')**\n**3**\n**>>> s.find('l')**\n**2**\n**>>> s.rindex('m')**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**ValueError: substring not found**\n\n```", "```py\n**>>> s = \"hello world, how are you\"**\n**>>> s2 = s.split(' ')**\n**>>> s2**\n**['hello', 'world,', 'how', 'are', 'you']**\n**>>> '#'.join(s2)**\n**'hello#world,#how#are#you'**\n**>>> s.replace(' ', '**')**\n**'hello**world,**how**are**you'**\n**>>> s.partition(' ')**\n**('hello', ' ', 'world, how are you')**\n\n```", "```py\ntemplate = \"Hello {}, you are currently {}.\"\nprint(template.format('Dusty', 'writing'))\n```", "```py\n**Hello Dusty, you are currently writing.**\n\n```", "```py\ntemplate = \"Hello {0}, you are {1}. Your name is {0}.\"\nprint(template.format('Dusty', 'writing'))\n```", "```py\ntemplate = \"Hello {}, you are {}. Your name is {0}.\"\nprint(template.format('Dusty', 'writing'))\n```", "```py\ntemplate = \"\"\"\npublic class {0} {{\n    public static void main(String[] args) {{\n        System.out.println(\"{1}\");\n    }}\n}}\"\"\"\n\nprint(template.format(\"MyClass\", \"print('hello world')\"));\n```", "```py\n**public class MyClass {**\n **public static void main(String[] args) {**\n **System.out.println(\"print('hello world')\");**\n **}**\n**}**\n\n```", "```py\ntemplate = \"\"\"\nFrom: <{from_email}>\nTo: <{to_email}>\nSubject: {subject}\n\n{message}\"\"\"\nprint(template.format(\n    from_email = \"a@example.com\",\n    to_email = \"b@example.com\",\n **message = \"Here's some mail for you. \"**\n **\" Hope you enjoy the message!\",**\n    subject = \"You have mail!\"\n    ))\n```", "```py\nprint(\"{} {label} {}\".format(\"x\", \"y\", label=\"z\"))\n```", "```py\n**x z y**\n\n```", "```py\nemails = (\"a@example.com\", \"b@example.com\")\nmessage = {\n        'subject': \"You Have Mail!\",\n        'message': \"Here's some mail for you!\"\n        }\ntemplate = \"\"\"\n**From: <{0[0]}>**\n**To: <{0[1]}>**\n**Subject: {message[subject]}**\n**{message[message]}\"\"\"**\nprint(template.format(emails, message=message))\n```", "```py\nemails = (\"a@example.com\", \"b@example.com\")\nmessage = {\n        'emails': emails,\n        'subject': \"You Have Mail!\",\n        'message': \"Here's some mail for you!\"\n        }\ntemplate = \"\"\"\nFrom: <{0[emails][0]}>\nTo: <{0[emails][1]}>\nSubject: {0[subject]}\n{0[message]}\"\"\"\nprint(template.format(message))\n```", "```py\nclass EMail:\n    def __init__(self, from_addr, to_addr, subject, message):\n        self.from_addr = from_addr\n        self.to_addr = to_addr\n        self.subject = subject\n        self.message = message\n\nemail = EMail(\"a@example.com\", \"b@example.com\",\n        \"You Have Mail!\",\n         \"Here's some mail for you!\")\n\ntemplate = \"\"\"\nFrom: <{0.from_addr}>\nTo: <{0.to_addr}>\nSubject: {0.subject}\n\n{0.message}\"\"\"\nprint(template.format(email))\n```", "```py\nsubtotal = 12.32\ntax = subtotal * 0.07\ntotal = subtotal + tax\n\nprint(\"Sub: ${0} Tax: ${1} Total: ${total}\".format(\n    subtotal, tax, total=total))\n```", "```py\n**Sub: $12.32 Tax: $0.8624 Total: $13.182400000000001**\n\n```", "```py\nprint(\"Sub: ${0:0.2f} Tax: ${1:0.2f} \"\n        \"Total: ${total:0.2f}\".format(\n            subtotal, tax, total=total))\n```", "```py\norders = [('burger', 2, 5),\n        ('fries', 3.5, 1),\n        ('cola', 1.75, 3)]\n\nprint(\"PRODUCT    QUANTITY    PRICE    SUBTOTAL\")\nfor product, price, quantity in orders:\n    subtotal = price * quantity\n **print(\"{0:10s}{1: ^9d}    ${2: <8.2f}${3: >7.2f}\".format(**\n **product, quantity, price, subtotal))**\n\n```", "```py\n**PRODUCT    QUANTITY    PRICE    SUBTOTAL**\n**burger        5        $2.00    $  10.00**\n**fries         1        $3.50    $   3.50**\n**cola          3        $1.75    $   5.25**\n\n```", "```py\nimport datetime\nprint(\"{0:%Y-%m-%d %I:%M%p }\".format(\n    datetime.datetime.now()))\n```", "```py\ncharacters = b'\\x63\\x6c\\x69\\x63\\x68\\xe9'\nprint(characters)\n**print(characters.decode(\"latin-1\"))**\n\n```", "```py\n**b'clich\\xe9'**\n**clich\u00e9**\n\n```", "```py\ncharacters = \"clich\u00e9\"\nprint(characters.encode(\"UTF-8\"))\nprint(characters.encode(\"latin-1\"))\nprint(characters.encode(\"CP437\"))\nprint(characters.encode(\"ascii\"))\n```", "```py\n**b'clich\\xc3\\xa9'**\n**b'clich\\xe9'**\n**b'clich\\x82'**\n**Traceback (most recent call last):**\n **File \"1261_10_16_decode_unicode.py\", line 5, in <module>**\n **print(characters.encode(\"ascii\"))**\n**UnicodeEncodeError: 'ascii' codec can't encode character '\\xe9' in position 5: ordinal not in range(128)**\n\n```", "```py\nb = bytearray(b\"abcdefgh\")\nb[4:6] = b\"\\x15\\xa3\"\nprint(b)\n```", "```py\n**bytearray(b'abcd\\x15\\xa3gh')**\n\n```", "```py\nb = bytearray(b'abcdef')\nb[3] = ord(b'g')\nb[4] = 68\nprint(b)\n```", "```py\n**bytearray(b'abcgDf')**\n\n```", "```py\nimport re\n\nsearch_string = \"hello world\"\npattern = \"hello world\"\n\nmatch = re.match(pattern, search_string)\n\nif match:\n    print(\"regex matches\")\n```", "```py\nimport sys\nimport re\n\npattern = sys.argv[1]\nsearch_string = sys.argv[2]\n**match = re.match(pattern, search_string)**\n\nif match:\n    template = \"'{}' matches pattern '{}'\"\nelse:\n    template = \"'{}' does not match pattern '{}'\"\n\nprint(template.format(search_string, pattern))\n```", "```py\n**$ python regex_generic.py \"hello worl\" \"hello world\"**\n**'hello world' matches pattern 'hello worl'**\n**$ python regex_generic.py \"ello world\" \"hello world\"**\n**'hello world' does not match pattern 'ello world'**\n\n```", "```py\n**'hello world' matches pattern '^hello world$'**\n**'hello worl' does not match pattern '^hello world$'**\n\n```", "```py\n**'hello world' matches pattern 'hel.o world'**\n**'helpo world' matches pattern 'hel.o world'**\n**'hel o world' matches pattern 'hel.o world'**\n**'helo world' does not match pattern 'hel.o world'**\n\n```", "```py\n**'hello world' matches pattern 'hel[lp]o world'**\n**'helpo world' matches pattern 'hel[lp]o world'**\n**'helPo world' does not match pattern 'hel[lp]o world'**\n\n```", "```py\n**'hello   world' does not match pattern 'hello [a-z] world'**\n**'hello b world' matches pattern 'hello [a-z] world'**\n**'hello B world' matches pattern 'hello [a-zA-Z] world'**\n**'hello 2 world' matches pattern 'hello [a-zA-Z0-9] world'**\n\n```", "```py\n**'0.05' matches pattern '0\\.[0-9][0-9]'**\n**'005' does not match pattern '0\\.[0-9][0-9]'**\n**'0,05' does not match pattern '0\\.[0-9][0-9]'**\n\n```", "```py\n**'(abc]' matches pattern '\\(abc\\]'**\n**' 1a' matches pattern '\\s\\d\\w'**\n**'\\t5n' does not match pattern '\\s\\d\\w'**\n**'5n' matches pattern '\\s\\d\\w'**\n\n```", "```py\n**'hello' matches pattern 'hel*o'**\n**'heo' matches pattern 'hel*o'**\n**'helllllo' matches pattern 'hel*o'**\n\n```", "```py\n**'A string.' matches pattern '[A-Z][a-z]* [a-z]*\\.'**\n**'No .' matches pattern '[A-Z][a-z]* [a-z]*\\.'**\n**'' matches pattern '[a-z]*.*'**\n\n```", "```py\n**'0.4' matches pattern '\\d+\\.\\d+'**\n**'1.002' matches pattern '\\d+\\.\\d+'**\n**'1.' does not match pattern '\\d+\\.\\d+'**\n**'1%' matches pattern '\\d?\\d%'**\n**'99%' matches pattern '\\d?\\d%'**\n**'999%' does not match pattern '\\d?\\d%'**\n\n```", "```py\n**'abccc' matches pattern 'abc{3}'**\n**'abccc' does not match pattern '(abc){3}'**\n**'abcabcabc' matches pattern '(abc){3}'**\n\n```", "```py\n**'Eat.' matches pattern '[A-Z][a-z]*( [a-z]+)*\\.$'**\n**'Eat more good food.' matches pattern '[A-Z][a-z]*( [a-z]+)*\\.$'**\n**'A good meal.' matches pattern '[A-Z][a-z]*( [a-z]+)*\\.$'**\n\n```", "```py\npattern = \"^[a-zA-Z.]+@([a-z.]*\\.[a-z]+)$\"\nsearch_string = \"some.user@example.com\"\nmatch = re.match(pattern, search_string)\n\nif match:\n **domain = match.groups()[0]**\n    print(domain)\n```", "```py\n**>>> import re**\n**>>> re.findall('a.', 'abacadefagah')**\n**['ab', 'ac', 'ad', 'ag', 'ah']**\n**>>> re.findall('a(.)', 'abacadefagah')**\n**['b', 'c', 'd', 'g', 'h']**\n**>>> re.findall('(a)(.)', 'abacadefagah')**\n**[('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'g'), ('a', 'h')]**\n**>>> re.findall('((a)(.))', 'abacadefagah')**\n**[('ab', 'a', 'b'), ('ac', 'a', 'c'), ('ad', 'a', 'd'), ('ag', 'a', 'g'), ('ah', 'a', 'h')]**\n\n```", "```py\nimport pickle\n\nsome_data = [\"a list\", \"containing\", 5,\n        \"values including another list\",\n        [\"inner\", \"list\"]]\n\nwith open(\"pickled_list\", 'wb') as file:\n **pickle.dump(some_data, file)**\n\nwith open(\"pickled_list\", 'rb') as file:\n **loaded_data = pickle.load(file)**\n\nprint(loaded_data)\nassert loaded_data == some_data\n```", "```py\nfrom threading import Timer\nimport datetime\nfrom urllib.request import urlopen\n\nclass UpdatedURL:\n    def __init__(self, url):\n        self.url = url\n        self.contents = ''\n        self.last_updated = None\n        self.update()\n\n    def update(self):\n        self.contents = urlopen(self.url).read()\n        self.last_updated = datetime.datetime.now()\n        self.schedule()\n\n    def schedule(self):\n        self.timer = Timer(3600, self.update)\n        self.timer.setDaemon(True)\n        self.timer.start()\n```", "```py\n**>>> u = UpdatedURL(\"http://news.yahoo.com/\")**\n**>>> import pickle**\n**>>> serialized = pickle.dumps(u)**\n**Traceback (most recent call last):**\n **File \"<pyshell#3>\", line 1, in <module>**\n **serialized = pickle.dumps(u)**\n**_pickle.PicklingError: Can't pickle <class '_thread.lock'>: attribute lookup lock on _thread failed**\n\n```", "```py\n    def __getstate__(self):\n        new_state = self.__dict__.copy()\n        if 'timer' in new_state:\n            del new_state['timer']\n        return new_state\n```", "```py\n    def __setstate__(self, data):\n        self.__dict__ = data\n        self.schedule()\n```", "```py\nclass Contact:\n    def __init__(self, first, last):\n        self.first = first\n        self.last = last\n\n    @property\n    def full_name(self):\n        return(\"{} {}\".format(self.first, self.last))\n```", "```py\n**>>> c = Contact(\"John\", \"Smith\")**\n**>>> json.dumps(c.__dict__)**\n**'{\"last\": \"Smith\", \"first\": \"John\"}'**\n\n```", "```py\nimport json\nclass ContactEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, Contact):\n            return {'is_contact': True,\n                    'first': obj.first,\n                    'last': obj.last,\n                    'full': obj.full_name}\n        return super().default(obj)\n```", "```py\n**>>> c = Contact(\"John\", \"Smith\")**\n**>>> json.dumps(c, cls=ContactEncoder)**\n**'{\"is_contact\": true, \"last\": \"Smith\", \"full\": \"John Smith\",**\n**\"first\": \"John\"}'**\n\n```", "```py\ndef decode_contact(dic):\n        if dic.get('is_contact'):\n            return Contact(dic['first'], dic['last'])\n        else:\n            return dic\n```", "```py\n**>>> data = ('{\"is_contact\": true, \"last\": \"smith\",'**\n **'\"full\": \"john smith\", \"first\": \"john\"}')**\n\n**>>> c = json.loads(data, object_hook=decode_contact)**\n**>>> c**\n**<__main__.Contact object at 0xa02918c>**\n**>>> c.full_name**\n**'john smith'**\n\n```", "```py\n/** include header.html **/\n<h1>This is the title of the front page</h1>\n/** include menu.html **/\n<p>My name is /** variable name **/.\nThis is the content of my front page. It goes below the menu.</p>\n<table>\n<tr><th>Favourite Books</th></tr>\n/** loopover book_list **/\n<tr><td>/** loopvar **/</td></tr>\n\n/** endloop **/\n</table>\n/** include footer.html **/\nCopyright &copy; Today\n```", "```py\n{\n    \"name\": \"Dusty\",\n    \"book_list\": [\n        \"Thief Of Time\",\n        \"The Thief\",\n        \"Snow Crash\",\n        \"Lathe Of Heaven\"\n    ]\n}\n```", "```py\nimport re\nimport sys\nimport json\nfrom pathlib import Path\n\n**DIRECTIVE_RE = re.compile(**\n **r'/\\*\\*\\s*(include|variable|loopover|endloop|loopvar)'**\n **r'\\s*([^ *]*)\\s*\\*\\*/')**\n\nclass TemplateEngine:\n    def __init__(self, infilename, outfilename, contextfilename):\n        self.template = open(infilename).read()\n        self.working_dir = Path(infilename).absolute().parent\n **self.pos = 0**\n        self.outfile = open(outfilename, 'w')\n        with open(contextfilename) as contextfile:\n            self.context = json.load(contextfile)\n\n    def process(self):\n        print(\"PROCESSING...\")\n\nif __name__ == '__main__':\n    infilename, outfilename, contextfilename = sys.argv[1:]\n    engine = TemplateEngine(infilename, outfilename, contextfilename)\n    engine.process()\n```", "```py\ndef process(self):\n    match = DIRECTIVE_RE.search(self.template, pos=self.pos)\n    while match:\n        self.outfile.write(self.template[self.pos:match.start()])\n **self.pos = match.end()**\n        match = DIRECTIVE_RE.search(self.template, pos=self.pos)\n    self.outfile.write(self.template[self.pos:])\n```", "```py\ndef process(self):\n    match = DIRECTIVE_RE.search(self.template, pos=self.pos)\n    while match:\n        self.outfile.write(self.template[self.pos:match.start()])\n **directive, argument = match.groups()**\n **method_name = 'process_{}'.format(directive)**\n **getattr(self, method_name)(match, argument)**\n        match = DIRECTIVE_RE.search(self.template, pos=self.pos)\n    self.outfile.write(self.template[self.pos:])\n```", "```py\ndef process_include(self, match, argument):\n    with (self.working_dir / argument).open() as includefile:\n        self.outfile.write(includefile.read())\n **self.pos = match.end()**\n\ndef process_variable(self, match, argument):\n    self.outfile.write(self.context.get(argument, ''))\n **self.pos = match.end()**\n\n```", "```py\n    def process_loopover(self, match, argument):\n        self.loop_index = 0\n **self.loop_list = self.context.get(argument, [])**\n        self.pos = self.loop_pos = match.end()\n\n    def process_loopvar(self, match, argument):\n **self.outfile.write(self.loop_list[self.loop_index])**\n        self.pos = match.end()\n\n    def process_endloop(self, match, argument):\n **self.loop_index += 1**\n        if self.loop_index >= len(self.loop_list):\n            self.pos = match.end()\n            del self.loop_index\n            del self.loop_list\n            del self.loop_pos\n        else:\n **self.pos = self.loop_pos**\n\n```", "```py\n<html>\n    <body>\n\n<h1>This is the title of the front page</h1>\n<a href=\"link1.html\">First Link</a>\n<a href=\"link2.html\">Second Link</a>\n\n<p>My name is Dusty.\nThis is the content of my front page. It goes below the menu.</p>\n<table>\n<tr><th>Favourite Books</th></tr>\n\n<tr><td>Thief Of Time</td></tr>\n\n<tr><td>The Thief</td></tr>\n\n<tr><td>Snow Crash</td></tr>\n\n<tr><td>Lathe Of Heaven</td></tr>\n\n</table>\n    </body>\n</html>\n\nCopyright &copy; Today\n```"]