["```py\n**>>> len([1,2,3,4])**\n**4**\n\n```", "```py\nnormal_list=[1,2,3,4,5]\n\nclass CustomSequence():\n **def __len__(self):**\n        return 5\n\n **def __getitem__(self, index):**\n        return \"x{0}\".format(index)\n\nclass FunkyBackwards():\n\n **def __reversed__(self):**\n        return \"BACKWARDS!\"\n\nfor seq in normal_list, CustomSequence(), FunkyBackwards():\n    print(\"\\n{}: \".format(seq.__class__.__name__), end=\"\")\n    for item in reversed(seq):\n        print(item, end=\", \")\n```", "```py\n**list: 5, 4, 3, 2, 1,**\n**CustomSequence: x4, x3, x2, x1, x0,**\n**FunkyBackwards: B, A, C, K, W, A, R, D, S, !,**\n\n```", "```py\nimport sys\nfilename = sys.argv[1]\n\nwith open(filename) as file:\n **for index, line in enumerate(file):**\n        print(\"{0}: {1}\".format(index+1, line), end='')\n```", "```py\n1: import sys\n2: filename = sys.argv[1]\n3:\n4: with open(filename) as file:\n5:     for index, line in enumerate(file):\n6:         print(\"{0}: {1}\".format(index+1, line), end='')\n```", "```py\n**contents = \"Some file contents\"**\nfile = open(\"filename\", \"w\")\nfile.write(contents)\nfile.close()\n```", "```py\n**with open('filename') as file:**\n    for line in file:\n        print(line, end='')\n```", "```py\n**class StringJoiner(list):**\n    def __enter__(self):\n        return self\n\n    **def __exit__(self, type, value, tb):**\n        self.result = \"\".join(self)\n```", "```py\nimport random, string\n**with StringJoiner() as joiner:**\n    for i in range(15):\n        joiner.append(random.choice(string.ascii_letters))\n\nprint(joiner.result)\n```", "```py\ndef no_args():\n    pass\n```", "```py\nno_args()\n```", "```py\ndef mandatory_args(x, y, z):\n    pass\n```", "```py\nmandatory_args(\"a string\", a_variable, 5)\n```", "```py\ndef default_arguments(x, y, z, a=\"Some String\", b=False):\n    pass\n```", "```py\ndefault_arguments(\"a string\", variable, 8, \"\", True)\n```", "```py\ndefault_arguments(\"a longer string\", some_variable, 14)\n```", "```py\ndefault_arguments(\"a string\", variable, 14, b=True)\n```", "```py\n**>>> default_arguments(y=1,z=2,x=3,a=\"hi\")**\n**3 1 2 hi False**\n\n```", "```py\nnumber = 5\ndef funky_function(number=number):\n    print(number)\n\nnumber=6\nfunky_function(8)\nfunky_function()\nprint(number)\n```", "```py\n**>>> def hello(b=[]):**\n**...     b.append('a')**\n**...     print(b)**\n**...**\n**>>> hello()**\n**['a']**\n**>>> hello()**\n**['a', 'a']**\n\n```", "```py\n**def get_pages(*links):**\n    for link in links:\n        #download the link with urllib\n        print(link)\n```", "```py\nget_pages()\nget_pages('http://www.archlinux.org')\nget_pages('http://www.archlinux.org',\n        'http://ccphillips.net/')\n```", "```py\nclass Options:\n    default_options = {\n            'port': 21,\n            'host': 'localhost',\n            'username': None,\n            'password': None,\n            'debug': False,\n            }\n    **def __init__(self, **kwargs):**\n        self.options = dict(Options.default_options)\n        self.options.update(kwargs)\n\n    def __getitem__(self, key):\n        return self.options[key]\n```", "```py\n**>>> options = Options(username=\"dusty\", password=\"drowssap\",**\n **debug=True)**\n**>>> options['debug']**\n**True**\n**>>> options['port']**\n**21**\n**>>> options['username']**\n**'dusty'**\n\n```", "```py\nimport shutil\nimport os.path\n**def augmented_move(target_folder, *filenames,**\n        **verbose=False, **specific):**\n    '''Move all filenames into the target_folder, allowing\n    specific treatment of certain files.'''\n\n    def print_verbose(message, filename):\n        '''print the message only if verbose is enabled'''\n        if verbose:\n            print(message.format(filename))\n\n    for filename in filenames:\n        target_path = os.path.join(target_folder, filename)\n        if filename in specific:\n            if specific[filename] == 'ignore':\n                print_verbose(\"Ignoring {0}\", filename)\n            elif specific[filename] == 'copy':\n                print_verbose(\"Copying {0}\", filename)\n                shutil.copyfile(filename, target_path)\n        else:\n            print_verbose(\"Moving {0}\", filename)\n            shutil.move(filename, target_path)\n```", "```py\n**>>> augmented_move(\"move_here\", \"one\", \"two\")**\n\n```", "```py\n**>>> augmented_move(\"move_here\", \"three\", verbose=True)**\n**Moving three**\n\n```", "```py\n**>>> augmented_move(\"move_here\", \"four\", \"five\", \"six\",**\n **four=\"copy\", five=\"ignore\")**\n\n```", "```py\n**>>> augmented_move(\"move_here\", \"seven\", \"eight\", \"nine\",**\n **seven=\"copy\", verbose=True, eight=\"ignore\")**\n**Copying seven**\n**Ignoring eight**\n**Moving nine**\n\n```", "```py\ndef show_args(arg1, arg2, arg3=\"THREE\"):\n    print(arg1, arg2, arg3)\n\nsome_args = range(3)\nmore_args = {\n        \"arg1\": \"ONE\",\n        \"arg2\": \"TWO\"}\n\nprint(\"Unpacking a sequence:\", end=\" \")\n\n**show_args(*some_args)**\nprint(\"Unpacking a dict:\", end=\" \")\n\n**show_args(**more_args)**\n\n```", "```py\n**Unpacking a sequence: 0 1 2**\n**Unpacking a dict: ONE TWO THREE**\n\n```", "```py\ndef my_function():\n    print(\"The Function Was Called\")\nmy_function.description = \"A silly function\"\n\ndef second_function():\n    print(\"The second was called\")\nsecond_function.description = \"A sillier function.\"\n\ndef another_function(function):\n    print(\"The description:\", end=\" \")\n    print(function.description)\n    print(\"The name:\", end=\" \")\n    print(function.__name__)\n    print(\"The class:\", end=\" \")\n    print(function.__class__)\n    print(\"Now I'll call the function passed in\")\n    function()\n\n**another_function(my_function)**\n**another_function(second_function)**\n\n```", "```py\nThe description: A silly function\nThe name: my_function\nThe class: <class 'function'>\nNow I'll call the function passed in\nThe Function Was Called\nThe description: A sillier function.\nThe name: second_function\nThe class: <class 'function'>\nNow I'll call the function passed in\nThe second was called\n```", "```py\nimport datetime\nimport time\n\nclass TimedEvent:\n    **def __init__(self, endtime, callback):**\n        self.endtime = endtime\n        self.callback = callback\n\n    def ready(self):\n        return self.endtime <= datetime.datetime.now()\n\nclass Timer:\n    def __init__(self):\n        self.events = []\n\n    **def call_after(self, delay, callback):**\n        end_time = datetime.datetime.now() + \\\n                datetime.timedelta(seconds=delay)\n\n        self.events.append(TimedEvent(end_time, callback))\n\n    def run(self):\n        while True:\n            ready_events = (e for e in self.events if e.ready())\n            for event in ready_events:\n                **event.callback(self)**\n                self.events.remove(event)\n            time.sleep(0.5)\n```", "```py\nfrom timer import Timer\nimport datetime\n\ndef format_time(message, *args):\n    now = datetime.datetime.now().strftime(\"%I:%M:%S\")\n    print(message.format(*args, now=now))\n\ndef one(timer):\n    format_time(\"{now}: Called One\")\n\ndef two(timer):\n    format_time(\"{now}: Called Two\")\n\ndef three(timer):\n    format_time(\"{now}: Called Three\")\n\nclass Repeater:\n    def __init__(self):\n        self.count = 0\n    def repeater(self, timer):\n        format_time(\"{now}: repeat {0}\", self.count)\n        self.count += 1\n        timer.call_after(5, self.repeater)\n\ntimer = Timer()\ntimer.call_after(1, one)\ntimer.call_after(2, one)\ntimer.call_after(2, two)\ntimer.call_after(4, two)\ntimer.call_after(3, three)\ntimer.call_after(6, three)\nrepeater = Repeater()\ntimer.call_after(5, repeater.repeater)\nformat_time(\"{now}: Starting\")\ntimer.run()\n```", "```py\n02:53:35: Starting\n02:53:36: Called One\n02:53:37: Called One\n02:53:37: Called Two\n02:53:38: Called Three\n02:53:39: Called Two\n02:53:40: repeat 0\n02:53:41: Called Three\n02:53:45: repeat 1\n02:53:50: repeat 2\n02:53:55: repeat 3\n02:54:00: repeat 4\n```", "```py\nclass A:\n    def print(self):\n        print(\"my class is A\")\n\ndef fake_print():\n    print(\"my class is not A\")\n\na = A()\na.print()\n**a.print = fake_print**\na.print()\n```", "```py\nmy class is A\nmy class is not A\n```", "```py\nclass Repeater:\n    def __init__(self):\n        self.count = 0\n\n    **def __call__(self, timer):**\n        format_time(\"{now}: repeat {0}\", self.count)\n        self.count += 1\n\n        timer.call_after(5, self)\n\ntimer = Timer()\n\ntimer.call_after(5, Repeater())\nformat_time(\"{now}: Starting\")\ntimer.run()\n```", "```py\n**python -m smtpd -n -c DebuggingServer localhost:1025**\n\n```", "```py\nimport smtplib\nfrom email.mime.text import MIMEText\n\ndef send_email(subject, message, from_addr, *to_addrs,\n        host=\"localhost\", port=1025, **headers):\n\n    email = MIMEText(message)\n    email['Subject'] = subject\n    email['From'] = from_addr\n    for header, value in headers.items():\n        email[header] = value\n\n    sender = smtplib.SMTP(host, port)\n    for addr in to_addrs:\n        del email['To']\n        email['To'] = addr\n        sender.sendmail(from_addr, addr, email.as_string())\n    sender.quit()\n```", "```py\ndef send_email(subject, message, from_addr, *to_addrs,\n        host=\"localhost\", port=1025, headers=None):\n\n    headers = {} if headers is None else headers\n```", "```py\n**>>> send_email(\"A model subject\", \"The message contents\",**\n **\"from@example.com\", \"to1@example.com\", \"to2@example.com\")**\n\n```", "```py\n**---------- MESSAGE FOLLOWS ----------**\n**Content-Type: text/plain; charset=\"us-ascii\"**\n**MIME-Version: 1.0**\n**Content-Transfer-Encoding: 7bit**\n**Subject: A model subject**\n**From: from@example.com**\n**To: to1@example.com**\n**X-Peer: 127.0.0.1**\n\n**The message contents**\n**------------ END MESSAGE ------------**\n**---------- MESSAGE FOLLOWS ----------**\n**Content-Type: text/plain; charset=\"us-ascii\"**\n**MIME-Version: 1.0**\n**Content-Transfer-Encoding: 7bit**\n**Subject: A model subject**\n**From: from@example.com**\n**To: to2@example.com**\n**X-Peer: 127.0.0.1**\n\n**The message contents**\n**------------ END MESSAGE ------------**\n\n```", "```py\nfrom collections import defaultdict\nclass MailingList:\n    '''Manage groups of e-mail addresses for sending e-mails.'''\n    def __init__(self):\n        self.email_map = defaultdict(set)\n\n    def add_to_group(self, email, group):\n        self.email_map[email].add(group)\n```", "```py\n    def emails_in_groups(self, *groups):\n        groups = set(groups)\n        emails = set()\n        for e, g in self.email_map.items():\n            if g & groups:\n                emails.add(e)\n        return emails\n```", "```py\ndef send_mailing(self, subject, message, from_addr,\n        *groups, headers=None):\n    emails = self.emails_in_groups(*groups)\n    send_email(subject, message, from_addr,\n            *emails, headers=headers)\n```", "```py\n**python -i mailing_list.py**\n\n```", "```py\n**>>> m = MailingList()**\n\n```", "```py\n**>>> m.add_to_group(\"friend1@example.com\", \"friends\")**\n**>>> m.add_to_group(\"friend2@example.com\", \"friends\")**\n**>>> m.add_to_group(\"family1@example.com\", \"family\")**\n**>>> m.add_to_group(\"pro1@example.com\", \"professional\")**\n\n```", "```py\n**>>> m.send_mailing(\"A Party\",**\n**\"Friends and family only: a party\", \"me@example.com\", \"friends\",**\n**\"family\", headers={\"Reply-To\": \"me2@example.com\"})**\n\n```", "```py\n**email1@mydomain.com group1,group2**\n**email2@mydomain.com group2,group3**\n\n```", "```py\n    def save(self):\n        with open(self.data_file, 'w') as file:\n            for email, groups in self.email_map.items():\n                file.write(\n                    '{} {}\\n'.format(email, ','.join(groups))\n                )\n\n    def load(self):\n        self.email_map = defaultdict(set)\n        try:\n            with open(self.data_file) as file:\n                for line in file:\n                    email, groups = line.strip().split(' ')\n                    groups = set(groups.split(','))\n                    self.email_map[email] = groups\n        except IOError:\n            pass\n```", "```py\n    def __init__(self, data_file):\n        self.data_file = data_file\n        self.email_map = defaultdict(set)\n```", "```py\n**>>> m = MailingList('addresses.db')**\n**>>> m.add_to_group('friend1@example.com', 'friends')**\n**>>> m.add_to_group('family1@example.com', 'friends')**\n**>>> m.add_to_group('family1@example.com', 'family')**\n**>>> m.save()**\n\n```", "```py\n**friend1@example.com friends**\n**family1@example.com friends,family**\n\n```", "```py\n**>>> m = MailingList('addresses.db')**\n**>>> m.email_map**\n**defaultdict(<class 'set'>, {})**\n**>>> m.load()**\n**>>> m.email_map**\n**defaultdict(<class 'set'>, {'friend2@example.com': {'friends\\n'}, 'family1@example.com': {'family\\n'}, 'friend1@example.com': {'friends\\n'}})**\n\n```", "```py\n    def __enter__(self):\n        self.load()\n        return self\n\n    def __exit__(self, type, value, tb):\n        self.save()\n```", "```py\n**>>> with MailingList('addresses.db') as ml:**\n**...    ml.add_to_group('friend2@example.com', 'friends')**\n**...    ml.send_mailing(\"What's up\", \"hey friends, how's it going\", 'me@example.com', 'friends')**\n\n```"]