["```py\n**>>> o = object()**\n**>>> o.x = 5**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**AttributeError: 'object' object has no attribute 'x'**\n\n```", "```py\nclass MyObject:\n    pass\n```", "```py\n**>>> m = MyObject()**\n**>>> m.x = \"hello\"**\n**>>> m.x**\n**'hello'**\n\n```", "```py\n**>>> stock = \"FB\", 75.00, 75.03, 74.90**\n**>>> stock2 = (\"FB\", 75.00, 75.03, 74.90)**\n\n```", "```py\nimport datetime\ndef middle(stock, date):\n    **symbol, current, high, low = stock**\n    return (((high + low) / 2), date)\n\n**mid_value, date = middle((\"FB\", 75.00, 75.03, 74.90),**\n        **datetime.date(2014, 10, 31))**\n\n```", "```py\n**>>> stock = \"FB\", 75.00, 75.03, 74.90**\n**>>> high = stock[2]**\n**>>> high**\n**75.03**\n\n```", "```py\n**>>> stock[1:3]**\n**(75.00, 75.03)**\n\n```", "```py\nfrom collections import namedtuple\n**Stock = namedtuple(\"Stock\", \"symbol current high low\")**\nstock = Stock(\"FB\", 75.00, high=75.03, low=74.90)\n```", "```py\n**>>> stock.high**\n**75.03**\n**>>> symbol, current, high, low = stock**\n**>>> current**\n**75.00**\n\n```", "```py\n**>>> stock.current = 74.98**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**AttributeError: can't set attribute**\n\n```", "```py\nstocks = {\"GOOG\": (613.30, 625.86, 610.50),\n          \"MSFT\": (30.25, 30.70, 30.19)}\n```", "```py\n**>>> stocks[\"GOOG\"]**\n**(613.3, 625.86, 610.5)**\n**>>> stocks[\"RIM\"]**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**KeyError: 'RIM'**\n\n```", "```py\n**>>> print(stocks.get(\"RIM\"))**\n**None**\n**>>> stocks.get(\"RIM\", \"NOT FOUND\")**\n**'NOT FOUND'**\n\n```", "```py\n**>>> stocks.setdefault(\"GOOG\", \"INVALID\")**\n**(613.3, 625.86, 610.5)**\n**>>> stocks.setdefault(\"BBRY\", (10.50, 10.62, 10.39))**\n**(10.50, 10.62, 10.39)**\n**>>> stocks[\"BBRY\"]**\n**(10.50, 10.62, 10.39)**\n\n```", "```py\n**>>> for stock, values in stocks.items():**\n**...     print(\"{} last value is {}\".format(stock, values[0]))**\n**...**\n**GOOG last value is 613.3**\n**BBRY last value is 10.50**\n**MSFT last value is 30.25**\n\n```", "```py\n**>>> stocks[\"GOOG\"] = (597.63, 610.00, 596.28)**\n**>>> stocks['GOOG']**\n**(597.63, 610.0, 596.28)**\n\n```", "```py\nrandom_keys = {}\nrandom_keys[\"astring\"] = \"somestring\"\nrandom_keys[5] = \"aninteger\"\nrandom_keys[25.2] = \"floats work too\"\nrandom_keys[(\"abc\", 123)] = \"so do tuples\"\n\nclass AnObject:\n    def __init__(self, avalue):\n        self.avalue = avalue\n\nmy_object = AnObject(14)\nrandom_keys[my_object] = \"We can even store objects\"\nmy_object.avalue = 12\ntry:\n    random_keys[[1,2,3]] = \"we can't store lists though\"\nexcept:\n    print(\"unable to store list\\n\")\n\nfor key, value in random_keys.items():\n    print(\"{} has value {}\".format(key, value))\n```", "```py\ndef letter_frequency(sentence):\n    frequencies = {}\n    for letter in sentence:\n        **frequency = frequencies.setdefault(letter, 0)**\n        frequencies[letter] = frequency + 1\n    return frequencies\n```", "```py\n**from collections import defaultdict**\ndef letter_frequency(sentence):\n    **frequencies = defaultdict(int)**\n    for letter in sentence:\n        frequencies[letter] += 1\n    return frequencies\n```", "```py\nfrom collections import defaultdict\nnum_items = 0\ndef tuple_counter():\n    global num_items\n    num_items += 1\n    return (num_items, [])\n\n**d = defaultdict(tuple_counter)**\n\n```", "```py\n**>>> d = defaultdict(tuple_counter)**\n**>>> d['a'][1].append(\"hello\")**\n**>>> d['b'][1].append('world')**\n**>>> d**\n**defaultdict(<function tuple_counter at 0x82f2c6c>,**\n**{'a': (1, ['hello']), 'b': (2, ['world'])})**\n\n```", "```py\nfrom collections import Counter\ndef letter_frequency(sentence):\n    return Counter(sentence)\n```", "```py\nfrom collections import Counter\n\nresponses = [\n    \"vanilla\",\n    \"chocolate\",\n    \"vanilla\",\n    \"vanilla\",\n    \"caramel\",\n    \"strawberry\",\n    \"vanilla\"\n]\n\nprint(\n    \"The children voted for {} ice cream\".format(\n        Counter(responses).most_common(1)[0][0]\n    )\n)\n```", "```py\nimport string\n**CHARACTERS  = list(string.ascii_letters) + [\" \"]**\n\ndef letter_frequency(sentence):\n    **frequencies = [(c, 0) for c in CHARACTERS]**\n    for letter in sentence:\n        index = CHARACTERS.index(letter)\n        **frequencies[index] = (letter,frequencies[index][1]+1)**\n    return frequencies\n```", "```py\nclass WeirdSortee:\n    def __init__(self, string, number, sort_num):\n        self.string = string\n        self.number = number\n        self.sort_num = sort_num\n\n    **def __lt__(self, object):**\n        **if self.sort_num:**\n            **return self.number < object.number**\n        **return self.string < object.string**\n\n    def __repr__(self):\n        return\"{}:{}\".format(self.string, self.number)\n```", "```py\n**>>> a = WeirdSortee('a', 4, True)**\n**>>> b = WeirdSortee('b', 3, True)**\n**>>> c = WeirdSortee('c', 2, True)**\n**>>> d = WeirdSortee('d', 1, True)**\n**>>> l = [a,b,c,d]**\n**>>> l**\n**[a:4, b:3, c:2, d:1]**\n**>>> l.sort()**\n**>>> l**\n**[d:1, c:2, b:3, a:4]**\n**>>> for i in l:**\n**...     i.sort_num = False**\n**...**\n**>>> l.sort()**\n**>>> l**\n**[a:4, b:3, c:2, d:1]**\n\n```", "```py\nfrom functools import total_ordering\n\n@total_ordering\nclass WeirdSortee:\n    def __init__(self, string, number, sort_num):\n        self.string = string\n        self.number = number\n        self.sort_num = sort_num\n\n    def __lt__(self, object):\n        if self.sort_num:\n            return self.number < object.number\n        return self.string < object.string\n\n    def __repr__(self):\n        return\"{}:{}\".format(self.string, self.number)\n\n    def __eq__(self, object):\n        return all((\n            self.string == object.string,\n            self.number == object.number,\n            self.sort_num == object.number\n        ))\n```", "```py\n**>>> l = [\"hello\", \"HELP\", \"Helo\"]**\n**>>> l.sort()**\n**>>> l**\n**['HELP', 'Helo', 'hello']**\n**>>> l.sort(key=str.lower)**\n**>>> l**\n**['hello', 'Helo', 'HELP']**\n\n```", "```py\n**>>> from operator import itemgetter**\n**>>> l = [('h', 4), ('n', 6), ('o', 5), ('p', 1), ('t', 3), ('y', 2)]**\n**>>> l.sort(key=itemgetter(1))**\n**>>> l**\n**[('p', 1), ('y', 2), ('t', 3), ('h', 4), ('o', 5), ('n', 6)]**\n\n```", "```py\nsong_library = [(\"Phantom Of The Opera\", \"Sarah Brightman\"),\n        (\"Knocking On Heaven's Door\", \"Guns N' Roses\"),\n        (\"Captain Nemo\", \"Sarah Brightman\"),\n        (\"Patterns In The Ivy\", \"Opeth\"),\n        (\"November Rain\", \"Guns N' Roses\"),\n        (\"Beautiful\", \"Sarah Brightman\"),\n        (\"Mal's Song\", \"Vixy and Tony\")]\n\n**artists = set()**\nfor song, artist in song_library:\n    **artists.add(artist)**\n\nprint(artists)\n```", "```py\n**{'Sarah Brightman', \"Guns N' Roses\", 'Vixy and Tony', 'Opeth'}**\n\n```", "```py\n**>>> \"Opeth\" in artists**\n**True**\n**>>> for artist in artists:**\n**...     print(\"{} plays good music\".format(artist))**\n**...**\n**Sarah Brightman plays good music**\n**Guns N' Roses plays good music**\n**Vixy and Tony play good music**\n**Opeth plays good music**\n**>>> alphabetical = list(artists)**\n**>>> alphabetical.sort()**\n**>>> alphabetical**\n**[\"Guns N' Roses\", 'Opeth', 'Sarah Brightman', 'Vixy and Tony']**\n\n```", "```py\nmy_artists = {\"Sarah Brightman\", \"Guns N' Roses\",\n        \"Opeth\", \"Vixy and Tony\"}\n\nauburns_artists = {\"Nickelback\", \"Guns N' Roses\",\n        \"Savage Garden\"}\n\nprint(\"All: {}\".format(my_artists.union(auburns_artists)))\nprint(\"Both: {}\".format(auburns_artists.intersection(my_artists)))\nprint(\"Either but not both: {}\".format(\n    my_artists.symmetric_difference(auburns_artists)))\n```", "```py\n**All: {'Sarah Brightman', \"Guns N' Roses\", 'Vixy and Tony',**\n**'Savage Garden', 'Opeth', 'Nickelback'}**\n**Both: {\"Guns N' Roses\"}**\n**Either but not both: {'Savage Garden', 'Opeth', 'Nickelback',**\n**'Sarah Brightman', 'Vixy and Tony'}**\n\n```", "```py\nmy_artists = {\"Sarah Brightman\", \"Guns N' Roses\",\n        \"Opeth\", \"Vixy and Tony\"}\n\nbands = {\"Guns N' Roses\", \"Opeth\"}\n\nprint(\"my_artists is to bands:\")\nprint(\"issuperset: {}\".format(my_artists.issuperset(bands)))\nprint(\"issubset: {}\".format(my_artists.issubset(bands)))\nprint(\"difference: {}\".format(my_artists.difference(bands)))\nprint(\"*\"*20)\nprint(\"bands is to my_artists:\")\nprint(\"issuperset: {}\".format(bands.issuperset(my_artists)))\nprint(\"issubset: {}\".format(bands.issubset(my_artists)))\nprint(\"difference: {}\".format(bands.difference(my_artists)))\n```", "```py\n**my_artists is to bands:**\n**issuperset: True**\n**issubset: False**\n**difference: {'Sarah Brightman', 'Vixy and Tony'}**\n************************\n**bands is to my_artists:**\n**issuperset: False**\n**issubset: True**\n**difference: set()**\n\n```", "```py\nc = a + b\n**c = a.add(b)**\n\nl[0] = 5\n**l.setitem(0, 5)**\nd[key] = value\n**d.setitem(key, value)**\n\nfor x in alist:\n    #do something with x\n**it = alist.iterator()**\n**while it.has_next():**\n **x = it.next()**\n    **#do something with x**\n\n```", "```py\nclass SillyInt(int):\n    **def __add__(self, num):**\n        return 0\n```", "```py\n**>>> a = SillyInt(1)**\n**>>> b = SillyInt(2)**\n**>>> a + b**\n**0**\n\n```", "```py\n**>>> dir(list)**\n\n**['__add__', '__class__', '__contains__', '__delattr__','__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'**\n\n```", "```py\n**>>> help(list.__add__)**\n**Help on wrapper_descriptor:**\n\n**__add__(self, value, /)**\n **Return self+value.**\n\n```", "```py\nfrom collections import KeysView, ItemsView, ValuesView\nclass DictSorted(dict):\n    def __new__(*args, **kwargs):\n        new_dict = dict.__new__(*args, **kwargs)\n        new_dict.ordered_keys = []\n        return new_dict\n\n    def __setitem__(self, key, value):\n        '''self[key] = value syntax'''\n        if key not in self.ordered_keys:\n            self.ordered_keys.append(key)\n        super().__setitem__(key, value)\n\n    def setdefault(self, key, value):\n        if key not in self.ordered_keys:\n            self.ordered_keys.append(key)\n        return super().setdefault(key, value)\n\n    def keys(self):\n        return KeysView(self)\n\n    def values(self):\n        return ValuesView(self)\n\n    def items(self):\n        return ItemsView(self)\n\n    def __iter__(self):\n        '''for x in self syntax'''\n        return self.ordered_keys.__iter__()\n```", "```py\n**>>> ds = DictSorted()**\n**>>> d = {}**\n**>>> ds['a'] = 1**\n**>>> ds['b'] = 2**\n**>>> ds.setdefault('c', 3)**\n**3**\n**>>> d['a'] = 1**\n**>>> d['b'] = 2**\n**>>> d.setdefault('c', 3)**\n**3**\n**>>> for k,v in ds.items():**\n**...     print(k,v)**\n**...**\n**a 1**\n**b 2**\n**c 3**\n**>>> for k,v in d.items():**\n**...     print(k,v)**\n**...**\n**a 1**\n**c 3**\n**b 2**\n\n```", "```py\n**>>> from queue import Queue**\n**>>> lineup = Queue(maxsize=3)**\n**>>> lineup.get(block=False)**\n**Traceback (most recent call last):**\n **File \"<ipython-input-5-a1c8d8492c59>\", line 1, in <module>**\n **lineup.get(block=False)**\n **File \"/usr/lib64/python3.3/queue.py\", line 164, in get**\n **raise Empty**\n**queue.Empty**\n**>>> lineup.put(\"one\")**\n**>>> lineup.put(\"two\")**\n**>>> lineup.put(\"three\")**\n**>>> lineup.put(\"four\", timeout=1)**\n**Traceback (most recent call last):**\n **File \"<ipython-input-9-4b9db399883d>\", line 1, in <module>**\n **lineup.put(\"four\", timeout=1)**\n **File \"/usr/lib64/python3.3/queue.py\", line 144, in put**\n**raise Full**\n**queue.Full**\n**>>> lineup.full()**\n**True**\n**>>> lineup.get()**\n**'one'**\n**>>> lineup.get()**\n**'two'**\n**>>> lineup.get()**\n**'three'**\n**>>> lineup.empty()**\n**True**\n\n```", "```py\n**>>> from queue import LifoQueue**\n**>>> stack = LifoQueue(maxsize=3)**\n**>>> stack.put(\"one\")**\n**>>> stack.put(\"two\")**\n**>>> stack.put(\"three\")**\n**>>> stack.put(\"four\", block=False)**\n**Traceback (most recent call last):**\n **File \"<ipython-input-21-5473b359e5a8>\", line 1, in <module>**\n **stack.put(\"four\", block=False)**\n **File \"/usr/lib64/python3.3/queue.py\", line 133, in put**\n **raise Full**\n**queue.Full**\n\n**>>> stack.get()**\n**'three'**\n**>>> stack.get()**\n**'two'**\n**>>> stack.get()**\n**'one'**\n**>>> stack.empty()**\n**True**\n**>>> stack.get(timeout=1)**\n**Traceback (most recent call last):**\n **File \"<ipython-input-26-28e084a84a10>\", line 1, in <module>**\n **stack.get(timeout=1)**\n **File \"/usr/lib64/python3.3/queue.py\", line 175, in get**\n **raise Empty**\n**queue.Empty**\n\n```", "```py\n**>>> heap.put((3, \"three\"))**\n**>>> heap.put((4, \"four\"))**\n**>>> heap.put((1, \"one\") )**\n**>>> heap.put((2, \"two\"))**\n**>>> heap.put((5, \"five\"), block=False)**\n**Traceback (most recent call last):**\n **File \"<ipython-input-23-d4209db364ed>\", line 1, in <module>**\n **heap.put((5, \"five\"), block=False)**\n **File \"/usr/lib64/python3.3/queue.py\", line 133, in put**\n **raise Full**\n**Full**\n**>>> while not heap.empty():**\n **print(heap.get())**\n**(1, 'one')**\n**(2, 'two')**\n**(3, 'three')**\n**(4, 'four')**\n\n```", "```py\n<html>\n    <body>\n        <a href=\"contact.html\">Contact us</a>\n        <a href=\"blog.html\">Blog</a>\n        <a href=\"esme.html\">My Dog</a>\n        <a href=\"/hobbies.html\">Some hobbies</a>\n        <a href=\"/contact.html\">Contact AGAIN</a>\n        <a href=\"http://www.archlinux.org/\">Favorite OS</a>\n    </body>\n</html>\n```", "```py\n**python3 -m http.server**\n\n```", "```py\nfrom urllib.request import urlopen\nfrom urllib.parse import urlparse\nimport re\nimport sys\nLINK_REGEX = re.compile(\n        \"<a [^>]*href=['\\\"]([^'\\\"]+)['\\\"][^>]*>\")\n\nclass LinkCollector:\n    def __init__(self, url):\n        self.url = \"\" + urlparse(url).netloc\n\n    def collect_links(self, path=\"/\"):\n        full_url = self.url + path\n        page = str(urlopen(full_url).read())\n        links = LINK_REGEX.findall(page)\n        print(links)\n\nif __name__ == \"__main__\":\n    LinkCollector(sys.argv[1]).collect_links()\n```", "```py\n['contact.html', 'blog.html', 'esme.html', '/hobbies.html',\n'/contact.html', 'http://www.archlinux.org/']\n```", "```py\n    def normalize_url(self, path, link):\n        if link.startswith(\"http://\"):\n            return link\n        elif link.startswith(\"/\"):\n            return self.url + link\n        else:\n            return self.url + path.rpartition(\n                '/')[0] + '/' + link\n```", "```py\nclass LinkCollector:\n    def __init__(self, url):\n        self.url = \"http://+\" + urlparse(url).netloc\n        **self.collected_links = set()**\n        **self.visited_links = set()**\n\n    def collect_links(self, path=\"/\"):\n        full_url = self.url + path\n        **self.visited_links.add(full_url)**\n        page = str(urlopen(full_url).read())\n        links = LINK_REGEX.findall(page)\n        **links = {self.normalize_url(path, link**\n            **) for link in links}**\n        **self.collected_links = links.union(**\n                **self.collected_links)**\n        **unvisited_links = links.difference(**\n                **self.visited_links)**\n        **print(links, self.visited_links,**\n                **self.collected_links, unvisited_links)**\n\n```", "```py\n        for link in unvisited_links:\n            if link.startswith(self.url):\n                self.collect_links(urlparse(link).path)\n```", "```py\nif __name__ == \"__main__\":\n    collector = LinkCollector(sys.argv[1])\n    collector.collect_links()\n    for link in collector.collected_links:\n        print(link)\n```", "```py\n**$ python3 link_collector.py http://localhost:8000**\n**http://localhost:8000/**\n**http://en.wikipedia.org/wiki/Cavalier_King_Charles_Spaniel**\n**http://beluminousyoga.com**\n**http://archlinux.me/dusty/**\n**http://localhost:8000/blog.html**\n**http://ccphillips.net/**\n**http://localhost:8000/contact.html**\n**http://localhost:8000/taichi.html**\n**http://www.archlinux.org/**\n**http://localhost:8000/esme.html**\n**http://localhost:8000/hobbies.html**\n\n```", "```py\nfrom urllib.request import urlopen\nfrom urllib.parse import urlparse\nimport re\nimport sys\nLINK_REGEX = re.compile(\n        \"<a [^>]*href=['\\\"]([^'\\\"]+)['\\\"][^>]*>\")\n\nclass LinkCollector:\n    def __init__(self, url):\n        self.url = \"http://%s\" % urlparse(url).netloc\n        **self.collected_links = {}**\n        self.visited_links = set()\n\n    def collect_links(self, path=\"/\"):\n        full_url = self.url + path\n        self.visited_links.add(full_url)\n        page = str(urlopen(full_url).read())\n        links = LINK_REGEX.findall(page)\n        links = {self.normalize_url(path, link\n            ) for link in links}\n        **self.collected_links[full_url] = links**\n        **for link in links:**\n            **self.collected_links.setdefault(link, set())**\n        unvisited_links = links.difference(\n                self.visited_links)\n        for link in unvisited_links:\n            if link.startswith(self.url):\n                self.collect_links(urlparse(link).path)\n\n    def normalize_url(self, path, link):\n        if link.startswith(\"http://\"):\n            return link\n        elif link.startswith(\"/\"):\n            return self.url + link\n        else:\n            return self.url + path.rpartition('/'\n                    )[0] + '/' + link\nif __name__ == \"__main__\":\n    collector = LinkCollector(sys.argv[1])\n    collector.collect_links()\n    **for link, item in collector.collected_links.items():**\n        **print(\"{}: {}\".format(link, item))**\n\n```", "```py\nfrom urllib.request import urlopen\nfrom urllib.parse import urlparse\nimport re\nimport sys\nfrom queue import Queue\nLINK_REGEX = re.compile(\"<a [^>]*href=['\\\"]([^'\\\"]+)['\\\"][^>]*>\")\n\nclass LinkCollector:\n    def __init__(self, url):\n        self.url = \"http://%s\" % urlparse(url).netloc\n        self.collected_links = {}\n        self.visited_links = set()\n\n    def collect_links(self):\n        queue = Queue()\n        queue.put(self.url)\n        while not queue.empty():\n            url = queue.get().rstrip('/')\n            self.visited_links.add(url)\n            page = str(urlopen(url).read())\n            links = LINK_REGEX.findall(page)\n            links = {\n                self.normalize_url(urlparse(url).path, link)\n                for link in links\n            }\n            self.collected_links[url] = links\n            for link in links:\n                self.collected_links.setdefault(link, set())\n            unvisited_links = links.difference(self.visited_links)\n            for link in unvisited_links:\n                if link.startswith(self.url):\n                    queue.put(link)\n\n    def normalize_url(self, path, link):\n        if link.startswith(\"http://\"):\n            return link.rstrip('/')\n        elif link.startswith(\"/\"):\n            return self.url + link.rstrip('/')\n        else:\n            return self.url + path.rpartition('/')[0] + '/' + link.rstrip('/')\n\nif __name__ == \"__main__\":\n    collector = LinkCollector(sys.argv[1])\n    collector.collect_links()\n    for link, item in collector.collected_links.items():\n        print(\"%s: %s\" % (link, item))\n```"]