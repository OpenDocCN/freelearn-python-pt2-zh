["```py\nclass MySubClass(object):\n    pass\n```", "```py\nclass Contact:\n    **all_contacts = []**\n\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        **Contact.all_contacts.append(self)**\n\n```", "```py\nclass Supplier(Contact):\n    def order(self, order):\n        print(\"If this were a real system we would send \"\n                \"'{}' order to '{}'\".format(order, self.name))\n```", "```py\n**>>> c = Contact(\"Some Body\", \"somebody@example.net\")**\n**>>> s = Supplier(\"Sup Plier\", \"supplier@example.net\")**\n**>>> print(c.name, c.email, s.name, s.email)**\n**Some Body somebody@example.net Sup Plier supplier@example.net**\n**>>> c.all_contacts**\n**[<__main__.Contact object at 0xb7375ecc>,**\n **<__main__.Supplier object at 0xb7375f8c>]**\n**>>> c.order(\"I need pliers\")**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n**AttributeError: 'Contact' object has no attribute 'order'**\n**>>> s.order(\"I need pliers\")**\n**If this were a real system we would send 'I need pliers' order to**\n**'Sup Plier '**\n\n```", "```py\nclass ContactList(list):\n    def search(self, name):\n        '''Return all contacts that contain the search value\n        in their name.'''\n        matching_contacts = []\n        for contact in self:\n            if name in contact.name:\n                matching_contacts.append(contact)\n        return matching_contacts\n\nclass Contact:\n    **all_contacts = ContactList()**\n\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n        self.all_contacts.append(self)\n```", "```py\n**>>> c1 = Contact(\"John A\", \"johna@example.net\")**\n**>>> c2 = Contact(\"John B\", \"johnb@example.net\")**\n**>>> c3 = Contact(\"Jenna C\", \"jennac@example.net\")**\n**>>> [c.name for c in Contact.all_contacts.search('John')]**\n**['John A', 'John B']**\n\n```", "```py\n**>>> [] == list()**\n**True**\n\n```", "```py\n**>>> isinstance([], object)**\n**True**\n\n```", "```py\nclass LongNameDict(dict):\n    def longest_key(self):\n        longest = None\n        for key in self:\n            if not longest or len(key) > len(longest):\n                longest = key\n        return longest\n```", "```py\n**>>> longkeys = LongNameDict()**\n**>>> longkeys['hello'] = 1**\n**>>> longkeys['longest yet'] = 5**\n**>>> longkeys['hello2'] = 'world'**\n**>>> longkeys.longest_key()**\n**'longest yet'**\n\n```", "```py\nclass Friend(Contact):\n    def __init__(self, name, email, phone):\n        self.name = name\n        self.email = email\n        self.phone = phone\n```", "```py\nclass Friend(Contact):\n    def __init__(self, name, email, phone):\n        **super().__init__(name, email)**\n        self.phone = phone\n```", "```py\nclass MailSender:\n    def send_mail(self, message):\n        print(\"Sending mail to \" + self.email)\n        # Add e-mail logic here\n```", "```py\nclass EmailableContact(Contact, MailSender):\n    pass\n```", "```py\n**>>> e = EmailableContact(\"John Smith\", \"jsmith@example.net\")**\n**>>> Contact.all_contacts**\n**[<__main__.EmailableContact object at 0xb7205fac>]**\n**>>> e.send_mail(\"Hello, test e-mail here\")**\n**Sending mail to jsmith@example.net**\n\n```", "```py\nclass AddressHolder:\n    def __init__(self, street, city, state, code):\n        self.street = street\n        self.city = city\n        self.state = state\n        self.code = code\n```", "```py\nclass Friend(Contact, AddressHolder):\n    def __init__(\n        self, name, email, phone,street, city, state, code):\n        Contact.__init__(self, name, email)\n        AddressHolder.__init__(self, street, city, state, code)\n        self.phone = phone\n```", "```py\nclass BaseClass:\n    num_base_calls = 0\n    def call_me(self):\n        print(\"Calling method on Base Class\")\n        self.num_base_calls += 1\n\nclass LeftSubclass(BaseClass):\n    num_left_calls = 0\n    def call_me(self):\n        **BaseClass.call_me(self)**\n        print(\"Calling method on Left Subclass\")\n        self.num_left_calls += 1\n\nclass RightSubclass(BaseClass):\n    num_right_calls = 0\n    def call_me(self):\n        **BaseClass.call_me(self)**\n        print(\"Calling method on Right Subclass\")\n        self.num_right_calls += 1\n\nclass Subclass(LeftSubclass, RightSubclass):\n    num_sub_calls = 0\n    def call_me(self):\n        **LeftSubclass.call_me(self)**\n        **RightSubclass.call_me(self)**\n        print(\"Calling method on Subclass\")\n        self.num_sub_calls += 1\n```", "```py\n**>>> s = Subclass()**\n**>>> s.call_me()**\n**Calling method on Base Class**\n**Calling method on Left Subclass**\n**Calling method on Base Class**\n**Calling method on Right Subclass**\n**Calling method on Subclass**\n**>>> print(**\n**... s.num_sub_calls,**\n**... s.num_left_calls,**\n**... s.num_right_calls,**\n**... s.num_base_calls)**\n**1 1 1 2**\n\n```", "```py\nclass BaseClass:\n    num_base_calls = 0\n    def call_me(self):\n        print(\"Calling method on Base Class\")\n        self.num_base_calls += 1\n\nclass LeftSubclass(BaseClass):\n    num_left_calls = 0\n    def call_me(self):\n        **super().call_me()**\n        print(\"Calling method on Left Subclass\")\n        self.num_left_calls += 1\n\nclass RightSubclass(BaseClass):\n    num_right_calls = 0\n    def call_me(self):\n        **super().call_me()**\n        print(\"Calling method on Right Subclass\")\n        self.num_right_calls += 1\n\nclass Subclass(LeftSubclass, RightSubclass):\n    num_sub_calls = 0\n    def call_me(self):\n        **super().call_me()**\n        print(\"Calling method on Subclass\")\n        self.num_sub_calls += 1\n```", "```py\n**>>> s = Subclass()**\n**>>> s.call_me()**\n**Calling method on Base Class**\n**Calling method on Right Subclass**\n**Calling method on Left Subclass**\n**Calling method on Subclass**\n**>>> print(s.num_sub_calls, s.num_left_calls, s.num_right_calls,**\n**s.num_base_calls)**\n**1 1 1 1**\n\n```", "```py\nContact.__init__(self, name, email)\nAddressHolder.__init__(self, street, city, state, code)\n```", "```py\nclass Contact:\n    all_contacts = []\n\n    **def __init__(self, name='', email='', **kwargs):**\n        **super().__init__(**kwargs)**\n        self.name = name\n        self.email = email\n        self.all_contacts.append(self)\n\nclass AddressHolder:\n    **def __init__(self, street='', city='', state='', code='',**\n            ****kwargs):**\n        super().__init__(**kwargs)\n        self.street = street\n        self.city = city\n        self.state = state\n        self.code = code\n\nclass Friend(Contact, AddressHolder):\n    **def __init__(self, phone='', **kwargs):**\n        super().__init__(**kwargs)\n        self.phone = phone\n```", "```py\naudio_file.play()\n```", "```py\nclass AudioFile:\n    def __init__(self, filename):\n        **if not filename.endswith(self.ext):**\n            raise Exception(\"Invalid file format\")\n\n        self.filename = filename\n\nclass MP3File(AudioFile):\n    **ext = \"mp3\"**\n    def play(self):\n        print(\"playing {} as mp3\".format(self.filename))\n\nclass WavFile(AudioFile):\n    **ext = \"wav\"**\n    def play(self):\n        print(\"playing {} as wav\".format(self.filename))\n\nclass OggFile(AudioFile):\n    **ext = \"ogg\"**\n    def play(self):\n        print(\"playing {} as ogg\".format(self.filename))\n```", "```py\n**>>> ogg = OggFile(\"myfile.ogg\")**\n**>>> ogg.play()**\n**playing myfile.ogg as ogg**\n**>>> mp3 = MP3File(\"myfile.mp3\")**\n**>>> mp3.play()**\n**playing myfile.mp3 as mp3**\n**>>> not_an_mp3 = MP3File(\"myfile.ogg\")**\n**Traceback (most recent call last):**\n **File \"<stdin>\", line 1, in <module>**\n **File \"polymorphic_audio.py\", line 4, in __init__**\n **raise Exception(\"Invalid file format\")**\n**Exception: Invalid file format**\n\n```", "```py\nclass FlacFile:\n    def __init__(self, filename):\n        if not filename.endswith(\".flac\"):\n            raise Exception(\"Invalid file format\")\n\n        self.filename = filename\n\n    def play(self):\n        print(\"playing {} as flac\".format(self.filename))\n```", "```py\n>>> from collections import Container\n>>> Container.__abstractmethods__\nfrozenset(['__contains__'])\n```", "```py\nHelp on method __contains__ in module _abcoll:__contains__(self, x) unbound _abcoll.Container method\n```", "```py\nclass OddContainer:\n    def __contains__(self, x):\n        if not isinstance(x, int) or not x % 2:\n            return False\n        return True\n```", "```py\n>>> from collections import Container\n>>> odd_container = OddContainer()\n>>> isinstance(odd_container, Container)\nTrue\n>>> issubclass(OddContainer, Container)\nTrue\n```", "```py\n>>> 1 in odd_container\nTrue\n>>> 2 in odd_container\nFalse\n>>> 3 in odd_container\nTrue\n>>> \"a string\" in odd_container\nFalse\n```", "```py\nimport abc\n\nclass MediaLoader(metaclass=abc.ABCMeta):\n    @abc.abstractmethod\n    def play(self):\n        pass\n\n    @abc.abstractproperty\n    def ext(self):\n        pass\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is MediaLoader:\n            attrs = set(dir(C))\n            if set(cls.__abstractmethods__) <= attrs:\n                return True\n\n        return NotImplemented\n```", "```py\n>>> class Wav(MediaLoader):\n...     pass\n...\n>>> x = Wav()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: Can't instantiate abstract class Wav with abstract methods ext, play\n>>> class Ogg(MediaLoader):\n...     ext = '.ogg'\n...     def play(self):\n...         pass\n...\n>>> o = Ogg()\n```", "```py\n    @classmethod\n```", "```py\n    def __subclasshook__(cls, C):\n```", "```py\n        if cls is MediaLoader:\n```", "```py\n            attrs = set(dir(C))\n```", "```py\n            if set(cls.__abstractmethods__) <= attrs:\n```", "```py\n                return True\n```", "```py\n        return NotImplemented\n```", "```py\n>>> class Ogg():\n...     ext = '.ogg'\n...     def play(self):\n...         print(\"this will play an ogg file\")\n...\n>>> issubclass(Ogg, MediaLoader)\nTrue\n>>> isinstance(Ogg(), MediaLoader)\nTrue\n```", "```py\nclass Property:\n    **def __init__(self, square_feet='', beds='',**\n            **baths='', **kwargs):**\n        super().__init__(**kwargs)\n        self.square_feet = square_feet\n        self.num_bedrooms = beds\n        self.num_baths = baths\n\n    def display(self):\n        print(\"PROPERTY DETAILS\")\n        print(\"================\")\n        print(\"square footage: {}\".format(self.square_feet))\n        print(\"bedrooms: {}\".format(self.num_bedrooms))\n        print(\"bathrooms: {}\".format(self.num_baths))\n        print()\n\n    def prompt_init():\n        return dict(square_feet=input(\"Enter the square feet: \"),\n                beds=input(\"Enter number of bedrooms: \"),\n                baths=input(\"Enter number of baths: \"))\n    **prompt_init = staticmethod(prompt_init)**\n\n```", "```py\nclass Apartment(Property):\n    valid_laundries = (\"coin\", \"ensuite\", \"none\")\n    valid_balconies = (\"yes\", \"no\", \"solarium\")\n\n    def __init__(self, balcony='', laundry='', **kwargs):\n        super().__init__(**kwargs)\n        self.balcony = balcony\n        self.laundry = laundry\n\n    def display(self):\n        super().display()\n        print(\"APARTMENT DETAILS\")\n        print(\"laundry: %s\" % self.laundry)\n        print(\"has balcony: %s\" % self.balcony)\n\n    def prompt_init():\n        parent_init = Property.prompt_init()\n        laundry = ''\n        while laundry.lower() not in \\\n                Apartment.valid_laundries:\n            laundry = input(\"What laundry facilities does \"\n                    \"the property have? ({})\".format(\n                    \", \".join(Apartment.valid_laundries)))\n        balcony = ''\n        while balcony.lower() not in \\\n                Apartment.valid_balconies:\n            balcony = input(\n                \"Does the property have a balcony? \"\n                \"({})\".format(\n                \", \".join(Apartment.valid_balconies)))\n        parent_init.update({\n            \"laundry\": laundry,\n            \"balcony\": balcony\n        })\n        return parent_init\n    prompt_init = staticmethod(prompt_init)\n```", "```py\ndef get_valid_input(input_string, valid_options):\n    input_string += \" ({}) \".format(\", \".join(valid_options))\n    response = input(input_string)\n    while response.lower() not in valid_options:\n        response = input(input_string)\n    return response\n```", "```py\n**>>> get_valid_input(\"what laundry?\", (\"coin\", \"ensuite\", \"none\"))**\n**what laundry? (coin, ensuite, none) hi**\n**what laundry? (coin, ensuite, none) COIN**\n**'COIN'**\n\n```", "```py\n    def prompt_init():\n        parent_init = Property.prompt_init()\n        laundry = get_valid_input(\n                \"What laundry facilities does \"\n                \"the property have? \",\n                Apartment.valid_laundries)\n        balcony = get_valid_input(\n            \"Does the property have a balcony? \",\n            Apartment.valid_balconies)\n        parent_init.update({\n            \"laundry\": laundry,\n            \"balcony\": balcony\n        })\n        return parent_init\n    prompt_init = staticmethod(prompt_init)\n```", "```py\nclass House(Property):\n    valid_garage = (\"attached\", \"detached\", \"none\")\n    valid_fenced = (\"yes\", \"no\")\n\n    def __init__(self, num_stories='',\n            garage='', fenced='', **kwargs):\n        super().__init__(**kwargs)\n        self.garage = garage\n        self.fenced = fenced\n        self.num_stories = num_stories\n\n    def display(self):\n        super().display()\n        print(\"HOUSE DETAILS\")\n        print(\"# of stories: {}\".format(self.num_stories))\n        print(\"garage: {}\".format(self.garage))\n        print(\"fenced yard: {}\".format(self.fenced))\n\n    def prompt_init():\n        parent_init = Property.prompt_init()\n        fenced = get_valid_input(\"Is the yard fenced? \",\n                    House.valid_fenced)\n        garage = get_valid_input(\"Is there a garage? \",\n                House.valid_garage)\n        num_stories = input(\"How many stories? \")\n\n        parent_init.update({\n            \"fenced\": fenced,\n            \"garage\": garage,\n            \"num_stories\": num_stories\n        })\n        return parent_init\n    prompt_init = staticmethod(prompt_init)\n```", "```py\nclass Purchase:\n    def __init__(self, price='', taxes='', **kwargs):\n        super().__init__(**kwargs)\n        self.price = price\n        self.taxes = taxes\n\n    def display(self):\n        super().display()\n        print(\"PURCHASE DETAILS\")\n        print(\"selling price: {}\".format(self.price))\n        print(\"estimated taxes: {}\".format(self.taxes))\n\n    def prompt_init():\n        return dict(\n            price=input(\"What is the selling price? \"),\n            taxes=input(\"What are the estimated taxes? \"))\n    prompt_init = staticmethod(prompt_init)\n\nclass Rental:\n    def __init__(self, furnished='', utilities='',\n            rent='', **kwargs):\n        super().__init__(**kwargs)\n        self.furnished = furnished\n        self.rent = rent\n        self.utilities = utilities\n\n    def display(self):\n        super().display()\n        print(\"RENTAL DETAILS\")\n        print(\"rent: {}\".format(self.rent))\n        print(\"estimated utilities: {}\".format(\n            self.utilities))\n        print(\"furnished: {}\".format(self.furnished))\n\n    def prompt_init():\n        return dict(\n            rent=input(\"What is the monthly rent? \"),\n            utilities=input(\n                \"What are the estimated utilities? \"),\n            furnished = get_valid_input(\n                \"Is the property furnished? \",\n                    (\"yes\", \"no\")))\n    prompt_init = staticmethod(prompt_init)\n\n```", "```py\nclass HouseRental(Rental, House):\n    def prompt_init():\n        init = House.prompt_init()\n        init.update(Rental.prompt_init())\n        return init\n    prompt_init = staticmethod(prompt_init)\n```", "```py\n**>>> init = HouseRental.prompt_init()**\n**Enter the square feet: 1**\n**Enter number of bedrooms: 2**\n**Enter number of baths: 3**\n**Is the yard fenced?  (yes, no) no**\n**Is there a garage?  (attached, detached, none) none**\n**How many stories? 4**\n**What is the monthly rent? 5**\n**What are the estimated utilities? 6**\n**Is the property furnished?  (yes, no) no**\n**>>> house = HouseRental(**init)**\n**>>> house.display()**\n**PROPERTY DETAILS**\n**================**\n**square footage: 1**\n**bedrooms: 2**\n**bathrooms: 3**\n\n**HOUSE DETAILS**\n**# of stories: 4**\n**garage: none**\n**fenced yard: no**\n\n**RENTAL DETAILS**\n**rent: 5**\n**estimated utilities: 6**\n**furnished: no**\n\n```", "```py\nclass ApartmentRental(Rental, Apartment):\n    def prompt_init():\n        init = Apartment.prompt_init()\n        init.update(Rental.prompt_init())\n        return init\n    prompt_init = staticmethod(prompt_init)\n\nclass ApartmentPurchase(Purchase, Apartment):\n    def prompt_init():\n        init = Apartment.prompt_init()\n        init.update(Purchase.prompt_init())\n        return init\n    prompt_init = staticmethod(prompt_init)\n\nclass HousePurchase(Purchase, House):\n    def prompt_init():\n        init = House.prompt_init()\n        init.update(Purchase.prompt_init())\n        return init\n    prompt_init = staticmethod(prompt_init)\n```", "```py\nclass Agent:\n    def __init__(self):\n        self.property_list = []\n\n    def display_properties(self):\n        for property in self.property_list:\n            property.display()\n```", "```py\n    type_map = {\n        (\"house\", \"rental\"): HouseRental,\n        (\"house\", \"purchase\"): HousePurchase,\n        (\"apartment\", \"rental\"): ApartmentRental,\n        (\"apartment\", \"purchase\"): ApartmentPurchase\n        }\n```", "```py\n    def add_property(self):\n        property_type = get_valid_input(\n                \"What type of property? \",\n                (\"house\", \"apartment\")).lower()\n        payment_type = get_valid_input(\n                \"What payment type? \",\n                (\"purchase\", \"rental\")).lower()\n\n        **PropertyClass = self.type_map[**\n            **(property_type, payment_type)]**\n        init_args = PropertyClass.prompt_init()\n        **self.property_list.append(PropertyClass(**init_args))**\n\n```", "```py\n**>>> agent = Agent()**\n**>>> agent.add_property()**\n**What type of property?  (house, apartment) house**\n**What payment type?  (purchase, rental) rental**\n**Enter the square feet: 900**\n**Enter number of bedrooms: 2**\n**Enter number of baths: one and a half**\n**Is the yard fenced?  (yes, no) yes**\n**Is there a garage?  (attached, detached, none) detached**\n**How many stories? 1**\n**What is the monthly rent? 1200**\n**What are the estimated utilities? included**\n**Is the property furnished?  (yes, no) no**\n**>>> agent.add_property()**\n**What type of property?  (house, apartment) apartment**\n**What payment type?  (purchase, rental) purchase**\n**Enter the square feet: 800**\n**Enter number of bedrooms: 3**\n**Enter number of baths: 2**\n**What laundry facilities does the property have?  (coin, ensuite,**\n**one) ensuite**\n**Does the property have a balcony? (yes, no, solarium) yes**\n**What is the selling price? $200,000**\n**What are the estimated taxes? 1500**\n**>>> agent.display_properties()**\n**PROPERTY DETAILS**\n**================**\n**square footage: 900**\n**bedrooms: 2**\n**bathrooms: one and a half**\n\n**HOUSE DETAILS**\n**# of stories: 1**\n**garage: detached**\n**fenced yard: yes**\n**RENTAL DETAILS**\n**rent: 1200**\n**estimated utilities: included**\n**furnished: no**\n**PROPERTY DETAILS**\n**================**\n**square footage: 800**\n**bedrooms: 3**\n**bathrooms: 2**\n\n**APARTMENT DETAILS**\n**laundry: ensuite**\n**has balcony: yes**\n**PURCHASE DETAILS**\n**selling price: $200,000**\n**estimated taxes: 1500**\n\n```"]