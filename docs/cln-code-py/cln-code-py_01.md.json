["```py\n$ grep -nr \"location=\" . \n./core.py:13: location=current_location,\n```", "```py\n$ grep -nr \"location =\" .\n./core.py:10: current_location = get_location()\n```", "```py\nIn [1]: dict.update??\nDocstring:\nD.update([E, ]**F) -> None. Update D from dict/iterable E and F.\nIf E is present and has a .keys() method, then does: for k in E: D[k] = E[k]\nIf E is present and lacks a .keys() method, then does: for k, v in E: D[k] = v\nIn either case, this is followed by: for k in F: D[k] = F[k]\nType: method_descriptor\n```", "```py\n>>> d = {}\n>>> d.update({1: \"one\", 2: \"two\"})\n>>> d\n{1: 'one', 2: 'two'}\n```", "```py\n>>> d.update([(3, \"three\"), (4, \"four\")])\n>>> d\n{1: 'one', 2: 'two', 3: 'three', 4: 'four'}\n```", "```py\n>>> def my_function():\n ... \"\"\"Run some computation\"\"\"\n ... return None\n ...\n >>> my_function.__doc__\n 'Run some computation'\n```", "```py\nclass Point:\n    def __init__(self, lat, long):\n        self.lat = lat\n        self.long = long\n\ndef locate(latitude: float, longitude: float) -> Point:\n    \"\"\"Find an object in the map by its coordinates\"\"\"\n```", "```py\n>>> locate.__annotations__\n {'latitude': float, 'longitue': float, 'return': __main__.Point}\n```", "```py\nclass Point:\n    lat: float\n    long: float\n\n>>> Point.__annotations__\n{'lat': <class 'float'>, 'long': <class 'float'>} \n```", "```py\ndef data_from_response(response: dict) -> dict:\n    if response[\"status\"] != 200:\n        raise ValueError\n    return {\"data\": response[\"payload\"]}\n```", "```py\ndef data_from_response(response: dict) -> dict:\n    \"\"\"If the response is OK, return its payload.\n\n    - response: A dict like::\n\n    {\n        \"status\": 200, # <int>\n        \"timestamp\": \"....\", # ISO format string of the current\n        date time\n        \"payload\": { ... } # dict with the returned data\n    }\n\n    - Returns a dictionary like::\n\n    {\"data\": { .. } }\n\n    - Raises:\n    - ValueError if the HTTP status is != 200\n    \"\"\"\n    if response[\"status\"] != 200:\n        raise ValueError\n    return {\"data\": response[\"payload\"]}\n```", "```py\n$ pip install mypy\n```", "```py\ntype_to_ignore = \"something\" # type: ignore\n```", "```py\n$ pip install pylint\n```", "```py\ntypehint:\nmypy src/ tests/\n\ntest:\npytest tests/\n\nlint:\npylint src/ tests/\n\nchecklist: lint typehint test\n\n.PHONY: typehint test lint checklist\n```", "```py\nmake checklist\n```", "```py\ndef my_function(name):\n \"\"\"\n >>> my_function('black')\n 'received Black'\n \"\"\"\n return 'received {0}'.format(name.title())\n```", "```py\nblack -l 79 *.py\n```", "```py\ndef my_function(name):\n \"\"\"\n >>> my_function('black')\n 'received Black'\n \"\"\"\n return \"received {0}\".format(name.title())\n```"]