["```py\n.\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.rst\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 apptool\n\u2502   \u251c\u2500\u2500 common.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 parse.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 integration\n    \u2514\u2500\u2500 unit\n```", "```py\nfrom setuptools import find_packages, setup\n\nwith open(\"README.rst\", \"r\") as longdesc:\n    long_description = longdesc.read()\n\nsetup(\n    name=\"apptool\",\n    description=\"Description of the intention of the package\",\n    long_description=long_description,\n    author=\"Dev team\",\n    version=\"0.1.0\",\n    packages=find_packages(where=\"src/\"),\n    package_dir={\"\": \"src\"},\n)\n```", "```py\n$VIRTUAL_ENV/bin/pip install -U setuptools wheel\n$VIRTUAL_ENV/bin/python setup.py sdist bdist_wheel\n```", "```py\nfrom typing import Union\n\nclass DispatchedOrder:\n    \"\"\"An order that was just created and notified to start its delivery.\"\"\"\n\n    status = \"dispatched\"\n\n    def __init__(self, when):\n        self._when = when\n\n    def message(self) -> dict:\n        return {\n            \"status\": self.status,\n            \"msg\": \"Order was dispatched on {0}\".format(\n                self._when.isoformat()\n            ),\n        }\n\nclass OrderInTransit:\n    \"\"\"An order that is currently being sent to the customer.\"\"\"\n\n    status = \"in transit\"\n\n    def __init__(self, current_location):\n        self._current_location = current_location\n\n    def message(self) -> dict:\n        return {\n            \"status\": self.status,\n            \"msg\": \"The order is in progress (current location: {})\".format(\n                self._current_location\n            ),\n        }\n\nclass OrderDelivered:\n    \"\"\"An order that was already delivered to the customer.\"\"\"\n\n    status = \"delivered\"\n\n    def __init__(self, delivered_at):\n        self._delivered_at = delivered_at\n\n    def message(self) -> dict:\n        return {\n            \"status\": self.status,\n            \"msg\": \"Order delivered on {0}\".format(\n                self._delivered_at.isoformat()\n            ),\n        }\n\nclass DeliveryOrder:\n    def __init__(\n        self,\n        delivery_id: str,\n        status: Union[DispatchedOrder, OrderInTransit, OrderDelivered],\n    ) -> None:\n        self._delivery_id = delivery_id\n        self._status = status\n\n    def message(self) -> dict:\n        return {\"id\": self._delivery_id, **self._status.message()}\n```", "```py\nfrom storage import DBClient, DeliveryStatusQuery, OrderNotFoundError\nfrom web import NotFound, View, app, register_route\n\nclass DeliveryView(View):\n    async def _get(self, request, delivery_id: int):\n        dsq = DeliveryStatusQuery(int(delivery_id), await DBClient())\n        try\n            result = await dsq.get()\n        except OrderNotFoundError as e:\n             raise NotFound(str(e)) from e\n\n        return result.message()\n\nregister_route(DeliveryView, \"/status/<delivery_id:int>\")\n```", "```py\ndsq = DeliveryStatusQuery(int(delivery_id), await DBClient())\n```", "```py\n.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 libs\n\u2502   \u251c\u2500\u2500 README.rst\n\u2502   \u251c\u2500\u2500 storage\n\u2502   \u2514\u2500\u2500 web\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.rst\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 statusweb\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 service.py\n```", "```py\nfrom setuptools import find_packages, setup\n\nwith open(\"README.rst\", \"r\") as longdesc:\n    long_description = longdesc.read()\n\ninstall_requires = [\"web\", \"storage\"]\n\nsetup(\n    name=\"delistatus\",\n    description=\"Check the status of a delivery order\",\n    long_description=long_description,\n    author=\"Dev team\",\n    version=\"0.1.0\",\n    packages=find_packages(),\n    install_requires=install_requires,\n    entry_points={\n        \"console_scripts\": [\n            \"status-service = statusweb.service:main\",\n        ],\n    },\n)\n```", "```py\n\"status-service = statusweb.service:main\"\n```", "```py\nFROM python:3.6.6-alpine3.6\n\nRUN apk add --update \\\n    python-dev \\\n    gcc \\\n    musl-dev \\\n    make\n\nWORKDIR /app\nADD . /app\n\nRUN pip install /app/libs/web /app/libs/storage\nRUN pip install /app\n\nEXPOSE 8080\nCMD [\"/usr/local/bin/status-service\"]\n```", "```py\n$ curl http://localhost:8080/status/1\n{\"id\":1,\"status\":\"dispatched\",\"msg\":\"Order was dispatched on 2018-08-01T22:25:12+00:00\"}\n```"]