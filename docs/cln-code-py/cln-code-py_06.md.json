["```py\n>>> class Attribute:\n...     value = 42\n... \n>>> class Client:\n...     attribute = Attribute()\n... \n>>> Client().attribute\n<__main__.Attribute object at 0x7ff37ea90940>\n>>> Client().attribute.value\n42\n```", "```py\nclass DescriptorClass:\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        logger.info(\"Call: %s.__get__(%r, %r)\", \n        self.__class__.__name__,instance, owner)\n        return instance\n\nclass ClientClass:\n    descriptor = DescriptorClass()\n```", "```py\n>>> client = ClientClass()\n>>> client.descriptor\nINFO:Call: DescriptorClass.__get__(<ClientClass object at 0x...>, <class 'ClientClass'>)\n<ClientClass object at 0x...>\n>>> client.descriptor is client\nINFO:Call: DescriptorClass.__get__(ClientClass object at 0x...>, <class 'ClientClass'>)\nTrue\n```", "```py\n# descriptors_methods_1.py\n\nclass DescriptorClass:\n    def __get__(self, instance, owner):\n        if instance is None:\n            return f\"{self.__class__.__name__}.{owner.__name__}\"\n        return f\"value for {instance}\"\n\nclass ClientClass:\n\n    descriptor = DescriptorClass()\n```", "```py\n>>> ClientClass.descriptor\n'DescriptorClass.ClientClass'\n```", "```py\n>>> ClientClass().descriptor\n'value for <descriptors_methods_1.ClientClass object at 0x...>'\n```", "```py\nclient.descriptor = \"value\"\n```", "```py\nclass Validation:\n\n    def __init__(self, validation_function, error_msg: str):\n        self.validation_function = validation_function\n        self.error_msg = error_msg\n\n    def __call__(self, value):\n        if not self.validation_function(value):\n            raise ValueError(f\"{value!r} {self.error_msg}\")\n\nclass Field:\n\n    def __init__(self, *validations):\n        self._name = None\n        self.validations = validations\n\n    def __set_name__(self, owner, name):\n        self._name = name\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return instance.__dict__[self._name]\n\n    def validate(self, value):\n        for validation in self.validations:\n            validation(value)\n\n    def __set__(self, instance, value):\n        self.validate(value)\n        instance.__dict__[self._name] = value\n\nclass ClientClass:\n    descriptor = Field(\n        Validation(lambda x: isinstance(x, (int, float)), \"is not a \n        number\"),\n        Validation(lambda x: x >= 0, \"is not >= 0\"),\n    )\n```", "```py\n>>> client = ClientClass()\n>>> client.descriptor = 42\n>>> client.descriptor\n42\n>>> client.descriptor = -42\nTraceback (most recent call last):\n ...\nValueError: -42 is not >= 0\n>>> client.descriptor = \"invalid value\"\n...\nValueError: 'invalid value' is not a number\n```", "```py\n>>> del client.descriptor\n```", "```py\n# descriptors_methods_3.py\n\nclass ProtectedAttribute:\n    def __init__(self, requires_role=None) -> None: \n        self.permission_required = requires_role\n        self._name = None\n\n    def __set_name__(self, owner, name):\n        self._name = name\n\n    def __set__(self, user, value):\n        if value is None:\n raise ValueError(f\"{self._name} can't be set to None\")\n        user.__dict__[self._name] = value\n\n    def __delete__(self, user):\n        if self.permission_required in user.permissions:\n            user.__dict__[self._name] = None\n        else:\n            raise ValueError(\n                f\"User {user!s} doesn't have {self.permission_required} \"\n                \"permission\"\n            )\n\nclass User:\n    \"\"\"Only users with \"admin\" privileges can remove their email address.\"\"\"\n\n    email = ProtectedAttribute(requires_role=\"admin\")\n\n    def __init__(self, username: str, email: str, permission_list: list = None) -> None:\n        self.username = username\n        self.email = email\n        self.permissions = permission_list or []\n\n    def __str__(self):\n        return self.username\n```", "```py\n>>> admin = User(\"root\", \"root@d.com\", [\"admin\"])\n>>> user = User(\"user\", \"user1@d.com\", [\"email\", \"helpdesk\"]) \n>>> admin.email\n'root@d.com'\n>>> del admin.email\n>>> admin.email is None\nTrue\n>>> user.email\n'user1@d.com'\n>>> user.email = None\n...\nValueError: email can't be set to None\n>>> del user.email\n...\nValueError: User user doesn't have admin permission\n```", "```py\nclass DescriptorWithName:\n    def __init__(self, name):\n        self.name = name\n\n    def __get__(self, instance, value):\n        if instance is None:\n            return self\n        logger.info(\"getting %r attribute from %r\", self.name, instance)\n        return instance.__dict__[self.name]\n\n    def __set__(self, instance, value):\n        instance.__dict__[self.name] = value\n\nclass ClientClass:\n    descriptor = DescriptorWithName(\"descriptor\")\n```", "```py\n>>> client = ClientClass()\n>>> client.descriptor = \"value\"\n>>> client.descriptor\nINFO:getting 'descriptor' attribute from <ClientClass object at 0x...>\n'value'\n```", "```py\nclass DescriptorWithName:\n    def __init__(self, name=None):\n        self.name = name\n\n    def __set_name__(self, owner, name):\n        self.name = name\n    ...\n```", "```py\nclass NonDataDescriptor:\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return 42\n\nclass ClientClass:\n    descriptor = NonDataDescriptor()\n```", "```py\n>>> client = ClientClass()\n>>> client.descriptor\n42\n```", "```py\n>>> client.descriptor = 43\n>>> client.descriptor\n43\n```", "```py\n>>> del client.descriptor\n>>> client.descriptor\n42\n```", "```py\n>>> vars(client)\n{}\n```", "```py\n>>> client.descriptor = 99\n>>> vars(client)\n{'descriptor': 99}\n```", "```py\n>>> del client.descriptor\n>>> vars(client)\n{}\n>>> client.descriptor\n42\n```", "```py\nclass DataDescriptor:\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return 42\n\n    def __set__(self, instance, value):\n        logger.debug(\"setting %s.descriptor to %s\", instance, value)\n        instance.__dict__[\"descriptor\"] = value\n\nclass ClientClass:\n    descriptor = DataDescriptor()\n```", "```py\n>>> client = ClientClass()\n>>> client.descriptor\n42\n```", "```py\n>>> client.descriptor = 99\n>>> client.descriptor\n42\n```", "```py\n>>> vars(client)\n{'descriptor': 99}\n\n>>> client.__dict__[\"descriptor\"]\n99\n```", "```py\n>>> del client.descriptor\nTraceback (most recent call last):\n ...\nAttributeError: __delete__\n```", "```py\ninstance.__dict__[\"descriptor\"] = value\n```", "```py\nsetattr(instance, \"descriptor\", value)\n```", "```py\nclass Traveller:\n\n    def __init__(self, name, current_city):\n        self.name = name\n        self._current_city = current_city\n        self._cities_visited = [current_city]\n\n    @property\n    def current_city(self):\n        return self._current_city\n\n    @current_city.setter\n    def current_city(self, new_city):\n        if new_city != self._current_city:\n            self._cities_visited.append(new_city)\n        self._current_city = new_city\n\n    @property\n    def cities_visited(self):\n        return self._cities_visited\n```", "```py\n>>> alice = Traveller(\"Alice\", \"Barcelona\")\n>>> alice.current_city = \"Paris\"\n>>> alice.current_city = \"Brussels\"\n>>> alice.current_city = \"Amsterdam\"\n\n>>> alice.cities_visited\n['Barcelona', 'Paris', 'Brussels', 'Amsterdam']\n```", "```py\nclass HistoryTracedAttribute:\n    def __init__(self, trace_attribute_name) -> None:\n        self.trace_attribute_name = trace_attribute_name  # [1]\n        self._name = None\n\n    def __set_name__(self, owner, name):\n        self._name = name\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return instance.__dict__[self._name]\n\n    def __set__(self, instance, value):\n        self._track_change_in_value_for_instance(instance, value)\n        instance.__dict__[self._name] = value\n\n    def _track_change_in_value_for_instance(self, instance, value):\n        self._set_default(instance)   # [2]\n        if self._needs_to_track_change(instance, value):\n            instance.__dict__[self.trace_attribute_name].append(value)\n\n    def _needs_to_track_change(self, instance, value) -> bool:\n        try:\n            current_value = instance.__dict__[self._name]\n        except KeyError:   # [3]\n            return True\n        return value != current_value  # [4]\n\n    def _set_default(self, instance):\n        instance.__dict__.setdefault(self.trace_attribute_name, [])  # [6]\n\nclass Traveller:\n\n    current_city = HistoryTracedAttribute(\"cities_visited\")  # [1]\n\n    def __init__(self, name, current_city):\n        self.name = name\n        self.current_city = current_city  # [5]\n```", "```py\nclass SharedDataDescriptor:\n    def __init__(self, initial_value):\n        self.value = initial_value\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return self.value\n\n    def __set__(self, instance, value):\n        self.value = value\n\nclass ClientClass:\n    descriptor = SharedDataDescriptor(\"first value\")\n```", "```py\n>>> client1 = ClientClass()\n>>> client1.descriptor\n'first value'\n\n>>> client2 = ClientClass()\n>>> client2.descriptor\n'first value'\n\n>>> client2.descriptor = \"value for client 2\"\n>>> client2.descriptor\n'value for client 2'\n\n>>> client1.descriptor\n'value for client 2'\n```", "```py\nfrom weakref import WeakKeyDictionary\n\nclass DescriptorClass:\n    def __init__(self, initial_value):\n        self.value = initial_value\n        self.mapping = WeakKeyDictionary()\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return self.mapping.get(instance, self.value)\n\n    def __set__(self, instance, value):\n        self.mapping[instance] = value\n```", "```py\n@Serialization(\n    username=show_original,\n    password=hide_field,\n    ip=show_original,\n    timestamp=format_time,\n)\n@dataclass\nclass LoginEvent:\n    username: str\n    password: str\n    ip: str\n    timestamp: datetime\n```", "```py\nfrom functools import partial\nfrom typing import Callable\n\nclass BaseFieldTransformation:\n\n    def __init__(self, transformation: Callable[[], str]) -> None:\n        self._name = None\n        self.transformation = transformation\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        raw_value = instance.__dict__[self._name]\n        return self.transformation(raw_value)\n\n    def __set_name__(self, owner, name):\n        self._name = name\n\n    def __set__(self, instance, value):\n        instance.__dict__[self._name] = value\n\nShowOriginal = partial(BaseFieldTransformation, transformation=lambda x: x)\nHideField = partial(\n    BaseFieldTransformation, transformation=lambda x: \"**redacted**\"\n)\nFormatTime = partial(\n    BaseFieldTransformation,\n    transformation=lambda ft: ft.strftime(\"%Y-%m-%d %H:%M\"),\n)\n```", "```py\nclass LoginEvent:\n    username = ShowOriginal()\n    password = HideField()\n    ip = ShowOriginal()\n    timestamp = FormatTime()\n\n    def __init__(self, username, password, ip, timestamp):\n        self.username = username\n        self.password = password\n        self.ip = ip\n        self.timestamp = timestamp\n\n    def serialize(self):\n        return {\n            \"username\": self.username,\n            \"password\": self.password,\n            \"ip\": self.ip,\n            \"timestamp\": self.timestamp,\n        }\n```", "```py\n>>> le = LoginEvent(\"john\", \"secret password\", \"1.1.1.1\", datetime.utcnow())\n>>> vars(le)\n{'username': 'john', 'password': 'secret password', 'ip': '1.1.1.1', 'timestamp': ...}\n>>> le.serialize()\n{'username': 'john', 'password': '**redacted**', 'ip': '1.1.1.1', 'timestamp': '...'}\n>>> le.password\n'**redacted**'\n```", "```py\nclass LoginEvent(BaseEvent):\n    username = ShowOriginal()\n    password = HideField()\n    ip = ShowOriginal()\n    timestamp = FormatTime()\n```", "```py\nclass MyClass:\n    def method(self, ...):\n        self.x = 1\n```", "```py\nclass MyClass: pass\n\ndef method(myclass_instance, ...):\n    myclass_instance.x = 1\n\n method(MyClass())\n```", "```py\ninstance = MyClass()\ninstance.method(...)\n```", "```py\ninstance = MyClass()\nMyClass.method(instance, ...)\n```", "```py\n>>> def function(): pass\n...\n>>> function.__get__\n<method-wrapper '__get__' of function object at 0x...>\n```", "```py\nclass Method:\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self, instance, arg1, arg2):\n        print(f\"{self.name}: {instance} called with {arg1} and {arg2}\")\n\nclass MyClass:\n    method = Method(\"Internal call\")\n```", "```py\ninstance = MyClass()\nMethod(\"External call\")(instance, \"first\", \"second\")\ninstance.method(\"first\", \"second\")\n```", "```py\nTraceback (most recent call last):\nFile \"file\", line , in <module>\n    instance.method(\"first\", \"second\")\nTypeError: __call__() missing 1 required positional argument: 'arg2'\n```", "```py\nfrom types import MethodType\n\nclass Method:\n    def __init__(self, name):\n        self.name = name\n\n    def __call__(self, instance, arg1, arg2):\n        print(f\"{self.name}: {instance} called with {arg1} and {arg2}\")\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            return self\n        return MethodType(self, instance)\n```", "```py\nExternal call: <MyClass object at 0x...> called with fist and second\nInternal call: <MyClass object at 0x...> called with first and second\n```", "```py\n>>> class MyClass:\n... @property\n... def prop(self): pass\n...\n>>> MyClass.prop\n<property object at 0x...>\n```", "```py\nclass TableEvent:\n    schema = \"public\"\n    table = \"user\"\n\n    @classproperty\n    def topic(cls):\n        prefix = read_prefix_from_config()\n        return f\"{prefix}{cls.schema}.{cls.table}\"\n\n>>> TableEvent.topic\n'public.user'\n\n>>> TableEvent().topic\n'public.user'\n```", "```py\nclass Coordinate2D:\n    __slots__ = (\"lat\", \"long\")\n\n    def __init__(self, lat, long):\n        self.lat = lat\n        self.long = long\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.lat}, {self.long})\"\n```"]