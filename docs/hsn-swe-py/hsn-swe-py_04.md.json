["```py\n#!/usr/bin/env python\n\"\"\"\nAn example of a simple procedural program. Asks the user for a URL, \nretrieves the content of that URL (http:// or https:// required), \nwrites it to a temp-file, and repeats until the user tells it to \nstop.\n\"\"\"\n\nimport os\n\nimport urllib.request\n\nif os.name == 'posix':\n    tmp_dir = '/tmp/'\nelse:\n    tmp_dir = 'C:\\\\Temp\\\\'\n\nprint('Simple procedural code example')\n\nthe_url = ''\nwhile the_url.lower() != 'x':\n    the_url = input(\n        'Please enter a URL to read, or \"X\" to cancel: '\n    )\n    if the_url and the_url.lower() != 'x':\n        page = urllib.request.urlopen(the_url)\n        page_data = page.read()\n        page.close()\n        local_file = ('%s%s.data' % (tmp_dir, ''.join(\n            [c for c in the_url if c not in ':/']\n            )\n        )).replace('https', '').replace('http', '')\n        with open(local_file, 'w') as out_file:\n            out_file.write(str(page_data))\n            print('Page-data written to %s' % (local_file))\n\nprint('Exiting. Thanks!')\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nAn example of a simple OOP-based program. Asks the user for a URL, \nretrieves the content of that URL, writes it to a temp-file, and \nrepeats until the user tells it to stop.\n\"\"\"\n\n# Importing stuff we'll use\nimport os\n\nimport urllib.request\n\nif os.name == 'posix':\n    tmp_dir = '/tmp/'\nelse:\n    tmp_dir = 'C:\\\\Temp\\\\'\nif not os.path.exists(tmp_dir):\n    os.mkdirs(tmp_dir)\n\n# Defining the class\n\nclass PageReader:\n    # Object-initialization method\n    def __init__(self, url):\n        self.url = url\n        self.local_file = ('%s%s.data' % (tmp_dir, \n                ''.join(\n                [c for c in the_url if c not in ':/']\n                )\n            )).replace('https', '').replace('http', '')\n        self.page_data = self.get_page_data()\n    # Method to read the data from the URL\n    def get_page_data(self):\n        page = urllib.request.urlopen(self.url)\n        page_data = page.read()\n        page.close()\n        return page_data\n    # Method to save the page-data\n    def save_page_data(self):\n        with open(self.local_file, 'w') as out_file:\n            out_file.write(str(self.page_data))\n            print('Page-data written to %s' % (self.local_file))\n\nif __name__ == '__main__':\n    # Almost the same loop...\n    the_url = ''\n    while the_url.lower() != 'x':\n        the_url = input(\n            'Please enter a URL to read, or \"X\" to cancel: '\n        )\n        if the_url and the_url.lower() != 'x':\n            page_reader = PageReader(the_url)\n            page_reader.save_page_data()\n    print('Exiting. Thanks!')\n```", "```py\npython_org = PageReader('http://python.org')\nprint('URL ................ %s' % python_org.url)\nprint('Page data length ... %d' % len(python_org.page_data))\ngoogle_com = PageReader('http://www.google.com')\nprint('URL ................ %s' % google_com.url)\nprint('Page data length ... %d' % len(google_com.page_data))\n```", "```py\n#!/usr/bin/env python\n\"\"\"\nAn example of a simple FP-based program. Asks the user for a URL, \nretrieves the content of that URL, writes it to a temp-file, and \nrepeats until the user tells it to stop.\n\"\"\"\n\n# Importing stuff we'll use\nimport os\n\nimport urllib.request\n\nif os.name == 'posix':\n    tmp_dir = '/tmp/'\nelse:\n    tmp_dir = 'C:\\\\Temp\\\\'\nif not os.path.exists(tmp_dir):\n    os.mkdirs(tmp_dir)\n\n# Defining our functions\n\ndef get_page_data(url):\n    page = urllib.request.urlopen(url)\n    page_data = page.read()\n    page.close()\n    return page_data\n\ndef save_page_data(local_file, page_data):\n    with open(local_file, 'w') as out_file:\n        out_file.write(str(page_data))\n        return('Page-data written to %s' % (local_file))\n\ndef get_local_file(url):\n  return ('%s%s.data' % (tmp_dir, ''.join(\n      [c for c in the_url if c not in ':/']\n      )\n    )).replace('https', '').replace('http', '')\n\ndef process_page(url):\n    return save_page_data(\n        get_local_file(url), get_page_data(url)\n    )\n\ndef get_page_to_process():\n    the_url = input(\n        'Please enter a URL to read, or \"X\" to cancel: '\n    )\n    if the_url:\n        return the_url.lower()\n    return None\n\nif __name__ == '__main__':\n    # Again, almost the same loop...\n    the_url = get_page_to_process()\n    while the_url not in ('x', None):\n        print(process_page(the_url))\n        the_url = get_page_to_process()\n    print('Exiting. Thanks!')\n```"]