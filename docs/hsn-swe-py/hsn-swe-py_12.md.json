["```py\nclass JSONFileDataObject(BaseDataObject, metaclass=abc.ABCMeta):\n    \"\"\"\nProvides baseline functionality, interface requirements, and \ntype-identity for objects that can persist their state-data as \nJSON files in a local file-system file-cache\n\"\"\"\n    ###################################\n    # Class attributes/constants      #\n    ###################################\n\n    _file_store_dir = None\n    _file_store_ready = False\n    _loaded_objects = None\n```", "```py\n###################################\n# Object initialization           #\n###################################\n\ndef __init__(self, \n    oid:(UUID,str,None)=None, \n    created:(datetime,str,float,int,None)=None, \n    modified:(datetime,str,float,int,None)=None,\n    is_active:(bool,int,None)=None, \n    is_deleted:(bool,int,None)=None,\n    is_dirty:(bool,int,None)=None, \n    is_new:(bool,int,None)=None,\n):\n    \"\"\"\nObject initialization.\n\nself .............. (JSONFileDataObject instance, required) The \n                    instance to execute against\noid ............... (UUID|str, optional, defaults to None) \ncreated ........... (datetime|str|float|int, optional, defaults to None) \nmodified .......... (datetime|str|float|int, optional, defaults to None) \nis_active ......... (bool|int, optional, defaults to None) \nis_deleted ........ (bool|int, optional, defaults to None) \nis_dirty .......... (bool|int, optional, defaults to None) \nis_new ............ (bool|int, optional, defaults to None) \n\"\"\"\n```", "```py\n # - When used by a subclass, require that subclass to \n #   define a valid file-system path in its _file_store_dir \n #   class-attribute - that's where the JSON files will live\n    if self.__class__._file_store_dir == None:\n        raise AttributeError(\n            '%s has not defined a file-system location to '\n            'store JSON data of its instances\\' data. Please '\n            'set %s._file_store_dir to a valid file-system '\n            'path' % \n            (self.__class__.__name__, self.__class__.__name__)\n        )\n```", "```py\nif not self.__class__._file_store_ready:\n  # - The first time the class is used, check the file-\n  #   storage directory, and if everything checks out, \n  #   then re-set the flag that controls the checks.\nif not os.path.exists(self.__class__._file_store_dir):\n  # - If the path-specification exists, try to \n  #   assure that the *path* exists, and create it \n  #   if it doesn't. If the path can't be created, \n  #   then that'll be an issue later too, so it'll \n  #   need to be dealt with.\n       try:\n           os.makedirs(self.__class__._file_store_dir)\n        except PermissionError:\n            raise PermissionError(\n               '%s cannot create the JSON data-store '\n               'directory (%s) because permission was '\n               'denied. Please check permissions on '\n               'that directory (or its parents, if it '\n               'hasn\\'t been created yet) and try '\n               'again.' % \n                 (\n                     self.__class__.__name__, \n                     self.__class__._file_store_dir\n                  )\n              )\n```", "```py\n  # - Check to make sure that files can be \n  #   created there...\n     try:\n        test_file = open(\n        '%s%stest-file.txt' % \n        (self.__class__._file_store_dir, os.sep), \n            'w'\n        )\n         test_file.write('test-file.txt')\n         test_file.close()\n     except PermissionError:\n         raise PermissionError(\n             '%s cannot write files to the JSON data-'\n             'store directory (%s) because permission was '\n             'denied. Please check permissions on that '\n              'directory and try again.' % \n            (\n                self.__class__.__name__, \n                self.__class__._file_store_dir\n             )\n           )\n```", "```py\n # - ... that files can be read from there...\n    try:\n       test_file = open(\n       '%s%stest-file.txt' % \n        (self.__class__._file_store_dir, os.sep), \n             'r'\n        )\n           test_file.read()\n           test_file.close()\n           except PermissionError:\n                raise PermissionError(\n                    '%s cannot read files in the JSON data-'\n                    'store directory (%s) because permission was '\n                    'denied. Please check permissions on that '\n                    'directory and try again.' % \n                    (\n                        self.__class__.__name__, \n                        self.__class__._file_store_dir\n                    )\n                )\n```", "```py\n            # - ... and deleted from there...\n            try:\n                os.unlink(\n                    '%s%stest-file.txt' % \n                    (self.__class__._file_store_dir, os.sep)\n                )\n            except PermissionError:\n                raise PermissionError(\n                    '%s cannot delete files in the JSON data-'\n                    'store directory (%s) because permission was '\n                    'denied. Please check permissions on that '\n                    'directory and try again.' % \n                    (\n                        self.__class__.__name__, \n                        self.__class__._file_store_dir\n                    )\n                )\n            # - If no errors were raised, then re-set the flag:\n            self._file_store_ready = True\n```", "```py\n    # - Call parent initializers if needed\n    BaseDataObject.__init__(\n        self, oid, created, modified, is_active, is_deleted, \n        is_dirty, is_new\n    )\n    # - Set default instance property-values using _del_... methods\n    # - Set instance property-values from arguments using \n    #   _set_... methods\n    # - Perform any other initialization needed\n```", "```py\ndef _create(self) -> None:\n    \"\"\"\nCreates a new state-data record for the instance in the back-end \ndata-store\n\"\"\"\n    # - Since all data-transactions for these objects involve \n    #   a file-write, we're just going to define this method \n    #   in order to meet the requirements of BaseDataObject, \n    #   make it raise an error, and override the save method \n    #   to perform the actual file-write.\n    raise NotImplementedError(\n        '%s._create is not implemented, because the save '\n        'method handles all the data-writing needed for '\n        'the class. Use save() instead.' % \n        self.__class__.__name__\n    )\n\ndef _update(self) -> None:\n    \"\"\"\nUpdates an existing state-data record for the instance in the \nback-end data-store\n\"\"\"\n    # - Since all data-transactions for these objects involve \n    #   a file-write, we're just going to define this method \n    #   in order to meet the requirements of BaseDataObject, \n    #   make it raise an error, and override the save method \n    #   to perform the actual file-write.\n    raise NotImplementedError(\n        '%s._update is not implemented, because the save '\n        'method handles all the data-writing needed for '\n        'the class. Use save() instead.' % \n        self.__class__.__name__\n    )\n```", "```py\ndef save(self):\n    \"\"\"\nSaves the instance's state-data to the back-end data-store by \ncreating it if the instance is new, or updating it if the \ninstance is dirty\n\"\"\"\n    if self.is_new or self.is_dirty:\n```", "```py\n# - Make sure objects are loaded:\nself.__class__._load_objects(self.__class__)\n```", "```py\n# - Try to save the data:\n try:\n  # - Open the file\n   fp = open(\n     '%s%s-data%s%s.json' %\n         (\n            self.__class__._file_store_dir, os.sep, \n            self.__class__.__name__, os.sep, \n            self.oid\n         ), 'w'\n    )\n      # - Write the instance's data-dict to the file as JSON\n      json.dump(fp, self.to_data_dict(), indent=4)\n      # - re-set the new and dirty state-flags\n      self._set_is_dirty(False)\n      self._set_is_new(False)\n      # - Update it in the loaded objects\n      self.__class__._loaded_objects[self.oid] = self\n```", "```py\nexcept PermissionError:\n   # - Raise a more informative error\n      raise PermissionError(\n         '%s could not save an object to the JSON data-'\n         'store directory (%s) because permission was '\n         'denied. Please check permissions on that '\n         'directory and try again.' % \n       (\n           self.__class__.__name__, \n           self.__class__._file_store_dir\n```", "```py\n )\n   )\n# - Any other errors will just surface for the time being\n```", "```py\n@classmethod\ndef delete(cls, *oids):\n    \"\"\"\nPerforms an ACTUAL record deletion from the back-end data-store \nof all records whose unique identifiers have been provided\n\"\"\"\n    # - First, ensure that objects are loaded\n    cls._load_objects(cls)\n    # - For each oid specified, try to remove the file, handling \n    #   any errors raised in the process.\n    failed_deletions = []\n    for oid in oids:\n        try:\n            # - Try to delete the file first, so that deletion \n            #   failures won't leave the files but remove the \n            #   in-memory copies\n            file_path = '%s%s%s-data%s%s.json' %(\n                cls._file_store_dir, os.sep, \n                cls.__name__, os.sep, oid\n            )\n            # - Delete the file at file_path\n            os.unlink(file_path)\n            # - Remove the in-memory object-instance:\n            del cls._loaded_objects[str(oid)]\n        except PermissionError:\n            failed_deletions.append(file_path)\n    if failed_deletions:\n        # - Though we *are* raising an error here, *some* deletions \n        #   may have succeeded. If this error-message is displayed, \n        #   the user seeing it need only be concerned with the \n        #   items that failed, though...\n        raise PermissionError(\n            '%s.delete could not delete %d object-data %s '\n            'because permission was denied. Please check the '\n            'permissions on %s and try again' % \n            (\n                cls.__name__, len(failed_deletions), \n                ('files' if len(failed_deletions) > 1 else 'file'), \n                ', '.join(failed_deletions)\n            )\n        )\n```", "```py\n@classmethod\ndef get(cls, *oids, **criteria):\n    \"\"\"\nFinds and returns all instances of the class from the back-end \ndata-store whose oids are provided and/or that match the supplied \ncriteria\n\"\"\"\n    # - First, ensure that objects are loaded\n    cls._load_objects(cls)\n```", "```py\n    # - If oids have been specified, then the initial results are all \n    #   items in the in-memory store whose oids are in the supplied \n    #   oids-list\n    if oids:\n        oids = tuple(\n            [str(o) for o in oids]\n        )\n        # - If no criteria were supplied, then oids are all we need \n        #   to match against:\n        if not criteria:\n            results = [\n                o for o in cls._loaded_objects.values()\n                if str(o.oid) in oids\n            ]\n        # - Otherwise, we *also* need to use matches to find items \n        #   that match the criteria\n        else:\n            results = [\n                o for o in cls._loaded_objects.values()\n                if str(o.oid) in oids\n                and o.matches(**criteria)\n            ]\n        # - In either case, we have a list of matching items, which \n        #   may be empty, so return it:\n        return results\n```", "```py\n    # - If oids were NOT specified, then the results are all objects \n    #   in memory that match the criteria\n    elif criteria:\n        results = [\n            o for o in cls._loaded_objects\n            if o.matches(**criteria)\n        ]\n        return results\n        # - If neither were specified, return all items available:\n        else:\n            return list(cls._loaded_objects.values())\n```", "```py\ndef _load_objects(cls, force_load=False):\n    \"\"\"\nClass-level helper-method that loads all of the objects in the \nlocal file-system data-store into memory so that they can be \nused more quickly afterwards.\n\nExpected to be called by the get class-method to load objects \nfor local retrieval, and other places as needed.\n\ncls .......... (class, required) The class that the method is \n               bound to\nforce_load ... (bool, optional, defaults to False) If True, \n               forces the process to re-load data from scratch, \n               otherwise skips the load process if data already \n               exists.\n\"\"\"\n```", "```py\n    if cls._loaded_objects == None or force_load:\n        if not os.path.exists(cls._file_store_dir):\n            # - If the path-specification exists, try to \n            #   assure that the *path* exists, and create it \n            #   if it doesn't. If the path can't be created, \n            #   then that'll be an issue later too, so it'll \n            #   need to be dealt with.\n            try:\n                os.makedirs(cls._file_store_dir)\n            except PermissionError:\n                raise PermissionError(\n                    '%s cannot create the JSON data-store '\n                    'directory (%s) because permission was '\n                    'denied. Please check permissions on '\n                    'that directory (or its parents, if it '\n                    'hasn\\'t been created yet) and try '\n                    'again.' % \n                    (cls.__name__, cls._file_store_dir)\n                )\n        class_files_path = '%s%s%s-data' % (\n            cls._file_store_dir, os.sep, \n            cls.__name__\n        )\n        if not os.path.exists(class_files_path):\n            try:\n                os.makedirs(class_files_path)\n            except PermissionError:\n                raise PermissionError(\n                    '%s cannot create the JSON data-store '\n                    'directory (%s) because permission was '\n                    'denied. Please check permissions on '\n                    'that directory (or its parents, if it '\n                    'hasn\\'t been created yet) and try '\n                    'again.' % \n                    (cls.__name__, class_files_path)\n                )\n        # - Get a list of all the JSON files in the data-store \n        #   path\n        files = [\n            fname for fname in os.listdir(\n                '%s%s%s-data' % (\n                    cls._file_store_dir, os.sep, \n                    cls.__name__\n                )\n            ) if fname.endswith('.json')\n        ]\n```", "```py\n cls._loaded_objects = {}\n    if files:\n      for fname in files:\n         item_file = '%s%s-data%s%s' % (\n         self.__class__._file_store_dir, os.sep, \n         self.__class__.__name__, os.sep, fname\n        )\n      try:\n        # - Read the JSON data\n        fp = open(item_file, 'r')\n        data_dict = json.load(fp)\n        fp.close()\n        # - Create an instance from that data\n        instance = cls.from_data_dict(data_dict)\n        # - Keep track of it by oid in the class\n        cls._loaded_objects[instance.oid] = instance\n```", "```py\n   # - If permissions are a problem, raise an \n   #   error with helpful information\n      except PermissionError as error:\n         raise PermissionError(\n             '%s could not load object-data from '\n             'the data-store file at %s because '\n             'permission was denied. Please check '\n             '(and, if needed, correct) the file- '\n             'and directory-permissions and try '\n```", "```py\n             'again' % \n             (cls.__name__, item_file)\n           )\n```", "```py\n# - If data-structure or -content is a problem, \n#   raise an error with helpful information\n     except (TypeError, ValueError) as error:\n          raise error.__class__(\n              '%s could not load object-data from '\n              'the data-store file at %s because '\n              'the data was corrupt or not what '\n              'was expected (%s: %s)' % \n              (\n                  cls.__name__, item_file, \n                  error.__class__.__name__, error\n              )\n          )\n# - Other errors will simply surface, at \n#   least for now\n```", "```py\n###################################\n# Property-setter methods         #\n###################################\n\ndef _set_address(self, value:Address) -> None:\n    # - Call the parent method\n    result = BaseArtisan._set_address(self, value)\n    self._set_is_dirty(True)\n    return result\n\n# ...\n\n###################################\n# Property-deleter methods        #\n###################################\n\ndef _del_address(self) -> None:\n    # - Call the parent method\n    result = BaseArtisan._del_address(self)\n    self._set_is_dirty(True)\n    return result\n```", "```py\n###################################\n# Instance property definitions   #\n###################################\n\naddress = property(\n    BaseArtisan._get_address, _set_address, _del_address, \n    'Gets, sets or deletes the physical address (Address) '\n    'associated with the Artisan that the instance represents'\n)\n```", "```py\nclass Artisan(BaseArtisan, JSONFileDataObject, object):\n    \"\"\"\nRepresents an Artisan in the context of the Artisan Application\n\"\"\"\n    ###################################\n    # Class attributes/constants      #\n    ###################################\n\n    # TODO: Work out the configuration-based file-system path \n    #       for this attribute\n    _file_store_dir = '/tmp/hms_data'\n```", "```py\n    ###################################\n    # Object initialization           #\n    ###################################\n\n    # TODO: Add and document arguments if/as needed\n    def __init__(self,\n        # - Required arguments from BaseArtisan\n        contact_name:str, contact_email:str, address:Address, \n        # - Optional arguments from BaseArtisan\n        company_name:str=None, website:(str,)=None, \n        # - Optional arguments from BaseDataObject/JSONFileDataObject\n        oid:(UUID,str,None)=None, \n        created:(datetime,str,float,int,None)=None, \n        modified:(datetime,str,float,int,None)=None,\n        is_active:(bool,int,None)=None, \n        is_deleted:(bool,int,None)=None,\n        is_dirty:(bool,int,None)=None, \n        is_new:(bool,int,None)=None,\n        # - the products arglist from BaseArtisan\n        *products\n    ):\n        \"\"\"\nObject initialization.\n\nself .............. (Artisan instance, required) The instance to \n                    execute against\ncontact_name ...... (str, required) The name of the primary contact \n                    for the Artisan that the instance represents\ncontact_email ..... (str [email address], required) The email address \n                    of the primary contact for the Artisan that the \n                    instance represents\naddress ........... (Address, required) The mailing/shipping address \n                    for the Artisan that the instance represents\ncompany_name ...... (str, optional, defaults to None) The company-\n                    name for the Artisan that the instance represents\nwebsite ........... (str, optional, defaults to None) The the URL of \n                    the website associated with the Artisan that the \n                    instance represents\noid ............... (UUID|str, optional, defaults to None) \ncreated ........... (datetime|str|float|int, optional, defaults to None) \nmodified .......... (datetime|str|float|int, optional, defaults to None) \nis_active ......... (bool|int, optional, defaults to None) \nis_deleted ........ (bool|int, optional, defaults to None) \nis_dirty .......... (bool|int, optional, defaults to None) \nis_new ............ (bool|int, optional, defaults to None) \nproducts .......... (BaseProduct collection) The products associated \n                    with the Artisan that the instance represents\n\"\"\"\n        # - Call parent initializers if needed\n        BaseArtisan.__init__(\n            self, contact_name, contact_email, address, \n            company_name, website, *products\n        )\n        JSONFileDataObject.__init__(\n            self, oid, created, modified, is_active, \n            is_deleted, is_dirty, is_new\n        )\n        # - Set default instance property-values using _del_... methods\n        # - Set instance property-values from arguments using \n        #   _set_... methods\n        # - Perform any other initialization needed\n```", "```py\n    ###################################\n    # Instance methods                #\n    ###################################\n\n    def add_product(self, product:BaseProduct) -> BaseProduct:\n        return HasProducts.add_product(self, product)\n\n    def matches(self, **criteria) -> (bool,):\n        return BaseDataObject.matches(self, **criteria)\n\n    def remove_product(self, product:BaseProduct) -> BaseProduct:\n        return HasProducts.remove_product(self, product)\n```", "```py\n    def to_data_dict(self) -> (dict,):\n        return {\n            # Properties from BaseArtisan:\n            'address':self.address,\n            'company_name':self.company_name,\n            'contact_email':self.contact_email,\n            'contact_name':self.contact_name,\n            'website':self.website, \n            # - Properties from BaseDataObject (through \n            #   JSONFileDataObject)\n            'created':datetime.strftime(\n                self.created, self.__class__._data_time_string\n            ),\n            'is_active':self.is_active,\n            'is_deleted':self.is_deleted,\n            'modified':datetime.strftime(\n                self.modified, self.__class__._data_time_string\n            ),\n            'oid':str(self.oid),\n        }\n```", "```py\n    ###################################\n    # Class methods                   #\n    ###################################\n\n    @classmethod\n    def from_data_dict(cls, data_dict:(dict,)):\n        return cls(**data_dict)\n```", "```py\n# - open the data-file, read it in, and convert it to a dict:\nwith open('data-file.json', 'r') as artisan_file:\n    artisan = Artisan.from_data_dict(json.load(artisan_file))\n```", "```py\nartisan = Artisan(**data_dict)\n```", "```py\nartisan = Artisan(\n    contact_name='value', contact_email='value', address=<Address Object>\n    # ... and so on for any relevant optional arguments\n)\n```", "```py\nimport json\naddress = Address('12345 Main Street', 'City Name')\na = Artisan('John Smith', 'j@smith.com', address)\nprint(json.dumps(a.to_data_dict(), indent=4))\n```", "```py\n    ###################################\n    # Instance methods                #\n    ###################################\n\n    def to_dict(self) -> (dict,):\n        return {\n            'street_address':self.street_address,\n            'building_address':self.building_address,\n            'city':self.city,\n            'region':self.region,\n            'postal_code':self.postal_code,\n            'country':self.country\n        }\n\n    ###################################\n    # Class methods                   #\n    ###################################\n\n    @classmethod\n    def from_dict(cls, data_dict):\n        return cls(**data_dict)\n```", "```py\n    def to_data_dict(self) -> (dict,):\n        return {\n            # Properties from BaseArtisan:\n            'address':self.address.to_dict() if self.address else None,\n            'company_name':self.company_name,\n            'contact_email':self.contact_email,\n            'contact_name':self.contact_name,\n            'website':self.website, \n            # - Properties from BaseDataObject (through \n            #   JSONFileDataObject)\n            'created':datetime.strftime(\n                self.created, self.__class__._data_time_string\n            ),\n            'is_active':self.is_active,\n            'is_deleted':self.is_deleted,\n            'modified':datetime.strftime(\n                self.modified, self.__class__._data_time_string\n            ),\n            'oid':str(self.oid),\n        }\n```", "```py\n    def __init__(self, \n        # - Required arguments from BaseProduct\n        name:(str,), summary:(str,), available:(bool,), \n        store_available:(bool,), \n        # - Optional arguments from BaseProduct\n        description:(str,None)=None, dimensions:(str,None)=None,\n        metadata:(dict,)={}, shipping_weight:(int,)=0, \n        # - Optional arguments from BaseDataObject/JSONFileDataObject\n        oid:(UUID,str,None)=None, \n        created:(datetime,str,float,int,None)=None, \n        modified:(datetime,str,float,int,None)=None,\n        is_active:(bool,int,None)=None, \n        is_deleted:(bool,int,None)=None,\n        is_dirty:(bool,int,None)=None, \n        is_new:(bool,int,None)=None,\n    ):\n        \"\"\"\nObject initialization.\n\nself .............. (Product instance, required) The instance to \n                    execute against\nname .............. (str, required) The name of the product\nsummary ........... (str, required) A one-line summary of the \n                    product\navailable ......... (bool, required) Flag indicating whether the \n                    product is considered available by the artisan \n                    who makes it\nstore_available ... (bool, required) Flag indicating whether the \n                    product is considered available on the web-\n                    store by the Central Office\ndescription ....... (str, optional, defaults to None) A detailed \n                    description of the product\ndimensions ........ (str, optional, defaults to None) A measurement-\n                    description of the product\nmetadata .......... (dict, optional, defaults to {}) A collection \n                    of metadata keys and values describing the \n                    product\nshipping_weight ... (int, optional, defaults to 0) The shipping-\n                    weight of the product\n\"\"\"\n        # - Call parent initializers if needed\n        BaseProduct.__init__(\n            self, name, summary, available, store_available, \n            description, dimensions, metadata, shipping_weight\n        )\n        JSONFileDataObject.__init__(\n            self, oid, created, modified, is_active, \n            is_deleted, is_dirty, is_new\n        )\n        # - Set default instance property-values using _del_... methods\n        # - Set instance property-values from arguments using \n        #   _set_... methods\n        # - Perform any other initialization needed\n```", "```py\n    def to_data_dict(self) -> (dict,):\n        return {\n            # Properties from BaseProduct:\n            'available':self.available,\n            'description':self.description,\n            'dimensions':self.dimensions,\n            'metadata':self.metadata,\n            'name':self.name,\n            'shipping_weight':self.shipping_weight,\n            'store_available':self.store_available,\n            'summary':self.summary,\n            # - Properties from BaseDataObject (through \n            #   JSONFileDataObject)\n            'created':datetime.strftime(\n                self.created, self.__class__._data_time_string\n            ),\n            'is_active':self.is_active,\n            'is_deleted':self.is_deleted,\n            'modified':datetime.strftime(\n                self.modified, self.__class__._data_time_string\n            ),\n            'oid':str(self.oid),\n        }\n```", "```py\np = Product('name', 'summary', True, True)\nprint(json.dumps(p.to_data_dict(), indent=4))\n```", "```py\nclass Order(Address, JSONFileDataObject, object):\n    \"\"\"\nRepresents an Order in the context of the Artisan Application\n\"\"\"\n    ###################################\n    # Class attributes/constants      #\n    ###################################\n\n    # TODO: Work out the configuration-based file-system path \n    #       for this attribute\n    _file_store_dir = '/tmp/hms_data'\n```", "```py\n    ###################################\n    # Property-getter methods         #\n    ###################################\n\n    def _get_items(self) -> dict:\n        return dict(self._items)\n\n    def _get_name(self) -> (str,None):\n        return self._name\n```", "```py\n    ###################################\n    # Property-setter methods         #\n    ###################################\n\n    def _set_building_address(self, value:(str,None)) -> None:\n        result = Address._set_building_address(self, value)\n        self._set_is_dirty(True)\n        return result\n\n    def _set_city(self, value:str) -> None:\n        result = Address._set_city(self, value)\n        self._set_is_dirty(True)\n        return result\n\n    def _set_country(self, value:(str,None)) -> None:\n        result = Address._set_country(self, value)\n        self._set_is_dirty(True)\n        return result\n\n    def _set_items(self, value:(dict,)) -> None:\n        if type(value) != dict:\n            raise TypeError(\n                '%s.items expects a dict of UUID keys and int-'\n                'values, but was passed \"%s\" (%s)' % \n                (self.__class__.__name__, value,type(value).__name__)\n            )\n        self._del_items()\n        for key in value:\n            self.set_item_quantity(key, value[key])\n        self._set_is_dirty(True)\n\n    def _set_name(self, value:(str,)) -> None:\n        self._name = value\n        self._set_is_dirty(True)\n\n    def _set_region(self, value:(str,None)) -> None:\n        result = Address._set_region(self, value)\n        self._set_is_dirty(True)\n        return result\n\n    def _set_postal_code(self, value:(str,None)) -> None:\n        result = Address._set_postal_code(self, value)\n        self._set_is_dirty(True)\n        return result\n\n    def _set_street_address(self, value:str) -> None:\n        result = Address._set_street_address(self, value)\n        self._set_is_dirty(True)\n        return result\n```", "```py\n    ###################################\n    # Property-deleter methods        #\n    ###################################\n\n    def _del_building_address(self) -> None:\n        result = Address._del_building_address(self)\n        self._set_is_dirty(True)\n        return result\n\n    def _del_city(self) -> None:\n        result = Address._del_city(self)\n        self._set_is_dirty(True)\n        return result\n\n    def _del_country(self) -> None:\n        result = Address._del_country(self)\n        self._set_is_dirty(True)\n        return result\n\n    def _del_items(self) -> None:\n        self._items = {}\n        self._set_is_dirty(True)\n\n    def _del_name(self) -> None:\n        self._name = None\n        self._set_is_dirty(True)\n\n    def _del_region(self) -> None:\n        result = Address._del_region(self)\n        self._set_is_dirty(True)\n        return result\n\n    def _del_postal_code(self) -> None:\n        result = Address._del_postal_code(self)\n        self._set_is_dirty(True)\n        return result\n```", "```py\n    def _del_street_address(self) -> None:\n        result = Address._del_street_address(self)\n        self._set_is_dirty(True)\n        return result\n        self._set_is_dirty(True)\n```", "```py\n    ###################################\n    # Instance property definitions   #\n    ###################################\n\n    building_address = property(\n        Address._get_building_address, _set_building_address, \n        _del_building_address, \n        'Gets, sets or deletes the building_address (str|None) '\n        'of the instance'\n    )\n    city = property(\n        Address._get_city, _set_city, _del_city, \n        'Gets, sets or deletes the city (str) of the instance'\n    )\n    country = property(\n        Address._get_country, _set_country, _del_country, \n        'Gets, sets or deletes the country (str|None) of the '\n        'instance'\n    )\n    items = property(\n        _get_items, None, None,\n        'Gets the items associated with the order, a dict of OID '\n        'keys with quantity values'\n    )\n    name = property(\n        _get_name, _set_name, _del_name, \n        'Gets, sets or deletes the name associated with the order'\n    )\n    region = property(\n        Address._get_region, _set_region, _del_region, \n        'Gets, sets or deletes the region (str|None) of the '\n        'instance'\n    )\n    postal_code = property(\n        Address._get_postal_code, _set_postal_code, _del_postal_code, \n        'Gets, sets or deletes the postal_code (str|None) of '\n        'the instance'\n    )\n    street_address = property(\n        Address._get_street_address, _set_street_address, \n        _del_street_address, \n        'Gets, sets or deletes the street_address (str) of the '\n        'instance'\n    )\n```", "```py\n    ###################################\n    # Object initialization           #\n    ###################################\n\n    def __init__(self, \n        name:(str,),\n        # - Required arguments from Address\n        street_address:(str,), city:(str,), \n        # - Local optional arguments\n        items:(dict,)={},\n        # - Optional arguments from Address\n        building_address:(str,None)=None, region:(str,None)=None, \n        postal_code:(str,None)=None, country:(str,None)=None,\n        # - Optional arguments from BaseDataObject/JSONFileDataObject\n        oid:(UUID,str,None)=None, \n        created:(datetime,str,float,int,None)=None, \n        modified:(datetime,str,float,int,None)=None,\n        is_active:(bool,int,None)=None, \n        is_deleted:(bool,int,None)=None,\n        is_dirty:(bool,int,None)=None, \n        is_new:(bool,int,None)=None,\n    ):\n        \"\"\"\nObject initialization.\n\nself .............. (Order instance, required) The instance to \n                    execute against\nname .............. (str, required) The name of the addressee\nstreet_address .... (str, required) The base street-address of the \n                    location the instance represents\ncity .............. (str, required) The city portion of the street-\n                    address that the instance represents\nitems ............. (dict, optional, defaults to {}) The dict of \n                    oids-to-quantities of products in the order\nbuilding_address .. (str, optional, defaults to None) The second \n                    line of the street address the instance represents, \n                    if applicable\nregion ............ (str, optional, defaults to None) The region \n                    (state, territory, etc.) portion of the street-\n                    address that the instance represents\npostal_code ....... (str, optional, defaults to None) The postal-code \n                    portion of the street-address that the instance \n                    represents\ncountry ........... (str, optional, defaults to None) The country \n                    portion of the street-address that the instance \n                    represents\noid ............... (UUID|str, optional, defaults to None) \ncreated ........... (datetime|str|float|int, optional, defaults to None) \nmodified .......... (datetime|str|float|int, optional, defaults to None) \nis_active ......... (bool|int, optional, defaults to None) \nis_deleted ........ (bool|int, optional, defaults to None) \nis_dirty .......... (bool|int, optional, defaults to None) \nis_new ............ (bool|int, optional, defaults to None) \n\"\"\"\n        # - Call parent initializers if needed\n        Address.__init__(\n            self, street_address, city, building_address, region, \n            postal_code, country\n        )\n        JSONFileDataObject.__init__(\n            self, oid, created, modified, is_active, \n            is_deleted, is_dirty, is_new\n        )\n        # - Set default instance property-values using _del_... methods\n        self._del_items()\n        self._del_name()\n        # - Set instance property-values from arguments using \n        #   _set_... methods\n        self._set_name(name)\n        if items:\n            self._set_items(items)\n        # - Perform any other initialization needed\n        self._set_is_dirty(False)\n```", "```py\ndef matches(self, **criteria) -> (bool,):\n  return BaseDataObject.matches(self, **criteria)\n```", "```py\n    def set_item_quantity(self, oid:(UUID,str), quantity:(int,)) -> None:\n        if type(oid) not in (UUID, str):\n            raise TypeError(\n                '%s.set_item_quantity expects a UUID or string '\n                'representation of one for its oid argument, but '\n                'was passed \"%s\" (%s)' % \n                (self.__class__.__name__, oid, type(oid).__name__)\n            )\n        if type(oid) == str:\n            try:\n                oid = UUID(oid)\n            except Exception as error:\n                raise ValueError(\n                    '%s.set_item_quantity expects a UUID or string '\n                    'representation of one for its oid argument, but '\n                    'was passed \"%s\" (%s) which could not be '\n                    'converted into a UUID (%s: %s)' % \n                    (\n                        self.__class__.__name__, oid, \n                        type(oid).__name__, error.__class__.__name__, \n                        error\n                    )\n                )\n        if type(quantity) != int:\n            raise TypeError(\n                '%s.set_item_quantity expects non-negative int-value '\n                'for its quantity argument, but was passed \"%s\" (%s)' \n                % (\n                    self.__class__.__name__, quantity, \n                    type(quantity).__name__\n                )\n            )\n        if quantity < 0:\n            raise ValueError(\n                '%s.set_item_quantity expects non-negative int-value '\n                'for its quantity argument, but was passed \"%s\" (%s)' \n                % (\n                    self.__class__.__name__, quantity, \n                    type(quantity).__name__\n                )\n            )\n```", "```py\n if quantity != 0:\n     self._items[oid] = quantity\n else:\n     try:\n        del self._items[oid]\n     except KeyError:\n         pass\n```", "```py\n    def to_data_dict(self) -> (dict,):\n        return {\n            # - Local properties\n            'name':self.name,\n            'street_address':self.street_address,\n            'building_address':self.building_address,\n            'city':self.city,\n            'region':self.region,\n            'postal_code':self.postal_code,\n            'country':self.country,\n            # - Generate a string:int dict from the UUID:int dict\n            'items':dict(\n                [\n                    (str(key), int(self.items[key])) \n                    for key in self.items.keys()\n                ]\n            ),\n            # - Properties from BaseDataObject (through \n            #   JSONFileDataObject)\n            'created':datetime.strftime(\n                self.created, self.__class__._data_time_string\n            ),\n            'is_active':self.is_active,\n            'is_deleted':self.is_deleted,\n            'modified':datetime.strftime(\n                self.modified, self.__class__._data_time_string\n            ),\n            'oid':str(self.oid),        }\n```", "```py\n    ###################################\n    # Class methods                   #\n    ###################################\n\n    @classmethod\n    def standard_address(cls, \n            name:(str,), street_address:(str,), \n            building_address:(str,None), city:(str,), \n            region:(str,None), postal_code:(str,None), \n            country:(str,None)\n        ):\n        return cls(\n            name=name, street_address=street_address, city=city,\n            building_address=building_address, region=region, \n            postal_code=postal_code, country=country\n        )\n```"]