["```py\ndef SetNodeResource(x, y, z, r, v):\n    n = get_node(x,y)\n    n.z = z\n    n.resources.add(r, v)\n```", "```py\nSetNodeResource(0,0,None,'gold',0.25) print(get_node(0,0)) SetNodeResource(0,0,None,'silver',0.25) print(get_node(0,0)) SetNodeResource(0,0,None,'copper',0.25) print(get_node(0,0))\n```", "```py\nSetNodeResource(0,6,None,'gold',0.25)\n```", "```py\nSetNodeResource(0,0,'gold',2)\n```", "```py\nSetNodeResource(0,0,'tin',0.25)\n```", "```py\ndef set_node_resource(x, y, resource_name, \n    resource_value, z=None):\n    \"\"\"\nSets the value of a named resource for a specified \nnode, creating that node in the process if it doesn't \nexist.\n\nReturns the MapNode instance.\n\nArguments:\n - x ................ (int, required, non-negative) The\n                      x-coordinate location of the node \n                      that the resource type and value is \n                      to be associated with.\n - y ................ (int, required, non-negative) The \n                      y-coordinate location of the node \n                      that the resource type and value is \n                      to be associated with.\n - z ................ (int, optional, defaults to None) \n                      The z-coordinate (altitude) of the \n                      node.\n - resource_name .... (str, required, member of \n                      node_resource_names) The name of the \n                      resource to associate with the node.\n - resource_value ... (float, required, between 0.0 and 1.0, \n                      inclusive) The presence of the \n                      resource at the node's location.\n\nRaises\n - RuntimeError if any errors are detected.\n\"\"\"\n    # Get the node, if it exists\n    try:\n        node = get_node(x,y)\n    except NonexistentNodeError:\n        # The node doesn't exist, so create it and \n        # populate it as applicable\n        node = create_node(x, y)\n    # If z is specified, set it\n    if z != None:\n        node.z = z\n# TODO: Determine if there are other exceptions that we can \n#       do anything about here, and if so, do something \n#       about them. For example:\n#    except Exception as error:\n#        # Handle this exception\n    # FUTURE: If there's ever a need to add more than one \n    #    resource-value at a time, we could add **resources \n    #    to the signature, and call node.resources.add once \n    #    for each resource.\n    # All our values are checked and validated by the add \n    # method, so set the node's resource-value\n    try:\n        node.resources.add(resource_name, resource_value)\n        # Return the newly-modified/created node in case \n        # we need to keep working with it.\n        return node\n    except Exception as error:\n        raise RuntimeError(\n            'set_node_resource could not set %s to %0.3f '\n            'on the node at (%d,%d).' \n            % (resource_name, resource_value, node.x, \n            node.y)\n        )\n```"]