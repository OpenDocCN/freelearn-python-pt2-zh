["```py\nmodifier onlyBy(address _account)\n{\n  require(msg.sender == _account, \"Sender not authorized.\");\n  _;\n}\nfunction withdraw() public onlyBy(owner)\n{\n  //withdraw money;\n}\n```", "```py\n    function flexible_function(uint _in) public {\n        other_balance = _in;\n    }\n\n    function flexible_function(uint _in, uint _in2) public {\n        other_balance = _in + _in2;\n    }\n\n    function flexible_function(uint _in, uint _in2, uint _in3) public {\n        other_balance = _in + _in2 - _in3;\n    }\n```", "```py\n$ sudo apt-get install build-essential\n$ sudo add-apt-repository ppa:deadsnakes/ppa\n$ sudo apt-get update \n$ sudo apt-get install python3.6 python3.6-dev\n```", "```py\n$ sudo apt-get install virtualenv\n```", "```py\n$ virtualenv -p python3.6 vyper-venv\n```", "```py\n$ source vyper-venv/bin/activate\n```", "```py\n(vyper-venv) $ pip install vyper\n```", "```py\n(vyper-venv) $ vyper --version\n0.1.0b6\n```", "```py\nname: public(bytes[24])\n\n@public\ndef __init__():\n    self.name = \"Satoshi Nakamoto\"\n\n@public\ndef change_name(new_name: bytes[24]):\n    self.name = new_name\n\n@public\ndef say_hello() -> bytes[32]:\n    return concat(\"Hello, \", self.name)\n```", "```py\n(vyper-venv) $ vyper hello.vy\n```", "```py\n(vyper-venv) $ vyper -f json hello.vy\n```", "```py\n(vyper-venv) $ vyper -f json,bytecode hello.vy\n```", "```py\n$ mkdir hello_project\n$ cd hello_project\n$ truffle init\n```", "```py\nmodule.exports = {\n  networks: {\n    \"development\": {\n      network_id: 5777,\n      host: \"localhost\",\n      port: 7545\n    },\n  }\n};\n```", "```py\n$ mkdir -p build/contracts\n$ cd build/contracts\n```", "```py\n{\n  \"abi\":\n  \"bytecode\":\n}\n```", "```py\n{\n  \"abi\": [{\"name\": \"__init__\", \"outputs\": [], \"inputs\": [], \"constant\": false, \"payable\": false, \"type\": \"constructor\"}, {\"name\": \"change_name\", \"outputs\": [], \"inputs\": [{\"type\": \"bytes\", \"name\": \"new_name\"}], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 70954}, {\"name\": \"say_hello\", \"outputs\": [{\"type\": \"bytes\", \"name\": \"out\"}], \"inputs\": [], \"constant\": false, \"payable\": false, \"type\": \"function\", \"gas\": 8020}, {\"name\": \"name\", \"outputs\": [{\"type\": \"bytes\", \"name\": \"out\"}], \"inputs\": [], \"constant\": true, \"payable\": false, \"type\": \"function\", \"gas\": 5112}],\n  \"bytecode\": \"0x600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffff...\n...\n1600101808352811415610319575b50506020610160526040610180510160206001820306601f8201039050610160f3005b60006000fd5b61012861049703610128600039610128610497036000f3\"\n}\n```", "```py\nvar Hello = artifacts.require(\"Hello\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Hello);\n};\n```", "```py\n$ truffle migrate\n```", "```py\n0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\n```", "```py\n$ truffle console\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\")\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\").then(function(instance) { return instance.name.call(); });\n'0x5361746f736869204e616b616d6f746f'\n```", "```py\n>>> int(0x53)\n83\n```", "```py\n>>> chr(83)\n'S'\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\").then(function(instance) { return instance.say_hello.call(); })\n'0x48656c6c6f2c205361746f736869204e616b616d6f746f'\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\").then(function(instance) { return instance.change_name(web3.utils.fromAscii(\"Vitalik Buterin\"), { from: \"0x6d3eBC3000d112B70aaCA8F770B06f961C852014\" }); });\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\").then(function(instance) { return instance.name.call(); });\n'0x566974616c696b204275746572696e'\n```", "```py\nname: public(bytes[24])\n\n@public\ndef __init__():\n    self.name = \"Satoshi Nakamoto\"\n\n@public\ndef change_name(new_name: bytes[24]):\n    self.name = new_name\n\n@public\ndef say_hello() -> bytes[32]:\n    return concat(\"Hello, \", self.name)\n```", "```py\nname: public(bytes[24])\n```", "```py\nname: bytes[24]\n```", "```py\n@public\ndef __init__():\n    self.name = \u201cSatoshi Nakamoto\u201d\n```", "```py\ni: public(uint256)\n\n@public\ndef __init__(int_param: uint256):\n    self.i = int_param\n```", "```py\nvar Hello = artifacts.require(\"Hello\");\nmodule.exports = function(deployer) {\n    deployer.deploy(Hello, 4);\n};\n```", "```py\n@public\ndef change_name(new_name: bytes[24]):\n    self.name = new_name\n```", "```py\n@public\ndef say_hello() -> bytes[32]:\n    return concat(\"Hello, \", self.name)\n```", "```py\n@public\ndef say_hello() -> bytes[28]:\n    return concat(\"Hello, \", self.name)\n```", "```py\n@public\n@const\ndef say_hello() -> bytes[32]:\n    return concat(\"Hello, \", self.name)\n```", "```py\nstruct DonaturDetail:\n    sum: uint256(wei)\n    name: bytes[100]\n    time: timestamp\n\ndonatur_details: public(map(address, DonaturDetail))\n\n...\n...\n\n@public\ndef withdraw_donation():\n    assert msg.sender == self.donatee\n\n    send(self.donatee, self.balance)\n```", "```py\nstruct DonaturDetail:\n    sum: uint256(wei)\n    name: bytes[100]\n    time: timestamp\n```", "```py\nDonaturDetail.name = \"marie curie\"\n```", "```py\nsimple_map: map(address, uint256)\n```", "```py\nself.simple_map[0x9049386D4d5808e0Cd9e294F2aA3d70F01Fbf0C5] = 10\n```", "```py\nfor key in self.simple_map:\n    // do something with self.simple_map[key]\n```", "```py\nself.simple_map.keys()\n```", "```py\nself.simple_map[0x1111111111111111111111111111111111111111] => 0\n```", "```py\n>>> from collections import defaultdict\n>>> d = defaultdict(lambda: 0, {})\n>>> d['a']\n0\n>>> d['a'] = 0\n>>> d['a']\n0\n```", "```py\ndonatur_details: public(map(address, DonaturDetail))\n```", "```py\ndonaturs: public(address[10])\n```", "```py\ndonatee: public(address)\n```", "```py\nindex: int128\n```", "```py\n@public\ndef __init__():\n    self.donatee = msg.sender\n```", "```py\n@payable\n@public\ndef donate(name: bytes[100]):\n    assert msg.value >= as_wei_value(1, \"ether\")\n    assert self.index < 10\n\n    self.donatur_details[msg.sender] = DonaturDetail({\n                                         sum: msg.value,\n                                         name: name,\n                                         time: block.timestamp\n                                       })\n\n    self.donaturs[self.index] = msg.sender\n    self.index += 1\n```", "```py\nassert msg.value >= 1000000000000000000\n```", "```py\n@public\ndef withdraw_donation():\n    assert msg.sender == self.donatee\n\n    send(self.donatee, self.balance)\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\").then(function(instance) { return instance.donatee.call(); });\n'0xb105f01ce341ef9282dc2201bdfda2c26903da77'\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\").then(function(instance) { return instance.donate(web3.utils.fromAscii(\"lionel messi\"), {from: \"0x6d3eBC3000d112B70aaCA8F770B06f961C852014\", value: 2000000000000000000}); });\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\").then(function(instance) { return instance.donate(web3.utils.fromAscii(\"taylor swift\"), {from: \"0x9049386D4d5808e0Cd9e294F2aA3d70F01Fbf0C5\", value: 3500000000000000000}); });\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\").then(function(instance) { return instance.donatur_details__sum.call(\"0x9049386D4d5808e0Cd9e294F2aA3d70F01Fbf0C5\"); });\n<BN: 30927f74c9de0000>\n```", "```py\ntruffle(development)> web3.utils.toBN(15);\n<BN: f>\ntruffle(development)> web3.utils.toBN(9);\n<BN: 9>\ntruffle(development)> web3.utils.toBN(100);\n<BN: 64>\ntruffle(development)> web3.utils.toBN(3500000000000000000);\n<BN: 30927f74c9de0000>\n```", "```py\ntruffle(development)> Contract.at(\"0x3E9417399786347B6Ab38f59d3f00829d6bba7b8\").then(function(instance) { return instance.withdraw_donation({from: \"0xb105F01Ce341Ef9282dc2201BDfdA2c26903da77\"}); });\n```", "```py\nbull_or_bear: bool = True\n```", "```py\nhalf_of_my_heart: decimal = 0.5\n```", "```py\ngoat: bytes32 = convert('messi', bytes32)\n```", "```py\nGOAT: constant(bytes[6]) = 'messi'\n```", "```py\nfirst_name: bytes[10] = slice(name, start=0, len=10)\n```", "```py\nlength_of_name: int128 = len(name)\n```", "```py\nselfdestruct(self.donatee)\n```", "```py\nround_heart: int128 = ceil(half_of_my_heart)\n```", "```py\nround_heart: int128 = floor(half_of_my_heart)\n```", "```py\nsecret_hash: bytes32 = sha3('messi')\n```", "```py\nDonate: event({_from: indexed(address),  _value: uint256(wei)})\n```", "```py\n@public\ndef donate(name: bytes[100]):\n    log.Donate(msg.sender, msg.value)\n```", "```py\nvar Hello = artifacts.require(\"Hello\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Hello);\n};\n```", "```py\n{\n  \"contractName\": \"Hello\",\n  \"abi\": <your Hello smart contract's interface>,\n  \"bytecode\": \"<your Hello smart contract's bytecode>\"\n}\n```", "```py\nstruct DonaturDetail:\n    sum: uint256(wei)\n    name: bytes[100]\n    time: timestamp\n\ncontract Hello():\n def say_hello() -> bytes[32]: constant\n\ndonatur_details: public(map(address, DonaturDetail))\n\n...\n...\n\n@public\ndef withdraw_donation():\n    assert msg.sender == self.donatee\n\n    send(self.donatee, self.balance)\n\n@public\n@constant\ndef donation_smart_contract_call_hello_smart_contract_method(smart_contract_address: address) -> bytes[32]:\n return Hello(smart_contract_address).say_hello()\n```", "```py\nvar Donation = artifacts.require(\"Donation\");\nmodule.exports = function(deployer) {\n  deployer.deploy(Donation);\n};\n```", "```py\n{\n  \"contractName\": \"Donation\",\n  \"abi\": <your Donation smart contract's interface>,\n  \"bytecode\": \"<your Donation smart contract's bytecode>\"\n}\n```", "```py\n$ truffle migrate --reset\n```", "```py\n$ truffle console\n```", "```py\ntruffle(development)> Donation.at(\"0x98Db4235158831BF9133faC1c4e1829021ecEB67\").then(function(instance) { return instance.donation_smart_contract_call_hello_smart_contract_method.call(\"0xBc932d934cfE859F9Dc903fdd5DE135F32EbC20E\"); } );\n'0x48656c6c6f2c205361746f736869204e616b616d6f746f'\n```", "```py\nimport vyper\nimport os, json\n\nfilename = 'hello.vy'\ncontract_name = 'Hello'\ncontract_json_file = open('Hello.json', 'w')\n\nwith open(filename, 'r') as f:\n    content = f.read()\n\ncurrent_directory = os.curdir\n\nsmart_contract = {}\nsmart_contract[current_directory] = content\n\nformat = ['abi', 'bytecode']\ncompiled_code = vyper.compile_codes(smart_contract, format, 'dict')\n\nsmart_contract_json = {\n    'contractName': contract_name,\n    'abi': compiled_code[current_directory]['abi'],\n    'bytecode': compiled_code[current_directory]['bytecode']\n}\n\njson.dump(smart_contract_json, contract_json_file)\n\ncontract_json_file.close()\n```", "```py\n(vyper-venv) $ python compiler.py\n```", "```py\nimport vyper\nimport os, json\n```", "```py\nfilename = 'hello.vy'\ncontract_name = 'Hello'\ncontract_json_file = open('Hello.json', 'w')\n```", "```py\nwith open(filename, 'r') as f:\n    content = f.read()\n```", "```py\ncurrent_directory = os.curdir\n\nsmart_contract = {}\nsmart_contract[current_directory] = content\n```", "```py\nformat = ['abi', 'bytecode']\ncompiled_code = vyper.compile_codes(smart_contract, format, 'dict')\n```", "```py\nsmart_contract_json = {\n    'contractName': contract_name,\n    'abi': compiled_code[current_directory]['abi'],\n    'bytecode': compiled_code[current_directory]['bytecode']\n}\n```", "```py\njson.dump(smart_contract_json, contract_json_file)\n\ncontract_json_file.close()\n```", "```py\n>>> flexible_list = []\n>>> flexible_list.append('bitcoin')\n>>> flexible_list.append('ethereum')\n>>> flexible_list\n['bitcoin', 'ethereum']\n```", "```py\ninfinite_array_of_strings: map(uint256, bytes[100])\nindex: int128\n```", "```py\nmapping_of_mapping_of_mapping: map(uint256, map(uint256, map(uint256, bytes[10])))\n```", "```py\nfriend1_str: bytes32 = convert(friend1, bytes32)\nfriend2_str: bytes32 = convert(friend2, bytes32)\nkey: bytes[100] = concat(friend1_str, friend2_str)\n\ndating[key] = True\n```", "```py\ndating[friend1_address][friend2_address] = True\n```", "```py\nnba_final_winner = nba.get_json_winner('2019/2020')\n```"]