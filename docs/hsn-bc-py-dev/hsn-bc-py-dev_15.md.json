["```py\nfrom os import listdir\nfrom hashlib import sha256\n\nfiles = [f for f in listdir('.') if 'hello' in f]\n\nhashes = {}\n\nfor file in files:\n    with open(file) as f:\n        content = f.read().encode('utf-8')\n        hash_of_content = sha256(content).hexdigest()\n        hashes[hash_of_content] = content\n\ncontent = hashes['20c38a7a55fc8a8e7f45fde7247a0436d97826c20c5e7f8c978e6d59fa895fd2']\nprint(content.decode('utf-8'))\n\nprint(len(hashes))\n```", "```py\nI am a good girl.\n\n3\n```", "```py\nI am a big boy.\nI am a tall girl.\nI am a fast horse.\nI am a slow dragon.\n```", "```py\n    def __init__(self, leaf_nodes : List[str]):\n        self.hash_nodes : List[str] = []\n        self.leaf_nodes : List[str] = leaf_nodes\n        self._turn_leaf_nodes_to_hash_nodes()\n        if len(leaf_nodes) < 4:\n            self.root_hash = self._hash_list()\n        else:\n            self.root_hash = self._build_root_hash()\n```", "```py\n    def _hash_list(self):\n        long_node = \"\".join(self.hash_nodes)\n        return self._hash(long_node.encode('utf-8'))\n```", "```py\n    def _turn_leaf_nodes_to_hash_nodes(self):\n        for node in self.leaf_nodes:\n            self.hash_nodes.append(self._hash(node.encode('utf-8')))\n```", "```py\n    def _hash(self, data : bytes) > bytes:\n        return sha256(data).hexdigest()\n```", "```py\n\n    def _build_root_hash(self) > bytes:\n        parent_amount = ceil(len(self.hash_nodes) / 2)\n        nodes : List[str] = self.hash_nodes\n\n        while parent_amount > 1:\n            parents : List[bytes] = []\n            i = 0\n            while i < len(nodes):\n                node1 = nodes[i]\n                if i + 1 >= len(nodes):\n                    node2 = None\n                else:\n                    node2 = nodes[i+1]\n                parents.append(self._convert_parent_from_two_nodes(node1, node2))\n                i += 2\n            parent_amount = len(parents)\n            nodes = parents\n\n        return parents[0]\n```", "```py\n    def _convert_parent_from_two_nodes(self, node1 : bytes, node2) -> bytes:\n        if node2 == None:\n            return self._hash((node1 + node1).encode('utf-8'))\n        return self._hash((node1 + node2).encode('utf-8'))\n```", "```py\nfrom os import listdir\nfrom hashlib import sha256\nfrom merkle_tree import MerkleTree\n\nhashes = {}\n\nfile = 'hello_big.txt'\nwith open(file) as f:\n    lines = f.read().split('\\n')\n    hash = []\n    hash_of_hash = []\n    merkle_tree = MerkleTree(lines)\n    root_hash = merkle_tree.root_hash\n\nhashes[root_hash] = []\nfor line in lines:\n    hashes[root_hash].append(line)\n\nprint(hashes)\n```", "```py\n{'ba7a7738a34a0e60ef9663c669a7fac406ae9f84441df2b5ade3de1067c41808': ['I am a big boy.', 'I am a tall girl.', 'I am a fast horse.', 'I am a slow dragon.', '']}\n```", "```py\nfrom secret_algorithm import SuperSecretAlgorithm\n\n# execute it\nSuperSecretAlgorithm()\n```", "```py\n$ mkdir sample_directory\n$ cd sample_directory\n$ // Create some files\n$ mkdir inner_directory\n$ cd inner_directory\n$ // Create some files\n```", "```py\n    def __init__(self, filepath : str):\n        self.pointers = {}\n        self.dirtype = isdir(filepath)\n        self.filename = Path(filepath).name\n        if not self.dirtype:\n            with open(filepath) as f:\n                self.content = f.read()\n            self.hash = self._hash((self.filename + self.content).encode('utf-8'))\n        else:\n            self.content = self._iterate_directory_contents(filepath)\n            nodes_in_str_array = list(map(lambda x: str(x), self.content))\n            if nodes_in_str_array:\n                self.hash = self._hash((self.filename + MerkleTree(nodes_in_str_array).root_hash).encode('utf-8'))\n            else:\n                self.hash = self._hash(self.filename.encode('utf-8'))\n```", "```py\n    def _hash(self, data : bytes) -> bytes:\n        return sha256(data).hexdigest()\n```", "```py\n    def _iterate_directory_contents(self, directory : str):\n        nodes = []\n        for f in listdir(directory):\n            merkle_dag_node = MerkleDAGNode(directory + '/' + f)\n            nodes.append(merkle_dag_node)\n            self.pointers[f] = merkle_dag_node\n        return nodes\n```", "```py\n    def __repr__(self):\n        return 'MerkleDAGNode: ' + self.hash + ' || ' + self.filename\n```", "```py\n    def __eq__(self, other):\n        if isinstance(other, MerkleDAGNode):\n            return self.hash == other.hash\n        return False\n```", "```py\nfrom merkle_dag import MerkleDAGNode\n\nouter_directory = 'sample_directory'\n\nnode = MerkleDAGNode(outer_directory)\nprint(node)\nprint(node.content)\n```", "```py\nMerkleDAGNode: ec618189b9de0dae250ab5fa0fd9bf1abc158935c66ff8595446f5f9b929e037 || sample_directory\n[MerkleDAGNode: 97b97507c37bd205aa15073fb65367b45eb11a975fe78cd548916f5a3da9692a || hello2.txt, MerkleDAGNode: 8ced218a323755a7d4969187449177bb2338658c354c7174e21285b579ae2bca || hello.txt, MerkleDAGNode: c075280aef64223bd38b1bed1017599852180a37baa0eacce28bb92ac5492eb9 || inner_directory, MerkleDAGNode: bc908dfb86941536321338ff8dab1698db0e65f6b967a89bb79f5101d56e1d51 || hello3.txt]\n```", "```py\n011\n110\n---xor\n101\n```", "```py\n0101\n0101\n----xor\n0000\n```", "```py\n0100\n1000\n----xor\n1100\n```", "```py\n1000\n0100\n----xor\n1100\n```", "```py\n0101\n0100\n----xor\n0001\n```", "```py\n1110\n1111\n----xor\n0001\n```", "```py\n0101\n1101\n----xor\n1000\n```", "```py\n>> 5 ^ 11\n14\n```", "```py\n>>> bin(5)\n'0b101'\n```", "```py\n>>> int('0b101', 2)\n5\n```"]