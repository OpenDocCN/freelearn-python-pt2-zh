["```py\n$ virtualenv -p python3.6 populus-venv\n$ source populus-venv/bin/activate\n```", "```py\n(populus-venv) $ pip install eth-abi==1.2.2\n(populus-venv) $ pip install eth-typing==1.1.0\n(populus-venv) $ pip install py-evm==0.2.0a33\n(populus-venv) $ pip install web3==4.7.2\n(populus-venv) $ pip install -e git+https://github.com/ethereum/populus#egg=populus\n```", "```py\n(populus-venv) $ python\n>>> from solc import install_solc\n>>> install_solc('v0.4.25')\n```", "```py\n(populus-venv) $ ln -s /home/yourusername/.py-solc/solc-v0.4.25/bin/solc populus-venv/bin/\n```", "```py\n(populus-venv) $ mkdir populus_tutorial\n(populus-venv) $ cd populus_tutorial\n```", "```py\n(populus_venv) $ populus init\n```", "```py\npragma solidity ^0.4.0;\n\ncontract Greeter {\n    string public greeting;\n\n    // TODO: Populus seems to get no bytecode if `internal`\n    function Greeter() public {\n        greeting = 'Hello';\n    }\n\n    function setGreeting(string _greeting) public {\n        greeting = _greeting;\n    }\n\n    function greet() public constant returns (string) {\n        return greeting;\n    }\n}\n```", "```py\n(populus-venv) $ cp ../populus-\n   venv/src/populus/populus/assets/defaults.v9.config.json project.json\n```", "```py\n(populus-venv) $ populus compile\n```", "```py\ndef test_greeter(chain):\n    greeter, _ = chain.provider.get_or_deploy_contract('Greeter')\n\n    greeting = greeter.call().greet()\n    assert greeting == 'Hello'\n\ndef test_custom_greeting(chain):\n    greeter, _ = chain.provider.get_or_deploy_contract('Greeter')\n\n    set_txn_hash = greeter.transact().setGreeting('Guten Tag')\n    chain.wait.for_receipt(set_txn_hash)\n\n    greeting = greeter.call().greet()\n    assert greeting == 'Guten Tag'\n```", "```py\n(populus-venv) $ py.test tests\n```", "```py\n\n============================= test session starts ==============================\nplatform linux -- Python 3.6.6, pytest-3.9.1, py-1.7.0, pluggy-0.8.0\nrootdir: /tmp/pop_tut, inifile:\nplugins: populus-2.2.0\ncollected 2 items                                                              \n\ntests/test_greeter.py ..                                                [100%]\n\n=============================== warnings summary ===============================\n\n...\n\n===================== 2 passed, 3 warnings in 0.88 seconds =====================\n```", "```py\n(populus-venv) $ pip install vyper\n```", "```py\ngreeting: bytes[20]\n\n@public\ndef __init__():\n    self.greeting = \"Hello\"\n\n@public\ndef setGreeting(x: bytes[20]):\n    self.greeting = x\n\n@public\ndef greet() -> bytes[20]:\n    return self.greeting\n```", "```py\n\"backend\": {\n      \"class\": \"populus.compilation.backends.VyperBackend\"\n},\n```", "```py\n  \"compilation\": {\n    \"backend\": {\n      \"class\": \"populus.compilation.backends.VyperBackend\"\n    },\n    \"contract_source_dirs\": [\n      \"./contracts\"\n    ],\n    \"import_remappings\": []\n  },\n```", "```py\n(populus-venv) $ populus compile\n```", "```py\n{\n  \"Greeter\": {\n    \u2026\n    \"source_path\": \"contracts/Greeter.vy\"\n  }\n}\n```", "```py\n(populus-venv) $ cd populus-venv/src/populus\n(populus-venv) $ grep -R \"compile(\" populus/compilation/backends/vyper.py\n bytecode = '0x' + compiler.compile(code).hex()\n bytecode_runtime = '0x' + compiler.compile(code, bytecode_runtime=True).hex()\n```", "```py\n(populus-venv) $ wget https://patch-diff.githubusercontent.com/raw/ethereum/populus/pull/484.patch\n(populus-venv) $ git apply 484.patch\n(populus-venv) $ cd ../../../\n```", "```py\ndef test_greeter(chain):\n    greeter, _ = chain.provider.get_or_deploy_contract('Greeter')\n\n    greeting = greeter.functions.greet().call()\n    assert greeting == b'Hello'\n\ndef test_custom_greeting(chain):\n    greeter, _ = chain.provider.get_or_deploy_contract('Greeter')\n\n    set_txn_hash = greeter.functions.setGreeting(b'Guten Tag').transact()\n    chain.wait.for_receipt(set_txn_hash)\n\n    greeting = greeter.functions.greet().call()\n    assert greeting == b'Guten Tag'\n```", "```py\ndef test_greeter(chain):\n    greeter, _ = chain.provider.get_or_deploy_contract('Greeter')\n\n    greeting = greeter.functions.greet().call()\n    assert greeting == b'Hello'\n```", "```py\ndef test_custom_greeting(chain):\n    greeter, _ = chain.provider.get_or_deploy_contract('Greeter')\n\n    set_txn_hash = greeter.functions.setGreeting(b'Guten Tag').transact()\n    chain.wait.for_receipt(set_txn_hash)\n\n    greeting = greeter.functions.greet().call()\n    assert greeting == b'Guten Tag'\n```", "```py\nset_txn_hash = greeter.functions.setGreeting(b'Guten Tag').transact()\nchain.wait.for_receipt(set_txn_hash)\n```", "```py\nstruct DonaturDetail:\n    sum: uint256(wei)\n    name: bytes[100]\n    time: timestamp\n\ndonatur_details: public(map(address, DonaturDetail))\n\ndonaturs: public(address[10])\n\ndonatee: public(address)\n\nindex: int128\n\n...\n...\n\n@public\ndef withdraw_donation():\n    assert msg.sender == self.donatee\n\n    send(self.donatee, self.balance)\n\n```", "```py\n@public\ndef __init__():\n    self.donatee = msg.sender\n```", "```py\ndef test_donatee(web3, chain):\n    donation, _ = chain.provider.get_or_deploy_contract('Donation')\n\n    donatee = donation.functions.donatee().call()\n    assert donatee == web3.eth.coinbase\n```", "```py\n@payable\n@public\ndef donate(name: bytes[100]):\n    assert msg.value >= as_wei_value(1, \"ether\")\n    assert self.index < 10\n\n    self.donatur_details[msg.sender] = DonaturDetail({\n                                         sum: msg.value,\n                                         name: name,\n                                         time: block.timestamp\n                                       })\n\n    self.donaturs[self.index] = msg.sender\n    self.index += 1\n```", "```py\ndef test_donate_less_than_1_eth(web3, chain):\n    donation, _ = chain.provider.get_or_deploy_contract('Donation')\n\n    with pytest.raises(eth_tester.exceptions.TransactionFailed):\n        donation.transact({'value': web3.toWei('0.8', 'ether')}).donate(b'Taylor Swift')\n```", "```py\nimport pytest\nimport eth_tester\n```", "```py\ndef test_donate_1_eth(web3, chain):\n    import time\n\n    donation, _ = chain.provider.get_or_deploy_contract('Donation')\n\n    t = eth_tester.EthereumTester()\n    account2 = t.get_accounts()[1]\n\n...\n...\n\n    assert donatur == account2\n    assert donation_sum == web3.toWei('1', 'ether')\n    assert donation_name == donatur_name\n    assert (int(time.time()) - donation_time) < 600 # could be flaky\n\n    assert web3.eth.getBalance(donation.address) == web3.toWei('1', 'ether')\n```", "```py\nimport time\n```", "```py\ndonation, _ = chain.provider.get_or_deploy_contract('Donation')\n```", "```py\nt = eth_tester.EthereumTester()\naccount2 = t.get_accounts()[1]\n```", "```py\n    donatur_name = b'Taylor Swift'\n    set_txn_hash = donation.functions.donate(donatur_name).transact({'from': account2, 'value': web3.toWei('1', 'ether')})\n    chain.wait.for_receipt(set_txn_hash)\n```", "```py\ndonatur = donation.functions.donaturs(0).call()\ndonation_sum = donation.functions.donatur_details__sum(donatur).call()\ndonation_name = donation.functions.donatur_details__name(donatur).call()\ndonation_time = donation.functions.donatur_details__time(donatur).call()\n```", "```py\nassert donatur == account2\n```", "```py\nassert donation_sum == web3.toWei('1', 'ether')\n```", "```py\nassert donation_name == donatur_name\n```", "```py\nassert (int(time.time()) - donation_time) < 600 # could be flaky\n```", "```py\nassert web3.eth.getBalance(donation.address) == web3.toWei('1', 'ether')\n```", "```py\n@public\n def withdraw_donation():\n     assert msg.sender == self.donatee\n\n     send(self.donatee, self.balance)\n```", "```py\ndef test_other_account_could_not_withdraw_money(web3, chain):\n    donation, _ = chain.provider.get_or_deploy_contract('Donation')\n\n    t = eth_tester.EthereumTester()\n    account2 = t.get_accounts()[1]\n\n    donatur_name = b'Taylor Swift'\n    set_txn_hash = donation.functions.donate(donatur_name).transact({'from': account2, 'value': web3.toWei('1', 'ether')})\n    chain.wait.for_receipt(set_txn_hash)\n\n    with pytest.raises(eth_tester.exceptions.TransactionFailed):\n        donation.functions.withdraw_donation().transact({'from': account2})\n```", "```py\ndef test_manager_account_could_withdraw_money(web3, chain):\n     donation, _ = chain.provider.get_or_deploy_contract('Donation')\n\n     t = eth_tester.EthereumTester()\n     account2 = t.get_accounts()[1]\n\n     donatur_name = b'Taylor Swift'\n     set_txn_hash = donation.functions.donate(donatur_name).transact({'from': account2, 'value': web3.toWei('1', 'ether')})\n     chain.wait.for_receipt(set_txn_hash)\n\n     initial_balance = web3.eth.getBalance(web3.eth.coinbase)\n     set_txn_hash = donation.functions.withdraw_donation().transact({'from': web3.eth.coinbase})\n     chain.wait.for_receipt(set_txn_hash)\n\n     after_withdraw_balance = web3.eth.getBalance(web3.eth.coinbase)\n\n     assert abs((after_withdraw_balance - initial_balance) - web3.toWei('1', 'ether')) < web3.toWei('10', 'gwei')\n```", "```py\nassert abs((after_withdraw_balance - initial_balance) - web3.toWei('1', 'ether')) < web3.toWei('0.00000001', 'ether')\n```", "```py\n(populus-venv) $ py.test tests/test_donation.py\n```", "```py\ngreeting: bytes[20]\n\n@public\ndef __init__(greeting_param: bytes[20]):\n    self.greeting = greeting_param\n\n@public\ndef setGreeting(x: bytes[20]):\n    self.greeting = x\n\n@public\ndef greet() -> bytes[20]:\n    return self.greeting\n```", "```py\nimport pytest\n\n@pytest.fixture()\ndef greeter2_contract(chain):\n    Greeter2Factory = chain.provider.get_contract_factory('Greeter2')\n    deploy_txn_hash = Greeter2Factory.constructor(b'Hola').transact()\n    contract_address = chain.wait.for_contract_address(deploy_txn_hash)\n    return Greeter2Factory(address=contract_address)\n\ndef test_greeter2(greeter2_contract):\n    greeting2 = greeter2_contract.functions.greet().call()\n    assert greeting2 == b'Hola'\n```", "```py\n(populus-venv) $ py.test tests/test_greeter2.py\n```", "```py\n(populus-venv) $ populus chain new localblock\n```", "```py\n{\n  \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"coinbase\": \"0xcb22827ab291b3094076de25d583c49b902a5606\",\n  \"extraData\": \"0x686f727365\",\n  \"config\": {\n    \"daoForkBlock\": 0,\n    \"daoForSupport\": true,\n    \"homesteadBlock\": 0\n  },\n  \"timestamp\": \"0x0\",\n  \"mixhash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n  \"nonce\": \"0xdeadbeefdeadbeef\",\n  \"alloc\": {\n    \"0xcb22827ab291b3094076de25d583c49b902a5606\":{\n      \"balance\": \"1000000000000000000000000000000\"\n    }\n  },\n  \"gasLimit\": \"0x47d5cc\",\n  \"difficulty\": \"0x01\"\n}\n```", "```py\n#!/bin/sh\ngeth --rpc --rpcaddr 127.0.0.1 --rpcport 8545 --rpcapi admin,debug,eth,miner,net,personal,shh,txpool,web3,ws --ws --wsaddr 127.0.0.1 --wsport 8546 --wsapi admin,debug,eth,miner,net,personal,shh,txpool,web3,ws --datadir /home/yourusername/populus_tutorial/chains/localblock/chain_data --maxpeers 0 --networkid 1234 --port 30303 --ipcpath /home/yourusername/populus_tutorial/chains/localblock/chain_data/geth.ipc --nodiscover --mine --minerthreads 1 init /home/yourusername/populus_tutorial/chains/localblock/genesis.json\n```", "```py\n(populus-venv) $ ./chains/localblock/init_chain.sh\n```", "```py\n#!/bin/sh\ngeth --rpc --rpcaddr 127.0.0.1 --rpcport 8545 --rpcapi admin,debug,eth,miner,net,personal,shh,txpool,web3,ws --ws --wsaddr 127.0.0.1 --wsport 8546 --wsapi admin,debug,eth,miner,net,personal,shh,txpool,web3,ws --datadir /home/yourusername/populus_tutorial/chains/localblock/chain_data --maxpeers 0 --networkid 1234 --port 30303 --ipcpath /home/yourusername/populus_tutorial/chains/localblock/chain_data/geth.ipc --unlock 0xcb22827ab291b3094076de25d583c49b902a5606 --password /home/yourusername/populus_tutorial/chains/localblock/password --nodiscover --mine --minerthreads 1\n```", "```py\n(populus-venv) $ ./chains/localblock/run_chain.sh\n```", "```py\n     \"localblock\": {\n       \"chain\": {\n         \"class\": \"populus.chain.ExternalChain\"\n       },\n       \"web3\": {\n         \"provider\": {\n           \"class\": \"web3.providers.ipc.IPCProvider\",\n         \"settings\": {\n           \"ipc_path\":\"/tmp/geth.ipc\"\n         }\n        }\n       },\n       \"contracts\": {\n         \"backends\": {\n           \"JSONFile\": {\"$ref\": \"contracts.backends.JSONFile\"},\n           \"ProjectContracts\": {\n             \"$ref\": \"contracts.backends.ProjectContracts\"\n           }\n         }\n       }\n     }\n```", "```py\n(populus_venv) $ populus deploy --chain localblock Donation\n> Found 2 contract source files\n  - contracts/Donation.vy\n  - contracts/Greeter.vy\n> Compiled 2 contracts\n  - contracts/Donation.vy:Donation\n  - contracts/Greeter.vy:Greeter\nBeginning contract deployment. Deploying 1 total contracts (1 Specified, 0 because of library dependencies).\n\nDonation\nDeploying Donation\nDeploy Transaction Sent: b'v\\xc4`\\x06h\\x17\\xf6\\x10\\xd7\\xb2\\x7f\\xc6\\x94\\xeb\\x91n\\xae?]-\\xf43\\xb8F\\xdc=}\\xb33\\x03|\\xd4'\nWaiting for confirmation...\n\nTransaction Mined\n=================\nTx Hash : b'v\\xc4`\\x06h\\x17\\xf6\\x10\\xd7\\xb2\\x7f\\xc6\\x94\\xeb\\x91n\\xae?]-\\xf43\\xb8F\\xdc=}\\xb33\\x03|\\xd4'\nAddress : 0xab3B30CFeC1D50DCb0a13671D09d55e63b7cFf40\nGas Provided : 467715\nGas Used : 367715\n\nVerified contract bytecode @ 0xab3B30CFeC1D50DCb0a13671D09d55e63b7cFf40\nDeployment Successful.\n```", "```py\n>>> from web3 import Web3, IPCProvider\n>>> w3 = Web3(IPCProvider(ipc_path=\"/tmp/geth.ipc\"))\n>>> w3.eth.coinbase\n'0xcB22827aB291b3094076DE25D583C49b902a5606'\n>>> w3.eth.getBalance(w3.eth.coinbase)\n1000000011875000000000000000000\n>>> address = \"0xab3B30CFeC1D50DCb0a13671D09d55e63b7cFf40\"\n>>> false = False\n>>> true = True\n>>> abi = [\n...\n...\n>>> donation = w3.eth.contract(address=address, abi=abi)\n>>> donation.functions.donatee().call()\n'0xcB22827aB291b3094076DE25D583C49b902a5606'\n```", "```py\n     \"ganache\": {\n       \"chain\": {\n         \"class\": \"populus.chain.ExternalChain\"\n       },\n       \"web3\": {\n         \"provider\": {\n           \"class\": \"web3.providers.HTTPProvider\",\n           \"settings\": {\n             \"endpoint_uri\": \"http://localhost:7545\"\n           }\n         }\n       },\n       \"contracts\": {\n         \"backends\": {\n           \"JSONFile\": {\"$ref\": \"contracts.backends.JSONFile\"},\n           \"ProjectContracts\": {\n             \"$ref\": \"contracts.backends.ProjectContracts\"\n           }\n         }\n       }\n     }\n```", "```py\n(populus_venv) $ populus deploy --chain ganache Donation\n> Found 2 contract source files\n  - contracts/Donation.vy\n  - contracts/Greeter.vy\n> Compiled 2 contracts\n  - contracts/Donation.vy:Donation\n  - contracts/Greeter.vy:Greeter\nBeginning contract deployment. Deploying 1 total contracts (1 Specified, 0 because of library dependencies).\n\nDonation\nDeploying Donation\nDeploy Transaction Sent: b'\\xd4\\xeb,{\\xa0d\\n\\xb2\\xb0\\xb2\\x1b\\x18\\xdd \\xa1A\\x89\\xea`\\xa8b?A\\x14L\\x99\\xd1rR4\\xc7\\xfa'\nWaiting for confirmation...\n\nTransaction Mined\n=================\nTx Hash : b'\\xd4\\xeb,{\\xa0d\\n\\xb2\\xb0\\xb2\\x1b\\x18\\xdd \\xa1A\\x89\\xea`\\xa8b?A\\x14L\\x99\\xd1rR4\\xc7\\xfa'\nAddress : 0x9Dc44aa8d05c86388E647F954D00CaA858837804\nGas Provided : 467715\nGas Used : 367715\n\nVerified contract bytecode @ 0x9Dc44aa8d05c86388E647F954D00CaA858837804\nDeployment Successful.\n```", "```py\n >>> from web3 import Web3, HTTPProvider\n >>> w3 = Web3(HTTPProvider('http://localhost:7545'))\n```", "```py\nfrom web3 import Web3, HTTPProvider\nw3 = Web3(HTTPProvider(\"http://localhost:7545\"))\n\nprint(w3.eth.coinbase)\nprint(w3.eth.getBalance(w3.eth.coinbase))\n\n# Change this address to your smart contract address\naddress = \"0x9Dc44aa8d05c86388E647F954D00CaA858837804\"\nfalse = False\ntrue = True\nabi = [\n...\n...\ndonation = w3.eth.contract(address=address, abi=abi)\nprint(donation.functions.donatee().call())\n```"]