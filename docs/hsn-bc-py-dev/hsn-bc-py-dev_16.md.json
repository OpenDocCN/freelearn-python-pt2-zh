["```py\n$ tar xvfz go-ipfs_v0.4.18_linux-amd64.tar.gz\n```", "```py\n$ cd go-ipfs\n$ sudo ./install.sh\n```", "```py\n$ export IPFS_PATH=/path/to/ipfsrepo\n```", "```py\n$ ipfs init\n```", "```py\n$ ipfs init --profile server\n```", "```py\n$ ipfs daemon\n```", "```py\n$ virtualenv -p python3.6 ipfs-venv\n$ source ipfs-venv/bin/activate\n(ipfs-venv) $ pip install ipfsapi\n```", "```py\n$ ipfs cat /ipfs/QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ/cat.jpg >cat.jpg\n$ eog cat.jpg \n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\ncute_cat_picture = 'QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ/cat.jpg'\nc.get(cute_cat_picture)\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\ndirectory = 'QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ'\nc.get(directory)\n```", "```py\nimport ipfsapi\n```", "```py\nc = ipfsapi.connect()\n```", "```py\nc = ipfsapi.connect(host=\"ipfshost.net\", port=5001)\n```", "```py\nc.get(cute_cat_picture)\n```", "```py\n$ ipfs get QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ/cat.jpg\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nresult = c.cat('QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ/cat.jpg')\nwith open('cat.jpg', 'wb') as f:\n    f.write(result)\n```", "```py\nI am a good unicorn.\n```", "```py\n$ cat hello.txt\nI am a good unicorn.\n$\n```", "```py\n$ cat hello.txt\nI am a good unicorn.$\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nresult = c.add('hello.txt')\nprint(result)\n```", "```py\n(ipfs-venv) $ python add_file.py\n{'Name': 'hello.txt', 'Hash': 'QmY7MiYeySnsed1Z3KxqDVYuM8pfiT5gGTqprNaNhUpZgR', 'Size': '29'}\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nresult = c.cat('QmY7MiYeySnsed1Z3KxqDVYuM8pfiT5gGTqprNaNhUpZgR')\nprint(result)\n```", "```py\n(ipfs-venv) $ python get_unicorn.py\nb'I am a good unicorn.\\n'\n```", "```py\nimport hashlib\nthe_hash = hashlib.sha256(b'I am a good unicorn.\\n').hexdigest()\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nresult = c.block_get('QmY7MiYeySnsed1Z3KxqDVYuM8pfiT5gGTqprNaNhUpZgR')\nprint(result)\n```", "```py\n(ipfs-venv) $ python get_unicorn_block.py\nb'\\n\\x1b\\x08\\x02\\x12\\x15I am a good unicorn.\\n\\x18\\x15'\n```", "```py\n$ sudo apt-get install protobuf-compiler\n```", "```py\n$ protoc --version\nlibprotoc 2.6.1\n```", "```py\n(ipfs-venv) $ pip install protobuf\n```", "```py\nsyntax = \"proto2\";\n\npackage crypto;\n\nmessage CryptoCurrency {\n required string name = 1;\n optional int32 total_supply = 2;\n\n enum CryptoType {\n BITCOIN = 0;\n ERC20 = 1;\n PRIVATE = 2;\n } required CryptoType type = 3 [default = ERC20];\n}\n```", "```py\n$ protoc crypto.proto --python_out=.\n```", "```py\nimport crypto_pb2\n\ncryptocurrency = crypto_pb2.CryptoCurrency()\ncryptocurrency.name = 'Bitcoin Cash'\ncryptocurrency.total_supply = 21000000\ncryptocurrency.type = crypto_pb2.CryptoCurrency.BITCOIN\n\nserialized_data = cryptocurrency.SerializeToString()\nprint(serialized_data)\n\ncryptocurrency2 = crypto_pb2.CryptoCurrency()\ncryptocurrency2.ParseFromString(serialized_data)\nprint(cryptocurrency2)\n```", "```py\n(ipfs-venv) $ python serialize_crypto_data.py\nb'\\n\\x0cBitcoin Cash\\x10\\xc0\\xde\\x81\\n\\x18\\x00'\nname: \"Bitcoin Cash\"\ntotal_supply: 21000000\ntype: BITCOIN\n```", "```py\n(ipfs-venv) $ python get_unicorn_block.py\nb'\\n\\x1b\\x08\\x02\\x12\\x15I am a good unicorn.\\n\\x18\\x15'\n```", "```py\nsyntax = \"proto2\";\n\npackage unixfs.pb;\n\nmessage Data {\n    enum DataType {\n        Raw = 0;\n        Directory = 1;\n        File = 2;\n        Metadata = 3;\n        Symlink = 4;\n        HAMTShard = 5;\n    }\n\n    required DataType Type = 1;\n    optional bytes Data = 2;\n    optional uint64 filesize = 3;\n    repeated uint64 blocksizes = 4;\n\n    optional uint64 hashType = 5;\n    optional uint64 fanout = 6;\n}\n\nmessage Metadata {\n    optional string MimeType = 1;\n}\n```", "```py\npackage merkledag.pb;\n\nimport \"code.google.com/p/gogoprotobuf/gogoproto/gogo.proto\";\n\noption (gogoproto.gostring_all) = true;\noption (gogoproto.equal_all) = true;\noption (gogoproto.verbose_equal_all) = true;\noption (gogoproto.goproto_stringer_all) = false;\noption (gogoproto.stringer_all) =  true;\noption (gogoproto.populate_all) = true;\noption (gogoproto.testgen_all) = true;\noption (gogoproto.benchgen_all) = true;\noption (gogoproto.marshaler_all) = true;\noption (gogoproto.sizer_all) = true;\noption (gogoproto.unmarshaler_all) = true;\n\n...\n...\n\n// An IPFS MerkleDAG Node\nmessage PBNode {\n\n  // refs to other objects\n  repeated PBLink Links = 2;\n\n  // opaque user data\n  optional bytes Data = 1;\n}\n```", "```py\nimport \"code.google.com/p/gogoprotobuf/gogoproto/gogo.proto\";\n\noption (gogoproto.gostring_all) = true;\noption (gogoproto.equal_all) = true;\noption (gogoproto.verbose_equal_all) = true;\noption (gogoproto.goproto_stringer_all) = false;\noption (gogoproto.stringer_all) =  true;\noption (gogoproto.populate_all) = true;\noption (gogoproto.testgen_all) = true;\noption (gogoproto.benchgen_all) = true;\noption (gogoproto.marshaler_all) = true;\noption (gogoproto.sizer_all) = true;\noption (gogoproto.unmarshaler_all) = true\n```", "```py\n$ protoc unixfs.proto merkledag.proto --python_out=.\n```", "```py\nimport unixfs_pb2\nimport merkledag_pb2\n\nouter_node = merkledag_pb2.PBNode()\nouter_node.ParseFromString(b'\\n\\x1b\\x08\\x02\\x12\\x15I am a good unicorn.\\n\\x18\\x15')\nprint(outer_node)\n\nunicorn = unixfs_pb2.Data()\nunicorn.ParseFromString(outer_node.Data)\nprint(unicorn)\n```", "```py\n(ipfs-venv) $ python unserialize_unicorn.py\nData: \"\\010\\002\\022\\025I am a good unicorn.\\n\\030\\025\"\n\nType: File\nData: \"I am a good unicorn.\\n\"\nfilesize: 21\n```", "```py\n>>> from hashlib import sha256\n>>> sha256(b'i love you').hexdigest()\n'1c5863cd55b5a4413fd59f054af57ba3c75c0698b3851d70f99b8de2d5c7338f\n```", "```py\n>>> len('1c5863cd55b5a4413fd59f054af57ba3c75c0698b3851d70f99b8de2d5c7338f')\n64\n```", "```py\nHash function + the length of hash output from hash function + hash output from hash function\n12 + 20 + 1c5863cd55b5a4413fd59f054af57ba3c75c0698b3851d70f99b8de2d5c7338f\n```", "```py\n12201c5863cd55b5a4413fd59f054af57ba3c75c0698b3851d70f99b8de2d5c7338f\n```", "```py\n>>> from hashlib import sha1\n>>> sha1(b'i love you').hexdigest()\n'bb7b1901d99e8b26bb91d2debdb7d7f24b3158cf'\n>>> len('bb7b1901d99e8b26bb91d2debdb7d7f24b3158cf')\n40\n```", "```py\n11 + 14 + bb7b1901d99e8b26bb91d2debdb7d7f24b3158cf\n1114bb7b1901d99e8b26bb91d2debdb7d7f24b3158cf\n```", "```py\n(ipfs-venv) $ pip install pymultihash\n(ipfs-venv) $ python\n>>> import multihash\n>>> the_universal_hash = multihash.digest(b'i love you', 'sha1')\n>>> the_universal_hash.verify(b'i love you')\nTrue\n```", "```py\n>>> the_universal_hash = multihash.digest(b'i love you', 'sha2_256')\n>>> the_universal_hash.verify(b'i love you')\nTrue\n```", "```py\n>>> import base64\n>>> base64.b64encode(b'i love you')\nb'aSBsb3ZlIHlvdQ=='\n```", "```py\n>>> c = None\n>>> with open('cat.jpg', 'rb') as f:\n...     c = f.read()\n... \n>>> import base64\n>>> base64.b64encode(c)\nb'/9j/4AAQSkZJRgABAQIAJQAlAAD/2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/2wBDAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQH/wAARCAMgBQADASIAAhEBAxEB/8QAHwAAAAYDAQEBAAAAAAAAAAAAAAQFBgcIAgMJCgEL/8QAbhAAAAQCBgQJCAYHBQQGBQIXAgMEBQEGAAcREhMhFCMxQQgiJDNRYXGB8BUyNEORobHBQkRT0eHxCRYlUlRjczViZHSDF3KEkyZFgpSjszZVZZKkw9MKGHWitMRWhdTj5Eay8xkndoaVlsLS4v/EABwBAAEFAQEBAAAAAAAAAAAAAAACAwQFBgcBCP/EAEwRAAAEBAIIBAUDAgQFAgUCBwECAxEABCExQVEFEhNhcYGR8KGxwdEGFCIj4TIz8SRDBxVCUzREUmJjFnNUco\u2026\u2026\u2026\u2026\u2026...s0fQyVCRRbpSWOyyylf5pKJGnOLTlixICLAcYL6fZ25/hSCW3hIrDGFOwjWKFEvluXlXQ8MosvyoeVg4umYFuP8AV4psrOiyiO8V8M5xBw1BwcG8WAJeNhmW5/du25QypGNKzQKJcAEXxthvCtWiuBRPVVA9twcApcfLHKP/2Q=='\n```", "```py\n>>> import base58\n>>> base58.b58encode(b'i love you')\nb'6uZUjTpoUEryQ8'\n```", "```py\nimport unixfs_pb2\nimport merkledag_pb2\n\nprecious_data = b'I am a good unicorn.\\n'\n\nunicorn = unixfs_pb2.Data()\nunicorn.Type = unixfs_pb2.Data.File\nunicorn.Data = precious_data\nunicorn.filesize = len(precious_data)\n\nserialized_unicorn_node = unicorn.SerializeToString()\n\nouter_node = merkledag_pb2.PBNode()\nouter_node.Data = serialized_unicorn_node\nprint(outer_node.SerializeToString())\n```", "```py\n(ipfs-venv) $ python serialize_unicorn.py\nb'\\n\\x1b\\x08\\x02\\x12\\x15I am a good unicorn.\\n\\x18\\x15'\n```", "```py\n>>> import hashlib\n>>> hashlib.sha256(b'\\n\\x1b\\x08\\x02\\x12\\x15I am a good unicorn.\\n\\x18\\x15').hexdigest()\n'912d1af8f0013cd12a514859d20e9a196eb2845981408a84cf3543bb359a4536'\n```", "```py\n>>> len('912d1af8f0013cd12a514859d20e9a196eb2845981408a84cf3543bb359a4536') // 2\n32\n>>> hex(32)\n'0x20'\n```", "```py\n12 + 20 + 912d1af8f0013cd12a514859d20e9a196eb2845981408a84cf3543bb359a4536\n1220912d1af8f0013cd12a514859d20e9a196eb2845981408a84cf3543bb359a4536\n```", "```py\n>>> import codecs\n>>> codecs.decode('1220912d1af8f0013cd12a514859d20e9a196eb2845981408a84cf3543bb359a4536', 'hex')\nb'\\x12 \\x91-\\x1a\\xf8\\xf0\\x01<\\xd1*QHY\\xd2\\x0e\\x9a\\x19n\\xb2\\x84Y\\x81@\\x8a\\x84\\xcf5C\\xbb5\\x9aE6'\n```", "```py\n>>> base58.b58encode(b'\\x12 \\x91-\\x1a\\xf8\\xf0\\x01<\\xd1*QHY\\xd2\\x0e\\x9a\\x19n\\xb2\\x84Y\\x81@\\x8a\\x84\\xcf5C\\xbb5\\x9aE6')\nb'QmY7MiYeySnsed1Z3KxqDVYuM8pfiT5gGTqprNaNhUpZgR'\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nresult = c.add('dose-juice-1184429-unsplash.jpg')\nprint(result)\n```", "```py\n(ipfs-venv) $ python add_image_file.py\n{'Name': 'milada-vigerova-1284157-unsplash.jpg', 'Hash': 'QmV5KPoHHqbq2NsALniERnaYjCJPi3UxLnpwdTkV1EbNZM', 'Size': '2604826'}\n```", "```py\nimport ipfsapi\nimport pprint\n\nc = ipfsapi.connect()\nblocks = c.ls('QmV5KPoHHqbq2NsALniERnaYjCJPi3UxLnpwdTkV1EbNZM')\npp = pprint.PrettyPrinter(indent=2)\npp.pprint(blocks)\n```", "```py\n(ipfs-venv) $ python list_blocks.py\n{ 'Objects': [ { 'Hash': 'QmV5KPoHHqbq2NsALniERnaYjCJPi3UxLnpwdTkV1EbNZM',\n 'Links': [ { 'Hash': 'Qmahxa3MABVtHWh7b2cbQb9hEfiuvwKeYceaqrW8pZjemV',\n 'Name': '',\n 'Size': 262158,\n 'Type': 2},\n { 'Hash': ...\n... 'QmbSa1vj3c1edyKFdTCaT88pYGTLS9n2mpRuL2B2NLUygv',\n 'Name': '',\n 'Size': 244915,\n 'Type': 2}]}]}\n```", "```py\n{'Name': 'milada-vigerova-1284157-unsplash.jpg', 'Hash': 'QmV5KPoHHqbq2NsALniERnaYjCJPi3UxLnpwdTkV1EbNZM', 'Size': '2604826'}\n```", "```py\n$ ipfs block get QmV5KPoHHqbq2NsALniERnaYjCJPi3UxLnpwdTkV1EbNZM > block.raw\n```", "```py\n$ protoc --decode_raw < block.raw\n```", "```py\n2 {\n  1 {\n    2: \"\\267\\301\\242\\262\\250qw\\216+\\237\\301\\273\\'\\360%\\\"\\2022\\201#R\\364h\\262$\\357\\227\\2355\\244>x\"\n  }\n  2: \"\"\n  3: 262158\n}\n...\n...\n1 {\n  1: 2\n  3: 2604197\n  4: 262144\n  4: 262144\n...\n...\n  4: 262144\n  4: 244901\n}\n\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\n\nimages_bytes = []\n\nblocks = c.ls('QmV5KPoHHqbq2NsALniERnaYjCJPi3UxLnpwdTkV1EbNZM')\nfor block in blocks['Objects'][0]['Links']:\n    bytes = c.cat(block['Hash'])\n    images_bytes.append(bytes)\n\nimages = b''.join(images_bytes)\nwith open('image_from_blocks.jpg', 'wb') as f:\n    f.write(images)\n```", "```py\n<html>\n  <head>\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS\" crossorigin=\"anonymous\">\n  </head>\n  <body>\n    <img src=\"img/cat.jpg\" class=\"rounded-circle\" />\n  </body>\n</html>\n```", "```py\nThis is Readme file.\n```", "```py\nimport ipfsapi\nimport pprint\n\nc = ipfsapi.connect()\nresult = c.add('mysite', True)\n\npp = pprint.PrettyPrinter(indent=2)\npp.pprint(result)\n```", "```py\n(ipfs-venv) $ python add_directory.py\n[ { 'Hash': 'QmWhZDjrm1ncLLRZ421towkyYescK3SUZdWEM5GxApfxJe',\n 'Name': 'mysite/README.md',\n 'Size': '29'},\n { 'Hash': 'QmUni2ApnGhZ89JEbmPZQ1QU9wcinnCoujjrYAy9TCQQjj',\n 'Name': 'mysite/index.html',\n 'Size': '333'},\n { 'Hash': 'Qmd286K6pohQcTKYqnS1YhWrCiS4gz7Xi34sdwMe9USZ7u',\n 'Name': 'mysite/img/cat.jpg',\n 'Size': '443362'},\n { 'Hash': 'QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ',\n 'Name': 'mysite/img',\n 'Size': '443417'},\n { 'Hash': 'QmZamPcNnfZjjTkoyrYjYMEA8pp29KmpmkuSvkicSGiZDp',\n 'Name': 'mysite',\n 'Size': '443934'}]\n```", "```py\nYou will meet the love of your life today!\n```", "```py\nYou need to be careful when going outside!\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nresult = c.add('horoscope1.txt')\nprint(result)\nresult = c.add('horoscope2.txt')\nprint(result)\n```", "```py\n(ipfs-venv) $ python add_horoscope_predictions.py\n{'Name': 'horoscope1.txt', 'Hash': 'QmTG4eE6ruUDhSKxqwofJXXqDFAmNzQiGdo4Z7WvVdLZuS', 'Size': '51'}\n{'Name': 'horoscope2.txt', 'Hash': 'Qme1FUeEhA1myqQ8C1sCSXo4dDJzZApGD6StE26S72ZqyU', 'Size': '51'}\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nprint(c.key_list())\n```", "```py\n(ipfs-venv) $ python keys_list.py\n{'Keys': [{'Name': 'self', 'Id': 'QmVPUMd7mFG54zKDNNzPRgENsr5VTbBxWJThfVd6j9V4U8'}]}\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\npeer_id = c.key_list()['Keys'][0]['Id']\nc.name_publish('QmY7MiYeySnsed1Z3KxqDVYuM8pfiT5gGTqprNaNhUpZgR')\nresult = ipfs.cat('/ipns/' + peer_id)\nprint(result)\n```", "```py\n(ipfs-venv) $ python publish_horoscope1.py\nb'You will meet the love of your life today!\\n'\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\npeer_id = c.key_list()['Keys'][0]['Id']\nc.name_publish('Qme1FUeEhA1myqQ8C1sCSXo4dDJzZApGD6StE26S72ZqyU')\nresult = ipfs.cat('/ipns/' + peer_id)\nprint(result)\n```", "```py\n(ipfs-venv) $ python publish_horoscope2.py\nb'You need to be careful when going outside!\\n'\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nprint(c.key_list())\nc.key_gen('another_key', 'rsa')\nprint(c.key_list())\n```", "```py\n(ipfs-venv) $ python generate_another_key.py\n```", "```py\n{'Keys': [{'Name': 'self', 'Id': 'QmVPUMd7mFG54zKDNNzPRgENsr5VTbBxWJThfVd6j9V4U8'}]}\n```", "```py\n{'Keys': [{'Name': 'self', 'Id': 'QmVPUMd7mFG54zKDNNzPRgENsr5VTbBxWJThfVd6j9V4U8'}, {'Name': 'another_key', 'Id': 'QmcU8u2Koy4fdrSjnSEjrMRYZVPLKP5YXQhLVePfUmjmkv'}]}\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\npeer_id = c.key_list()['Keys'][1]['Id']\nc.name_publish('QmTG4eE6ruUDhSKxqwofJXXqDFAmNzQiGdo4Z7WvVdLZuS', key='another_key')\nresult = c.cat('/ipns/' + peer_id)\nprint(result)\n```", "```py\nc.name_publish('QmTG4eE6ruUDhSKxqwofJXXqDFAmNzQiGdo4Z7WvVdLZuS', key='another_key', lifetime='5h')\n```", "```py\n$ ipfs add nude_picture.jpg\nadded QmWgMcTdPY9Rv7SCBusK1gWBRJcBi2MxNkC1yC6uvLYPwK nude_picture.jpg\n2.64 MiB / 2.64 MiB [==================================================] 100.00%\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nc.pin_rm('QmWgMcTdPY9Rv7SCBusK1gWBRJcBi2MxNkC1yC6uvLYPwK')\nc.repo_gc()\n```", "```py\n(ipfs-venv) $ ipfs get QmWgMcTdPY9Rv7SCBusK1gWBRJcBi2MxNkC1yC6uvLYPwK\n\n```", "```py\n$ ipfs daemon --enable-pubsub-experiment\n```", "```py\nimport ipfsapi\nfrom base64 import b64decode\n\nc = ipfsapi.connect()\nwith c.pubsub_sub('bitcoin') as sub:\n    for message in sub:\n        string = b64decode(message['data'])\n        print(string)\n        break\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nc.pubsub_pub('bitcoin', 'To the moon!')\n```", "```py\n(ipfs-venv) $ python subscribe_topic.py\nb'To the moon!'\n```", "```py\nimport ipfsapi\nimport io\n\nc = ipfsapi.connect()\n\nprint(\"By default our MFS is empty.\")\nprint(c.files_ls('/')) # root is / just like Unix filesystem\n\nprint(\"We can create a directory in our MFS.\")\nc.files_mkdir('/classical_movies')\n\nprint(\"We can create a file in our MFS.\")\nc.files_write('/classical_movies/titanic',\n              io.BytesIO(b\"The ship crashed. The end.\"),\n              create=True)\n\nprint(\"We can copy a file in our MFS.\")\nc.files_cp('/classical_movies/titanic',\n           '/classical_movies/copy_of_titanic')\n\nprint(\"We can read the file.\")\nprint(c.files_read('/classical_movies/titanic'))\n\nprint(\"We can remove the file.\")\nprint(c.files_rm('/classical_movies/copy_of_titanic'))\n\nprint(\"Now our MFS is not empty anymore.\")\nprint(c.files_ls('/'))\nprint(c.files_ls('/classical_movies'))\n\nprint(\"You can get the hash of a path in MFS.\")\nprint(c.files_stat('/classical_movies'))\n\nprint(\"Then you can publish this hash into IPNS.\")\n```", "```py\n(ipfs-venv) $ python exploring_mfs.py\nBy default our MFS is empty.\n{'Entries': None}\nWe can create a directory in our MFS.\nWe can create a file in our MFS.\nWe can copy a file in our MFS.\nWe can read the file.\nb'The ship crashed. The end.'\nWe can remove the file.\n[]\nNow our MFS is not empty anymore.\n{'Entries': [{'Name': 'classical_movies', 'Type': 0, 'Size': 0, 'Hash': ''}]}\n{'Entries': [{'Name': 'titanic', 'Type': 0, 'Size': 0, 'Hash': ''}]}\nYou can get the hash of a path in MFS.\n{'Hash': 'QmNUrujevkYqRtYmpaj2Af1DvgR8rt9a7ApyiyXHnF5wym', 'Size': 0, 'CumulativeSize': 137, 'Blocks': 1, 'Type': 'directory'}\nThen you can publish this hash into IPNS\n```", "```py\nimport ipfsapi\n\nc = ipfsapi.connect()\nc.files_cp('/ipfs/QmY8zTocoVNDJWUr33nhksBiZ3hxugFPhb6qSzpE761bVN', '/46MB_cute_bear.mp4')\n\nprint(c.files_ls('/'))\n```", "```py\n(ipfs-venv) $ python copy_in_mfs.py \n{'Entries': [{'Name': '46MB_cute_bear.mp4', 'Type': 0, 'Size': 0, 'Hash': ''}, {'Name': 'classical_movies', 'Type': 0, 'Size': 0, 'Hash': ''}]}\n```"]