["```py\n$ virtualenv -p python3.6 web3-venv\n```", "```py\n$ source web3-venv/bin/activate\n(web3-venv) $ pip install vyper\n```", "```py\n(vyper-venv) $ pip install web3\n```", "```py\n(vyper-venv) $ python\n>>> import web3\n>>> web3.__version__\n'4.8.2'\n```", "```py\n>>> from web3 import Web3, HTTPProvider\n>>> w3 = Web3(HTTPProvider('http://localhost:7545'))\n>>> w3.eth.blockNumber\n0\n>>> w3.eth.getBlock('latest')\nAttributeDict({'number': 0, 'hash': HexBytes('0x0bbde277e2147d93f12852a370e70e2efe9c66f45db6e80e0cba584508d3ebac'), 'parentHash': HexBytes('0x0000000000000000000000000000000000000000000000000000000000000000'), 'mixHash': \n...\n...\nHexBytes('0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'), 'stateRoot': HexBytes('0x31740a2d8b535c624aa481ba7d6d696085438037246b7501b4f24f77f94f3994'), 'receiptsRoot': HexBytes('0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'), 'miner': '0x0000000000000000000000000000000000000000', 'difficulty': 0, 'totalDifficulty': 0, 'extraData': HexBytes('0x'), 'size': 1000, 'gasLimit': 6721975, 'gasUsed': 0, 'timestamp': 1548300279, 'transactions': [], 'uncles': []})\n```", "```py\n$ ./geth --rinkeby\n```", "```py\n$ ./geth --rinkeby --datadir /opt/data/ethereumdata\n```", "```py\n(web3-venv) $ python\n>>> from web3 import Web3, IPCProvider\n>>> w3 = Web3(IPCProvider(\"/home/yourusername/.ethereum/rinkeby/geth.ipc\"))\n```", "```py\n>>> from web3.middleware import geth_poa_middleware\n>>> w3.middleware_stack.inject(geth_poa_middleware, layer=0)\n```", "```py\n>>> w3.eth.getBlock('latest')\nAttributeDict({'difficulty': 2, 'proofOfAuthorityData': HexBytes('0xd883010813846765746888676f312e31312e32856c696e7578000000000000001c62ac5af9b2ea6bf897a99fff40af6474cd5680fc8239853f03db116b2154594d2ab77a6f18c41132ee819143d2d41819237468924d29cb4b1252d2385a862400'), 'gasLimit': 7000000, 'gasUsed': 1373640, 'hash': HexBytes('0xa14b569f874eefc75fe734bc28b7457755eff1da26794d6615f15e1739204067'), 'logsBloom': \n...\n...\nHexBytes('0x66e75c91271b45f5271d2fe2fd0efc66f48f641632e83a086fc57646a0c0bc3f'), 'uncles': []})\n```", "```py\n$ ./geth --rinkeby --verbosity 0 console\n```", "```py\nWelcome to the Geth JavaScript console!\ninstance: Geth/v1.8.16-stable-477eb093/darwin-amd64/go1.11\nmodules: admin:1.0 clique:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0\n>\n```", "```py\n> personal.newAccount(\"password123\")\n\"0x28f5b56b035da966afa609f65fd8f7d71ff68327\"\n```", "```py\n{\"address\":\"28f5b56b035da966afa609f65fd8f7d71ff68327\",\"crypto\":{\"cipher\":\"aes-128-ctr\",\"ciphertext\":\"38b091f59f879369a6afdd91f21c1a82deb59374677144c94dd529d3c9069d39\",\"cipherparams\":{\"iv\":\"b168482d467df6e1fe4bdb5201a64a6a\"},\"kdf\":\"scrypt\",\"kdfparams\":{\"dklen\":32,\"n\":262144,\"p\":1,\"r\":8,\"salt\":\"bd94440d3f2bb9313a0020331bac9410ff3cdc9f32756f41f72dde1ef7bf32e1\"},\"mac\":\"3313b72603e85e73f84a47ef7ed0e931db85441e1702e0d96f2f001c54170cb6\"},\"id\":\"7a033367-92fe-42d3-bec5-970076f35d8a\",\"version\":3}\n```", "```py\nfrom web3 import Web3\nw3 = Web3()\n\n# Change the filepath to your keystore's filepath\nwith open('/opt/data/ethereumdata/keystore/UTC--2018-10-12T09-30-20.687898000Z--28f5b56b035da966afa609f65fd8f7d71ff68327') as keyfile:\n    encrypted_key = keyfile.read()\n    private_key = w3.eth.account.decrypt(encrypted_key, 'password123')\n    print(private_key)\n```", "```py\n(web3-venv) $ python extract_private_key.py\nb'\\xa0\\xe2\\xa2\\xf0$j\\xe9L\\xb3\\xc0\\x14Q\\xb0D\\xec\\xa16\\xa1\\xca\\xdd\\x07.\\x0f\\x0f=5\\xbd\\xc5mb(r'\n```", "```py\n(web3-venv) $ python\n>>>  b'\\xa0\\xe2\\xa2\\xf0$j\\xe9L\\xb3\\xc0\\x14Q\\xb0D\\xec\\xa16\\xa1\\xca\\xdd\\x07.\\x0f\\x0f=5\\xbd\\xc5mb(r'.hex()\n'a0e2a2f0246ae94cb3c01451b044eca136a1cadd072e0f0f3d35bdc56d622872'\n```", "```py\nfrom web3 import Web3, HTTPProvider\n\nw3 = Web3(HTTPProvider('http://localhost:7545'))\n\nprivate_key = '59e31694256f71b8d181f47fc67914798c4b96990e835fc1407bf4673ead30e2'\n\ntransaction = {\n  'to': Web3.toChecksumAddress('0x9049386D4d5808e0Cd9e294F2aA3d70F01Fbf0C5'),\n  'value': w3.toWei('1', 'ether'),\n  'gas': 100000,\n  'gasPrice': w3.toWei('1', 'gwei'),\n  'nonce': 0\n}\n\nsigned = w3.eth.account.signTransaction(transaction, private_key)\ntx = w3.eth.sendRawTransaction(signed.rawTransaction)\n```", "```py\nfrom web3 import Web3, HTTPProvider\n\nw3 = Web3(HTTPProvider('http://localhost:7545'))\n\ntransaction = {\n  'to': Web3.toChecksumAddress('0x9049386D4d5808e0Cd9e294F2aA3d70F01Fbf0C5'),\n  'value': w3.toWei('1', 'ether'),\n  'gas': 100000,\n  'gasPrice': w3.toWei('1', 'gwei'),\n  'nonce': 0\n}\n\nprint(\"Estimating gas usage: \" + str(w3.eth.estimateGas(transaction)))\nprint(\"Gas price: \" + str(w3.eth.gasPrice))\n```", "```py\nEstimating gas usage: 21000\nGas price: 2000000000\n```", "```py\nfrom web3 import Web3, HTTPProvider\nw3 = Web3(HTTPProvider('http://localhost:7545'))\ntransaction_count = w3.eth.getTransactionCount(\"0xcc6d61988CdcF6eB510BffAeD4FC0d904f8d3e7D\")\nprint(transaction_count)\n```", "```py\n$ ./geth --rinkeby\n```", "```py\n$ ./geth --rinkeby --verbosity 0 console\n```", "```py\n> web3.eth.getBalance('0x28f5b56b035da966afa609f65fd8f7d71ff68327')\n3000000000000000000\n```", "```py\nfrom web3 import Web3, IPCProvider\nfrom web3.middleware import geth_poa_middleware\n\n# Change the path of geth.ipc according to your situation.\nw3 = Web3(IPCProvider('/opt/data/ethereumdata/geth.ipc'))\n\nw3.middleware_stack.inject(geth_poa_middleware, layer=0)\n\n...\n...\n\nnonce = w3.eth.getTransactionCount(Web3.toChecksumAddress(from_account))\n\ntransaction = {\n  'to': Web3.toChecksumAddress(to_account),\n  'value': w3.toWei('1', 'ether'),\n  'gas': 21000,\n  'gasPrice': w3.toWei('2', 'gwei'),\n  'nonce': nonce\n}\n\nsigned = w3.eth.account.signTransaction(transaction, private_key)\nw3.eth.sendRawTransaction(signed.rawTransaction)\n```", "```py\n> web3.eth.getBalance('0x99fb2eee85acbf878d4154de73d5fb1b7e88c328')\n100000000000000000\n```", "```py\nsigned = w3.eth.account.signTransaction(transaction, private_key)\nw3.eth.sendRawTransaction(signed.rawTransaction)\n```", "```py\nw3.personal.sendTransaction(transaction, password)\n```", "```py\n$ ./geth --rinkeby --verbosity 0 console\n```", "```py\n> eth.accounts\n[\"0x8b55f0a88a1c53a8976953cde4f141752e847a00\", \"0x1db565576054af728b46ada9814b1452dd2b7e66\", \"0x28f5b56b035da966afa609f65fd8f7d71ff68327\", \"0x5b0d65b07a61c7b760bf372bbec1b3894d4b0225\", \"0x99fb2eee85acbf878d4154de73d5fb1b7e88c328\"]\n```", "```py\n> personal.unlockAccount(eth.accounts[0], \"password123\")\ntrue\n```", "```py\n> bytecode = \"smart contract bytecode\"\n> tx = eth.sendTransaction({from: eth.accounts[0], data: bytecode, gas: 500e3}\n```", "```py\n> web3.eth.getTransactionReceipt(tx)\n```", "```py\n{\n blockHash: \"0xfed7dcbd5e8c68e17bff9f42cd30d95588674497ae719a04fd6a2ff219bb001d\",\n blockNumber: 2534930,\n contractAddress: \"0xbd3ffb07250634ba413e782002e8f880155007c8\",\n cumulativeGasUsed: 1071323,\n from: \"0x1db565576054af728b46ada9814b1452dd2b7e66\",\n gasUsed: 458542,\n logs: [],\n logsBloom: \"0x00000...\",\n status: \"0x1\",\n to: null,\n transactionHash: \"0x1a341c613c2f03a9bba32be3c8652b2d5a1e93f612308978bbff77ce05ab02c7\",\n transactionIndex: 4\n}\n```", "```py\nfrom web3 import Web3, HTTPProvider\nfrom vyper import compile_codes\n\ncontract_source_code = '''\nname: public(bytes[24])\n\n@public\ndef __init__():\n    self.name = \"Satoshi Nakamoto\"\n\n...\n...\n\n# Change the account to your situation.\ntx_hash = HelloSmartContract.constructor().transact({'from': '0xb105F01Ce341Ef9282dc2201BDfdA2c26903da77'})\n\ntx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)\nprint(tx_receipt)\n```", "```py\nAttributeDict({'transactionHash': HexBytes('0xcfce0a28d0f8232735f99bcf871762f9780f19ab916e92c03d32fdabfd6b9e9a'), 'transactionIndex': 0, 'blockHash': HexBytes('0x84139a5c9ad050cf7be0678feb4aefc9e8b2806636245f16c790048e50347dfe'), 'blockNumber': 1, 'from': '0xb105f01ce341ef9282dc2201bdfda2c26903da77', 'to': None, 'gasUsed': 339198, 'cumulativeGasUsed': 339198, 'contractAddress': '0x9Dc44aa8d05c86388E647F954D00CaA858837804', 'logs': [], 'status': 1, 'logsBloom': HexBytes('0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'), 'v': '0x1c', 'r': '0x74c63921055bd2fed65a731356b30220c6de3a28ec5fd26e296bf609d76d25ce', 's': '0x655395f422fa7b419caf87f99e2da09296b123eceb99aed4d19195e542b01bcd'})\n```", "```py\nHelloSmartContract = w3.eth.contract(abi=abi, bytecode=bytecode)\n```", "```py\ntx_hash = HelloSmartContract.constructor().transact({'from': '0xb105F01Ce341Ef9282dc2201BDfdA2c26903da77'})\n```", "```py\nfrom web3 import Web3, IPCProvider\nfrom vyper import compile_codes\n\ncontract_source_code = '''\nname: public(bytes[24])\n\n...\n...\n\nsigned = w3.eth.account.signTransaction(transaction, private_key)\ntx_hash = w3.eth.sendRawTransaction(signed.rawTransaction)\n\ntx_receipt = w3.eth.waitForTransactionReceipt(tx_hash)\nprint(tx_receipt)\n```", "```py\nname: public(bytes[24])\n\n@public\ndef __init__():\n    self.name = \"Satoshi Nakamoto\"\n\n@public\ndef change_name(new_name: bytes[24]):\n    self.name = new_name\n\n@public\ndef say_hello() -> bytes[32]:\n    return concat(\"Hello, \", self.name)\n```", "```py\nfrom web3 import Web3, IPCProvider\nfrom vyper import compile_codes\n\ncontract_source_code = '''\nname: public(bytes[24])\n\n...\n...\n\nsigned_txn_hash = w3.eth.sendRawTransaction(signed_txn.rawTransaction)\n\nw3.eth.waitForTransactionReceipt(signed_txn_hash)\n\nprint(Hello.functions.say_hello().call())\n\n```", "```py\nfrom web3 import Web3, HTTPProvider\nfrom vyper import compile_codes\n\ncontract_source_code = '''\nname: public(bytes[24])\n\n...\n...\n\nsigned_txn_hash = w3.eth.sendRawTransaction(signed_txn.rawTransaction)\n\nw3.eth.waitForTransactionReceipt(signed_txn_hash)\n\nprint(Hello.functions.say_hello().call())\n```", "```py\nfrom web3 import Web3, IPCProvider\nfrom vyper import compile_codes\n\ncontract_source_code = '''\nname: public(bytes[24])\n\n...\n...\n\nsmart_contract = {}\nsmart_contract['hello'] = contract_source_code\n\nformat = ['abi', 'bytecode']\ncompiled_code = compile_codes(smart_contract, format, 'dict')\n\nabi = compiled_code['hello']['abi']\n```", "```py\n# Change the path of geth.ipc according to your situation.\nw3 = Web3(IPCProvider('/opt/data/ethereumdata/geth.ipc'))\n\nfrom web3.middleware import geth_poa_middleware\nw3.middleware_stack.inject(geth_poa_middleware, layer=0)\n\n# Change the address of the smart contract, the account, the password, and the path to the keystore according to your situation,\naddress = \"0x58705EBBc791DB917c7771FdA6175b2D9F59D51A\"\npassword = 'password123'\nw3.eth.defaultAccount = '0x28f5b56b035da966afa609f65fd8f7d71ff68327'\nwith open('/opt/data/ethereumdata/keystore/UTC--2018-10-12T09-30-20.687898000Z--28f5b56b035da966afa609f65fd8f7d71ff68327') as keyfile:\n    encrypted_key = keyfile.read()\n    private_key = w3.eth.account.decrypt(encrypted_key, password)\n\nHello = w3.eth.contract(address=address, abi=abi)\n```", "```py\nw3 = Web3(HTTPProvider('http://localhost:7545'))\n\n# Change the address of the smart contract, the private key, and the account according to your situation\naddress = \"0x9Dc44aa8d05c86388E647F954D00CaA858837804\"\nprivate_key = '0x1a369cedacf0bf2f5fd16b5215527e8c8767cbd761ebefa28d9df0d389c60b6e'\nw3.eth.defaultAccount = '0xb105F01Ce341Ef9282dc2201BDfdA2c26903da77'\n\nHello = w3.eth.contract(address=address, abi=abi)\n```", "```py\nDonation.at(\"0x3e9417399786347b6ab38f59d3f00829d6bba7b8\").change_useless_variable(\"sky is blue\", {from: \"0xb105F01Ce341Ef9282dc2201BDfdA2c26903da77\" });\n```", "```py\nprint(Hello.functions.name().call())\n\nprint(Hello.functions.say_hello().call())\n```", "```py\nnonce = w3.eth.getTransactionCount(w3.eth.defaultAccount)\n\ntxn = Hello.functions.change_name(b\"Vitalik Buterin\").buildTransaction({\n  'gas': 70000,\n  'gasPrice': w3.toWei('1', 'gwei'),\n  'nonce': nonce\n})\n```", "```py\ntxn = Hello.functions.change_name(b\"Lionel Messi\").buildTransaction({\n        'gas': 500000,\n        'gasPrice': w3.toWei('30', 'gwei'),\n        'nonce': nonce\n      })\n```", "```py\nsigned_txn = w3.eth.account.signTransaction(txn, private_key=private_key)\n```", "```py\nHello.functions.change_name(b\"Vitalik Buterin\").transact()\n```", "```py\nsigned_txn_hash = w3.eth.sendRawTransaction(signed_txn.rawTransaction)\n```", "```py\nw3.eth.waitForTransactionReceipt(signed_txn_hash)\n```", "```py\nprint(Hello.functions.say_hello().call())\n```"]