["```py\n$ python3.6 -m venv qt-venv\n$ source qt-venv/bin/activate\n(qt-venv) $ pip install PySide2 \n```", "```py\n(qt-venv) $ pip install eth-abi==1.2.2\n(qt-venv) $ pip install eth-typing==1.1.0\n(qt-venv) $ pip install py-evm==0.2.0a33\n(qt-venv) $ pip install web3==4.7.2\n(qt-venv) $ pip install -e git+https://github.com/ethereum/populus#egg=populus\n(qt-venv) $ pip install vyper\n(qt-venv) $ mkdir twitter_like_project\n(qt-venv) $ cd twitter_like_project\n(qt-venv) $ mkdir tests contracts\n(qt-venv) $ cp ../qt-venv/src/populus/populus/assets/defaults.v9.config.json project.json\n```", "```py\n\"compilation\": {\n    \"backend\": {\n      \"class\": \"populus.compilation.backends.VyperBackend\"\n    },\n    \"contract_source_dirs\": [\n      \"./contracts\"\n    ],\n    \"import_remappings\": []\n},\n```", "```py\n(qt-venv) $ cd qt-venv/src/populus\n(qt-venv) $ grep -R \"compile(\" populus/compilation/backends/vyper.py\n bytecode = '0x' + compiler.compile(code).hex()\n bytecode_runtime = '0x' + compiler.compile(code, bytecode_runtime=True).hex()\n```", "```py\n(qt-venv) $ wget https://patch-diff.githubusercontent.com/raw/ethereum/populus/pull/484.patch\n(qt-venv) $ git apply 484.patch\n(qt-venv) $ cd ../../../ \n```", "```py\nimport sys\nfrom PySide2.QtWidgets import QApplication, QWidget\n\napp = QApplication(sys.argv)\nwindow = QWidget()\nwindow.resize(400, 400)\nwindow.show()\nsys.exit(app.exec_())\n```", "```py\n(qt-venv) $ python hello.py\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import QApplication, QWidget\n```", "```py\napp = QApplication(sys.argv)\n```", "```py\nwindow = QWidget()\nwindow.resize(400, 400)\n```", "```py\nwindow.show()\nsys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import QApplication, QWidget, QHBoxLayout, QPushButton, QLabel\n\napp = QApplication(sys.argv)\n\nhello_button = QPushButton('Hello')\nvery_label = QLabel('Very Very')\nbeautiful_button = QPushButton('Beautiful')\nworld_label = QLabel('World')\n\nlayout = QHBoxLayout()\nlayout.addWidget(hello_button)\nlayout.addWidget(very_label)\nlayout.addWidget(beautiful_button)\nlayout.addWidget(world_label)\n\nwindow = QWidget()\nwindow.setLayout(layout)\nwindow.resize(200, 200)\nwindow.show()\n\nsys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import QApplication, QWidget, QHBoxLayout, QPushButton, Qlabel\n```", "```py\napp = QApplication(sys.argv)\n\nhello_button = QPushButton('Hello')\nvery_label = QLabel('Very Very')\nbeautiful_button = QPushButton('Beautiful')\nworld_label = Qlabel('World')\n```", "```py\nlayout = QHBoxLayout()\nlayout.addWidget(hello_button)\nlayout.addWidget(very_label)\nlayout.addWidget(beautiful_button)\nlayout.addWidget(world_label)\n```", "```py\nwindow = QWidget()\nwindow.setLayout(layout)\nwindow.resize(200, 200)\n```", "```py\nwindow.show()\n\nsys.exit(app.exec_())\n```", "```py\n(qt-venv) $ python hello_horizontal_layout.py\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel\n\napp = QApplication(sys.argv)\n\nhello_button = QPushButton('Hello')\nvery_label = QLabel('Very Very')\nbeautiful_button = QPushButton('Beautiful')\nworld_label = QLabel('World')\n\nlayout = QVBoxLayout()\nlayout.addWidget(hello_button)\nlayout.addWidget(very_label)\nlayout.addWidget(beautiful_button)\nlayout.addWidget(world_label)\n\nwindow = QWidget()\nwindow.setLayout(layout)\nwindow.resize(200, 200)\nwindow.show()\n\nsys.exit(app.exec_())\n```", "```py\n(qt_venv) $ python hello_vertical_layout.py\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel\n\napp = QApplication(sys.argv)\n\nhello_button = QPushButton('Hello')\nvery_label = QLabel('Very Very')\nbeautiful_button = QPushButton('Beautiful')\nworld_label = QLabel('World')\n\n...\n...\n\nwindow = QWidget()\nwindow.setLayout(horizontal_layout)\nwindow.resize(200, 200)\nwindow.show()\n\nsys.exit(app.exec_())\n```", "```py\nvertical_layout = QVBoxLayout()\nvertical_layout.addWidget(vertical_hello_button)\nvertical_layout.addWidget(vertical_very_label)\nvertical_layout.addWidget(vertical_beautiful_button)\nvertical_layout.addWidget(vertical_world_label)\n\nhorizontal_layout = QHBoxLayout()\nhorizontal_layout.addWidget(hello_button)\nhorizontal_layout.addWidget(very_label)\nhorizontal_layout.addLayout(vertical_layout)\n```", "```py\n(qt-venv) $ python hello_vertical_horizontal_layout.py\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import (QApplication,\n                               QWidget,\n                               QVBoxLayout,\n                               QHBoxLayout,\n                               QGroupBox,\n                               QPushButton,\n                               QLabel,\n                               QSpinBox,\n                               QLineEdit,\n                               QRadioButton,\n                               QComboBox)\n\n...\n...\n\nwindow = QWidget()\nwindow.setLayout(layout)\nwindow.show()\n\nsys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import (QApplication,\n                               QWidget,\n                               QVBoxLayout,\n                               QHBoxLayout,\n                               QGroupBox,\n                               QPushButton,\n                               QLabel,\n                               QSpinBox,\n                               QLineEdit,\n                               QRadioButton,\n                               QComboBox)\n```", "```py\nbutton = QPushButton('Button')\nlabel = QLabel('Label')\nspinbox = QSpinBox()\nlineedit = QLineEdit()\nradio_button1 = QRadioButton('Option 1')\nradio_button2 = QRadioButton('Option 2')\nradio_button3 = QRadioButton('Option 3')\ncombo_box = QComboBox()\ncombo_box.addItems([\"Bitcoin\", \"Ethereum\", \"Monero\", \"Ripple\"])\n```", "```py\nvlayout = QVBoxLayout()\nvlayout.addWidget(button)\nvlayout.addWidget(radio_button1)\nvlayout.addWidget(radio_button2)\nvlayout.addWidget(radio_button3)\nvlayout.addWidget(spinbox)\n\nhlayout = QHBoxLayout()\nhlayout.addWidget(lineedit)\nhlayout.addWidget(label)\nhlayout.addWidget(combo_box)\n```", "```py\ntop_groupbox = QGroupBox('Top')\ntop_groupbox.setLayout(vlayout)\nbottom_groupbox = QGroupBox('Bottom')\nbottom_groupbox.setLayout(hlayout)\n```", "```py\nlayout = QVBoxLayout()\nlayout.addWidget(top_groupbox)\nlayout.addWidget(bottom_groupbox)\n\nwindow = QWidget()\nwindow.setLayout(layout)\nwindow.show()\n\nsys.exit(app.exec_())\n```", "```py\n(qt_venv) $ python hello_varieties.py\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel\nfrom PySide2 import QtCore\n\napp = QApplication(sys.argv)\n\nhello_button = QPushButton(\"Hello\")\nworld_label = QLabel(\"Sun\")\n\nlayout = QVBoxLayout()\nlayout.addWidget(hello_button)\nlayout.addWidget(world_label)\n\ndef set_text_in_world_label():\n    world_label.setText(\"World\")\n\nhello_button.connect(QtCore.SIGNAL('clicked()'), set_text_in_world_label)\n\nwindow = QWidget()\nwindow.setLayout(layout)\nwindow.resize(200, 200)\nwindow.show()\n\nsys.exit(app.exec_())\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel\nfrom PySide2 import QtCore\n```", "```py\napp = QApplication(sys.argv)\n\nhello_button = QPushButton(\"Hello\")\nworld_label = QLabel(\"Sun\")\n\nlayout = QVBoxLayout()\nlayout.addWidget(hello_button)\nlayout.addWidget(world_label)\n```", "```py\ndef set_text_in_world_label():\n    world_label.setText(\"World\")\n    hello_button.connect(QtCore.SIGNAL('clicked()'), set_text_in_world_label)\n```", "```py\nwindow = QWidget()\nwindow.setLayout(layout)\nwindow.resize(200, 200)\nwindow.show()\n\nsys.exit(app.exec_())\n```", "```py\n(qt-venv) $ python hello_connect.py\n```", "```py\nimport sys\nfrom PySide2.QtWidgets import QApplication, QWidget, QVBoxLayout, QLineEdit, QLabel\nfrom PySide2 import QtCore\n\napp = QApplication(sys.argv)\n\nhello_line_edit = QLineEdit()\nworld_label = QLabel(\"\")\n\nlayout = QVBoxLayout()\nlayout.addWidget(hello_line_edit)\nlayout.addWidget(world_label)\n\ndef set_world_label(text):\n    world_label.setText(text.upper())\n    hello_line_edit.textChanged.connect(set_world_label)\n\nwindow = QWidget()\nwindow.setLayout(layout)\nwindow.resize(200, 200)\nwindow.show()\n\nsys.exit(app.exec_())\n```", "```py\ndef set_world_label(text):\n    world_label.setText(text.upper())\n    hello_line_edit.textChanged.connect(set_world_label)\n```", "```py\n(qt_venv) $ python hello_connect_param.py\n```", "```py\nimport sys\nfrom PySide2 import QtCore\n\n@QtCore.Slot(str)\ndef slot_func(param):\n    print(param)\n\nclass Simple(QtCore.QObject):\n    signal = QtCore.Signal(str)\n\nsimple = Simple()\nsimple.signal.connect(slot_func)\nsimple.signal.emit(\"Hello World\")\n```", "```py\nimport sys\nfrom PySide2 import QtCore\n```", "```py\n@QtCore.Slot(str)\ndef slot_func(param):\n    print(param)\n```", "```py\nclass Simple(QtCore.QObject):\n    signal = QtCore.Signal(str)\n\nsimple = Simple()\nsimple.signal.connect(slot_func)\n```", "```py\nsimple.signal.emit(\"Hello World\")\n```", "```py\n(qt-venv) $ python hello_custom_signal_slot.py\nHello World\n```", "```py\nfrom PySide2 import QtCore\nimport time\n\nclass SimpleThread(QtCore.QThread):\n    def __init__(self, parent=None):\n        super(SimpleThread, self).__init__(parent)\n\n    def run(self):\n        time.sleep(2) # simulating latency in network\n        print(\"world\")\n\nsimple_thread = SimpleThread()\nsimple_thread.start()\n\nprint(\"hello\")\nsimple_thread.wait()\n```", "```py\n\"ganache\": {\n   \"chain\": {\n     \"class\": \"populus.chain.ExternalChain\"\n   },\n   \"web3\": {\n     \"provider\": {\n       \"class\": \"web3.providers.HTTPProvider\",\n       \"settings\": {\n         \"endpoint_uri\": \"http://localhost:7545\"\n       }\n     }\n   },\n   \"contracts\": {\n     \"backends\": {\n       \"JSONFile\": {\"$ref\": \"contracts.backends.JSONFile\"},\n       \"ProjectContracts\": {\n         \"$ref\": \"contracts.backends.ProjectContracts\"\n       }\n     }\n   }\n }\n```", "```py\nstruct Tweet:\n    messages: bytes32[10]\n    index: int128\n\ntweets: public(map(address, Tweet))\n\n@public\ndef write_a_tweet(tweet: bytes32):\n    assert self.tweets[msg.sender].index < 10\n\n    index: int128 = self.tweets[msg.sender].index\n    self.tweets[msg.sender].messages[index] = tweet\n    self.tweets[msg.sender].index += 1\n```", "```py\nstruct Tweet:\n    messages: bytes32[10]\n    index: int128\n\ntweets: public(map(address, Tweet))\n```", "```py\n@public\ndef write_a_tweet(tweet: bytes32):\n    assert self.tweets[msg.sender].index < 10\n    index: int128 = self.tweets[msg.sender].index\n    self.tweets[msg.sender].messages[index] = tweet\n    self.tweets[msg.sender].index += 1\n```", "```py\nimport pytest\nimport eth_tester\n\ndef test_initial_condition(web3, chain):\n    twitter_on_blockchain, _ = chain.provider.get_or_deploy_contract('TwitterOnBlockchain')\n    assert twitter_on_blockchain.functions.tweets__index(web3.eth.coinbase).call() == 0\n\n...\n...\n\ntwitter_on_blockchain.functions.tweets__messages(web3.eth.coinbase,0).call()[:len(tweet)] == tweet\n    assert twitter_on_blockchain.functions.tweets__messages(web3.eth.coinbase,1).call()[:len(tweet2)] == tweet2\n```", "```py\n(qt-venv) $ populus deploy --chain ganache TwitterOnBlockchain\n```", "```py\nfrom web3 import Web3, HTTPProvider\nfrom populus.utils.wait import wait_for_transaction_receipt\nw3 = Web3(HTTPProvider('http://localhost:7545'))\n\nprivate_keys = ['dummy',\n                '59e31694256f71b8d181f47fc67914798c4b96990e835fc1407bf4673ead30e2',\n                'ac1e6abbe002699fbef756a2cbc2bf8c03cfac97adee84ce32f198219be94788']\n\n...\n...\n        txhash = w3.eth.sendRawTransaction(signed.rawTransaction)\n        wait_for_transaction_receipt(w3, txhash)\n```", "```py\nfrom web3 import Web3, HTTPProvider\nfrom populus.utils.wait import wait_for_transaction_receipt\n\nw3 = Web3(HTTPProvider('http://localhost:7545'))\n```", "```py\nprivate_keys = ['dummy',\n                '59e31694256f71b8d181f47fc67914798c4b96990e835fc1407bf4673ead30e2',\n                'ac1e6abbe002699fbef756a2cbc2bf8c03cfac97adee84ce32f198219be94788']\n```", "```py\ntrue = True\nfalse = False\nabi = [{\n         \"constant\": false,\n         \"gas\": 71987,\n         \"inputs\": [{\n                      \"name\": \"tweet\",\n                      \"type\": \"bytes32\"\n                   }],\n         \"name\": \"write_a_tweet\",\n         \"outputs\": [],\n         \"payable\": false,\n         \"type\": \"function\"\n       },\n...\n...\n         \"payable\": false,\n         \"type\": \"function\"\n       }]\n```", "```py\nwith open('address.txt', 'r') as f:\n    address = f.read().rstrip(\"\\n\")\n\nTwitterOnBlockchain = w3.eth.contract(address=address, abi=abi)\n```", "```py\nfor i in range(1, 3):\n    for j in range(1, 11):\n        nonce = w3.eth.getTransactionCount(Web3.toChecksumAddress(w3.eth.accounts[i]))\n        txn = TwitterOnBlockchain.functions.write_a_tweet(b'Tweet ' + str(j).encode('utf-8')).buildTransaction({'gas': 70000, 'gasPrice': w3.toWei('1', 'gwei'), 'nonce': nonce })\n        signed = w3.eth.account.signTransaction(txn, private_key=private_keys[i])\n        txhash = w3.eth.sendRawTransaction(signed.rawTransaction)\n        wait_for_transaction_receipt(w3, txhash)\n```", "```py\nfrom PySide2 import QtCore, QtWidgets\nimport web3\nfrom web3 import Web3, HTTPProvider\nfrom populus.utils.wait import wait_for_transaction_receipt\n\nw3 = Web3(HTTPProvider('http://localhost:7545'))\n\n...\n...\n\nif __name__ == '__main__':\n    import sys\n    app = QtWidgets.QApplication(sys.argv)\n    twitter_dapp = TwitterDapp()\n    twitter_dapp.show()\n    sys.exit(app.exec_())\n```", "```py\nfrom PySide2 import QtCore, QtWidgets\nimport web3\nfrom web3 import Web3, HTTPProvider\nfrom populus.utils.wait import wait_for_transaction_receipt\n\nw3 = Web3(HTTPProvider('http://localhost:7545'))\ntrue = True\nfalse = False\n\nabi = [{\n         \"constant\": false,\n         \"gas\": 71987,\n         \"inputs\": [{\n                      \"name\": \"tweet\",\n                      \"type\": \"bytes32\"\n                   }],\n         \"name\": \"write_a_tweet\",\n         \"outputs\": [],\n         \"payable\": false,\n         \"type\": \"function\"\n       },\n...\n...\n         \"payable\": false,\n         \"type\": \"function\"\n       }]\n```", "```py\nwith open('address.txt', 'r') as f:\n    address = f.read().rstrip(\"\\n\")\n\nTwitterOnBlockchain = w3.eth.contract(address=address, abi=abi)\n```", "```py\ndef strip_x00_from_tweet(tweet):\n    null_index = tweet.find(b'\\x00')\n    return tweet[:null_index]\n```", "```py\nclass Web3ReadTweetsThread(QtCore.QThread):\n    fetched_posts = QtCore.Signal(list)\n    account = ''\n\n    def __init__(self, parent=None):\n        super(Web3ReadTweetsThread, self).__init__(parent)\n\n    def setAccount(self, account):\n        self.account = account\n\n    def run(self):\n        try:\n            index = TwitterOnBlockchain.functions.tweets__index(self.account).call()\n        except web3.exceptions.ValidationError:\n            return\n        tweets = []\n        for i in range(index):\n            tweet = TwitterOnBlockchain.functions.tweets__messages(self.account, i).call()\n            tweets.append(tweet.decode('utf-8'))\n        self.fetched_posts.emit(tweets)\n```", "```py\nclass Web3WriteATweetThread(QtCore.QThread):\n    write_a_tweet = QtCore.Signal()\n    private_key = ''\n    tweet = ''\n\n...\n...\n\nw3.eth.sendRawTransaction(signed.rawTransaction)\n        wait_for_transaction_receipt(w3, txhash)\n        self.write_a_tweet.emit()\n```", "```py\nnonce = w3.eth.getTransactionCount(Web3.toChecksumAddress(account.address))\n```", "```py\nclass TwitterDapp(QtWidgets.QWidget):\n    private_key = '0x0'\n    account = ''\n    bookmark_file = 'bookmark.txt'\n    addresses = []\n\n    def __init__(self):\n        super(TwitterDapp, self).__init__()\n\n...\n...\n        self.web3_write_a_tweet_thread.write_a_tweet.connect(self.successfullyWriteATweet)\n```", "```py\n    def createPrivateKeyGroupBox(self):\n        self.private_key_group_box = QtWidgets.QGroupBox(\"Account\")\n        self.private_key_field = QtWidgets.QLineEdit()\n        self.welcome_message = QtWidgets.QLabel()\n\n        layout = QtWidgets.QFormLayout()\n        layout.addRow(QtWidgets.QLabel(\"Private key:\"), self.private_key_field)\n        button_box = QtWidgets.QDialogButtonBox(QtWidgets.QDialogButtonBox.Ok)\n        button_box.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(self.checkPrivateKey)\n        layout.addRow(button_box)\n        layout.addRow(self.welcome_message)\n\n        self.private_key_group_box.setLayout(layout)\n```", "```py\n    def createWritingTweetGroupBox(self):\n        self.tweet_button = QtWidgets.QPushButton(\"Write a new tweet\")\n        self.tweet_button.setMaximumSize(200,40)\n        self.write_button_layout = QtWidgets.QHBoxLayout()\n        self.write_button_layout.addWidget(self.tweet_button)\n        self.connect(self.tweet_button, QtCore.SIGNAL('clicked()'), self.writeANewTweet)\n```", "```py\n    def createTweetsGroupBox(self):\n        self.tweets_group_box = QtWidgets.QGroupBox(\"Tweets\")\n        self.account_address = QtWidgets.QLineEdit()\n        self.fetch_button = QtWidgets.QPushButton(\"Fetch\")\n        self.add_to_bookmark_button = QtWidgets.QPushButton(\"Bookmark it!\")\n\n...\n...\n        self.tweets_main_layout.addLayout(account_address_layout)\n        self.tweets_main_layout.addSpacing(20)\n        self.tweets_main_layout.addLayout(self.tweets_layout)\n        self.tweets_group_box.setLayout(self.tweets_main_layout)\n```", "```py\n    def createBookmarkGroupBox(self):\n        self.bookmark_group_box = QtWidgets.QGroupBox(\"Bookmark\")\n        self.bookmark_layout = QtWidgets.QVBoxLayout()\n        self.bookmark_group_box.setLayout(self.bookmark_layout)\n\n        with open(self.bookmark_file) as f:\n            addresses = f.readlines()\n        self.addresses = list(map(lambda x: x.rstrip(), filter(lambda x: len(x) > 1, addresses)))\n        self.fillBookmark()\n```", "```py\n    @QtCore.Slot()\n    def fetchTweets(self):\n        account = self.account_address.displayText()\n        self.web3_read_tweets_thread.setAccount(account)\n        self.web3_read_tweets_thread.start()\n```", "```py\n    @QtCore.Slot()\n    def bookmarkAddress(self):\n        account = self.account_address.displayText()\n        if account:\n            self.addresses.append(account)\n            self.addresses = list(set(addresses))\n        with open(self.bookmark_file, 'w') as f:\n            for address in self.addresses:\n                f.write(address)\n        self.fillBookmark()\n```", "```py\n    @QtCore.Slot()\n    def writeANewTweet(self):\n        text, ok = QtWidgets.QInputDialog.getText(self, \"Write a new tweet\", \"Tweet:\", QtWidgets.QLineEdit.Normal, \"\")\n        if ok and text != '':\n            self.web3_write_a_tweet_thread.setPrivateKey(self.private_key)\n            self.web3_write_a_tweet_thread.setTweet(text)\n            self.web3_write_a_tweet_thread.start()\n```", "```py\n    def checkPrivateKey(self):\n        self.private_key = self.private_key_field.displayText()\n        try:\n            self.account = w3.eth.account.privateKeyToAccount('0x'+self.private_key)\n        except ValueError:\n            QtWidgets.QMessageBox.warning(self, 'Error', 'Private key is invalid.')\n            return\n        self.welcome_message.setText('Welcome, ' + self.account.address + '!')\n        self.private_key_field.clear()\n```", "```py\n    def clearTweetsField(self):\n        while True:\n            label_item = self.tweets_layout.takeAt(0)\n            if label_item is None:\n                break\n            else:\n                label_item.widget().close()\n\n    def fillPosts(self, posts):\n        self.clearTweetsField()\n        for post in posts:\n            label_field = QtWidgets.QLabel(post)\n            self.tweets_layout.addWidget(label_field)\n```", "```py\n    def clearBookmarkField(self):\n        while True:\n            label_item = self.bookmark_layout.takeAt(0)\n            if label_item is None:\n                break\n            else:\n                label_item.widget().close()\n\n    def fillBookmark(self, addresses):\n        self.clearBookmarkField()\n        for address in addresses:\n            label_field = QtWidgets.QLabel(address)\n            label_field.setTextInteractionFlags(label_field.textInteractionFlags() | QtCore.Qt.TextSelectableByMouse)\n            self.bookmark_layout.addWidget(label_field)\n```", "```py\n    def successfullyWriteATweet(self):\n        self.welcome_message.setText('You have successfully written a new tweet!')\n```", "```py\nif __name__ == '__main__':\n    import sys\n    app = QtWidgets.QApplication(sys.argv)\n    twitter_dapp = TwitterDapp()\n    twitter_dapp.show()\n    sys.exit(app.exec_())\n```"]