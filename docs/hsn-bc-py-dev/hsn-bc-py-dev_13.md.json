["```py\n$ virtualenv -p python3.6 wallet-venv\n$ source wallet-venv/bin/activate\n(wallet-venv) $ pip install PySide2\n(wallet-venv) $ pip install web3==4.7.2\n```", "```py\n(wallet-venv) $ pip install pytest-qt\n```", "```py\nfrom PySide2.QtWidgets import QWidget, QApplication, QLabel, QPushButton, QVBoxLayout\nfrom PySide2.QtCore import Qt\nimport sys\n\nclass ButtonAndLabel(QWidget):\n\n...\n...\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n    button_and_label = ButtonAndLabel()\n    button_and_label.show()\n    sys.exit(app.exec_())\n```", "```py\nfrom button_and_label import ButtonAndLabel\nfrom PySide2 import QtCore\n\ndef test_button_and_label(qtbot):\n    widget = ButtonAndLabel()\n    qtbot.addWidget(widget)\n\n    assert widget.label.text() == \"label: before clicked\"\n\n    qtbot.mouseClick(widget.button, QtCore.Qt.LeftButton)\n\n    assert widget.label.text() == \"label: after clicked\n```", "```py\n(wallet-venv) $ pytest test_button_and_label.py\n```", "```py\nqtbot.addWidget(widget)\n```", "```py\nassert widget.label.text() == \"label: before clicked\"\n```", "```py\nself.label = QLabel(\"label: before clicked\")\n```", "```py\nlabel = QLabel(\"label: before clicked\")\n```", "```py\nqtbot.mouseClick(widget.button, QtCore.Qt.LeftButton)\n```", "```py\nassert widget.label.text() == \"label: after clicked\"\n```", "```py\nfrom PySide2.QtWidgets import QWidget, QApplication, QLabel, QPushButton, QVBoxLayout\nfrom PySide2.QtCore import Qt\nimport sys\n\nclass ButtonAndList(QWidget):\n\n...\n...\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n    button_and_list = ButtonAndList()\n    button_and_list.show()\n    sys.exit(app.exec_())\n```", "```py\nfrom button_and_list import ButtonAndList\nfrom PySide2 import QtCore\n\ndef test_button_and_list(qtbot):\n    widget = ButtonAndList()\n    qtbot.addWidget(widget)\n\n    qtbot.mouseClick(widget.button, QtCore.Qt.LeftButton)\n    qtbot.mouseClick(widget.button, QtCore.Qt.LeftButton)\n    qtbot.mouseClick(widget.button, QtCore.Qt.LeftButton)\n\n    label_item = widget.v_layout.takeAt(2)\n    assert label_item.widget().text() == \"3\"\n\n    label_item = widget.v_layout.takeAt(1)\n    assert label_item.widget().text() == \"2\"\n\n    label_item = widget.v_layout.takeAt(0)\n    assert label_item.widget().text() == \"1\"\n```", "```py\nlabel_item = widget.v_layout.takeAt(2)\n```", "```py\nassert label_item.widget().text() == \"3\"\n```", "```py\nfrom PySide2.QtWidgets import QWidget, QApplication, QLabel, QPushButton, QVBoxLayout, QInputDialog, QLineEdit\nfrom PySide2.QtCore import Qt\nimport sys\n\nclass ButtonAndDialog(QWidget):\n\n...\n...\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n    button_and_dialog = ButtonAndDialog()\n    button_and_dialog.show()\n    sys.exit(app.exec_())\n```", "```py\nfrom button_and_dialog import ButtonAndDialog\nfrom PySide2.QtWidgets import QInputDialog\nfrom PySide2 import QtCore\n\ndef test_button_and_dialog(qtbot, monkeypatch):\n    widget = ButtonAndDialog()\n    qtbot.addWidget(widget)\n\n    monkeypatch.setattr(QInputDialog, 'getText', lambda *args: (\"New Text\", True))\n    qtbot.mouseClick(widget.button, QtCore.Qt.LeftButton)\n\n    assert widget.label.text() == \"New Text\"\n```", "```py\nnew_text, ok = QInputDialog.getText(self, \"Write A Text\", \"New Text:\", QlineEdit.Normal)\n```", "```py\nnew_text, ok = (\"New Text\", True)\n```", "```py\nfrom PySide2.QtWidgets import QWidget, QApplication, QLabel, QComboBox, QVBoxLayout\nfrom PySide2.QtCore import Qt\nimport sys\n\nclass ComboBoxAndLabel(QWidget):\n\n    def __init__(self):\n        super(ComboBoxAndLabel, self).__init__()\n\n        self.combobox = QComboBox()\n        self.combobox.addItems([\"Orange\", \"Apple\", \"Grape\"])\n        self.combobox.currentTextChanged.connect(self.comboboxSelected)\n\n        self.label = QLabel(\"label: before selecting combobox\")\n\n        layout = QVBoxLayout()\n        layout.addWidget(self.combobox)\n        layout.addWidget(self.label)\n\n        self.setLayout(layout)\n\n    def comboboxSelected(self, value):\n        self.label.setText(value)\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n    combobox_and_label = ComboBoxAndLabel()\n    combobox_and_label.show()\n    sys.exit(app.exec_())\n```", "```py\nfrom combobox_and_label import ComboBoxAndLabel\nfrom PySide2 import QtCore\n\ndef test_combobox_and_label(qtbot):\n    widget = ComboBoxAndLabel()\n    qtbot.addWidget(widget)\n\n    assert widget.label.text() == \"label: before selecting combobox\"\n\n    qtbot.keyClicks(widget.combobox, \"Grape\")\n\n    assert widget.label.text() == \"Grape\"\n```", "```py\nqtbot.keyClicks(widget.combobox, \"Grape\")\n```", "```py\nfrom PySide2.QtWidgets import QFrame, QLabel, QWidget, QApplication, QPushButton, QHBoxLayout, QVBoxLayout, QSizePolicy, QSizePolicy\nfrom PySide2.QtCore import Qt\nimport sys\n\nclass AddStretch(QWidget):\n\n...\n...\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n    widget = AddStretch()\n    widget.resize(500, 500)\n    widget.show()\n    sys.exit(app.exec_())\n```", "```py\nfrom PySide2.QtWidgets import QWidget, QApplication, QLabel, QGridLayout\nfrom PySide2.QtCore import Qt\nimport sys\n\nclass GridWindow(QWidget):\n\n...\n...\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n    gridWindow = GridWindow()\n    gridWindow.show()\n    sys.exit(app.exec_())\n```", "```py\nlayout.addWidget(label, 0, 0)\n```", "```py\nlayout.addWidget(label, 1, 0)\n```", "```py\nlayout.addWidget(label, 1, 1, 2, 2)\n```", "```py\nfrom PySide2.QtWidgets import QWidget, QApplication, QPushButton, QVBoxLayout, QSizePolicy\nfrom PySide2.QtCore import Qt\nimport sys\n\nclass ButtonWithSizePolicy(QWidget):\n\n...\n...\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n    button_with_size_policy_widget = ButtonWithSizePolicy()\n    button_with_size_policy_widget.resize(500, 200)\n    button_with_size_policy_widget.show()\n    sys.exit(app.exec_())\n```", "```py\nfrom PySide2.QtWidgets import QTabWidget, QApplication, QWidget\nimport sys\nfrom button_and_label import ButtonAndLabel\n\nclass TabbedWindow(QTabWidget):\n\n    def __init__(self, parent=None):\n        super(TabbedWindow, self).__init__(parent)\n        widget1 = QWidget()\n        self.widget2 = ButtonAndLabel()\n        widget3 = QWidget()\n        self.addTab(widget1, \"Tab 1\")\n        self.addTab(self.widget2, \"Tab 2\")\n        self.addTab(widget3, \"Tab 3\")\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n    tabbedWindow = TabbedWindow()\n    tabbedWindow.show()\n    sys.exit(app.exec_())\n```", "```py\n$ mkdir wallet\n$ mkdir wallet/icons\n$ mkdir wallet/images\n$ mkdir wallet/tests\n$ mkdir wallet/tools\n$ mkdir wallet/wallet_threads\n$ mkdir wallet/wallet_widgets\n```", "```py\nfrom web3 import Web3, IPCProvider\nfrom web3.exceptions import ValidationError\nfrom populus.utils.wait import wait_for_transaction_receipt\nfrom collections import namedtuple\nfrom os.path import exists\nimport json\n\nSendTransaction = namedtuple(\"SendTransaction\", \"sender password destination amount fee\")\nTokenInformation = namedtuple(\"TokenInformation\", \"name symbol totalSupply address\")\n```", "```py\ndef send_transaction(sender, password, destination, amount, fee):\n    // the code to create transaction\n```", "```py\nsend_transaction(\"427af7b53b8f56adf6f13932bb17c42ed2a53d04\", \u201cpassword\u201d, \"6ad2ffd2e08bd73f5c50db60fdc82a58b0590b99\", 3, 2)\n```", "```py\nsend_transaction(SendTransaction(sender=\"0xaksdfkas\", password=\"password\", destination=\"0xkkkkkk\", amount=3, fee=2))\n```", "```py\ntrue = True\nfalse = False\nerc20_token_interface = [\n            {\n                \"anonymous\": false,\n                \"inputs\": [\n                    {\n                        \"indexed\": true,\n                        \"name\": \"_from\",\n                        \"type\": \"address\"\n                    },\n                    {\n                        \"indexed\": true,\n                        \"name\": \"_to\",\n                        \"type\": \"address\"\n                    },\n                    {\n                        \"indexed\": false,\n                        \"name\": \"_value\",\n                        \"type\": \"uint256\"\n                    }\n                ],\n                \"name\": \"Transfer\",\n                \"type\": \"event\"\n            },\n...\n```", "```py\nclass Blockchain:\n\n    tokens_file = 'tokens.json'\n\n    def __init__(self):\n        self.w3 = Web3(IPCProvider('/tmp/geth.ipc'))\n```", "```py\n    def get_accounts(self):\n        return map(lambda account: (account, self.w3.fromWei(self.w3.eth.getBalance(account), 'ether')), self.w3.eth.accounts)\n```", "```py\n    def create_new_account(self, password):\n        return self.w3.personal.newAccount(password)\n```", "```py\n    def get_balance(self, address):\n        return self.w3.fromWei(self.w3.eth.getBalance(address), 'ether')\n```", "```py\n    def get_token_balance(self, account_address, token_information):\n        try:\n            token_contract = self.w3.eth.contract(address=token_information.address, abi=erc20_token_interface)\n            balance = token_contract.functions.balanceOf(account_address).call()\n        except ValidationError:\n            return None\n        return balance\n```", "```py\n    def create_send_transaction(self, tx):\n        nonce = self.w3.eth.getTransactionCount(tx.sender)\n        transaction = {\n          'from': tx.sender,\n          'to': Web3.toChecksumAddress(tx.destination),\n          'value': self.w3.toWei(str(tx.amount), 'ether'),\n          'gas': 21000,\n          'gasPrice': self.w3.toWei(str(tx.fee), 'gwei'),\n          'nonce': nonce\n        }\n\n        tx_hash = self.w3.personal.sendTransaction(transaction, tx.password)\n        wait_for_transaction_receipt(self.w3, tx_hash)\n```", "```py\n    def create_send_token_transaction(self, tx, token_information):\n        nonce = self.w3.eth.getTransactionCount(tx.sender)\n        token_contract = self.w3.eth.contract(address=token_information.address, abi=erc20_token_interface)\n        transaction = token_contract.functions.transfer(tx.destination, int(tx.amount)).buildTransaction({\n                  'from': tx.sender,\n                  'gas': 70000,\n                  'gasPrice': self.w3.toWei(str(tx.fee), 'gwei'),\n                  'nonce': nonce\n              })\n\n        tx_hash = self.w3.personal.sendTransaction(transaction, tx.password)\n        wait_for_transaction_receipt(self.w3, tx_hash)\n```", "```py\n    def get_information_of_token(self, address):\n        try:\n            token_contract = self.w3.eth.contract(address=address, abi=erc20_token_interface)\n            name = token_contract.functions.name().call()\n            symbol = token_contract.functions.symbol().call()\n            total_supply = token_contract.functions.totalSupply().call()\n        except ValidationError:\n            return None\n        token_information = TokenInformation(name=name.decode('utf-8'),\n                                             symbol=symbol.decode('utf-8'),\n                                             totalSupply=total_supply,\n                                             address=address)\n        return token_information\n```", "```py\n    def get_token_named_tuple(self, token_dict, address):\n        return TokenInformation(name=token_dict['name'],\n                                totalSupply=token_dict['total_supply'],\n                                symbol=token_dict['symbol'],\n                                address=address)\n```", "```py\n    def get_tokens(self):\n        tokens = {}\n        if exists(self.tokens_file):\n            with open(self.tokens_file) as json_data:\n                tokens = json.load(json_data)\n        return tokens\n```", "```py\nblockchain = Blockchain()\n```", "```py\nfrom PySide2.QtCore import QThread, Signal\nfrom time import sleep\nfrom blockchain import blockchain\n\nclass BalanceThread(QThread):\n\n    get_balance_transaction = Signal(map)\n\n    def __init__(self, parent=None):\n        super(BalanceThread, self).__init__(parent)\n        self.quit = False\n\n    def kill(self):\n        self.quit = True\n\n    def run(self):\n        while True:\n            sleep(2)\n            if self.quit:\n                break\n            accounts = blockchain.get_accounts()\n            self.get_balance_transaction.emit(accounts)\n```", "```py\nfrom PySide2.QtCore import QThread, Signal\nfrom blockchain import blockchain\n\nclass SendThread(QThread):\n\n    send_transaction = Signal()\n\n    def __init__(self, parent=None):\n        super(SendThread, self).__init__(parent)\n\n    def prepareTransaction(self, tx):\n        self.tx = tx\n\n    def run(self):\n        blockchain.create_send_transaction(self.tx)\n        self.send_transaction.emit()\n```", "```py\nfrom PySide2.QtCore import QThread, Signal\nfrom blockchain import blockchain\n\nclass SendTokenThread(QThread):\n\n    send_token_transaction = Signal()\n\n    def __init__(self, parent=None):\n        super(SendTokenThread, self).__init__(parent)\n\n    def prepareTransaction(self, tx, token_information):\n        self.tx = tx\n        self.token_information = token_information\n\n    def run(self):\n        blockchain.create_send_token_transaction(self.tx, self.token_information)\n        self.send_token_transaction.emit()\n```", "```py\nfrom os.path import isdir, exists\nfrom os import mkdir\nfrom tools.identicon import render_identicon\n\ndef render_avatar(code):\n    code = int(code, 16)\n    img_filename = 'images/%08x.png' % code\n    if exists(img_filename):\n        return img_filename\n    img = render_identicon(code, 24)\n    if not isdir('images'):\n        mkdir('images')\n    img.save(img_filename, 'PNG')\n    return img_filename\n```", "```py\nfrom PySide2.QtWidgets import QTabWidget, QApplication\nimport sys\n\nfrom wallet_widgets.account_widget import AccountWidget\nfrom wallet_widgets.send_widget import SendWidget\nfrom wallet_widgets.token_widget import TokenWidget\n\nclass WalletWidget(QTabWidget):\n\n    def __init__(self, parent=None):\n        super(WalletWidget, self).__init__(parent)\n        self.account_widget = AccountWidget()\n        self.send_widget = SendWidget()\n        self.token_widget = TokenWidget()\n        self.addTab(self.account_widget, \"Account\")\n        self.addTab(self.send_widget, \"Send\")\n        self.addTab(self.token_widget, \"Token\")\n\n    def killThreads(self):\n        self.account_widget.kill()\n\nif __name__ == \"__main__\":\n\n    app = QApplication(sys.argv)\n    wallet_widget = WalletWidget()\n    wallet_widget.show()\n    return_app = app.exec_()\n    wallet_widget.killThreads()\n    sys.exit(return_app)\n```", "```py\nfrom PySide2.QtWidgets import (QWidget,\n                               QGridLayout,\n                               QVBoxLayout,\n                               QHBoxLayout,\n                               QPushButton,\n                               QLabel,\n                               QInputDialog,\n                               QLineEdit,\n                               QToolTip,\n                               QApplication,\n                               QSizePolicy)\nfrom PySide2.QtCore import Slot, SIGNAL, QSize\nfrom PySide2.QtGui import QPixmap, QIcon, QCursor, QClipboard\nfrom time import sleep\nfrom blockchain import blockchain\nfrom tools.util import render_avatar\nfrom wallet_threads.balance_thread import BalanceThread\n```", "```py\nclass AccountWidget(QWidget):\n\n    balance_widgets = {}\n\n    def __init__(self, parent=None):\n        super(AccountWidget, self).__init__(parent)\n\n        self.create_account_button = QPushButton(\"Create Account\")\n        self.create_account_button.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.connect(self.create_account_button, SIGNAL('clicked()'), self.createNewAccount)\n\n        self.accounts_layout = QVBoxLayout()\n\n        accounts = blockchain.get_accounts()\n\n        for account, balance in accounts:\n            self._addAccountToWindow(account, balance)\n\n        layout = QGridLayout()\n\n        layout.addWidget(self.create_account_button, 0, 0)\n        layout.addLayout(self.accounts_layout, 1, 0)\n\n        self.setLayout(layout)\n\n        self.balance_thread = BalanceThread()\n        self.balance_thread.get_balance_transaction.connect(self._updateBalances)\n        self.balance_thread.start()\n```", "```py\n    @Slot()\n    def createNewAccount(self):\n        password, ok = QInputDialog.getText(self, \"Create A New Account\",\n                 \"Password:\", QLineEdit.Normal)\n        if ok and password != '':\n            new_account = blockchain.create_new_account(password)\n            self._addAccountToWindow(new_account, 0, resize_parent=True)\n```", "```py\n    def copyAddress(self, address):\n        QToolTip.showText(QCursor.pos(), \"Address %s has been copied to clipboard!\" % address)\n        clipboard = QApplication.clipboard()\n        clipboard.setText(address)\n```", "```py\n    def _addAccountToWindow(self, account, balance, resize_parent=False):\n        wrapper_layout = QVBoxLayout()\n        account_layout = QHBoxLayout()\n        rows_layout = QVBoxLayout()\n        address_layout = QHBoxLayout()\n        account_label = QLabel(account)\n...\n...\n        avatar.setPixmap(pixmap)\n        account_layout.addWidget(avatar)\n        account_layout.addLayout(rows_layout)\n        wrapper_layout.addLayout(account_layout)\n        wrapper_layout.addSpacing(20)\n        self.accounts_layout.addLayout(wrapper_layout)\n\n        if resize_parent:\n            sizeHint = self.sizeHint()\n            self.parentWidget().parentWidget().resize(QSize(sizeHint.width(), sizeHint.height() + 40))\n```", "```py\n    def kill(self):\n        self.balance_thread.kill()\n        sleep(2)\n```", "```py\n    @Slot()\n    def _updateBalances(self, accounts):\n        for account, balance in accounts:\n            self.balance_widgets[account].setText('Balance: %.5f ethers' % balance)\n```", "```py\nfrom PySide2.QtWidgets import (QWidget,\n                               QGridLayout,\n                               QVBoxLayout,\n                               QHBoxLayout,\n                               QPushButton,\n                               QLabel,\n                               QInputDialog,\n                               QLineEdit,\n                               QToolTip,\n                               QComboBox,\n                               QApplication,\n                               QSlider,\n                               QSizePolicy)\nfrom PySide2.QtCore import Slot, SIGNAL, QSize, Qt\nfrom PySide2.QtGui import QPixmap, QMovie, QPalette, QColor\nfrom os.path import isdir, exists\nfrom os import mkdir\nfrom tools.util import render_avatar\nfrom blockchain import blockchain, SendTransaction\nfrom wallet_threads.send_thread import SendThread\nfrom wallet_threads.send_token_thread import SendTokenThread\n```", "```py\nclass SendWidget(QWidget):\n\n    tokens_file = 'tokens.json'\n\n    def __init__(self, parent=None):\n        super(SendWidget, self).__init__(parent)\n\n        self.token_name = 'Ethereum'\n\n        self.setupSenderSection()\n        self.setupDestinationSection()\n        self.setupTokenSection()\n        self.setupProgressSection()\n        self.setupSendButtonSection()\n        self.setupFeeSection()\n\n        self.send_thread = SendThread()\n        self.send_thread.send_transaction.connect(self.sendTransactionFinished)\n        self.send_token_thread = SendTokenThread()\n        self.send_token_thread.send_token_transaction.connect(self.sendTransactionFinished)\n\n        layout = QGridLayout()\n\n        layout.addLayout(self.sender_layout, 0, 0)\n        layout.addLayout(self.destination_layout, 0, 1)\n        layout.addLayout(self.progress_layout, 1, 0, 1, 2, Qt.AlignCenter)\n        layout.addLayout(self.token_layout, 2, 0)\n        layout.addLayout(self.send_layout, 2, 1)\n        layout.addLayout(self.slider_layout, 3, 0)\n\n        self.setLayout(layout)\n```", "```py\n    def setupSenderSection(self):\n        accounts = blockchain.get_accounts()\n\n        sender_label = QLabel(\"Sender\")\n        sender_label.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n\n        self.balance_label = QLabel(\"Balance: \")\n        self.balance_label.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n\n        self.avatar = QLabel()\n\n        self.sender_combo_box = QComboBox()\n        self.sender_items = []\n        for account, balance in accounts:\n            self.sender_items.append(account)\n        self.sender_combo_box.addItems(self.sender_items)\n        self.sender_combo_box.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.sender_combo_box.currentTextChanged.connect(self.filterSender)\n\n        first_account = self.sender_items[0]\n        self.filterSender(first_account)\n        self.setAvatar(first_account, self.avatar)\n\n        self.sender_layout = QVBoxLayout()\n        sender_wrapper_layout = QHBoxLayout()\n        sender_right_layout = QVBoxLayout()\n        sender_right_layout.addWidget(sender_label)\n        sender_right_layout.addWidget(self.sender_combo_box)\n        sender_right_layout.addWidget(self.balance_label)\n        sender_wrapper_layout.addWidget(self.avatar)\n        sender_wrapper_layout.addLayout(sender_right_layout)\n        sender_wrapper_layout.addStretch()\n\n        self.sender_layout.addLayout(sender_wrapper_layout)\n        self.sender_layout.addStretch()\n```", "```py\n    def setupDestinationSection(self):\n        self.destination_layout = QVBoxLayout()\n\n        destination_label = QLabel(\"Destination\")\n        destination_label.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n\n        self.destination_line_edit = QLineEdit()\n        self.destination_line_edit.setFixedWidth(380);\n        self.destination_line_edit.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n\n        self.destination_layout.addWidget(destination_label)\n        self.destination_layout.addWidget(self.destination_line_edit)\n        self.destination_layout.addStretch()\n```", "```py\n    def setupTokenSection(self):\n        token_label = QLabel(\"Token\")\n        token_label.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n\n        token_combo_box = QComboBox()\n\n        tokens = blockchain.get_tokens()\n        first_token = 'Ethereum'\n        items = [first_token]\n        self.token_address = {'Ethereum': '0xcccccccccccccccccccccccccccccccccccccccc'}\n        self.token_informations = {}\n\n        for address, token_from_json in tokens.items():\n            token_information = blockchain.get_token_named_tuple(token_from_json, address)\n            self.token_informations[token_information.name] = token_information\n            self.token_address[token_information.name] = token_information.address\n            items.append(token_information.name)\n\n        self.amount_label = QLabel(\"Amount (in ethers)\")\n\n        token_combo_box.addItems(items)\n        token_combo_box.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        token_combo_box.currentTextChanged.connect(self.filterToken)\n\n        self.token_avatar = QLabel()\n\n        self.filterToken(first_token)\n        token_address = self.token_address[first_token]\n        self.setAvatar(token_address, self.token_avatar)\n\n        self.token_layout = QVBoxLayout()\n        token_wrapper_layout = QHBoxLayout()\n        token_right_layout = QVBoxLayout()\n        token_right_layout.addWidget(token_label)\n        token_right_layout.addWidget(token_combo_box)\n        token_wrapper_layout.addWidget(self.token_avatar)\n        token_wrapper_layout.addLayout(token_right_layout)\n        token_wrapper_layout.addStretch()\n        self.token_layout.addLayout(token_wrapper_layout)\n```", "```py\n    def setupProgressSection(self):\n        self.progress_layout = QHBoxLayout()\n        progress_vertical_layout = QVBoxLayout()\n        progress_wrapper_layout = QHBoxLayout()\n        self.progress_label = QLabel()\n        movie = QMovie('icons/ajax-loader.gif')\n        self.progress_label.setMovie(movie)\n        movie.start()\n        self.progress_label.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.progress_description_label = QLabel()\n        self.progress_description_label.setText(\"Transaction is being confirmed. Please wait!\")\n        self.progress_description_label.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        progress_wrapper_layout.addWidget(self.progress_label)\n        progress_wrapper_layout.addWidget(self.progress_description_label)\n        progress_vertical_layout.addLayout(progress_wrapper_layout, 1)\n        self.progress_layout.addLayout(progress_vertical_layout)\n        self.sendTransactionFinished()\n```", "```py\n    def setupSendButtonSection(self):\n        self.send_layout = QVBoxLayout()\n        self.amount_line_edit = QLineEdit()\n        self.send_button = QPushButton(\"Send\")\n        self.send_button.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.send_button.clicked.connect(self.sendButtonClicked)\n        pal = self.send_button.palette()\n        pal.setColor(QPalette.Button, QColor(Qt.green))\n        self.send_button.setAutoFillBackground(True)\n        self.send_button.setPalette(pal)\n        self.send_button.update()\n        self.send_layout.addWidget(self.amount_label)\n        self.send_layout.addWidget(self.amount_line_edit)\n        self.send_layout.addWidget(self.send_button)\n```", "```py\n        pal = self.send_button.palette()\n        pal.setColor(QPalette.Button, QColor(Qt.green))\n```", "```py\n    def setupFeeSection(self):\n        self.slider_layout = QVBoxLayout()\n        fee_label = QLabel(\"Fee\")\n        self.fee_slider = QSlider(Qt.Horizontal)\n        self.fee_slider.setRange(1, 10)\n        self.fee_slider.setValue(3)\n        self.fee_slider.valueChanged.connect(self.feeSliderChanged)\n        self.gwei_label = QLabel()\n        self.feeSliderChanged(3)\n        self.slider_layout.addWidget(fee_label)\n        self.slider_layout.addWidget(self.fee_slider)\n        self.slider_layout.addWidget(self.gwei_label)\n```", "```py\n    def filterToken(self, token_name):\n        address = self.token_address[token_name]\n        token_information = None\n        if token_name != 'Ethereum':\n            token_information = self.token_informations[token_name]\n            self.amount_label.setText(\"Amount\")\n        else:\n            self.amount_label.setText(\"Amount (in ethers)\")\n        self.updateBalanceLabel(token_name, self.sender_account, token_information)\n        self.setAvatar(address, self.token_avatar)\n        self.token_name = token_name\n```", "```py\n    def filterSender(self, account_address):\n        self.sender_account = account_address\n        token_information = None\n        if self.token_name != 'Ethereum':\n            token_information = self.token_informations[self.token_name]\n        self.updateBalanceLabel(self.token_name, account_address, token_information)\n        self.setAvatar(account_address, self.avatar)\n```", "```py\n    def updateBalanceLabel(self, token_name, account_address, token_information=None):\n        if token_name == 'Ethereum':\n            self.balance_label.setText(\"Balance: %.5f ethers\" % blockchain.get_balance(account_address))\n        else:\n            self.balance_label.setText(\"Balance: %d coins\" % blockchain.get_token_balance(account_address, token_information))\n```", "```py\n    def setAvatar(self, code, avatar):\n        img_filename = render_avatar(code)\n        pixmap = QPixmap(img_filename)\n        avatar.setPixmap(pixmap)\n```", "```py\n    def feeSliderChanged(self, value):\n        self.gwei_label.setText(\"%d GWei\" % value)\n        self.fee = value\n```", "```py\n    def sendButtonClicked(self):\n        password, ok = QInputDialog.getText(self, \"Create A New Transaction\",\n                 \"Password:\", QLineEdit.Password)\n        if ok and password != '':\n            self.progress_label.setVisible(True)\n            self.progress_description_label.setVisible(True)\n            tx = SendTransaction(sender=self.sender_account,\n                                 password=password,\n                                 destination=self.destination_line_edit.text(),\n                                 amount=self.amount_line_edit.text(),\n                                 fee=self.fee)\n            token_information = None\n            if self.token_name != 'Ethereum':\n                token_information = self.token_informations[self.token_name]\n                self.send_token_thread.prepareTransaction(tx, token_information)\n                self.send_token_thread.start()\n            else:\n                self.send_thread.prepareTransaction(tx)\n                self.send_thread.start()\n```", "```py\n    def sendTransactionFinished(self):\n        self.progress_label.setVisible(False)\n        self.progress_description_label.setVisible(False)\n```", "```py\nfrom PySide2.QtWidgets import (QWidget,\n                               QGridLayout,\n                               QVBoxLayout,\n                               QHBoxLayout,\n                               QPushButton,\n                               QLabel,\n                               QInputDialog,\n                               QLineEdit,\n                               QToolTip,\n                               QComboBox,\n                               QApplication,\n                               QSlider,\n                               QSizePolicy)\nfrom PySide2.QtCore import Slot, SIGNAL, QSize, Qt\nfrom PySide2.QtGui import QPixmap, QMovie, QPalette, QColor\nfrom os.path import isdir, exists\nfrom os import mkdir\nfrom time import sleep\nimport json\nfrom tools.util import render_avatar\nfrom blockchain import blockchain, SendTransaction, TokenInformation\n```", "```py\nclass TokenWidget(QWidget):\n\n    tokens_file = 'tokens.json'\n\n    def __init__(self, parent=None):\n        super(TokenWidget, self).__init__(parent)\n\n        self.watch_token_button = QPushButton(\"Watch Token\")\n\n        tokens = blockchain.get_tokens()\n\n...\n...\n\n        self.watch_token_button.setSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)\n        self.connect(self.watch_token_button, SIGNAL('clicked()'), self.watchNewToken)\n\n        layout.addWidget(self.watch_token_button, 0, 0)\n        layout.addLayout(self.tokens_layout, 1, 0)\n\n        self.setLayout(layout)\n```", "```py\n    def _addTokenToWindow(self, token_information, resize_parent=False):\n        wrapper_layout = QVBoxLayout()\n        token_layout = QHBoxLayout()\n        rows_layout = QVBoxLayout()\n        token_label = QLabel(token_information.name)\n...\n...\n        if resize_parent:\n            sizeHint = self.size()\n            self.parentWidget().parentWidget().resize(QSize(sizeHint.width(), sizeHint.height() + 100))\n```", "```py\n    @Slot()\n    def watchNewToken(self):\n        address, ok = QInputDialog.getText(self, \"Watch A New Token\",\n                 \"Token Smart Contract:\", QLineEdit.Normal)\n        if ok and address != '':\n            token_information = blockchain.get_information_of_token(address)\n            self._addTokenToWindow(token_information, resize_parent=True)\n            token_data = {}\n            if exists(self.tokens_file):\n                with open(self.tokens_file) as json_data:\n                    token_data = json.load(json_data)\n            token_data[token_information.address] = {'name': token_information.name,\n                                                     'symbol': token_information.symbol,\n                                                     'total_supply': token_information.totalSupply}\n            with open(self.tokens_file, 'w') as outfile:\n                json.dump(token_data, outfile)\n```", "```py\n(wallet-venv) $ python wallet.py\n```", "```py\nimport sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/..\"))\n\nfrom wallet import WalletWidget\nfrom PySide2.QtWidgets import QInputDialog\nfrom PySide2 import QtCore\n\ndef test_account(qtbot, monkeypatch):\n    wallet = WalletWidget()\n    qtbot.addWidget(wallet)\n\n    old_accounts_amount = wallet.account_widget.accounts_layout.count()\n\n    monkeypatch.setattr(QInputDialog, 'getText', lambda *args: (\"password\", True))\n    qtbot.mouseClick(wallet.account_widget.create_account_button, QtCore.Qt.LeftButton)\n\n    accounts_amount = wallet.account_widget.accounts_layout.count()\n    assert accounts_amount == old_accounts_amount + 1\n\n    wallet.killThreads()\n```", "```py\nimport sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/..\"))\nfrom time import sleep\n\nfrom wallet import WalletWidget\nfrom PySide2.QtWidgets import QInputDialog\nfrom PySide2 import QtCore\n\n...\n...\n\n    qtbot.keyClicks(wallet.send_widget.sender_combo_box, second_account)\n    balance_of_second_account = int(float(wallet.send_widget.balance_label.text().split()[1]))\n\n    assert balance_of_second_account - old_balance_of_second_account == 10\n\n    wallet.killThreads()\n```", "```py\nimport sys, os\nsys.path.append(os.path.realpath(os.path.dirname(__file__)+\"/..\"))\n\nfrom wallet import WalletWidget\nfrom PySide2.QtWidgets import QInputDialog\nfrom PySide2 import QtCore\n\ndef test_token(qtbot, monkeypatch):\n    wallet = WalletWidget()\n    qtbot.addWidget(wallet)\n\n    old_tokens_amount = wallet.token_widget.tokens_layout.count()\n\n    address = None\n    with open('address.txt') as f:\n        address = f.readline().rstrip()\n\n    monkeypatch.setattr(QInputDialog, 'getText', lambda *args: (address, True))\n    qtbot.mouseClick(wallet.token_widget.watch_token_button, QtCore.Qt.LeftButton)\n\n    tokens_amount = wallet.token_widget.tokens_layout.count()\n    assert tokens_amount == old_tokens_amount + 1\n\n    wallet.killThreads()\n```", "```py\n(wallet-venv) $ pytest tests\n```"]