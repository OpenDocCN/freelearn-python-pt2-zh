["```py\ncute_panda_video: bytes[128]\n```", "```py\ncute_panda_video = \"http://abucket.s3-website-us-west-2.amazonaws.com/cute_panda_video.mp4\"\n```", "```py\ncute_panda_video = \"/ipfs/QmWgMcTdPY9Rv7SCBusK1gWBRJcBi2MxNkC1yC6uvLYPwK\"\n```", "```py\nUPDATE thumbs_up_table SET aggregate_voting_count = 1000000 WHERE video_id = 234;\n```", "```py\n$ virtualenv -p python3.6 videos-venv\n$ source videos-venv/bin/activate\n(videos-venv) $\n```", "```py\n(videos-venv) $ pip install eth-abi==1.2.2\n(videos-venv) $ pip install eth-typing==1.1.0\n(videos-venv) $ pip install py-evm==0.2.0a33\n(videos-venv) $ pip install web3==4.7.2\n(videos-venv) $ pip install -e git+https://github.com/ethereum/populus#egg=populus\n(videos-venv) $ pip install vyper \n```", "```py\n(videos-venv) $ cd videos-venv/src/populus\n(videos-venv) $ grep -R \"compile(\" populus/compilation/backends/vyper.py\n bytecode = '0x' + compiler.compile(code).hex()\n bytecode_runtime = '0x' + compiler.compile(code, bytecode_runtime=True).hex()\n```", "```py\n(videos-venv) $ wget https://patch-diff.githubusercontent.com/raw/ethereum/populus/pull/484.patch\n(videos-venv) $ git apply 484.patch\n(videos-venv) $ cd ../../../ \n```", "```py\n(videos-venv) $ mkdir videos-sharing-smart-contract\n```", "```py\n(videos-venv) $ cd videos-sharing-smart-contract\n(videos-venv) $ mkdir contracts tests \n```", "```py\n(videos-venv) $ wget https://raw.githubusercontent.com/ethereum/populus/master/populus/assets/defaults.v9.config.json -O project.json\n```", "```py\n  \"compilation\": {\n    \"backend\": {\n      \"class\": \"populus.compilation.backends.VyperBackend\"\n    },\n    \"contract_source_dirs\": [\n      \"./contracts\"\n    ],\n    \"import_remappings\": []\n  },\n```", "```py\nstruct Video:\n    path: bytes[50]\n    title: bytes[20]\n\nTransfer: event({_from: indexed(address), _to: indexed(address), _value: uint256})\nApproval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256})\nUploadVideo: event({_user: indexed(address), _index: uint256})\nLikeVideo: event({_video_liker: indexed(address), _video_uploader: indexed(address), _index: uint256})\n\n...\n...\n\n@public\n@constant\ndef video_aggregate_likes(_user_video: address, _index: uint256) -> uint256:\n    _user_video_str: bytes32 = convert(_user_video, bytes32)\n    _index_str: bytes32 = convert(_index, bytes32)\n    _key: bytes[100] = concat(_user_video_str, _index_str)\n\n    return self.aggregate_likes[_key]\n```", "```py\nstruct Video:\n    path: bytes[50]\n    title: bytes[20]\n```", "```py\nTransfer: event({_from: indexed(address), _to: indexed(address), _value: uint256})\nApproval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256})\nUploadVideo: event({_user: indexed(address), _index: uint256})\nLikeVideo: event({_video_liker: indexed(address), _video_uploader: indexed(address), _index: uint256})\n```", "```py\nuser_videos_index: map(address, uint256)\n```", "```py\nname: public(bytes[20])\nsymbol: public(bytes[3])\ntotalSupply: public(uint256)\ndecimals: public(uint256)\nbalances: map(address, uint256)\nallowed: map(address, map(address, uint256))\n```", "```py\nall_videos: map(address, map(uint256, Video))\n```", "```py\nlikes_videos: map(bytes[100], bool)\naggregate_likes: map(bytes[100], uint256)\n```", "```py\n@public\ndef __init__():\n    _initialSupply: uint256 = 500\n    _decimals: uint256 = 3\n    self.totalSupply = _initialSupply * 10 ** _decimals\n    self.balances[msg.sender] = self.totalSupply\n    self.name = 'Video Sharing Coin'\n    self.symbol = 'VID'\n    self.decimals = _decimals\n    log.Transfer(ZERO_ADDRESS, msg.sender, self.totalSupply)\n\n...\n...\n\n@public\n@constant\ndef allowance(_owner: address, _spender: address) -> uint256:\n    return self.allowed[_owner][_spender]\n```", "```py\n@private\ndef _transfer(_source: address, _to: address, _amount: uint256) -> bool:\n    assert self.balances[_source] >= _amount\n    self.balances[_source] -= _amount\n    self.balances[_to] += _amount\n    log.Transfer(_source, _to, _amount)\n\n    return True\n\n@public\ndef transfer(_to: address, _amount: uint256) -> bool:\n    return self._transfer(msg.sender, _to, _amount)\n```", "```py\n@public\ndef upload_video(_video_path: bytes[50], _video_title: bytes[20]) -> bool:\n    _index: uint256 = self.user_videos_index[msg.sender]\n\n    self.all_videos[msg.sender][_index] = Video({ path: _video_path, title: _video_title })\n    self.user_videos_index[msg.sender] += 1\n\n    log.UploadVideo(msg.sender, _index)aggregate_likes\n\n    return True\n```", "```py\n@public\n@constant\ndef latest_videos_index(_user: address) -> uint256:\n    return self.user_videos_index[_user]\n\n@public\n@constant\ndef videos_path(_user: address, _index: uint256) -> bytes[50]:\n    return self.all_videos[_user][_index].path\n\n@public\n@constant\ndef videos_title(_user: address, _index: uint256) -> bytes[20]:\n    return self.all_videos[_user][_index].title\n```", "```py\n@public\ndef like_video(_user: address, _index: uint256) -> bool:\n    _msg_sender_str: bytes32 = convert(msg.sender, bytes32)\n    _user_str: bytes32 = convert(_user, bytes32)\n    _index_str: bytes32 = convert(_index, bytes32)\n    _key: bytes[100] = concat(_msg_sender_str, _user_str, _index_str)\n    _likes_key: bytes[100] = concat(_user_str, _index_str)\n a particular\n    assert _index < self.user_videos_index[_user]\n    assert self.likes_videos[_key] == False\n\n    self.likes_videos[_key] = True\n    self.aggregate_likes[_likes_key] += 1\n    self._transfer(msg.sender, _user, 1)\n\n    log.LikeVideo(msg.sender, _user, _index)\n\n    return True\n```", "```py\n@public\n@constant\ndef video_has_been_liked(_user_like: address, _user_video: address, _index: uint256) -> bool:\n    _user_like_str: bytes32 = convert(_user_like, bytes32)\n    _user_video_str: bytes32 = convert(_user_video, bytes32)\n    _index_str: bytes32 = convert(_index, bytes32)\n    _key: bytes[100] = concat(_user_like_str, _user_video_str, _index_str)\n\n    return self.likes_videos[_key]\n\n@public\n@constant\ndef video_aggregate_likes(_user_video: address, _index: uint256) -> uint256:\n    _user_video_str: bytes32 = convert(_user_video, bytes32)\n    _index_str: bytes32 = convert(_index, bytes32)\n    _key: bytes[100] = concat(_user_video_str, _index_str)\n\n    return self.aggregate_likes[_key]\n```", "```py\nimport pytest\nimport eth_tester\n\ndef upload_video(video_sharing, chain, account, video_path, video_title):\n    txn_hash = video_sharing.functions.upload_video(video_path, video_title).transact({'from': account})\n    chain.wait.for_receipt(txn_hash)\n\ndef transfer_coins(video_sharing, chain, source, destination, amount):\n    txn_hash = video_sharing.functions.transfer(destination, amount).transact({'from': source})\n    chain.wait.for_receipt(txn_hash)\n\n...\n...\n\n   assert events[1]['args']['_video_liker'] == video_liker2\n    assert events[1]['args']['_video_uploader'] == video_uploader\n    assert events[1]['args']['_index'] == 0\n\n    with pytest.raises(eth_tester.exceptions.TransactionFailed):\n        like_video(video_sharing, chain, video_liker, video_uploader, 0)\n```", "```py\nimport pytest\nimport eth_tester\n\ndef upload_video(video_sharing, chain, account, video_path, video_title):\n    txn_hash = video_sharing.functions.upload_video(video_path, video_title).transact({'from': account})\n    chain.wait.for_receipt(txn_hash)\n\ndef transfer_coins(video_sharing, chain, source, destination, amount):\n    txn_hash = video_sharing.functions.transfer(destination, amount).transact({'from': source})\n    chain.wait.for_receipt(txn_hash)\n\ndef like_video(video_sharing, chain, video_liker, video_uploader, index):\n    txn_hash = video_sharing.functions.like_video(video_uploader, index).transact({'from': video_liker})\n    chain.wait.for_receipt(txn_hash)\n```", "```py\ndef test_upload_video(web3, chain):\n    video_sharing, _ = chain.provider.get_or_deploy_contract('VideosSharing')\n\n    t = eth_tester.EthereumTester()\n    video_uploader = t.get_accounts()[1]\n\n    index = video_sharing.functions.latest_videos_index(video_uploader).call()\n    assert index == 0\n\n...\n...\n\n    assert events[0]['args']['_user'] == video_uploader\n    assert events[0]['args']['_index'] == 0\n\n    assert events[1]['args']['_user'] == video_uploader\n    assert events[1]['args']['_index'] == 1\n```", "```py\ndef test_like_video(web3, chain):\n    video_sharing, _ = chain.provider.get_or_deploy_contract('VideosSharing')\n\n    t = eth_tester.EthereumTester()\n    manager = t.get_accounts()[0]\n    video_uploader = t.get_accounts()[1]\n    video_liker = t.get_accounts()[2]\n    video_liker2 = t.get_accounts()[3]\n\n    transfer_coins(video_sharing, chain, manager, video_liker, 100)\n    transfer_coins(video_sharing, chain, manager, video_liker2, 100)\n    transfer_coins(video_sharing, chain, manager, video_uploader, 50)\n    upload_video(video_sharing, chain, video_uploader, b'video-ipfs-path', b\"video title\")\n\n...\n...\n\n    with pytest.raises(eth_tester.exceptions.TransactionFailed):\n        like_video(video_sharing, chain, video_liker, video_uploader, 0)\n```", "```py\n(videos-venv) $ py.test tests/test_videos_sharing.py\n```", "```py\n(videos-venv) $ cd videos_sharing_smart_contract\n(videos-venv) $ populus chain new localblock\n(videos-venv) $ ./chains/localblock/init_chain.sh\n```", "```py\n    \"localblock\": {\n      \"chain\": {\n        \"class\": \"populus.chain.ExternalChain\"\n      },\n      \"web3\": {\n        \"provider\": {\n          \"class\": \"web3.providers.ipc.IPCProvider\",\n        \"settings\": {\n          \"ipc_path\":\"/tmp/geth.ipc\"\n        }\n       }\n      },\n      \"contracts\": {\n        \"backends\": {\n          \"JSONFile\": {\"$ref\": \"contracts.backends.JSONFile\"},\n          \"ProjectContracts\": {\n            \"$ref\": \"contracts.backends.ProjectContracts\"\n          }\n        }\n      }\n    }\n```", "```py\n(videos-venv) $ ./chains/localblock/run_chain.sh\n```", "```py\n(videos-venv) $ populus compile\n```", "```py\n(videos-venv) $ populus deploy --chain localblock VideosSharing\n```", "```py\nimport os, json\nimport ipfsapi\nfrom web3 import Web3, IPCProvider\nfrom populus.utils.wait import wait_for_transaction_receipt\n\nw3 = Web3(IPCProvider('/tmp/geth.ipc'))\n\ncommon_password = 'bitcoin123'\naccounts = []\nwith open('accounts.txt', 'w') as f:\n...\n...\n    nonce = w3.eth.getTransactionCount(Web3.toChecksumAddress(account))\n    txn = VideosSharing.functions.upload_video(ipfs_path, title).buildTransaction({\n                'from': account,\n                'gas': 200000,\n                'gasPrice': w3.toWei('30', 'gwei'),\n                'nonce': nonce\n              })\n    txn_hash = w3.personal.sendTransaction(txn, common_password)\n    wait_for_transaction_receipt(w3, txn_hash)\n```", "```py\nimport os, json\nimport ipfsapi\nfrom web3 import Web3, IPCProvider\nfrom populus.utils.wait import wait_for_transaction_receipt\n\nw3 = Web3(IPCProvider('/tmp/geth.ipc'))\n```", "```py\ncommon_password = 'bitcoin123'\naccounts = []\nwith open('accounts.txt', 'w') as f:\n    for i in range(4):\n        account = w3.personal.newAccount(common_password)\n        accounts.append(account)\n        f.write(account + \"\\n\")\n```", "```py\nwith open('address.txt', 'r') as f:\n    address = f.read().rstrip(\"\\n\")\n\nwith open('videos_sharing_smart_contract/build/contracts.json') as f:\n    contract = json.load(f)\n    abi = contract['VideosSharing']['abi']\n```", "```py\nVideosSharing = w3.eth.contract(address=address, abi=abi)\n\nc = ipfsapi.connect()\n```", "```py\ncoinbase = w3.eth.accounts[0]\ncoinbase_password = 'this-is-not-a-secure-password'\n# Transfering Ethers\nfor destination in accounts:\n    nonce = w3.eth.getTransactionCount(Web3.toChecksumAddress(coinbase))\n    txn = {\n            'from': coinbase,\n            'to': Web3.toChecksumAddress(destination),\n            'value': w3.toWei('100', 'ether'),\n            'gas': 70000,\n            'gasPrice': w3.toWei('1', 'gwei'),\n            'nonce': nonce\n          }\n    txn_hash = w3.personal.sendTransaction(txn, coinbase_password)\n    wait_for_transaction_receipt(w3, txn_hash)\n```", "```py\n# Transfering Coins\nfor destination in accounts:\n    nonce = w3.eth.getTransactionCount(coinbase)\n    txn = VideosSharing.functions.transfer(destination, 100).buildTransaction({\n                'from': coinbase,\n                'gas': 70000,\n                'gasPrice': w3.toWei('1', 'gwei'),\n                'nonce': nonce\n              })\n    txn_hash = w3.personal.sendTransaction(txn, coinbase_password)\n    wait_for_transaction_receipt(w3, txn_hash)\n```", "```py\n# Uploading Videos\ndirectory = 'stock_videos'\nmovies = os.listdir(directory)\nlength_of_movies = len(movies)\nfor index, movie in enumerate(movies):\n    account = accounts[index//7]\n    ipfs_add = c.add(directory + '/' + movie)\n    ipfs_path = ipfs_add['Hash'].encode('utf-8')\n    title = movie.rstrip('.mp4')[:20].encode('utf-8')\n\n    nonce = w3.eth.getTransactionCount(Web3.toChecksumAddress(account))\n    txn = VideosSharing.functions.upload_video(ipfs_path, title).buildTransaction({\n                'from': account,\n                'gas': 200000,\n                'gasPrice': w3.toWei('30', 'gwei'),\n                'nonce': nonce\n              })\n    txn_hash = w3.personal.sendTransaction(txn, common_password)\n    wait_for_transaction_receipt(w3, txn_hash)\n```", "```py\n$ ipfs daemon\n```", "```py\n(videos-venv) $ pip install ipfsapi\n```", "```py\n(videos-venv) $ python bootstrap_videos.py\n```", "```py\nimport json\nfrom web3 import Web3, IPCProvider\n\nw3 = Web3(IPCProvider('/tmp/geth.ipc'))\n\nwith open('accounts.txt', 'r') as f:\n    account = f.readline().rstrip(\"\\n\")\n\nwith open('address.txt', 'r') as f:\n    address = f.read().rstrip(\"\\n\")\n\nwith open('videos_sharing_smart_contract/build/contracts.json') as f:\n    contract = json.load(f)\n    abi = contract['VideosSharing']['abi']\n\nVideosSharing = w3.eth.contract(address=address, abi=abi)\n\nprint(VideosSharing.functions.latest_videos_index(account).call())\n```", "```py\n(videos-venv) $ pip install Django\n```", "```py\n(videos-venv) $ pip install opencv-python\n```", "```py\n(videos-venv) $ django-admin startproject decentralized_videos\n```", "```py\n(videos-venv) $ cd decentralized_videos\n(videos-venv) $ mkdir static media\n```", "```py\n(videos-venv) $ python manage.py startapp videos\n```", "```py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'videos'\n]\n```", "```py\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n```", "```py\nfrom django.shortcuts import render, redirect\nfrom videos.models import videos_sharing\n\ndef index(request):\n    videos = videos_sharing.recent_videos()\n    context = {'videos': videos}\n    return render(request, 'videos/index.html', context)\n...\n...\ndef like(request):\n    video_user = request.POST['video_user']\n    index = int(request.POST['index'])\n    password = request.POST['password']\n    video_liker = request.POST['video_liker']\n    videos_sharing.like_video(video_liker, password, video_user, index)\n    return redirect('video', video_user=video_user, index=index)\n```", "```py\nfrom django.shortcuts import render, redirect\nfrom videos.models import videos_sharing\n```", "```py\ndef index(request):\n    videos = videos_sharing.recent_videos()\n    context = {'videos': videos}\n    return render(request, 'videos/index.html', context)\n```", "```py\ndef channel(request, video_user):\n    videos = videos_sharing.get_videos(video_user)\n    context = {'videos': videos, 'video_user': video_user}\n    return render(request, 'videos/channel.html', context)\n```", "```py\ndef video(request, video_user, index):\n    video = videos_sharing.get_video(video_user, index)\n    context = {'video': video}\n    return render(request, 'videos/video.html', context)\n```", "```py\ndef upload(request):\n    context = {}\n    if request.POST:\n        video_user = request.POST['video_user']\n        title = request.POST['title']\n        video_file = request.FILES['video_file']\n        password = request.POST['password']\n        videos_sharing.upload_video(video_user, password, video_file, title)\n        context['upload_success'] = True\n    return render(request, 'videos/upload.html', context)\n```", "```py\ndef like(request):\n    video_user = request.POST['video_user']\n    index = int(request.POST['index'])\n    password = request.POST['password']\n    video_liker = request.POST['video_liker']\n    videos_sharing.like_video(video_liker, password, video_user, index)\n    return redirect('video', video_user=video_user, index=index)\n```", "```py\nimport os.path, json\nimport ipfsapi\nimport cv2\nfrom web3 import Web3, IPCProvider\nfrom populus.utils.wait import wait_for_transaction_receipt\nfrom decentralized_videos.settings import STATICFILES_DIRS, STATIC_URL, BASE_DIR, MEDIA_ROOT\n\nclass VideosSharing:\n...\n...\n        txn_hash = self.w3.personal.sendTransaction(txn, password)\n        wait_for_transaction_receipt(self.w3, txn_hash)\n\nvideos_sharing = VideosSharing()\n```", "```py\nimport os.path, json\nimport ipfsapi\nimport cv2\nfrom web3 import Web3, IPCProvider\nfrom populus.utils.wait import wait_for_transaction_receipt\nfrom decentralized_videos.settings import STATICFILES_DIRS, STATIC_URL, BASE_DIR, MEDIA_ROOT\n```", "```py\nclass VideosSharing:\n\n    def __init__(self):\n        self.w3 = Web3(IPCProvider('/tmp/geth.ipc'))\n        with open('../address.txt', 'r') as f:\n            address = f.read().rstrip(\"\\n\")\n\n        with open('../videos_sharing_smart_contract/build/contracts.json') as f:\n            contract = json.load(f)\n            abi = contract['VideosSharing']['abi']\n\n        self.SmartContract = self.w3.eth.contract(address=address, abi=abi)\n\n        self.ipfs_con = ipfsapi.connect()\n```", "```py\n    def recent_videos(self, amount=20):\n        events = self.SmartContract.events.UploadVideo.createFilter(fromBlock=0).get_all_entries()\n        videos = []\n        for event in events:\n            video = {}\n            video['user'] = event['args']['_user']\n            video['index'] = event['args']['_index']\n            video['path'] = self.get_video_path(video['user'], video['index'])\n            video['title'] = self.get_video_title(video['user'], video['index'])\n            video['thumbnail'] = self.get_video_thumbnail(video['path'])\n            videos.append(video)\n        videos.reverse()\n        return videos[:amount]\n```", "```py\n    def get_videos(self, user, amount=20):\n        latest_index = self.SmartContract.functions.latest_videos_index(user).call()\n        i = 0\n        videos = []\n        while i < amount and i < latest_index:\n            video = {}\n            index = latest_index - i - 1\n            video['user'] = user\n            video['index'] = index\n            video['path'] = self.get_video_path(user, index)\n            video['title'] = self.get_video_title(user, index)\n            video['thumbnail'] = self.get_video_thumbnail(video['path'])\n            videos.append(video)\n            i += 1\n        return videos\n```", "```py\n\n    def get_video_path(self, user, index):\n        return self.SmartContract.functions.videos_path(user, index).call().decode('utf-8')\n\n    def get_video_title(self, user, index):\n        return self.SmartContract.functions.videos_title(user, index).call().decode('utf-8')\n```", "```py\n    def process_thumbnail(self, ipfs_path):\n        thumbnail_file = STATICFILES_DIRS[0] + '/' + ipfs_path + '.png'\n        if not os.path.isfile(thumbnail_file):\n            video_path = STATICFILES_DIRS[0] + '/' + ipfs_path + '.mp4'\n            cap = cv2.VideoCapture(video_path)\n            cap.set(cv2.CAP_PROP_POS_FRAMES, 0)\n            _, frame = cap.read()\n            cv2.imwrite(thumbnail_file, frame)\n```", "```py\n    def get_video_thumbnail(self, ipfs_path):\n        thumbnail_file = STATICFILES_DIRS[0] + '/' + ipfs_path + '.png'\n        url_file = STATIC_URL + '/' + ipfs_path + '.png'\n        if os.path.isfile(thumbnail_file):\n            return url_file\n        else:\n            return \"https://bulma.io/images/placeholders/640x480.png\"\n```", "```py\n    def get_video(self, user, index):\n        video = {}\n        ipfs_path = self.get_video_path(user, index)\n        video_title = self.get_video_title(user, index)\n        video_file = STATICFILES_DIRS[0] + '/' + ipfs_path + '.mp4'\n        thumbnail_file = STATICFILES_DIRS[0] + '/' + ipfs_path + '.png'\n        video['title'] = video_title\n        video['user'] = user\n        video['index'] = index\n        video['aggregate_likes'] = self.SmartContract.functions.video_aggregate_likes(user, index).call()\n\n        if os.path.isfile(video_file):\n            video['url'] = STATIC_URL + '/' + ipfs_path + '.mp4'\n        else:\n            self.ipfs_con.get(ipfs_path)\n            os.rename(BASE_DIR + '/' + ipfs_path, STATICFILES_DIRS[0] + '/' + ipfs_path + '.mp4')\n            video['url'] = STATIC_URL + '/' + ipfs_path + '.mp4'\n\n        if not os.path.isfile(thumbnail_file):\n            self.process_thumbnail(ipfs_path)\n\n        return video\n```", "```py\n    def upload_video(self, video_user, password, video_file, title):\n        video_path = MEDIA_ROOT + '/video.mp4'\n        with open(video_path, 'wb+') as destination:\n            for chunk in video_file.chunks():\n                destination.write(chunk)\n        ipfs_add = self.ipfs_con.add(video_path)\n        ipfs_path = ipfs_add['Hash'].encode('utf-8')\n        title = title[:20].encode('utf-8')\n        nonce = self.w3.eth.getTransactionCount(Web3.toChecksumAddress(video_user))\n        txn = self.SmartContract.functions.upload_video(ipfs_path, title).buildTransaction({\n                    'from': video_user,\n                    'gas': 200000,\n                    'gasPrice': self.w3.toWei('30', 'gwei'),\n                    'nonce': nonce\n                  })\n        txn_hash = self.w3.personal.sendTransaction(txn, password)\n        wait_for_transaction_receipt(self.w3, txn_hash)\n```", "```py\n    def process_thumbnail(self, ipfs_path):\n        thumbnail_file = STATICFILES_DIRS[0] + '/' + ipfs_path + '.png'\n        if not os.path.isfile(thumbnail_file):\n            video_path = STATICFILES_DIRS[0] + '/' + ipfs_path + '.mp4'\n            cap = cv2.VideoCapture(video_path)\n            cap.set(cv2.CAP_PROP_POS_FRAMES, 0)\n            _, frame = cap.read()\n            cv2.imwrite(thumbnail_file, frame)\n```", "```py\n    def like_video(self, video_liker, password, video_user, index):\n        if self.SmartContract.functions.video_has_been_liked(video_liker, video_user, index).call():\n            return\n        nonce = self.w3.eth.getTransactionCount(Web3.toChecksumAddress(video_liker))\n        txn = self.SmartContract.functions.like_video(video_user, index).buildTransaction({\n                    'from': video_liker,\n                    'gas': 200000,\n                    'gasPrice': self.w3.toWei('30', 'gwei'),\n                    'nonce': nonce\n                  })\n        txn_hash = self.w3.personal.sendTransaction(txn, password)\n        wait_for_transaction_receipt(self.w3, txn_hash)\n```", "```py\nvideos_sharing = VideosSharing()\n```", "```py\n(videos-venv) $ cd decentralized_videos\n(videos-venv) $ mkdir -p videos/templates/videos\n```", "```py\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <title>Decentralized Videos Sharing Application</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\">\n...\n...\n    </section>\n    {% block content %}\n    {% endblock %}\n  </body>\n</html>\n```", "```py\n{% extends \"videos/base.html\" %}\n\n{% block content %}\n<section class=\"section\">\n  <div class=\"container\">\n    {% for video in videos %}\n      {% cycle '<div class=\"columns\">' '' '' '' %}\n        <div class=\"column\">\n          <div class=\"card\">\n            <div class=\"card-image\">\n              <figure class=\"image is-4by3\">\n                <img src=\"{{ video.thumbnail }}\" />\n              </figure>\n            </div>\n            <p class=\"card-footer-item\">\n              <span><a href=\"{% url 'video' video_user=video.user index=video.index %}\">{{ video.title }}</a></span>\n            </p>\n          </div>\n        </div>\n      {% cycle '' '' '' '</div>' %}\n    {% endfor %}\n  </div>\n</section>\n{% endblock %}\n```", "```py\n{% extends \"videos/base.html\" %}\n\n{% block content %}\n<section class=\"section\">\n  <div class=\"container\">\n    <nav class=\"breadcrumb\" aria-label=\"breadcrumbs\">\n      <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li><a href=\"/channel/{{ video.user }}\">Channel</a></li>\n        <li class=\"is-active\"><a href=\"#\" aria-current=\"page\">{{ video.title }}</a></li>\n      </ul>\n    </nav>\n\n...\n...\n\n  </div>\n</section>\n{% endblock %}\n```", "```py\n{% extends \"videos/base.html\" %}\n\n{% block content %}\n<section class=\"section\">\n  <div class=\"container\">\n    <nav class=\"breadcrumb\" aria-label=\"breadcrumbs\">\n      <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li class=\"is-active\"><a href=\"#\">{{ video_user }}</a>\n...\n...\n            </p>\n          </div>\n        </div>\n      {% cycle '' '' '' '</div>' %}\n    {% endfor %}\n  </div>\n</section>\n{% endblock %}\n```", "```py\n{% extends \"videos/base.html\" %}\n\n{% block content %}\n<section class=\"section\">\n  <div class=\"container\">\n    <nav class=\"breadcrumb\" aria-label=\"breadcrumbs\">\n      <ul>\n        <li><a href=\"/\">Home</a></li>\n        <li class=\"is-active\"><a href=\"#\" aria-current=\"page\">Uploading Video</a></li>\n      </ul>\n    </nav>\n    <div class=\"content\">\n...\n...\n</section>\n<script type=\"text/javascript\">\nvar file = document.getElementById(\"video_file\");\nfile.onchange = function() {\n  if(file.files.length > 0) {\n    document.getElementById('video_filename').innerHTML = file.files[0].name;\n  }\n};\n</script>\n{% endblock %}\n```", "```py\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('channel/<str:video_user>', views.channel, name='channel'),\n    path('video/<str:video_user>/<int:index>', views.video, name='video'),\n    path('upload-video', views.upload, name='upload'),\n    path('like-video', views.like, name='like'),\n]\n```", "```py\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('', include('videos.urls')),\n    path('admin/', admin.site.urls)\n]\n```", "```py\n(videos-venv) $ cd decentralized_videos\n(videos-venv) $ python manage.py runserver\n```"]