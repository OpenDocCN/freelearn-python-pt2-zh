["```py\nclass Block:\n    id = None\n    history = None\n    parent_id = None\n\nblock_A = Block()\nblock_A.id = 1\nblock_A.history = 'Nelson likes cat'\n\nblock_B = Block()\nblock_B.id = 2\nblock_B.history = 'Marie likes dog'\nblock_B.parent_id = block_A.id\n\nblock_C = Block()\nblock_C.id = 3\nblock_C.history = 'Sky hates dog'\nblock_C.parent_id = block_B.id\n```", "```py\nblock_A.history = 'Nelson hates cat'\n```", "```py\n$ sudo apt-get install openssl\n```", "```py\n$ openssl genrsa -out nelsonkey.pem 1024\n```", "```py\n$ openssl rsa -in nelsonkey.pem -pubout > nelsonkey.pub\n```", "```py\n{\n'Nelson': 'nelsonkey.pub',\n'Marie': 'mariekey.pub',\n'Sky': 'skykey.pub'\n}\n```", "```py\n$ python3 -m venv blockchain\n$ source blockchain/bin/activate\n(blockchain) $\n```", "```py\n(blockchain) $ pip install --upgrade pip\n(blockchain) $ pip install wheel\n(blockchain) $ pip install cryptography\n```", "```py\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\n\n# Generate private key\n#private_key = rsa.generate_private_key(\n# public_exponent=65537,\n# key_size=2048,\n# backend=default_backend()\n#)\n...\n...\n\n# Message validation executed by other people\npublic_key.verify(\n    signature,\n    message,\n    padding.PSS(mgf=padding.MGF1(hashes.SHA256()),\n                salt_length=padding.PSS.MAX_LENGTH),\n    hashes.SHA256())\n```", "```py\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\n\nmessage = b'Nelson hates cat'\nsignature = b'Fake Signature'\n\nwith open(\"nelsonkey.pub\", \"rb\") as key_file:\n    public_key = serialization.load_pem_public_key(\n        key_file.read(),\n        backend=default_backend())\n\npublic_key.verify(\n signature,\n message,\n padding.PSS(mgf=padding.MGF1(hashes.SHA256()),\n                salt_length=padding.PSS.MAX_LENGTH),\n    hashes.SHA256())\n```", "```py\nprint(signature)\n```", "```py\n# validate_message.py\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.asymmetric import padding\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\n\ndef fetch_public_key(user):\n    with open(user + \"key.pub\", \"rb\") as key_file:\n        public_key = serialization.load_pem_public_key(\n           key_file.read(),\n           backend=default_backend())\n    return public_key\n\n# Message coming from user\nmessage = b\"Nelson likes cat\"\n\n# Signature coming from user, this is very specific to public key.\n# Download the public key from Gitlab repository of this code so this signature matches the message.\n# Otherwise, you should generate your own signature.\nsignature = \n...\n...\n    padding.PSS(mgf=padding.MGF1(hashes.SHA256()),\n                salt_length=padding.PSS.MAX_LENGTH),\n    hashes.SHA256())\n```", "```py\n>>> block_A.history = 'Nelson likes cat'\n```", "```py\n>>> block_A.history = 'Nelson hates cat'\n```", "```py\nimport hashlib\nimport json\n\nclass Block:\n    id = None\n    history = None\n    parent_id = None\n    parent_hash = None\n\nblock_A = Block()\nblock_A.id = 1\nblock_A.history = 'Nelson likes cat'\n\nblock_B = Block()\nblock_B.id = 2\nblock_B.history = 'Marie likes dog'\nblock_B.parent_id = block_A.id\nblock_B.parent_hash = hashlib.sha256(json.dumps(block_A.__dict__).encode('utf-8')).hexdigest()\n\nblock_C = Block()\nblock_C.id = 3\nblock_C.history = 'Marie likes dog'\nblock_C.parent_id = block_B.id\nblock_C.parent_hash = hashlib.sha256(json.dumps(block_B.__dict__).encode('utf-8')).hexdigest()\n```", "```py\n>>> print(block_B.__dict__)\n{'parent_hash': '880baef90c77ae39d49f364ff1074043eccb78717ecec85e5897c282482012f1', 'history': 'Marie likes dog', 'id': 2, 'parent_id': 1}\n>>> print(json.dumps(block_B.__dict__))\n{\"parent_hash\": \"880baef90c77ae39d49f364ff1074043eccb78717ecec85e5897c282482012f1\", \"parent_id\": 1, \"history\": \"Marie likes dog\", \"id\": 2}\n>>> print(json.dumps(block_B.__dict__).encode(\u2018utf-8'))\nb'{\"id\": 2, \"parent_hash\": \"69a1db9d3430aea08030058a6bd63788569f1fde05adceb1be6743538b03dadb\", \"parent_id\": 1, \"history\": \"Marie likes dog\"}'\n>>> print(hashlib.sha256(json.dumps(block_B.__dict__).encode('utf-8')))\n<sha256 HASH object @ 0x7f58518e3ee0>\n>>> print(hashlib.sha256(json.dumps(block_B.__dict__).encode('utf-8')).hexdigest())\n25a7a88637c507d33ae1402ba6b0ee87eefe9c90e33e75c43d56858358f1704e\n```", "```py\n>>> block_A.history = 'Nelson hates cat'\n```", "```py\n>>> print(block_C.parent_hash)\nca3d23274de8d89ada13fe52b6000afb87ee97622a3edfa3e9a473f76ca60b33\n```", "```py\n>>> block_B.parent_hash = hashlib.sha256(json.dumps(block_A.__dict__).encode('utf-8')).hexdigest()\n>>> block_C.parent_hash = hashlib.sha256(json.dumps(block_B.__dict__).encode('utf-8')).hexdigest()\n>>> print(block_C.parent_hash)\n10b7d80f3ede91fdffeae4889279f3acbda32a0b9024efccc9c2318e2771e78c\n```", "```py\nn = p x q\n```", "```py\n(p-1) x (q-1) = 160\n```", "```py\nencrypted_message = messagee (mod n)\n```", "```py\ne x d = 1 (mod (p-1) x (q-1))\n```", "```py\ndecrypted_message = encrypted_messaged mod n\n```", "```py\n>>> import hashlib\n>>> hashlib.sha256(b\"hello\").hexdigest()\n'2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824'\n>>> hashlib.sha256(b\"a\").hexdigest()\n'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb'\n>>> hashlib.sha256(b\"hellohellohellohello\").hexdigest()\n'25b0b104a66b6a2ad14f899d190b043e45442d29a3c4ce71da2547e37adc68a9'\n```", "```py\n>>> hashlib.sha256(b\"a\").hexdigest()\n'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb'\n>>> hashlib.sha256(b\"a\").hexdigest()\n'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb'\n```", "```py\n>>> hashlib.sha256(b\"hello1\").hexdigest()\n'91e9240f415223982edc345532630710e94a7f52cd5f48f5ee1afc555078f0ab'\n>>> hashlib.sha256(b\"hello2\").hexdigest()\n'87298cc2f31fba73181ea2a9e6ef10dce21ed95e98bdac9c4e1504ea16f486e4'\n```", "```py\nblock_D = Block()\nblock_D.id = 4\nblock_D.history = 'Sky loves turtle'\nblock_D.parent_id = block_C.id\n```", "```py\nimport json\nblock_serialized = json.dumps(block_D.__dict__).encode('utf-8')\nprint(block_serialized)\nb'{\"history\": \"Sky loves turtle\", \"parent_id\": 3, \"id\": 4}'\n```", "```py\n00000aa21def23ee175073c6b3c89b96cfe618b6083dae98d2a92c919c1329be\n```", "```py\n00000be7b5347509c9df55ca35d27091b41a93acb2afd1447d1cc3e4b70c96ab\n```", "```py\nstring serialization + answer = hash output with (at least) 5 leading zeros\n```", "```py\nanswer = ?\ninput = b'{\"history\": \"Sky loves turtle\", \"parent_id\": 3, \"id\": 4}' + answer\noutput = hashlib.sha256(input).hexdigest()\n// output needs to be 00000???????????????????????????????????????????????????????????\n```", "```py\nimport hashlib\n\npayload = b'{\"history\": \"Sky loves turtle\", \"parent_id\": 3, \"id\": 4}'\nfor i in range(10000000):\n  nonce = str(i).encode('utf-8')\n  result = hashlib.sha256(payload + nonce).hexdigest()\n  if result[0:5] == '00000':\n    print(i)\n    print(result)\n    break\n```", "```py\n184798\n00000ae01f4cd7806e2a1fccd72fb18679cb07ede3a2a7ef028a0ecfd4aec153\n```", "```py\nblock_E = Block()\nblock_E.id = 5\nblock_E.history = 'Sherly likes fish'\nblock_E.parent_id = block_D.id\n```", "```py\nblock_E = Block()\nblock_E.id = 5\nblock_E.history = 'Johny likes shrimp'\nblock_E.parent_id = block_D.id\n```", "```py\nblock_E = Block()\nblock_E.id = 5\nblock_E.history = 'Sherly likes fish'\nblock_E.parent_id = block_D.id\n```", "```py\nblock_E = Block()\nblock_E.id = 5\nblock_E.history = 'Johny likes shrimp'\nblock_E.parent_id = block_D.id\n\nblock_F = Block()\nblock_F.id = 6\nblock_F.history = 'Marie hates shark'\nblock_F.parent_id = block_E.id\n\nblock_G = Block()\nblock_G.id = 7\nblock_G.history = 'Sarah loves dog'\nblock_G.parent_id = block_F.id\n```", "```py\nblock_E = Block()\nblock_E.id = 5\nblock_E.history = 'Sherly loves shark'\nblock_E.parent_id = block_D.id\n```", "```py\nblock_E = Block()\nblock_E.id = 5\nblock_E.history = 'Sherly loves shark'\nblock_E.parent_id = block_D.id\n\nblock_F = Block()\nblock_F.id = 6\nblock_F.history = 'Lin Dan hates crab'\nblock_F.parent_id = block_E.id\n\nblock_G = Block()\nblock_G.id = 7\nblock_G.history = 'Bruce Wayne loves bat'\nblock_G.parent_id = block_F.id\n```", "```py\nblock_E = Block()\nblock_E.id = 5\nblock_E.history = 'Sherly hates shark'\nblock_E.parent_id = block_D.id\n\nblock_F = Block()\nblock_F.id = 6\nblock_F.history = 'Sherly loves dog'\nblock_F.parent_id = block_E.id\n\nblock_G = Block()\nblock_G.id = 7\nblock_G.history = 'Sherly loves turtle'\nblock_G.parent_id = block_F.id\n\nblock_H = Block()\nblock_H.id = 8\nblock_H.history = 'Sherly loves unicorn'\nblock_H.parent_id = block_G.id\n```", "```py\nimport hashlib\n\npayload = b'{\"history\": \"Sky loves turtle\", \"parent_id\": 3, \"id\": 4}'\nfor i in range(10000000):\n  nonce = str(i).encode('utf-8')\n  result = hashlib.sha256(payload + nonce).hexdigest()\n  if result[0:5] == '00000':\n // We made it, time to claim the prize\n reward[miner_id] += 1\n    print(i)\n    print(result)\n    break\n```", "```py\nWhat's your public key? If the public key is hashed, does it equal Z? If yes, could you provide your private key to prove that you own this public key?\n```", "```py\nThis transaction is frozen until 5 years from now. Then business will be as usual, that the spender must provide public key and private key.\n```"]